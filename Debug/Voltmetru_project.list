
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08008128  08008128  00009128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  0000a470  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008d24  08008d24  0000a470  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008d24  08008d24  0000a470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d24  08008d24  00009d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d28  08008d28  00009d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000470  20000000  08008d2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e94  20000470  0800919c  0000a470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006304  0800919c  0000b304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a470  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001babb  00000000  00000000  0000a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  00025f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00019014  00000000  00000000  00025fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000385a  00000000  00000000  0003efd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001718  00000000  00000000  00042830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b7f6d  00000000  00000000  00043f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011fa  00000000  00000000  000fbeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001da63  00000000  00000000  000fd0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ab12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058b0  00000000  00000000  0011ab58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000470 	.word	0x20000470
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008110 	.word	0x08008110

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000474 	.word	0x20000474
 8000104:	08008110 	.word	0x08008110

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f000 f9c6 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f007 f9fd 	bl	8007834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f000 ff0b 	bl	8001254 <main>

0800043e <LoopForever>:

LoopForever:
    b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 800044c:	08008d2c 	.word	0x08008d2c
  ldr r2, =_sbss
 8000450:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8000454:	20006304 	.word	0x20006304

08000458 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_COMP_IRQHandler>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <HAL_MspInit+0x50>)
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <HAL_MspInit+0x50>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <HAL_MspInit+0x50>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_MspInit+0x50>)
 800047c:	69da      	ldr	r2, [r3, #28]
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <HAL_MspInit+0x50>)
 8000480:	2180      	movs	r1, #128	@ 0x80
 8000482:	0549      	lsls	r1, r1, #21
 8000484:	430a      	orrs	r2, r1
 8000486:	61da      	str	r2, [r3, #28]
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_MspInit+0x50>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	055b      	lsls	r3, r3, #21
 8000490:	4013      	ands	r3, r2
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000496:	2302      	movs	r3, #2
 8000498:	425b      	negs	r3, r3
 800049a:	2200      	movs	r2, #0
 800049c:	2103      	movs	r1, #3
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fd14 	bl	8002ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b08b      	sub	sp, #44	@ 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	2414      	movs	r4, #20
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	0018      	movs	r0, r3
 80004be:	2314      	movs	r3, #20
 80004c0:	001a      	movs	r2, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	f007 f9a8 	bl	8007818 <memset>
  if(hadc->Instance==ADC1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a19      	ldr	r2, [pc, #100]	@ (8000534 <HAL_ADC_MspInit+0x84>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d12b      	bne.n	800052a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d2:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	0089      	lsls	r1, r1, #2
 80004dc:	430a      	orrs	r2, r1
 80004de:	619a      	str	r2, [r3, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4013      	ands	r3, r2
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0289      	lsls	r1, r1, #10
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2203      	movs	r2, #3
 800050e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2203      	movs	r2, #3
 8000514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	193a      	adds	r2, r7, r4
 800051e:	2390      	movs	r3, #144	@ 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fcf7 	bl	8002f18 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00b      	add	sp, #44	@ 0x2c
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40012400 	.word	0x40012400
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b08b      	sub	sp, #44	@ 0x2c
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	2414      	movs	r4, #20
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f007 f962 	bl	8007818 <memset>
  if(hspi->Instance==SPI1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <HAL_SPI_MspInit+0x90>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d132      	bne.n	80005c4 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0149      	lsls	r1, r1, #5
 8000568:	430a      	orrs	r2, r1
 800056a:	619a      	str	r2, [r3, #24]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	015b      	lsls	r3, r3, #5
 8000574:	4013      	ands	r3, r2
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	22a0      	movs	r2, #160	@ 0xa0
 800059c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2202      	movs	r2, #2
 80005a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2203      	movs	r2, #3
 80005ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	187a      	adds	r2, r7, r1
 80005b8:	2390      	movs	r3, #144	@ 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fcaa 	bl	8002f18 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b00b      	add	sp, #44	@ 0x2c
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40013000 	.word	0x40013000
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	@ 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2414      	movs	r4, #20
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f007 f916 	bl	8007818 <memset>
  if(huart->Instance==USART2)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_UART_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d132      	bne.n	800065c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_UART_MspInit+0x94>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <HAL_UART_MspInit+0x94>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	187a      	adds	r2, r7, r1
 8000650:	2390      	movs	r3, #144	@ 0x90
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fc5e 	bl	8002f18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b00b      	add	sp, #44	@ 0x2c
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40004400 	.word	0x40004400
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08c      	sub	sp, #48	@ 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800067c:	4b37      	ldr	r3, [pc, #220]	@ (800075c <HAL_InitTick+0xf0>)
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	4b36      	ldr	r3, [pc, #216]	@ (800075c <HAL_InitTick+0xf0>)
 8000682:	2102      	movs	r1, #2
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
 8000688:	4b34      	ldr	r3, [pc, #208]	@ (800075c <HAL_InitTick+0xf0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	2202      	movs	r2, #2
 800068e:	4013      	ands	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000694:	230c      	movs	r3, #12
 8000696:	18fa      	adds	r2, r7, r3
 8000698:	2410      	movs	r4, #16
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 fac2 	bl	8003c28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d104      	bne.n	80006ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006b0:	f003 faa4 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80006b4:	0003      	movs	r3, r0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b8:	e004      	b.n	80006c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006ba:	f003 fa9f 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80006be:	0003      	movs	r3, r0
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c6:	4926      	ldr	r1, [pc, #152]	@ (8000760 <HAL_InitTick+0xf4>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fd27 	bl	800011c <__udivsi3>
 80006ce:	0003      	movs	r3, r0
 80006d0:	3b01      	subs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <HAL_InitTick+0xf8>)
 80006d6:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <HAL_InitTick+0xfc>)
 80006d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <HAL_InitTick+0xf8>)
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_InitTick+0x100>)
 80006de:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <HAL_InitTick+0xf8>)
 80006e2:	6a3a      	ldr	r2, [r7, #32]
 80006e4:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <HAL_InitTick+0xf8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <HAL_InitTick+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <HAL_InitTick+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006f8:	252b      	movs	r5, #43	@ 0x2b
 80006fa:	197c      	adds	r4, r7, r5
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <HAL_InitTick+0xf8>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f003 ff4a 	bl	8004598 <HAL_TIM_Base_Init>
 8000704:	0003      	movs	r3, r0
 8000706:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000708:	197b      	adds	r3, r7, r5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d11e      	bne.n	800074e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000710:	197c      	adds	r4, r7, r5
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <HAL_InitTick+0xf8>)
 8000714:	0018      	movs	r0, r3
 8000716:	f003 ff97 	bl	8004648 <HAL_TIM_Base_Start_IT>
 800071a:	0003      	movs	r3, r0
 800071c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d113      	bne.n	800074e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000726:	2010      	movs	r0, #16
 8000728:	f002 fbe5 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d809      	bhi.n	8000746 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	0019      	movs	r1, r3
 8000738:	2010      	movs	r0, #16
 800073a:	f002 fbc7 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_InitTick+0x104>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e003      	b.n	800074e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000746:	232b      	movs	r3, #43	@ 0x2b
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800074e:	232b      	movs	r3, #43	@ 0x2b
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b00c      	add	sp, #48	@ 0x30
 800075a:	bdb0      	pop	{r4, r5, r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	000f4240 	.word	0x000f4240
 8000764:	2000048c 	.word	0x2000048c
 8000768:	40000400 	.word	0x40000400
 800076c:	000003e7 	.word	0x000003e7
 8000770:	20000414 	.word	0x20000414

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <TIM3_IRQHandler+0x14>)
 800078a:	0018      	movs	r0, r3
 800078c:	f003 ffae 	bl	80046ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	2000048c 	.word	0x2000048c

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80007b0:	230e      	movs	r3, #14
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e057      	b.n	800086a <st7565_write_buffer+0xc2>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fd21 	bl	8003208 <HAL_GPIO_WritePin>
 80007c6:	230e      	movs	r3, #14
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000884 <st7565_write_buffer+0xdc>)
 80007ce:	5cd3      	ldrb	r3, [r2, r3]
 80007d0:	2250      	movs	r2, #80	@ 0x50
 80007d2:	4252      	negs	r2, r2
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f855 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fd0f 	bl	8003208 <HAL_GPIO_WritePin>
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f84c 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fd06 	bl	8003208 <HAL_GPIO_WritePin>
 80007fc:	2010      	movs	r0, #16
 80007fe:	f000 f843 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <st7565_write_buffer+0xd8>)
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fcfd 	bl	8003208 <HAL_GPIO_WritePin>
 800080e:	20e0      	movs	r0, #224	@ 0xe0
 8000810:	f000 f83a 	bl	8000888 <st7565_sendbyte>
		//DATA(0xff);
		for (c = 0; c < 128; c++) {
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e019      	b.n	8000852 <st7565_write_buffer+0xaa>
			DATA(buffer[(128 * p) + c]);
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <st7565_write_buffer+0xd8>)
 8000820:	2201      	movs	r2, #1
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fcef 	bl	8003208 <HAL_GPIO_WritePin>
 800082a:	230e      	movs	r3, #14
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	01da      	lsls	r2, r3, #7
 8000832:	240f      	movs	r4, #15
 8000834:	193b      	adds	r3, r7, r4
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	001a      	movs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	189b      	adds	r3, r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f820 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000848:	193b      	adds	r3, r7, r4
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	193b      	adds	r3, r7, r4
 800084e:	3201      	adds	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	230f      	movs	r3, #15
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	dadf      	bge.n	800081e <st7565_write_buffer+0x76>
	for (p = 0; p < 8; p++) {
 800085e:	210e      	movs	r1, #14
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	187b      	adds	r3, r7, r1
 8000866:	3201      	adds	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b07      	cmp	r3, #7
 8000872:	d9a2      	bls.n	80007ba <st7565_write_buffer+0x12>
		}
	}
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b005      	add	sp, #20
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	48000800 	.word	0x48000800
 8000884:	2000040c 	.word	0x2000040c

08000888 <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	0002      	movs	r2, r0
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000894:	1df9      	adds	r1, r7, #7
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <st7565_sendbyte+0x20>)
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	2201      	movs	r2, #1
 800089c:	f003 fba6 	bl	8003fec <HAL_SPI_Transmit>
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000558 	.word	0x20000558

080008ac <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	0059      	lsls	r1, r3, #1
 80008b4:	2390      	movs	r3, #144	@ 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2201      	movs	r2, #1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fca4 	bl	8003208 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 80008c0:	4b4e      	ldr	r3, [pc, #312]	@ (80009fc <st7565_init+0x150>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 fc9e 	bl	8003208 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	0099      	lsls	r1, r3, #2
 80008d0:	2390      	movs	r3, #144	@ 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fc96 	bl	8003208 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 80008dc:	4b48      	ldr	r3, [pc, #288]	@ (8000a00 <st7565_init+0x154>)
 80008de:	2201      	movs	r2, #1
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fc90 	bl	8003208 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 80008e8:	4b45      	ldr	r3, [pc, #276]	@ (8000a00 <st7565_init+0x154>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	@ 0x40
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fc8a 	bl	8003208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	0099      	lsls	r1, r3, #2
 80008f8:	2390      	movs	r3, #144	@ 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2200      	movs	r2, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f002 fc82 	bl	8003208 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000904:	23fa      	movs	r3, #250	@ 0xfa
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	0018      	movs	r0, r3
 800090a:	f001 fd6b 	bl	80023e4 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	0099      	lsls	r1, r3, #2
 8000912:	2390      	movs	r3, #144	@ 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2201      	movs	r2, #1
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fc75 	bl	8003208 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <st7565_init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fc6f 	bl	8003208 <HAL_GPIO_WritePin>
 800092a:	20a3      	movs	r0, #163	@ 0xa3
 800092c:	f7ff ffac 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <st7565_init+0x150>)
 8000932:	2200      	movs	r2, #0
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0018      	movs	r0, r3
 8000938:	f002 fc66 	bl	8003208 <HAL_GPIO_WritePin>
 800093c:	20a0      	movs	r0, #160	@ 0xa0
 800093e:	f7ff ffa3 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <st7565_init+0x150>)
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	0018      	movs	r0, r3
 800094a:	f002 fc5d 	bl	8003208 <HAL_GPIO_WritePin>
 800094e:	20c0      	movs	r0, #192	@ 0xc0
 8000950:	f7ff ff9a 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <st7565_init+0x150>)
 8000956:	2200      	movs	r2, #0
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fc54 	bl	8003208 <HAL_GPIO_WritePin>
 8000960:	2040      	movs	r0, #64	@ 0x40
 8000962:	f7ff ff91 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <st7565_init+0x150>)
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fc4b 	bl	8003208 <HAL_GPIO_WritePin>
 8000972:	202c      	movs	r0, #44	@ 0x2c
 8000974:	f7ff ff88 	bl	8000888 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000978:	2032      	movs	r0, #50	@ 0x32
 800097a:	f001 fd33 	bl	80023e4 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <st7565_init+0x150>)
 8000980:	2200      	movs	r2, #0
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fc3f 	bl	8003208 <HAL_GPIO_WritePin>
 800098a:	202e      	movs	r0, #46	@ 0x2e
 800098c:	f7ff ff7c 	bl	8000888 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000990:	2032      	movs	r0, #50	@ 0x32
 8000992:	f001 fd27 	bl	80023e4 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <st7565_init+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fc33 	bl	8003208 <HAL_GPIO_WritePin>
 80009a2:	202f      	movs	r0, #47	@ 0x2f
 80009a4:	f7ff ff70 	bl	8000888 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 fd1b 	bl	80023e4 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <st7565_init+0x150>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fc27 	bl	8003208 <HAL_GPIO_WritePin>
 80009ba:	2026      	movs	r0, #38	@ 0x26
 80009bc:	f7ff ff64 	bl	8000888 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <st7565_init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fc1e 	bl	8003208 <HAL_GPIO_WritePin>
 80009cc:	20af      	movs	r0, #175	@ 0xaf
 80009ce:	f7ff ff5b 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <st7565_init+0x150>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fc15 	bl	8003208 <HAL_GPIO_WritePin>
 80009de:	20a4      	movs	r0, #164	@ 0xa4
 80009e0:	f7ff ff52 	bl	8000888 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f81d 	bl	8000a24 <st7565_set_brightness>
 	st7565_clear_screen();
 80009ea:	f000 f83f 	bl	8000a6c <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <st7565_init+0x158>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f897 	bl	8000b24 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	48000800 	.word	0x48000800
 8000a00:	48000400 	.word	0x48000400
 8000a04:	2000000c 	.word	0x2000000c

08000a08 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	0059      	lsls	r1, r3, #1
 8000a10:	2390      	movs	r3, #144	@ 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	2201      	movs	r2, #1
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 fbf6 	bl	8003208 <HAL_GPIO_WritePin>
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <st7565_set_brightness+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fbe6 	bl	8003208 <HAL_GPIO_WritePin>
 8000a3c:	2081      	movs	r0, #129	@ 0x81
 8000a3e:	f7ff ff23 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <st7565_set_brightness+0x44>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fbdd 	bl	8003208 <HAL_GPIO_WritePin>
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	223f      	movs	r2, #63	@ 0x3f
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff15 	bl	8000888 <st7565_sendbyte>
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	48000800 	.word	0x48000800

08000a6c <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e049      	b.n	8000b0e <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fbc1 	bl	8003208 <HAL_GPIO_WritePin>
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2250      	movs	r2, #80	@ 0x50
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fef8 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e02d      	b.n	8000afc <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fbae 	bl	8003208 <HAL_GPIO_WritePin>
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fee6 	bl	8000888 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fba0 	bl	8003208 <HAL_GPIO_WritePin>
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fed4 	bl	8000888 <st7565_sendbyte>
			DATA(0x0);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fb8e 	bl	8003208 <HAL_GPIO_WritePin>
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fecb 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	3201      	adds	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b80      	cmp	r3, #128	@ 0x80
 8000b02:	d9cd      	bls.n	8000aa0 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b07      	cmp	r3, #7
 8000b14:	d9b1      	bls.n	8000a7a <st7565_clear_screen+0xe>
		}
	}
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000800 	.word	0x48000800

08000b24 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	00da      	lsls	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2100      	movs	r1, #0
 8000b34:	0018      	movs	r0, r3
 8000b36:	f006 fe6f 	bl	8007818 <memset>
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000b42:	b590      	push	{r4, r7, lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	0010      	movs	r0, r2
 8000b4e:	0019      	movs	r1, r3
 8000b50:	1cfb      	adds	r3, r7, #3
 8000b52:	1c22      	adds	r2, r4, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	1cbb      	adds	r3, r7, #2
 8000b58:	1c02      	adds	r2, r0, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	1c7b      	adds	r3, r7, #1
 8000b5e:	1c0a      	adds	r2, r1, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000b62:	1cfb      	adds	r3, r7, #3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db51      	blt.n	8000c10 <st7565_setpixel+0xce>
 8000b6c:	1cbb      	adds	r3, r7, #2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b72:	d84d      	bhi.n	8000c10 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000b74:	1c7b      	adds	r3, r7, #1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d023      	beq.n	8000bc4 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000b7c:	1cfb      	adds	r3, r7, #3
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	1cbb      	adds	r3, r7, #2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	0003      	movs	r3, r0
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	001a      	movs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	1cbb      	adds	r3, r7, #2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4099      	lsls	r1, r3
 8000ba6:	000b      	movs	r3, r1
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b259      	sxtb	r1, r3
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	001a      	movs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e026      	b.n	8000c12 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000bc4:	1cfb      	adds	r3, r7, #3
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	1cbb      	adds	r3, r7, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	01db      	lsls	r3, r3, #7
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	1cba      	adds	r2, r7, #2
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	43d2      	mvns	r2, r2
 8000be6:	2107      	movs	r1, #7
 8000be8:	400a      	ands	r2, r1
 8000bea:	2101      	movs	r1, #1
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	b252      	sxtb	r2, r2
 8000bf2:	43d2      	mvns	r2, r2
 8000bf4:	b252      	sxtb	r2, r2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b259      	sxtb	r1, r3
 8000bfa:	1cfb      	adds	r3, r7, #3
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	0003      	movs	r3, r0
 8000c00:	01db      	lsls	r3, r3, #7
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	001a      	movs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e000      	b.n	8000c12 <st7565_setpixel+0xd0>
		return;
 8000c10:	46c0      	nop			@ (mov r8, r8)
}
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c,uint8_t fontSelect) {
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	0008      	movs	r0, r1
 8000c22:	0011      	movs	r1, r2
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	230b      	movs	r3, #11
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	1c02      	adds	r2, r0, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	230a      	movs	r3, #10
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	1c0a      	adds	r2, r1, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8000c36:	e02c      	b.n	8000c92 <st7565_drawstring+0x7a>
		st7565_drawchar(buff, x, line, c[0], fontSelect);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781c      	ldrb	r4, [r3, #0]
 8000c3c:	260a      	movs	r6, #10
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	469c      	mov	ip, r3
 8000c44:	250b      	movs	r5, #11
 8000c46:	197b      	adds	r3, r7, r5
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	2208      	movs	r2, #8
 8000c50:	189b      	adds	r3, r3, r2
 8000c52:	19db      	adds	r3, r3, r7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	0023      	movs	r3, r4
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	f000 f822 	bl	8000ca4 <st7565_drawchar>
		c++;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8000c66:	197b      	adds	r3, r7, r5
 8000c68:	197a      	adds	r2, r7, r5
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	3206      	adds	r2, #6
 8000c6e:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b79      	cmp	r3, #121	@ 0x79
 8000c76:	d907      	bls.n	8000c88 <st7565_drawstring+0x70>
			x = 0; // ran out of this line
 8000c78:	197b      	adds	r3, r7, r5
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			line++;
 8000c7e:	19bb      	adds	r3, r7, r6
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	19bb      	adds	r3, r7, r6
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8000c88:	230a      	movs	r3, #10
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d804      	bhi.n	8000c9c <st7565_drawstring+0x84>
	while (c[0] != 0) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1ce      	bne.n	8000c38 <st7565_drawstring+0x20>
 8000c9a:	e000      	b.n	8000c9e <st7565_drawstring+0x86>
			return; // ran out of space :(
 8000c9c:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b005      	add	sp, #20
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ca4 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c, uint8_t fontSelect) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	000c      	movs	r4, r1
 8000cae:	0010      	movs	r0, r2
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	1c22      	adds	r2, r4, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	1c7b      	adds	r3, r7, #1
 8000cc0:	1c0a      	adds	r2, r1, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e043      	b.n	8000d56 <st7565_drawchar+0xb2>
		if(fontSelect==0)
 8000cce:	2320      	movs	r3, #32
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d117      	bne.n	8000d08 <st7565_drawchar+0x64>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	0013      	movs	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	189b      	adds	r3, r3, r2
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <st7565_drawchar+0xc8>)
 8000cee:	18d2      	adds	r2, r2, r3
 8000cf0:	1cfb      	adds	r3, r7, #3
 8000cf2:	7819      	ldrb	r1, [r3, #0]
 8000cf4:	1cbb      	adds	r3, r7, #2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	01db      	lsls	r3, r3, #7
 8000cfa:	18cb      	adds	r3, r1, r3
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e01b      	b.n	8000d40 <st7565_drawchar+0x9c>
		else if(fontSelect==1)
 8000d08:	2320      	movs	r3, #32
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d116      	bne.n	8000d40 <st7565_drawchar+0x9c>
		buff[x + (line * 128)] = *(ultraFont + (c * 5) + i);
 8000d12:	1c7b      	adds	r3, r7, #1
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	0013      	movs	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	18d2      	adds	r2, r2, r3
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <st7565_drawchar+0xcc>)
 8000d28:	18d2      	adds	r2, r2, r3
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	7819      	ldrb	r1, [r3, #0]
 8000d2e:	1cbb      	adds	r3, r7, #2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	01db      	lsls	r3, r3, #7
 8000d34:	18cb      	adds	r3, r1, r3
 8000d36:	0019      	movs	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	185b      	adds	r3, r3, r1
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	701a      	strb	r2, [r3, #0]
		x++;
 8000d40:	1cfb      	adds	r3, r7, #3
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	1cfb      	adds	r3, r7, #3
 8000d46:	3201      	adds	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	3201      	adds	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d9b6      	bls.n	8000cce <st7565_drawchar+0x2a>
	}
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b005      	add	sp, #20
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	08008710 	.word	0x08008710
 8000d70:	08008214 	.word	0x08008214

08000d74 <st7565_drawline>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	000c      	movs	r4, r1
 8000d7e:	0010      	movs	r0, r2
 8000d80:	0019      	movs	r1, r3
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	1c22      	adds	r2, r4, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	1cbb      	adds	r3, r7, #2
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	1c7b      	adds	r3, r7, #1
 8000d90:	1c0a      	adds	r2, r1, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8000d9c:	1cfa      	adds	r2, r7, #3
 8000d9e:	1c7b      	adds	r3, r7, #1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d908      	bls.n	8000dba <st7565_drawline+0x46>
		dx = x0 - x1;
 8000da8:	230c      	movs	r3, #12
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	1cf9      	adds	r1, r7, #3
 8000dae:	1c7a      	adds	r2, r7, #1
 8000db0:	7809      	ldrb	r1, [r1, #0]
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <st7565_drawline+0x56>
	else
		dx = x1 - x0;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	1c79      	adds	r1, r7, #1
 8000dc0:	1cfa      	adds	r2, r7, #3
 8000dc2:	7809      	ldrb	r1, [r1, #0]
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	1a8a      	subs	r2, r1, r2
 8000dc8:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8000dca:	1cba      	adds	r2, r7, #2
 8000dcc:	2020      	movs	r0, #32
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d908      	bls.n	8000dea <st7565_drawline+0x76>
		dy = y0 - y1;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	18fa      	adds	r2, r7, r3
 8000ddc:	1cb9      	adds	r1, r7, #2
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	7809      	ldrb	r1, [r1, #0]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	1acb      	subs	r3, r1, r3
 8000de6:	7013      	strb	r3, [r2, #0]
 8000de8:	e008      	b.n	8000dfc <st7565_drawline+0x88>
	else
		dy = y1 - y0;
 8000dea:	230b      	movs	r3, #11
 8000dec:	18fa      	adds	r2, r7, r3
 8000dee:	2320      	movs	r3, #32
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	1cb8      	adds	r0, r7, #2
 8000df4:	7819      	ldrb	r1, [r3, #0]
 8000df6:	7803      	ldrb	r3, [r0, #0]
 8000df8:	1acb      	subs	r3, r1, r3
 8000dfa:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8000dfc:	200b      	movs	r0, #11
 8000dfe:	183a      	adds	r2, r7, r0
 8000e00:	240c      	movs	r4, #12
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d929      	bls.n	8000e60 <st7565_drawline+0xec>
		swap = 1;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8000e14:	2108      	movs	r1, #8
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	193a      	adds	r2, r7, r4
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
		dx = dy;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	183a      	adds	r2, r7, r0
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	187a      	adds	r2, r7, r1
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	1cfa      	adds	r2, r7, #3
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8000e36:	1cfb      	adds	r3, r7, #3
 8000e38:	1cba      	adds	r2, r7, #2
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	187a      	adds	r2, r7, r1
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	1c7a      	adds	r2, r7, #1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 8000e4e:	1c7a      	adds	r2, r7, #1
 8000e50:	2020      	movs	r0, #32
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e58:	183b      	adds	r3, r7, r0
 8000e5a:	187a      	adds	r2, r7, r1
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 8000e60:	1cfa      	adds	r2, r7, #3
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d919      	bls.n	8000ea0 <st7565_drawline+0x12c>
		tmp = x0;
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	1cfa      	adds	r2, r7, #3
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 8000e76:	1cfb      	adds	r3, r7, #3
 8000e78:	1c7a      	adds	r2, r7, #1
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8000e7e:	1c7b      	adds	r3, r7, #1
 8000e80:	187a      	adds	r2, r7, r1
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	1cba      	adds	r2, r7, #2
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8000e8e:	1cba      	adds	r2, r7, #2
 8000e90:	2020      	movs	r0, #32
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e98:	183b      	adds	r3, r7, r0
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	085b      	lsrs	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	2309      	movs	r3, #9
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	1cb9      	adds	r1, r7, #2
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	780b      	ldrb	r3, [r1, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d904      	bls.n	8000ec8 <st7565_drawline+0x154>
		ystep = 1;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e003      	b.n	8000ed0 <st7565_drawline+0x15c>
	else
		ystep = -1;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	22ff      	movs	r2, #255	@ 0xff
 8000ece:	701a      	strb	r2, [r3, #0]
	y = y0;
 8000ed0:	230d      	movs	r3, #13
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	1cba      	adds	r2, r7, #2
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000eda:	230e      	movs	r3, #14
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	1cfa      	adds	r2, r7, #3
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e045      	b.n	8000f72 <st7565_drawline+0x1fe>
		if (swap == 0)
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10d      	bne.n	8000f0c <st7565_drawline+0x198>
			st7565_setpixel(buff, x, y, color);
 8000ef0:	2324      	movs	r3, #36	@ 0x24
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781c      	ldrb	r4, [r3, #0]
 8000ef6:	230d      	movs	r3, #13
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	230e      	movs	r3, #14
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	7819      	ldrb	r1, [r3, #0]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	0023      	movs	r3, r4
 8000f06:	f7ff fe1c 	bl	8000b42 <st7565_setpixel>
 8000f0a:	e00c      	b.n	8000f26 <st7565_drawline+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8000f0c:	2324      	movs	r3, #36	@ 0x24
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781c      	ldrb	r4, [r3, #0]
 8000f12:	230e      	movs	r3, #14
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	230d      	movs	r3, #13
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	7819      	ldrb	r1, [r3, #0]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	0023      	movs	r3, r4
 8000f22:	f7ff fe0e 	bl	8000b42 <st7565_setpixel>
		err -= (uint8_t) dy;
 8000f26:	2009      	movs	r0, #9
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8000f3a:	183b      	adds	r3, r7, r0
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f40:	d911      	bls.n	8000f66 <st7565_drawline+0x1f2>
			y += (uint8_t) ystep;
 8000f42:	230a      	movs	r3, #10
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	7819      	ldrb	r1, [r3, #0]
 8000f48:	220d      	movs	r2, #13
 8000f4a:	18bb      	adds	r3, r7, r2
 8000f4c:	18ba      	adds	r2, r7, r2
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	188a      	adds	r2, r1, r2
 8000f52:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	230c      	movs	r3, #12
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	183b      	adds	r3, r7, r0
 8000f64:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000f66:	210e      	movs	r1, #14
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	3201      	adds	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	230e      	movs	r3, #14
 8000f74:	18fa      	adds	r2, r7, r3
 8000f76:	1c7b      	adds	r3, r7, #1
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d9b2      	bls.n	8000ee6 <st7565_drawline+0x172>
		}
	}
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b005      	add	sp, #20
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		uint8_t color) {
 8000f8a:	b5b0      	push	{r4, r5, r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	000c      	movs	r4, r1
 8000f94:	0010      	movs	r0, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	1c22      	adds	r2, r4, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	1cbb      	adds	r3, r7, #2
 8000fa0:	1c02      	adds	r2, r0, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	1c7b      	adds	r3, r7, #1
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
// stupidest version - just pixels - but fast with internal buffer!
	uint8_t i, j;
	for (i = x; i < x + w; i++) {
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	1cfa      	adds	r2, r7, #3
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e028      	b.n	8001008 <st7565_fillrect+0x7e>
		for (j = y; j < y + h; j++) {
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	1cba      	adds	r2, r7, #2
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e011      	b.n	8000fe6 <st7565_fillrect+0x5c>
			st7565_setpixel(buff, i, j, color);
 8000fc2:	2324      	movs	r3, #36	@ 0x24
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781c      	ldrb	r4, [r3, #0]
 8000fc8:	250e      	movs	r5, #14
 8000fca:	197b      	adds	r3, r7, r5
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	f7ff fdb3 	bl	8000b42 <st7565_setpixel>
		for (j = y; j < y + h; j++) {
 8000fdc:	197b      	adds	r3, r7, r5
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	197b      	adds	r3, r7, r5
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	230e      	movs	r3, #14
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	18cb      	adds	r3, r1, r3
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbe2      	blt.n	8000fc2 <st7565_fillrect+0x38>
	for (i = x; i < x + w; i++) {
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	187b      	adds	r3, r7, r1
 8001004:	3201      	adds	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	7819      	ldrb	r1, [r3, #0]
 8001012:	1c7b      	adds	r3, r7, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	18cb      	adds	r3, r1, r3
 8001018:	429a      	cmp	r2, r3
 800101a:	dbcc      	blt.n	8000fb6 <st7565_fillrect+0x2c>
		}
	}
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001028 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	0002      	movs	r2, r0
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 8001034:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <interpolation+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	5e9b      	ldrsh	r3, [r3, r2]
 800103a:	1dba      	adds	r2, r7, #6
 800103c:	2100      	movs	r1, #0
 800103e:	5e52      	ldrsh	r2, [r2, r1]
 8001040:	429a      	cmp	r2, r3
 8001042:	dc11      	bgt.n	8001068 <interpolation+0x40>
 8001044:	4b3a      	ldr	r3, [pc, #232]	@ (8001130 <interpolation+0x108>)
 8001046:	2202      	movs	r2, #2
 8001048:	5e9b      	ldrsh	r3, [r3, r2]
 800104a:	001a      	movs	r2, r3
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	2100      	movs	r1, #0
 8001050:	5e5b      	ldrsh	r3, [r3, r1]
 8001052:	435a      	muls	r2, r3
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <interpolation+0x108>)
 8001056:	2100      	movs	r1, #0
 8001058:	5e5b      	ldrsh	r3, [r3, r1]
 800105a:	0019      	movs	r1, r3
 800105c:	0010      	movs	r0, r2
 800105e:	f7ff f8e7 	bl	8000230 <__divsi3>
 8001062:	0003      	movs	r3, r0
 8001064:	b21b      	sxth	r3, r3
 8001066:	e05e      	b.n	8001126 <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <interpolation+0x108>)
 800106a:	2208      	movs	r2, #8
 800106c:	5e9b      	ldrsh	r3, [r3, r2]
 800106e:	1dba      	adds	r2, r7, #6
 8001070:	2100      	movs	r1, #0
 8001072:	5e52      	ldrsh	r2, [r2, r1]
 8001074:	429a      	cmp	r2, r3
 8001076:	db03      	blt.n	8001080 <interpolation+0x58>
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <interpolation+0x108>)
 800107a:	220a      	movs	r2, #10
 800107c:	5e9b      	ldrsh	r3, [r3, r2]
 800107e:	e052      	b.n	8001126 <interpolation+0xfe>
    if (input <= pts[1].x) {
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <interpolation+0x108>)
 8001082:	2204      	movs	r2, #4
 8001084:	5e9b      	ldrsh	r3, [r3, r2]
 8001086:	1dba      	adds	r2, r7, #6
 8001088:	2100      	movs	r1, #0
 800108a:	5e52      	ldrsh	r2, [r2, r1]
 800108c:	429a      	cmp	r2, r3
 800108e:	dc25      	bgt.n	80010dc <interpolation+0xb4>
        return pts[0].y +
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <interpolation+0x108>)
 8001092:	2202      	movs	r2, #2
 8001094:	5e9b      	ldrsh	r3, [r3, r2]
 8001096:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <interpolation+0x108>)
 800109a:	2206      	movs	r2, #6
 800109c:	5e9b      	ldrsh	r3, [r3, r2]
 800109e:	001a      	movs	r2, r3
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <interpolation+0x108>)
 80010a2:	2102      	movs	r1, #2
 80010a4:	5e5b      	ldrsh	r3, [r3, r1]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	1dba      	adds	r2, r7, #6
 80010aa:	2100      	movs	r1, #0
 80010ac:	5e52      	ldrsh	r2, [r2, r1]
 80010ae:	4920      	ldr	r1, [pc, #128]	@ (8001130 <interpolation+0x108>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	5e09      	ldrsh	r1, [r1, r0]
 80010b4:	1a52      	subs	r2, r2, r1
 80010b6:	435a      	muls	r2, r3
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <interpolation+0x108>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	5e5b      	ldrsh	r3, [r3, r1]
 80010be:	0019      	movs	r1, r3
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <interpolation+0x108>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	5e1b      	ldrsh	r3, [r3, r0]
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	0019      	movs	r1, r3
 80010ca:	0010      	movs	r0, r2
 80010cc:	f7ff f8b0 	bl	8000230 <__divsi3>
 80010d0:	0003      	movs	r3, r0
        return pts[0].y +
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	18e3      	adds	r3, r4, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	e024      	b.n	8001126 <interpolation+0xfe>
    } else {

        return pts[1].y +
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <interpolation+0x108>)
 80010de:	2206      	movs	r2, #6
 80010e0:	5e9b      	ldrsh	r3, [r3, r2]
 80010e2:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <interpolation+0x108>)
 80010e6:	220a      	movs	r2, #10
 80010e8:	5e9b      	ldrsh	r3, [r3, r2]
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <interpolation+0x108>)
 80010ee:	2106      	movs	r1, #6
 80010f0:	5e5b      	ldrsh	r3, [r3, r1]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	1dba      	adds	r2, r7, #6
 80010f6:	2100      	movs	r1, #0
 80010f8:	5e52      	ldrsh	r2, [r2, r1]
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <interpolation+0x108>)
 80010fc:	2004      	movs	r0, #4
 80010fe:	5e09      	ldrsh	r1, [r1, r0]
 8001100:	1a52      	subs	r2, r2, r1
 8001102:	435a      	muls	r2, r3
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <interpolation+0x108>)
 8001106:	2108      	movs	r1, #8
 8001108:	5e5b      	ldrsh	r3, [r3, r1]
 800110a:	0019      	movs	r1, r3
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <interpolation+0x108>)
 800110e:	2004      	movs	r0, #4
 8001110:	5e1b      	ldrsh	r3, [r3, r0]
 8001112:	1acb      	subs	r3, r1, r3
 8001114:	0019      	movs	r1, r3
 8001116:	0010      	movs	r0, r2
 8001118:	f7ff f88a 	bl	8000230 <__divsi3>
 800111c:	0003      	movs	r3, r0
        return pts[1].y +
 800111e:	b29b      	uxth	r3, r3
 8001120:	18e3      	adds	r3, r4, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21b      	sxth	r3, r3
    }
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b003      	add	sp, #12
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	08008c78 	.word	0x08008c78

08001134 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[10];

static uint16_t filterButton(uint16_t voltIn){
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001140:	230e      	movs	r3, #14
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	1dba      	adds	r2, r7, #6
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 800114a:	230d      	movs	r3, #13
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e01c      	b.n	800118e <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 8001154:	200d      	movs	r0, #13
 8001156:	183b      	adds	r3, r7, r0
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <filterButton+0x8c>)
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	5ad1      	ldrh	r1, [r2, r3]
 8001162:	220e      	movs	r2, #14
 8001164:	18bb      	adds	r3, r7, r2
 8001166:	18ba      	adds	r2, r7, r2
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	188a      	adds	r2, r1, r2
 800116c:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	183b      	adds	r3, r7, r0
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <filterButton+0x8c>)
 800117a:	0049      	lsls	r1, r1, #1
 800117c:	5ac9      	ldrh	r1, [r1, r3]
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <filterButton+0x8c>)
 8001180:	0052      	lsls	r2, r2, #1
 8001182:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001184:	183b      	adds	r3, r7, r0
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	183b      	adds	r3, r7, r0
 800118a:	3201      	adds	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	230d      	movs	r3, #13
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d9dd      	bls.n	8001154 <filterButton+0x20>
	}
	MAVectorButton[9]=voltIn;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <filterButton+0x8c>)
 800119a:	1dba      	adds	r2, r7, #6
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	825a      	strh	r2, [r3, #18]
	media/=10;
 80011a0:	250e      	movs	r5, #14
 80011a2:	197c      	adds	r4, r7, r5
 80011a4:	197b      	adds	r3, r7, r5
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	210a      	movs	r1, #10
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffb6 	bl	800011c <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	8023      	strh	r3, [r4, #0]

	//if(media>)
	return media;
 80011b4:	197b      	adds	r3, r7, r5
 80011b6:	881b      	ldrh	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	200004f0 	.word	0x200004f0

080011c4 <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 80011d0:	230e      	movs	r3, #14
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	1dba      	adds	r2, r7, #6
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 80011da:	230d      	movs	r3, #13
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e01c      	b.n	800121e <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 80011e4:	200d      	movs	r0, #13
 80011e6:	183b      	adds	r3, r7, r0
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <filterVolt+0x8c>)
 80011ee:	0052      	lsls	r2, r2, #1
 80011f0:	5ad1      	ldrh	r1, [r2, r3]
 80011f2:	220e      	movs	r2, #14
 80011f4:	18bb      	adds	r3, r7, r2
 80011f6:	18ba      	adds	r2, r7, r2
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	188a      	adds	r2, r1, r2
 80011fc:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 80011fe:	183b      	adds	r3, r7, r0
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	183b      	adds	r3, r7, r0
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <filterVolt+0x8c>)
 800120a:	0049      	lsls	r1, r1, #1
 800120c:	5ac9      	ldrh	r1, [r1, r3]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <filterVolt+0x8c>)
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	183b      	adds	r3, r7, r0
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230d      	movs	r3, #13
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b08      	cmp	r3, #8
 8001226:	d9dd      	bls.n	80011e4 <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <filterVolt+0x8c>)
 800122a:	1dba      	adds	r2, r7, #6
 800122c:	8812      	ldrh	r2, [r2, #0]
 800122e:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001230:	250e      	movs	r5, #14
 8001232:	197c      	adds	r4, r7, r5
 8001234:	197b      	adds	r3, r7, r5
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	210a      	movs	r1, #10
 800123a:	0018      	movs	r0, r3
 800123c:	f7fe ff6e 	bl	800011c <__udivsi3>
 8001240:	0003      	movs	r3, r0
 8001242:	8023      	strh	r3, [r4, #0]
	return media;
 8001244:	197b      	adds	r3, r7, r5
 8001246:	881b      	ldrh	r3, [r3, #0]
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bdb0      	pop	{r4, r5, r7, pc}
 8001250:	20000504 	.word	0x20000504

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001258:	f001 f894 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125c:	f000 f848 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001260:	f000 f984 	bl	800156c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001264:	f000 f952 	bl	800150c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001268:	f000 f8aa 	bl	80013c0 <MX_ADC_Init>
  MX_SPI1_Init();
 800126c:	f000 f910 	bl	8001490 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001270:	f004 f854 	bl	800531c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readAdcVolt */
  readAdcVoltHandle = osThreadNew(readAdcVoltFunction, NULL, &readAdcVolt_attributes);
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <main+0x74>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <main+0x78>)
 8001278:	2100      	movs	r1, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f004 f8a8 	bl	80053d0 <osThreadNew>
 8001280:	0002      	movs	r2, r0
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0x7c>)
 8001284:	601a      	str	r2, [r3, #0]

  /* creation of displayVoltRead */
  displayVoltReadHandle = osThreadNew(displayVoltReadFunction, NULL, &displayVoltRead_attributes);
 8001286:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <main+0x80>)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <main+0x84>)
 800128a:	2100      	movs	r1, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f004 f89f 	bl	80053d0 <osThreadNew>
 8001292:	0002      	movs	r2, r0
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <main+0x88>)
 8001296:	601a      	str	r2, [r3, #0]

  /* creation of readButton */
  readButtonHandle = osThreadNew(readButtonFunction, NULL, &readButton_attributes);
 8001298:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <main+0x8c>)
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <main+0x90>)
 800129c:	2100      	movs	r1, #0
 800129e:	0018      	movs	r0, r3
 80012a0:	f004 f896 	bl	80053d0 <osThreadNew>
 80012a4:	0002      	movs	r2, r0
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <main+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  
  if (readButtonHandle != NULL) {
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <main+0x94>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <main+0x66>
      buttonTaskCreated = 1;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <main+0x98>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e002      	b.n	80012c0 <main+0x6c>
  } else {
      buttonTaskCreated = 0;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <main+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012c0:	f004 f858 	bl	8005374 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	e7fd      	b.n	80012c4 <main+0x70>
 80012c8:	08008c0c 	.word	0x08008c0c
 80012cc:	080016c9 	.word	0x080016c9
 80012d0:	20000644 	.word	0x20000644
 80012d4:	08008c30 	.word	0x08008c30
 80012d8:	08001741 	.word	0x08001741
 80012dc:	20000648 	.word	0x20000648
 80012e0:	08008c54 	.word	0x08008c54
 80012e4:	080020d1 	.word	0x080020d1
 80012e8:	2000064c 	.word	0x2000064c
 80012ec:	20000651 	.word	0x20000651

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b099      	sub	sp, #100	@ 0x64
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	242c      	movs	r4, #44	@ 0x2c
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	0018      	movs	r0, r3
 80012fc:	2334      	movs	r3, #52	@ 0x34
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f006 fa89 	bl	8007818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001306:	231c      	movs	r3, #28
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	0018      	movs	r0, r3
 800130c:	2310      	movs	r3, #16
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f006 fa81 	bl	8007818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001316:	003b      	movs	r3, r7
 8001318:	0018      	movs	r0, r3
 800131a:	231c      	movs	r3, #28
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f006 fa7a 	bl	8007818 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001324:	0021      	movs	r1, r4
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2212      	movs	r2, #18
 800132a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2201      	movs	r2, #1
 8001330:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2210      	movs	r2, #16
 800133c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2210      	movs	r2, #16
 8001342:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2202      	movs	r2, #2
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2280      	movs	r2, #128	@ 0x80
 800134e:	0212      	lsls	r2, r2, #8
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	22a0      	movs	r2, #160	@ 0xa0
 8001356:	0392      	lsls	r2, r2, #14
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2201      	movs	r2, #1
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	187b      	adds	r3, r7, r1
 8001362:	0018      	movs	r0, r3
 8001364:	f001 ff6e 	bl	8003244 <HAL_RCC_OscConfig>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800136c:	f000 ffce 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	211c      	movs	r1, #28
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	187b      	adds	r3, r7, r1
 800137a:	2202      	movs	r2, #2
 800137c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2101      	movs	r1, #1
 800138e:	0018      	movs	r0, r3
 8001390:	f002 fade 	bl	8003950 <HAL_RCC_ClockConfig>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001398:	f000 ffb8 	bl	800230c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800139c:	003b      	movs	r3, r7
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013a2:	003b      	movs	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	003b      	movs	r3, r7
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fc66 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013b4:	f000 ffaa 	bl	800230c <Error_Handler>
  }
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b019      	add	sp, #100	@ 0x64
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	0018      	movs	r0, r3
 80013ca:	230c      	movs	r3, #12
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f006 fa22 	bl	8007818 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013d6:	4a2d      	ldr	r2, [pc, #180]	@ (800148c <MX_ADC_Init+0xcc>)
 80013d8:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013da:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013ec:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <MX_ADC_Init+0xc8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001400:	2200      	movs	r2, #0
 8001402:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001406:	2200      	movs	r2, #0
 8001408:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_ADC_Init+0xc8>)
 800140c:	2200      	movs	r2, #0
 800140e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001412:	22c2      	movs	r2, #194	@ 0xc2
 8001414:	32ff      	adds	r2, #255	@ 0xff
 8001416:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_ADC_Init+0xc8>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001420:	2224      	movs	r2, #36	@ 0x24
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001428:	2201      	movs	r2, #1
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_ADC_Init+0xc8>)
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fffc 	bl	800242c <HAL_ADC_Init>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001438:	f000 ff68 	bl	800230c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	0152      	lsls	r2, r2, #5
 8001448:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2207      	movs	r2, #7
 800144e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001450:	1d3a      	adds	r2, r7, #4
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <MX_ADC_Init+0xc8>)
 8001454:	0011      	movs	r1, r2
 8001456:	0018      	movs	r0, r3
 8001458:	f001 fa60 	bl	800291c <HAL_ADC_ConfigChannel>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001460:	f000 ff54 	bl	800230c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800146a:	1d3a      	adds	r2, r7, #4
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_ADC_Init+0xc8>)
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fa53 	bl	800291c <HAL_ADC_ConfigChannel>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800147a:	f000 ff47 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	20000518 	.word	0x20000518
 800148c:	40012400 	.word	0x40012400

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_SPI1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <MX_SPI1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_SPI1_Init+0x74>)
 800149c:	2282      	movs	r2, #130	@ 0x82
 800149e:	0052      	lsls	r2, r2, #1
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014aa:	22e0      	movs	r2, #224	@ 0xe0
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014c6:	2218      	movs	r2, #24
 80014c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014de:	2207      	movs	r2, #7
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <MX_SPI1_Init+0x74>)
 80014f0:	0018      	movs	r0, r3
 80014f2:	f002 fcc3 	bl	8003e7c <HAL_SPI_Init>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 ff07 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000558 	.word	0x20000558
 8001508:	40013000 	.word	0x40013000

0800150c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_USART2_UART_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001518:	22e1      	movs	r2, #225	@ 0xe1
 800151a:	0252      	lsls	r2, r2, #9
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <MX_USART2_UART_Init+0x58>)
 8001550:	0018      	movs	r0, r3
 8001552:	f003 fa77 	bl	8004a44 <HAL_UART_Init>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 fed7 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200005bc 	.word	0x200005bc
 8001568:	40004400 	.word	0x40004400

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b08b      	sub	sp, #44	@ 0x2c
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	2414      	movs	r4, #20
 8001574:	193b      	adds	r3, r7, r4
 8001576:	0018      	movs	r0, r3
 8001578:	2314      	movs	r3, #20
 800157a:	001a      	movs	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	f006 f94b 	bl	8007818 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <MX_GPIO_Init+0x150>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <MX_GPIO_Init+0x150>)
 8001588:	2180      	movs	r1, #128	@ 0x80
 800158a:	0309      	lsls	r1, r1, #12
 800158c:	430a      	orrs	r2, r1
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <MX_GPIO_Init+0x150>)
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	03c9      	lsls	r1, r1, #15
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	03db      	lsls	r3, r3, #15
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b40      	ldr	r3, [pc, #256]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	0289      	lsls	r1, r1, #10
 80015c4:	430a      	orrs	r2, r1
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b3c      	ldr	r3, [pc, #240]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015dc:	2180      	movs	r1, #128	@ 0x80
 80015de:	02c9      	lsls	r1, r1, #11
 80015e0:	430a      	orrs	r2, r1
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	4b35      	ldr	r3, [pc, #212]	@ (80016bc <MX_GPIO_Init+0x150>)
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	02db      	lsls	r3, r3, #11
 80015ec:	4013      	ands	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 80015f2:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <MX_GPIO_Init+0x154>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fe05 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 80015fe:	23c0      	movs	r3, #192	@ 0xc0
 8001600:	0099      	lsls	r1, r3, #2
 8001602:	2390      	movs	r3, #144	@ 0x90
 8001604:	05db      	lsls	r3, r3, #23
 8001606:	2200      	movs	r2, #0
 8001608:	0018      	movs	r0, r3
 800160a:	f001 fdfd 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800160e:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <MX_GPIO_Init+0x158>)
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	@ 0x40
 8001614:	0018      	movs	r0, r3
 8001616:	f001 fdf7 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	2280      	movs	r2, #128	@ 0x80
 800161e:	0192      	lsls	r2, r2, #6
 8001620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2284      	movs	r2, #132	@ 0x84
 8001626:	0392      	lsls	r2, r2, #14
 8001628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001630:	193b      	adds	r3, r7, r4
 8001632:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <MX_GPIO_Init+0x154>)
 8001634:	0019      	movs	r1, r3
 8001636:	0010      	movs	r0, r2
 8001638:	f001 fc6e 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	193b      	adds	r3, r7, r4
 8001644:	2201      	movs	r2, #1
 8001646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	193b      	adds	r3, r7, r4
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8001654:	193b      	adds	r3, r7, r4
 8001656:	4a1a      	ldr	r2, [pc, #104]	@ (80016c0 <MX_GPIO_Init+0x154>)
 8001658:	0019      	movs	r1, r3
 800165a:	0010      	movs	r0, r2
 800165c:	f001 fc5c 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8001660:	0021      	movs	r1, r4
 8001662:	187b      	adds	r3, r7, r1
 8001664:	22c0      	movs	r2, #192	@ 0xc0
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	000c      	movs	r4, r1
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2201      	movs	r2, #1
 8001670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	193a      	adds	r2, r7, r4
 8001680:	2390      	movs	r3, #144	@ 0x90
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f001 fc46 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 800168c:	0021      	movs	r1, r4
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2240      	movs	r2, #64	@ 0x40
 8001692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2201      	movs	r2, #1
 8001698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <MX_GPIO_Init+0x158>)
 80016aa:	0019      	movs	r1, r3
 80016ac:	0010      	movs	r0, r2
 80016ae:	f001 fc33 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b00b      	add	sp, #44	@ 0x2c
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000400 	.word	0x48000400

080016c8 <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <readAdcVoltFunction+0x6c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2202      	movs	r2, #2
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
	      HAL_ADC_Start(&hadc);
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <readAdcVoltFunction+0x6c>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 ffe6 	bl	80026ac <HAL_ADC_Start>
	      if(HAL_ADC_PollForConversion(&hadc, 30)==HAL_OK)
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <readAdcVoltFunction+0x6c>)
 80016e2:	211e      	movs	r1, #30
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 f875 	bl	80027d4 <HAL_ADC_PollForConversion>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d108      	bne.n	8001700 <readAdcVoltFunction+0x38>
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <readAdcVoltFunction+0x6c>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f001 f907 	bl	8002904 <HAL_ADC_GetValue>
 80016f6:	0003      	movs	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <readAdcVoltFunction+0x70>)
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	e002      	b.n	8001706 <readAdcVoltFunction+0x3e>
	      else voltReadRaw=0;
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <readAdcVoltFunction+0x70>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]

	      HAL_ADC_Stop(&hadc);
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <readAdcVoltFunction+0x6c>)
 8001708:	0018      	movs	r0, r3
 800170a:	f001 f823 	bl	8002754 <HAL_ADC_Stop>

	      voltRead = filterVolt(interpolation(voltReadRaw));
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <readAdcVoltFunction+0x70>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b21b      	sxth	r3, r3
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fc87 	bl	8001028 <interpolation>
 800171a:	0003      	movs	r3, r0
 800171c:	b29b      	uxth	r3, r3
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fd50 	bl	80011c4 <filterVolt>
 8001724:	0003      	movs	r3, r0
 8001726:	001a      	movs	r2, r3
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <readAdcVoltFunction+0x74>)
 800172a:	801a      	strh	r2, [r3, #0]
    osDelay(5);
 800172c:	2005      	movs	r0, #5
 800172e:	f003 fef7 	bl	8005520 <osDelay>
	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 8001732:	e7cd      	b.n	80016d0 <readAdcVoltFunction+0x8>
 8001734:	20000518 	.word	0x20000518
 8001738:	20000004 	.word	0x20000004
 800173c:	200004d4 	.word	0x200004d4

08001740 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void *argument)
{
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b0bf      	sub	sp, #252	@ 0xfc
 8001744:	af02      	add	r7, sp, #8
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayVoltReadFunction */
  /* Infinite loop */
				st7565_init();
 8001748:	f7ff f8b0 	bl	80008ac <st7565_init>
  			  st7565_backlight_enable();
 800174c:	f7ff f95c 	bl	8000a08 <st7565_backlight_enable>
  			  st7565_clear_screen();
 8001750:	f7ff f98c 	bl	8000a6c <st7565_clear_screen>
  			st7565_set_brightness(0);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff f965 	bl	8000a24 <st7565_set_brightness>
  			//osDelay(1000);

  			//st7565_fade_in(10);


  			  st7565_clear_buffer(buffer);
 800175a:	4bb7      	ldr	r3, [pc, #732]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f9e1 	bl	8000b24 <st7565_clear_buffer>

  			    			  //Animatie jmekera de startup

  			  uint8_t spacingx=126/10; //Cat de distantate sunt liniile in animatie x
 8001762:	23cb      	movs	r3, #203	@ 0xcb
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	220c      	movs	r2, #12
 8001768:	701a      	strb	r2, [r3, #0]
  			  uint8_t spacingy=63/6;
 800176a:	23ca      	movs	r3, #202	@ 0xca
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	220a      	movs	r2, #10
 8001770:	701a      	strb	r2, [r3, #0]
  			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001772:	23ee      	movs	r3, #238	@ 0xee
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2200      	movs	r2, #0
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	e0bc      	b.n	80018f6 <displayVoltReadFunction+0x1b6>
  				  //spacing=5+i/10;
  				  if(i%4==0)st7565_set_brightness(i/4);
 800177c:	21ee      	movs	r1, #238	@ 0xee
 800177e:	187b      	adds	r3, r7, r1
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <displayVoltReadFunction+0x5c>
 800178c:	187b      	adds	r3, r7, r1
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	b29b      	uxth	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff f944 	bl	8000a24 <st7565_set_brightness>
  				  uint16_t j=i/2;
 800179c:	2384      	movs	r3, #132	@ 0x84
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	22ee      	movs	r2, #238	@ 0xee
 80017a2:	18ba      	adds	r2, r7, r2
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	0852      	lsrs	r2, r2, #1
 80017a8:	801a      	strh	r2, [r3, #0]
  				  st7565_clear_buffer(buffer);
 80017aa:	4ba3      	ldr	r3, [pc, #652]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff f9b9 	bl	8000b24 <st7565_clear_buffer>
  				  //Linie de la i,j la marginea dreapta
  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80017b2:	23ec      	movs	r3, #236	@ 0xec
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e01b      	b.n	80017f4 <displayVoltReadFunction+0xb4>
  					st7565_drawline(buffer,i,j,126,j2,1);
 80017bc:	23ee      	movs	r3, #238	@ 0xee
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b2d9      	uxtb	r1, r3
 80017c4:	2384      	movs	r3, #132	@ 0x84
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	25ec      	movs	r5, #236	@ 0xec
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4898      	ldr	r0, [pc, #608]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 80017d6:	2401      	movs	r4, #1
 80017d8:	9401      	str	r4, [sp, #4]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	237e      	movs	r3, #126	@ 0x7e
 80017de:	f7ff fac9 	bl	8000d74 <st7565_drawline>
  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80017e2:	23ca      	movs	r3, #202	@ 0xca
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b299      	uxth	r1, r3
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	197a      	adds	r2, r7, r5
 80017ee:	8812      	ldrh	r2, [r2, #0]
 80017f0:	188a      	adds	r2, r1, r2
 80017f2:	801a      	strh	r2, [r3, #0]
 80017f4:	23ec      	movs	r3, #236	@ 0xec
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80017fc:	d9de      	bls.n	80017bc <displayVoltReadFunction+0x7c>
  				  }
  				//Linie de la i,j la marginea stanga
  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80017fe:	23ea      	movs	r3, #234	@ 0xea
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
 8001806:	e01b      	b.n	8001840 <displayVoltReadFunction+0x100>
  				  					st7565_drawline(buffer,i,j,0,j2,1);
 8001808:	23ee      	movs	r3, #238	@ 0xee
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b2d9      	uxtb	r1, r3
 8001810:	2384      	movs	r3, #132	@ 0x84
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	25ea      	movs	r5, #234	@ 0xea
 800181a:	197b      	adds	r3, r7, r5
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4885      	ldr	r0, [pc, #532]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 8001822:	2401      	movs	r4, #1
 8001824:	9401      	str	r4, [sp, #4]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	f7ff faa3 	bl	8000d74 <st7565_drawline>
  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 800182e:	23ca      	movs	r3, #202	@ 0xca
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b299      	uxth	r1, r3
 8001836:	197b      	adds	r3, r7, r5
 8001838:	197a      	adds	r2, r7, r5
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	188a      	adds	r2, r1, r2
 800183e:	801a      	strh	r2, [r3, #0]
 8001840:	23ea      	movs	r3, #234	@ 0xea
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b3f      	cmp	r3, #63	@ 0x3f
 8001848:	d9de      	bls.n	8001808 <displayVoltReadFunction+0xc8>
  				  				  }

  				  //Linie de la i,j la margine jos
  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800184a:	23e8      	movs	r3, #232	@ 0xe8
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	2200      	movs	r2, #0
 8001850:	801a      	strh	r2, [r3, #0]
 8001852:	e01b      	b.n	800188c <displayVoltReadFunction+0x14c>
  				  		st7565_drawline(buffer,i,j,i2,63,1);
 8001854:	23ee      	movs	r3, #238	@ 0xee
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b2d9      	uxtb	r1, r3
 800185c:	2384      	movs	r3, #132	@ 0x84
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	25e8      	movs	r5, #232	@ 0xe8
 8001866:	197b      	adds	r3, r7, r5
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4872      	ldr	r0, [pc, #456]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 800186e:	2401      	movs	r4, #1
 8001870:	9401      	str	r4, [sp, #4]
 8001872:	243f      	movs	r4, #63	@ 0x3f
 8001874:	9400      	str	r4, [sp, #0]
 8001876:	f7ff fa7d 	bl	8000d74 <st7565_drawline>
  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800187a:	23cb      	movs	r3, #203	@ 0xcb
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b299      	uxth	r1, r3
 8001882:	197b      	adds	r3, r7, r5
 8001884:	197a      	adds	r2, r7, r5
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	188a      	adds	r2, r1, r2
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	23e8      	movs	r3, #232	@ 0xe8
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b7e      	cmp	r3, #126	@ 0x7e
 8001894:	d9de      	bls.n	8001854 <displayVoltReadFunction+0x114>
  				  				  }
  				//Linie de la i,j la margine sus
  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001896:	23e6      	movs	r3, #230	@ 0xe6
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2200      	movs	r2, #0
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	e01b      	b.n	80018d8 <displayVoltReadFunction+0x198>
  				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 80018a0:	23ee      	movs	r3, #238	@ 0xee
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	2384      	movs	r3, #132	@ 0x84
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	25e6      	movs	r5, #230	@ 0xe6
 80018b2:	197b      	adds	r3, r7, r5
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	485f      	ldr	r0, [pc, #380]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 80018ba:	2401      	movs	r4, #1
 80018bc:	9401      	str	r4, [sp, #4]
 80018be:	2400      	movs	r4, #0
 80018c0:	9400      	str	r4, [sp, #0]
 80018c2:	f7ff fa57 	bl	8000d74 <st7565_drawline>
  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80018c6:	23cb      	movs	r3, #203	@ 0xcb
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b299      	uxth	r1, r3
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	197a      	adds	r2, r7, r5
 80018d2:	8812      	ldrh	r2, [r2, #0]
 80018d4:	188a      	adds	r2, r1, r2
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	23e6      	movs	r3, #230	@ 0xe6
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2b7e      	cmp	r3, #126	@ 0x7e
 80018e0:	d9de      	bls.n	80018a0 <displayVoltReadFunction+0x160>
  				  				  }

  				//deseneaza frame
  				st7565_write_buffer(buffer);
 80018e2:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe ff5f 	bl	80007a8 <st7565_write_buffer>
  			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 80018ea:	22ee      	movs	r2, #238	@ 0xee
 80018ec:	18bb      	adds	r3, r7, r2
 80018ee:	18ba      	adds	r2, r7, r2
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	3202      	adds	r2, #2
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	23ee      	movs	r3, #238	@ 0xee
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018fe:	d800      	bhi.n	8001902 <displayVoltReadFunction+0x1c2>
 8001900:	e73c      	b.n	800177c <displayVoltReadFunction+0x3c>
				//HAL_Delay(50);

  				//osDelay(2);

  			  }
  			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001902:	23e4      	movs	r3, #228	@ 0xe4
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2240      	movs	r2, #64	@ 0x40
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	e0c2      	b.n	8001a92 <displayVoltReadFunction+0x352>
  				//spacing=11-(i-64)/10;
  				if(i%4==0)st7565_set_brightness((126-i)/4);
 800190c:	21e4      	movs	r1, #228	@ 0xe4
 800190e:	187b      	adds	r3, r7, r1
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	2203      	movs	r2, #3
 8001914:	4013      	ands	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <displayVoltReadFunction+0x1f2>
 800191c:	187b      	adds	r3, r7, r1
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	227e      	movs	r2, #126	@ 0x7e
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	d500      	bpl.n	8001928 <displayVoltReadFunction+0x1e8>
 8001926:	3303      	adds	r3, #3
 8001928:	109b      	asrs	r3, r3, #2
 800192a:	b2db      	uxtb	r3, r3
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff f879 	bl	8000a24 <st7565_set_brightness>
  			  				  uint16_t j=i/2;
 8001932:	2386      	movs	r3, #134	@ 0x86
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	22e4      	movs	r2, #228	@ 0xe4
 8001938:	18ba      	adds	r2, r7, r2
 800193a:	8812      	ldrh	r2, [r2, #0]
 800193c:	0852      	lsrs	r2, r2, #1
 800193e:	801a      	strh	r2, [r3, #0]
  			  				  st7565_clear_buffer(buffer);
 8001940:	4b3d      	ldr	r3, [pc, #244]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff f8ee 	bl	8000b24 <st7565_clear_buffer>
  			  				//Linie de la i,j la marginea dreapta
  			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001948:	23e2      	movs	r3, #226	@ 0xe2
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	e01b      	b.n	800198a <displayVoltReadFunction+0x24a>
  			  				  					st7565_drawline(buffer,i,j,126,j2,1);
 8001952:	23e4      	movs	r3, #228	@ 0xe4
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b2d9      	uxtb	r1, r3
 800195a:	2386      	movs	r3, #134	@ 0x86
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	25e2      	movs	r5, #226	@ 0xe2
 8001964:	197b      	adds	r3, r7, r5
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4833      	ldr	r0, [pc, #204]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 800196c:	2401      	movs	r4, #1
 800196e:	9401      	str	r4, [sp, #4]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	237e      	movs	r3, #126	@ 0x7e
 8001974:	f7ff f9fe 	bl	8000d74 <st7565_drawline>
  			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001978:	23ca      	movs	r3, #202	@ 0xca
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b299      	uxth	r1, r3
 8001980:	197b      	adds	r3, r7, r5
 8001982:	197a      	adds	r2, r7, r5
 8001984:	8812      	ldrh	r2, [r2, #0]
 8001986:	188a      	adds	r2, r1, r2
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	23e2      	movs	r3, #226	@ 0xe2
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b3f      	cmp	r3, #63	@ 0x3f
 8001992:	d9de      	bls.n	8001952 <displayVoltReadFunction+0x212>
  			  				  				  }
  			  				  				//Linie de la i,j la marginea stanga
  			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001994:	23e0      	movs	r3, #224	@ 0xe0
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
 800199c:	e01b      	b.n	80019d6 <displayVoltReadFunction+0x296>
  			  				  				  					st7565_drawline(buffer,i,j,0,j2,1);
 800199e:	23e4      	movs	r3, #228	@ 0xe4
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b2d9      	uxtb	r1, r3
 80019a6:	2386      	movs	r3, #134	@ 0x86
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	25e0      	movs	r5, #224	@ 0xe0
 80019b0:	197b      	adds	r3, r7, r5
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4820      	ldr	r0, [pc, #128]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 80019b8:	2401      	movs	r4, #1
 80019ba:	9401      	str	r4, [sp, #4]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2300      	movs	r3, #0
 80019c0:	f7ff f9d8 	bl	8000d74 <st7565_drawline>
  			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80019c4:	23ca      	movs	r3, #202	@ 0xca
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b299      	uxth	r1, r3
 80019cc:	197b      	adds	r3, r7, r5
 80019ce:	197a      	adds	r2, r7, r5
 80019d0:	8812      	ldrh	r2, [r2, #0]
 80019d2:	188a      	adds	r2, r1, r2
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	23e0      	movs	r3, #224	@ 0xe0
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80019de:	d9de      	bls.n	800199e <displayVoltReadFunction+0x25e>
  			  				  				  				  }

  			  				  				  //Linie de la i,j la margine jos
  			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80019e0:	23de      	movs	r3, #222	@ 0xde
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]
 80019e8:	e01b      	b.n	8001a22 <displayVoltReadFunction+0x2e2>
  			  				  				  		st7565_drawline(buffer,i,j,i2,63,1);
 80019ea:	23e4      	movs	r3, #228	@ 0xe4
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b2d9      	uxtb	r1, r3
 80019f2:	2386      	movs	r3, #134	@ 0x86
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	25de      	movs	r5, #222	@ 0xde
 80019fc:	197b      	adds	r3, r7, r5
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <displayVoltReadFunction+0x2f8>)
 8001a04:	2401      	movs	r4, #1
 8001a06:	9401      	str	r4, [sp, #4]
 8001a08:	243f      	movs	r4, #63	@ 0x3f
 8001a0a:	9400      	str	r4, [sp, #0]
 8001a0c:	f7ff f9b2 	bl	8000d74 <st7565_drawline>
  			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001a10:	23cb      	movs	r3, #203	@ 0xcb
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b299      	uxth	r1, r3
 8001a18:	197b      	adds	r3, r7, r5
 8001a1a:	197a      	adds	r2, r7, r5
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	188a      	adds	r2, r1, r2
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	23de      	movs	r3, #222	@ 0xde
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a2a:	d9de      	bls.n	80019ea <displayVoltReadFunction+0x2aa>
  			  				  				  }
  			  				  				//Linie de la i,j la margine sus
  			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001a2c:	23dc      	movs	r3, #220	@ 0xdc
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e01e      	b.n	8001a74 <displayVoltReadFunction+0x334>
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	2000000c 	.word	0x2000000c
  			  				  				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 8001a3c:	23e4      	movs	r3, #228	@ 0xe4
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b2d9      	uxtb	r1, r3
 8001a44:	2386      	movs	r3, #134	@ 0x86
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	25dc      	movs	r5, #220	@ 0xdc
 8001a4e:	197b      	adds	r3, r7, r5
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	48d1      	ldr	r0, [pc, #836]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001a56:	2401      	movs	r4, #1
 8001a58:	9401      	str	r4, [sp, #4]
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	9400      	str	r4, [sp, #0]
 8001a5e:	f7ff f989 	bl	8000d74 <st7565_drawline>
  			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001a62:	23cb      	movs	r3, #203	@ 0xcb
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	197b      	adds	r3, r7, r5
 8001a6c:	197a      	adds	r2, r7, r5
 8001a6e:	8812      	ldrh	r2, [r2, #0]
 8001a70:	188a      	adds	r2, r1, r2
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	23dc      	movs	r3, #220	@ 0xdc
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a7c:	d9de      	bls.n	8001a3c <displayVoltReadFunction+0x2fc>
  			  				  				  				  }

  			  				//deseneaza frame
  			  				st7565_write_buffer(buffer);
 8001a7e:	4bc7      	ldr	r3, [pc, #796]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7fe fe91 	bl	80007a8 <st7565_write_buffer>
  			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001a86:	22e4      	movs	r2, #228	@ 0xe4
 8001a88:	18bb      	adds	r3, r7, r2
 8001a8a:	18ba      	adds	r2, r7, r2
 8001a8c:	8812      	ldrh	r2, [r2, #0]
 8001a8e:	3202      	adds	r2, #2
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	23e4      	movs	r3, #228	@ 0xe4
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a9a:	d800      	bhi.n	8001a9e <displayVoltReadFunction+0x35e>
 8001a9c:	e736      	b.n	800190c <displayVoltReadFunction+0x1cc>


  			  //HAL_ReadPin
  			  //Trimitem comanda sa desenam

  			st7565_set_brightness(0);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7fe ffc0 	bl	8000a24 <st7565_set_brightness>
  for(;;)
  {
	  //st7565_fillrect(buffer,10,10,10,10,1);
	  if(displayMode==0){
 8001aa4:	4bbe      	ldr	r3, [pc, #760]	@ (8001da0 <displayVoltReadFunction+0x660>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d162      	bne.n	8001b72 <displayVoltReadFunction+0x432>
	  st7565_clear_buffer(buffer);
 8001aac:	4bbb      	ldr	r3, [pc, #748]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff f838 	bl	8000b24 <st7565_clear_buffer>
	  st7565_drawstring(buffer,0,0,"Volt:",fontMode);
 8001ab4:	4bbb      	ldr	r3, [pc, #748]	@ (8001da4 <displayVoltReadFunction+0x664>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4abb      	ldr	r2, [pc, #748]	@ (8001da8 <displayVoltReadFunction+0x668>)
 8001aba:	48b8      	ldr	r0, [pc, #736]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	0013      	movs	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f7ff f8a8 	bl	8000c18 <st7565_drawstring>
	    			char volt[100];
	    			itoa(voltRead,volt,10);
 8001ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8001dac <displayVoltReadFunction+0x66c>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	240c      	movs	r4, #12
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	220a      	movs	r2, #10
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	f005 fe45 	bl	8007764 <itoa>
	    			if(voltRead<10){
 8001ada:	4bb4      	ldr	r3, [pc, #720]	@ (8001dac <displayVoltReadFunction+0x66c>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	d811      	bhi.n	8001b06 <displayVoltReadFunction+0x3c6>
	    				volt[4]='\0';
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[0];
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	70da      	strb	r2, [r3, #3]
	    				volt[2]='0';
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2230      	movs	r2, #48	@ 0x30
 8001af6:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	222e      	movs	r2, #46	@ 0x2e
 8001afc:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2230      	movs	r2, #48	@ 0x30
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e029      	b.n	8001b5a <displayVoltReadFunction+0x41a>
	    			}
	    			else if(voltRead>=10&&voltRead<100){
 8001b06:	4ba9      	ldr	r3, [pc, #676]	@ (8001dac <displayVoltReadFunction+0x66c>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d916      	bls.n	8001b3c <displayVoltReadFunction+0x3fc>
 8001b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8001dac <displayVoltReadFunction+0x66c>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b63      	cmp	r3, #99	@ 0x63
 8001b14:	d812      	bhi.n	8001b3c <displayVoltReadFunction+0x3fc>
	    				volt[4]='\0';
 8001b16:	210c      	movs	r1, #12
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[1];
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	785a      	ldrb	r2, [r3, #1]
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[0];
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	222e      	movs	r2, #46	@ 0x2e
 8001b32:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2230      	movs	r2, #48	@ 0x30
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e00e      	b.n	8001b5a <displayVoltReadFunction+0x41a>
	    			}
	    			else{
	    				volt[4]='\0';
 8001b3c:	210c      	movs	r1, #12
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[2];
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	789a      	ldrb	r2, [r3, #2]
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[1];
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	785a      	ldrb	r2, [r3, #1]
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	222e      	movs	r2, #46	@ 0x2e
 8001b58:	705a      	strb	r2, [r3, #1]
	    				//volt[0]=volt[0];
	    			}
	    			st7565_drawstring(buffer,0,1,volt,fontMode);
 8001b5a:	4b92      	ldr	r3, [pc, #584]	@ (8001da4 <displayVoltReadFunction+0x664>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	220c      	movs	r2, #12
 8001b60:	18ba      	adds	r2, r7, r2
 8001b62:	488e      	ldr	r0, [pc, #568]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	0013      	movs	r3, r2
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	f7ff f854 	bl	8000c18 <st7565_drawstring>
 8001b70:	e1d5      	b.n	8001f1e <displayVoltReadFunction+0x7de>

	  }

	  else if(displayMode==1){
 8001b72:	4b8b      	ldr	r3, [pc, #556]	@ (8001da0 <displayVoltReadFunction+0x660>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d000      	beq.n	8001b7c <displayVoltReadFunction+0x43c>
 8001b7a:	e1be      	b.n	8001efa <displayVoltReadFunction+0x7ba>
      st7565_clear_buffer(buffer);
 8001b7c:	4b87      	ldr	r3, [pc, #540]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7fe ffd0 	bl	8000b24 <st7565_clear_buffer>
      st7565_drawstring(buffer,30,2,"Volt Range",fontMode);
 8001b84:	4b87      	ldr	r3, [pc, #540]	@ (8001da4 <displayVoltReadFunction+0x664>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4a89      	ldr	r2, [pc, #548]	@ (8001db0 <displayVoltReadFunction+0x670>)
 8001b8a:	4884      	ldr	r0, [pc, #528]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	0013      	movs	r3, r2
 8001b90:	2202      	movs	r2, #2
 8001b92:	211e      	movs	r1, #30
 8001b94:	f7ff f840 	bl	8000c18 <st7565_drawstring>
      int bar_x0 = 5;
 8001b98:	2305      	movs	r3, #5
 8001b9a:	22c4      	movs	r2, #196	@ 0xc4
 8001b9c:	18b9      	adds	r1, r7, r2
 8001b9e:	600b      	str	r3, [r1, #0]
      int bar_x1 = 121;
 8001ba0:	2379      	movs	r3, #121	@ 0x79
 8001ba2:	20c0      	movs	r0, #192	@ 0xc0
 8001ba4:	1839      	adds	r1, r7, r0
 8001ba6:	600b      	str	r3, [r1, #0]
      int bar_y0 = 30;
 8001ba8:	231e      	movs	r3, #30
 8001baa:	24bc      	movs	r4, #188	@ 0xbc
 8001bac:	1939      	adds	r1, r7, r4
 8001bae:	600b      	str	r3, [r1, #0]
      int bar_y1 = 37;
 8001bb0:	2325      	movs	r3, #37	@ 0x25
 8001bb2:	26b8      	movs	r6, #184	@ 0xb8
 8001bb4:	19b9      	adds	r1, r7, r6
 8001bb6:	600b      	str	r3, [r1, #0]
      int squares = 10;
 8001bb8:	230a      	movs	r3, #10
 8001bba:	21b4      	movs	r1, #180	@ 0xb4
 8001bbc:	187d      	adds	r5, r7, r1
 8001bbe:	602b      	str	r3, [r5, #0]
      int inner_x0 = bar_x0 + 1;
 8001bc0:	18bb      	adds	r3, r7, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	25b0      	movs	r5, #176	@ 0xb0
 8001bc8:	197a      	adds	r2, r7, r5
 8001bca:	6013      	str	r3, [r2, #0]
      int inner_x1 = bar_x1 - 1;
 8001bcc:	183b      	adds	r3, r7, r0
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	22ac      	movs	r2, #172	@ 0xac
 8001bd4:	18b8      	adds	r0, r7, r2
 8001bd6:	6003      	str	r3, [r0, #0]
      int inner_y0 = bar_y0 + 1;
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	20a8      	movs	r0, #168	@ 0xa8
 8001be0:	1838      	adds	r0, r7, r0
 8001be2:	6003      	str	r3, [r0, #0]
      int inner_y1 = bar_y1 - 1;
 8001be4:	19bb      	adds	r3, r7, r6
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	20a4      	movs	r0, #164	@ 0xa4
 8001bec:	1838      	adds	r0, r7, r0
 8001bee:	6003      	str	r3, [r0, #0]
      int inner_width = inner_x1 - inner_x0 + 1;
 8001bf0:	18bb      	adds	r3, r7, r2
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	197b      	adds	r3, r7, r5
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	26a0      	movs	r6, #160	@ 0xa0
 8001bfe:	19ba      	adds	r2, r7, r6
 8001c00:	6013      	str	r3, [r2, #0]
      int square_width = inner_width / squares;
 8001c02:	000c      	movs	r4, r1
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	6819      	ldr	r1, [r3, #0]
 8001c08:	19bb      	adds	r3, r7, r6
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	f7fe fb10 	bl	8000230 <__divsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	229c      	movs	r2, #156	@ 0x9c
 8001c14:	18b9      	adds	r1, r7, r2
 8001c16:	600b      	str	r3, [r1, #0]
      int remainder = inner_width - square_width * squares;
 8001c18:	18bb      	adds	r3, r7, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0021      	movs	r1, r4
 8001c1e:	187a      	adds	r2, r7, r1
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4353      	muls	r3, r2
 8001c24:	19ba      	adds	r2, r7, r6
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2298      	movs	r2, #152	@ 0x98
 8001c2c:	18ba      	adds	r2, r7, r2
 8001c2e:	6013      	str	r3, [r2, #0]
      int volt_step = 330 / squares;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	23a5      	movs	r3, #165	@ 0xa5
 8001c36:	0058      	lsls	r0, r3, #1
 8001c38:	f7fe fafa 	bl	8000230 <__divsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	2294      	movs	r2, #148	@ 0x94
 8001c40:	18ba      	adds	r2, r7, r2
 8001c42:	6013      	str	r3, [r2, #0]
      int x = inner_x0;
 8001c44:	197b      	adds	r3, r7, r5
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	22d8      	movs	r2, #216	@ 0xd8
 8001c4a:	18ba      	adds	r2, r7, r2
 8001c4c:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	22d4      	movs	r2, #212	@ 0xd4
 8001c52:	18ba      	adds	r2, r7, r2
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e053      	b.n	8001d00 <displayVoltReadFunction+0x5c0>
          int w = square_width + (i < remainder ? 1 : 0);
 8001c58:	2301      	movs	r3, #1
 8001c5a:	1c19      	adds	r1, r3, #0
 8001c5c:	23d4      	movs	r3, #212	@ 0xd4
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2398      	movs	r3, #152	@ 0x98
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	db01      	blt.n	8001c70 <displayVoltReadFunction+0x530>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	1c19      	adds	r1, r3, #0
 8001c70:	b2cb      	uxtb	r3, r1
 8001c72:	001a      	movs	r2, r3
 8001c74:	239c      	movs	r3, #156	@ 0x9c
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	189b      	adds	r3, r3, r2
 8001c7c:	2090      	movs	r0, #144	@ 0x90
 8001c7e:	183a      	adds	r2, r7, r0
 8001c80:	6013      	str	r3, [r2, #0]
          int threshold = (i + 1) * volt_step;
 8001c82:	23d4      	movs	r3, #212	@ 0xd4
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	2394      	movs	r3, #148	@ 0x94
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4353      	muls	r3, r2
 8001c92:	218c      	movs	r1, #140	@ 0x8c
 8001c94:	187a      	adds	r2, r7, r1
 8001c96:	6013      	str	r3, [r2, #0]
          if(voltRead >= threshold) {
 8001c98:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <displayVoltReadFunction+0x66c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	dc1d      	bgt.n	8001ce2 <displayVoltReadFunction+0x5a2>
              st7565_fillrect(buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 8001ca6:	23d8      	movs	r3, #216	@ 0xd8
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	26a8      	movs	r6, #168	@ 0xa8
 8001cb0:	19bb      	adds	r3, r7, r6
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b2dc      	uxtb	r4, r3
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b2dd      	uxtb	r5, r3
 8001cbc:	23a4      	movs	r3, #164	@ 0xa4
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	19bb      	adds	r3, r7, r6
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4832      	ldr	r0, [pc, #200]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	9201      	str	r2, [sp, #4]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	002b      	movs	r3, r5
 8001cdc:	0022      	movs	r2, r4
 8001cde:	f7ff f954 	bl	8000f8a <st7565_fillrect>
          }
          x += w;
 8001ce2:	21d8      	movs	r1, #216	@ 0xd8
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2390      	movs	r3, #144	@ 0x90
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	18d3      	adds	r3, r2, r3
 8001cf0:	187a      	adds	r2, r7, r1
 8001cf2:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001cf4:	22d4      	movs	r2, #212	@ 0xd4
 8001cf6:	18bb      	adds	r3, r7, r2
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	18ba      	adds	r2, r7, r2
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	23d4      	movs	r3, #212	@ 0xd4
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	23b4      	movs	r3, #180	@ 0xb4
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dba3      	blt.n	8001c58 <displayVoltReadFunction+0x518>
      }
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001d10:	23c4      	movs	r3, #196	@ 0xc4
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	22d0      	movs	r2, #208	@ 0xd0
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e02c      	b.n	8001d7a <displayVoltReadFunction+0x63a>
          if(px != bar_x0 + 1 && px != bar_x1 - 1) {
 8001d20:	23c4      	movs	r3, #196	@ 0xc4
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	24d0      	movs	r4, #208	@ 0xd0
 8001d2a:	193a      	adds	r2, r7, r4
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d01d      	beq.n	8001d6e <displayVoltReadFunction+0x62e>
 8001d32:	23c0      	movs	r3, #192	@ 0xc0
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	193a      	adds	r2, r7, r4
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d015      	beq.n	8001d6e <displayVoltReadFunction+0x62e>
              st7565_setpixel(buffer, px, bar_y0, 1);
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b2d9      	uxtb	r1, r3
 8001d48:	23bc      	movs	r3, #188	@ 0xbc
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4812      	ldr	r0, [pc, #72]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001d52:	2301      	movs	r3, #1
 8001d54:	f7fe fef5 	bl	8000b42 <st7565_setpixel>
              st7565_setpixel(buffer, px, bar_y1, 1);
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	23b8      	movs	r3, #184	@ 0xb8
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	@ (8001d9c <displayVoltReadFunction+0x65c>)
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f7fe feea 	bl	8000b42 <st7565_setpixel>
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001d6e:	22d0      	movs	r2, #208	@ 0xd0
 8001d70:	18bb      	adds	r3, r7, r2
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	18ba      	adds	r2, r7, r2
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	23d0      	movs	r3, #208	@ 0xd0
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	23c0      	movs	r3, #192	@ 0xc0
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbca      	blt.n	8001d20 <displayVoltReadFunction+0x5e0>
          }
      }
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001d8a:	23bc      	movs	r3, #188	@ 0xbc
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	22cc      	movs	r2, #204	@ 0xcc
 8001d94:	18ba      	adds	r2, r7, r2
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e039      	b.n	8001e0e <displayVoltReadFunction+0x6ce>
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	20000008 	.word	0x20000008
 8001da4:	2000000a 	.word	0x2000000a
 8001da8:	08008150 	.word	0x08008150
 8001dac:	200004d4 	.word	0x200004d4
 8001db0:	08008158 	.word	0x08008158
          if(py != bar_y0 + 1 && py != bar_y1 - 1) {
 8001db4:	23bc      	movs	r3, #188	@ 0xbc
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	24cc      	movs	r4, #204	@ 0xcc
 8001dbe:	193a      	adds	r2, r7, r4
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d01d      	beq.n	8001e02 <displayVoltReadFunction+0x6c2>
 8001dc6:	23b8      	movs	r3, #184	@ 0xb8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	193a      	adds	r2, r7, r4
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d015      	beq.n	8001e02 <displayVoltReadFunction+0x6c2>
              st7565_setpixel(buffer, bar_x0, py, 1);
 8001dd6:	23c4      	movs	r3, #196	@ 0xc4
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b2d9      	uxtb	r1, r3
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	48ad      	ldr	r0, [pc, #692]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001de6:	2301      	movs	r3, #1
 8001de8:	f7fe feab 	bl	8000b42 <st7565_setpixel>
              st7565_setpixel(buffer, bar_x1, py, 1);
 8001dec:	23c0      	movs	r3, #192	@ 0xc0
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b2d9      	uxtb	r1, r3
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	48a8      	ldr	r0, [pc, #672]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f7fe fea0 	bl	8000b42 <st7565_setpixel>
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001e02:	22cc      	movs	r2, #204	@ 0xcc
 8001e04:	18bb      	adds	r3, r7, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	18ba      	adds	r2, r7, r2
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	23cc      	movs	r3, #204	@ 0xcc
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	24b8      	movs	r4, #184	@ 0xb8
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbca      	blt.n	8001db4 <displayVoltReadFunction+0x674>
          }
      }
      st7565_setpixel(buffer, bar_x0 +1, bar_y0+1, 1);
 8001e1e:	25c4      	movs	r5, #196	@ 0xc4
 8001e20:	197b      	adds	r3, r7, r5
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	26bc      	movs	r6, #188	@ 0xbc
 8001e2c:	19bb      	adds	r3, r7, r6
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4899      	ldr	r0, [pc, #612]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f7fe fe82 	bl	8000b42 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x0 +1, bar_y1-1, 1);
 8001e3e:	197b      	adds	r3, r7, r5
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2d9      	uxtb	r1, r3
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4892      	ldr	r0, [pc, #584]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001e54:	2301      	movs	r3, #1
 8001e56:	f7fe fe74 	bl	8000b42 <st7565_setpixel>

      st7565_setpixel(buffer, bar_x1 -1, bar_y0+1, 1);
 8001e5a:	25c0      	movs	r5, #192	@ 0xc0
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b2d9      	uxtb	r1, r3
 8001e66:	19bb      	adds	r3, r7, r6
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	488a      	ldr	r0, [pc, #552]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001e72:	2301      	movs	r3, #1
 8001e74:	f7fe fe65 	bl	8000b42 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x1 -1, bar_y1-1, 1);
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b2d9      	uxtb	r1, r3
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4883      	ldr	r0, [pc, #524]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f7fe fe57 	bl	8000b42 <st7565_setpixel>
      st7565_drawstring(buffer, 0, 5, "0",fontMode);
 8001e94:	4b82      	ldr	r3, [pc, #520]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4a82      	ldr	r2, [pc, #520]	@ (80020a4 <displayVoltReadFunction+0x964>)
 8001e9a:	4880      	ldr	r0, [pc, #512]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	f7fe feb8 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 20, 5, "0.8",fontMode);
 8001ea8:	4b7d      	ldr	r3, [pc, #500]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4a7e      	ldr	r2, [pc, #504]	@ (80020a8 <displayVoltReadFunction+0x968>)
 8001eae:	487b      	ldr	r0, [pc, #492]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	2114      	movs	r1, #20
 8001eb8:	f7fe feae 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 45, 5, "1.6",fontMode);
 8001ebc:	4b78      	ldr	r3, [pc, #480]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4a7a      	ldr	r2, [pc, #488]	@ (80020ac <displayVoltReadFunction+0x96c>)
 8001ec2:	4876      	ldr	r0, [pc, #472]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	2205      	movs	r2, #5
 8001eca:	212d      	movs	r1, #45	@ 0x2d
 8001ecc:	f7fe fea4 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 75, 5, "2.5",fontMode);
 8001ed0:	4b73      	ldr	r3, [pc, #460]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4a76      	ldr	r2, [pc, #472]	@ (80020b0 <displayVoltReadFunction+0x970>)
 8001ed6:	4871      	ldr	r0, [pc, #452]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	0013      	movs	r3, r2
 8001edc:	2205      	movs	r2, #5
 8001ede:	214b      	movs	r1, #75	@ 0x4b
 8001ee0:	f7fe fe9a 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 108, 5, "3.3",fontMode);
 8001ee4:	4b6e      	ldr	r3, [pc, #440]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4a72      	ldr	r2, [pc, #456]	@ (80020b4 <displayVoltReadFunction+0x974>)
 8001eea:	486c      	ldr	r0, [pc, #432]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	0013      	movs	r3, r2
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	216c      	movs	r1, #108	@ 0x6c
 8001ef4:	f7fe fe90 	bl	8000c18 <st7565_drawstring>
 8001ef8:	e011      	b.n	8001f1e <displayVoltReadFunction+0x7de>

  }
	  else if(displayMode==100){
 8001efa:	4b6f      	ldr	r3, [pc, #444]	@ (80020b8 <displayVoltReadFunction+0x978>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d10d      	bne.n	8001f1e <displayVoltReadFunction+0x7de>

      //st7565_drawstring(buffer, 0, 0, "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",fontMode);
		st7565_clear_buffer(buffer);
 8001f02:	4b66      	ldr	r3, [pc, #408]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7fe fe0d 	bl	8000b24 <st7565_clear_buffer>
		st7565_drawstring(buffer, 0, 0, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F",fontMode);
 8001f0a:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <displayVoltReadFunction+0x960>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80020bc <displayVoltReadFunction+0x97c>)
 8001f10:	4862      	ldr	r0, [pc, #392]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	0013      	movs	r3, r2
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f7fe fe7d 	bl	8000c18 <st7565_drawstring>
	  }
  //Mesaj temporar dreapta jos de schimbare mod, suprascrie ce este sub el
  if(showDisplayModeOverlay) {
 8001f1e:	4b68      	ldr	r3, [pc, #416]	@ (80020c0 <displayVoltReadFunction+0x980>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d100      	bne.n	8001f28 <displayVoltReadFunction+0x7e8>
 8001f26:	e0b1      	b.n	800208c <displayVoltReadFunction+0x94c>
      if((HAL_GetTick() - displayModeChangeTime) >= 1250) {
 8001f28:	f000 fa52 	bl	80023d0 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	4b65      	ldr	r3, [pc, #404]	@ (80020c4 <displayVoltReadFunction+0x984>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a64      	ldr	r2, [pc, #400]	@ (80020c8 <displayVoltReadFunction+0x988>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d903      	bls.n	8001f42 <displayVoltReadFunction+0x802>
          showDisplayModeOverlay = 0;
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <displayVoltReadFunction+0x980>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e0a4      	b.n	800208c <displayVoltReadFunction+0x94c>
      } else {
          uint8_t rect_x = 80;
 8001f42:	218b      	movs	r1, #139	@ 0x8b
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2250      	movs	r2, #80	@ 0x50
 8001f48:	701a      	strb	r2, [r3, #0]
          uint8_t rect_y = 45;
 8001f4a:	268a      	movs	r6, #138	@ 0x8a
 8001f4c:	19bb      	adds	r3, r7, r6
 8001f4e:	222d      	movs	r2, #45	@ 0x2d
 8001f50:	701a      	strb	r2, [r3, #0]
          uint8_t rect_w = 47;
 8001f52:	2489      	movs	r4, #137	@ 0x89
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	222f      	movs	r2, #47	@ 0x2f
 8001f58:	701a      	strb	r2, [r3, #0]
          uint8_t rect_h = 18;
 8001f5a:	2388      	movs	r3, #136	@ 0x88
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2212      	movs	r2, #18
 8001f60:	701a      	strb	r2, [r3, #0]
          
          st7565_fillrect(buffer, rect_x, rect_y, rect_w, rect_h, 0);
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	781c      	ldrb	r4, [r3, #0]
 8001f66:	19bb      	adds	r3, r7, r6
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	000d      	movs	r5, r1
 8001f6c:	197b      	adds	r3, r7, r5
 8001f6e:	7819      	ldrb	r1, [r3, #0]
 8001f70:	484a      	ldr	r0, [pc, #296]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001f72:	2300      	movs	r3, #0
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2388      	movs	r3, #136	@ 0x88
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	0023      	movs	r3, r4
 8001f80:	f7ff f803 	bl	8000f8a <st7565_fillrect>
          
          st7565_drawline(buffer, rect_x, rect_y, rect_x + rect_w, rect_y, 1);
 8001f84:	197a      	adds	r2, r7, r5
 8001f86:	2489      	movs	r4, #137	@ 0x89
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	7812      	ldrb	r2, [r2, #0]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	18d3      	adds	r3, r2, r3
 8001f90:	b2dc      	uxtb	r4, r3
 8001f92:	19bb      	adds	r3, r7, r6
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	7819      	ldrb	r1, [r3, #0]
 8001f9a:	4840      	ldr	r0, [pc, #256]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	19bb      	adds	r3, r7, r6
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	0023      	movs	r3, r4
 8001fa8:	f7fe fee4 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x, rect_y, rect_x, rect_y + rect_h, 1);
 8001fac:	0031      	movs	r1, r6
 8001fae:	19ba      	adds	r2, r7, r6
 8001fb0:	2388      	movs	r3, #136	@ 0x88
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	002e      	movs	r6, r5
 8001fbe:	19ba      	adds	r2, r7, r6
 8001fc0:	7815      	ldrb	r5, [r2, #0]
 8001fc2:	187a      	adds	r2, r7, r1
 8001fc4:	7814      	ldrb	r4, [r2, #0]
 8001fc6:	19ba      	adds	r2, r7, r6
 8001fc8:	7811      	ldrb	r1, [r2, #0]
 8001fca:	4834      	ldr	r0, [pc, #208]	@ (800209c <displayVoltReadFunction+0x95c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	002b      	movs	r3, r5
 8001fd4:	0022      	movs	r2, r4
 8001fd6:	f7fe fecd 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x + rect_w, rect_y, rect_x + rect_w, rect_y + rect_h, 1);
 8001fda:	19ba      	adds	r2, r7, r6
 8001fdc:	2489      	movs	r4, #137	@ 0x89
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	b2d9      	uxtb	r1, r3
 8001fe8:	19ba      	adds	r2, r7, r6
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	b2dc      	uxtb	r4, r3
 8001ff4:	208a      	movs	r0, #138	@ 0x8a
 8001ff6:	183a      	adds	r2, r7, r0
 8001ff8:	2588      	movs	r5, #136	@ 0x88
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	183a      	adds	r2, r7, r0
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4824      	ldr	r0, [pc, #144]	@ (800209c <displayVoltReadFunction+0x95c>)
 800200a:	2501      	movs	r5, #1
 800200c:	9501      	str	r5, [sp, #4]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	0023      	movs	r3, r4
 8002012:	f7fe feaf 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x, rect_y + rect_h, rect_x + rect_w, rect_y + rect_h, 1);
 8002016:	218a      	movs	r1, #138	@ 0x8a
 8002018:	187a      	adds	r2, r7, r1
 800201a:	2088      	movs	r0, #136	@ 0x88
 800201c:	183b      	adds	r3, r7, r0
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	18d3      	adds	r3, r2, r3
 8002024:	b2dc      	uxtb	r4, r3
 8002026:	19ba      	adds	r2, r7, r6
 8002028:	2389      	movs	r3, #137	@ 0x89
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	18d3      	adds	r3, r2, r3
 8002032:	b2dd      	uxtb	r5, r3
 8002034:	187a      	adds	r2, r7, r1
 8002036:	183b      	adds	r3, r7, r0
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	19ba      	adds	r2, r7, r6
 8002042:	7811      	ldrb	r1, [r2, #0]
 8002044:	4815      	ldr	r0, [pc, #84]	@ (800209c <displayVoltReadFunction+0x95c>)
 8002046:	2201      	movs	r2, #1
 8002048:	9201      	str	r2, [sp, #4]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	002b      	movs	r3, r5
 800204e:	0022      	movs	r2, r4
 8002050:	f7fe fe90 	bl	8000d74 <st7565_drawline>
          
          uint8_t overlay_text[20];
          sprintf(overlay_text, "Mode %d", displayMode);
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <displayVoltReadFunction+0x978>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	001a      	movs	r2, r3
 800205a:	491c      	ldr	r1, [pc, #112]	@ (80020cc <displayVoltReadFunction+0x98c>)
 800205c:	2470      	movs	r4, #112	@ 0x70
 800205e:	193b      	adds	r3, r7, r4
 8002060:	0018      	movs	r0, r3
 8002062:	f005 fbb7 	bl	80077d4 <siprintf>
          st7565_drawstring(buffer, rect_x + 2, rect_y/8 + 1, overlay_text, fontMode);
 8002066:	19bb      	adds	r3, r7, r6
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3302      	adds	r3, #2
 800206c:	b2d9      	uxtb	r1, r3
 800206e:	238a      	movs	r3, #138	@ 0x8a
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	3301      	adds	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <displayVoltReadFunction+0x960>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	193c      	adds	r4, r7, r4
 8002082:	4806      	ldr	r0, [pc, #24]	@ (800209c <displayVoltReadFunction+0x95c>)
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	0023      	movs	r3, r4
 8002088:	f7fe fdc6 	bl	8000c18 <st7565_drawstring>

      }
  }
  st7565_write_buffer(buffer);
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <displayVoltReadFunction+0x95c>)
 800208e:	0018      	movs	r0, r3
 8002090:	f7fe fb8a 	bl	80007a8 <st7565_write_buffer>
    osDelay(10);
 8002094:	200a      	movs	r0, #10
 8002096:	f003 fa43 	bl	8005520 <osDelay>
	  if(displayMode==0){
 800209a:	e503      	b.n	8001aa4 <displayVoltReadFunction+0x364>
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	2000000a 	.word	0x2000000a
 80020a4:	08008164 	.word	0x08008164
 80020a8:	08008168 	.word	0x08008168
 80020ac:	0800816c 	.word	0x0800816c
 80020b0:	08008170 	.word	0x08008170
 80020b4:	08008174 	.word	0x08008174
 80020b8:	20000008 	.word	0x20000008
 80020bc:	08008178 	.word	0x08008178
 80020c0:	200004ec 	.word	0x200004ec
 80020c4:	200004e8 	.word	0x200004e8
 80020c8:	000004e1 	.word	0x000004e1
 80020cc:	080081dc 	.word	0x080081dc

080020d0 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void *argument)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */
	flag=1;
 80020d8:	4b76      	ldr	r3, [pc, #472]	@ (80022b4 <readButtonFunction+0x1e4>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 80020de:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <readButtonFunction+0x1e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_ADC_Start(&hadc) == HAL_OK) {
 80020e6:	4b74      	ldr	r3, [pc, #464]	@ (80022b8 <readButtonFunction+0x1e8>)
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fadf 	bl	80026ac <HAL_ADC_Start>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d113      	bne.n	800211a <readButtonFunction+0x4a>
      if (HAL_ADC_PollForConversion(&hadc, 4) == HAL_OK) {
 80020f2:	4b71      	ldr	r3, [pc, #452]	@ (80022b8 <readButtonFunction+0x1e8>)
 80020f4:	2104      	movs	r1, #4
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 fb6c 	bl	80027d4 <HAL_ADC_PollForConversion>
 80020fc:	1e03      	subs	r3, r0, #0
 80020fe:	d108      	bne.n	8002112 <readButtonFunction+0x42>
        buttonReadRaw = HAL_ADC_GetValue(&hadc);
 8002100:	4b6d      	ldr	r3, [pc, #436]	@ (80022b8 <readButtonFunction+0x1e8>)
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fbfe 	bl	8002904 <HAL_ADC_GetValue>
 8002108:	0003      	movs	r3, r0
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b6b      	ldr	r3, [pc, #428]	@ (80022bc <readButtonFunction+0x1ec>)
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	e006      	b.n	8002120 <readButtonFunction+0x50>
      } else {
        buttonReadRaw = 666;
 8002112:	4b6a      	ldr	r3, [pc, #424]	@ (80022bc <readButtonFunction+0x1ec>)
 8002114:	4a6a      	ldr	r2, [pc, #424]	@ (80022c0 <readButtonFunction+0x1f0>)
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e002      	b.n	8002120 <readButtonFunction+0x50>
      }
    } else {
      buttonReadRaw = 666;
 800211a:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <readButtonFunction+0x1ec>)
 800211c:	4a68      	ldr	r2, [pc, #416]	@ (80022c0 <readButtonFunction+0x1f0>)
 800211e:	801a      	strh	r2, [r3, #0]
    }
    buttonRead[0]=buttonRead[1];
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002122:	885a      	ldrh	r2, [r3, #2]
 8002124:	4b67      	ldr	r3, [pc, #412]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002126:	801a      	strh	r2, [r3, #0]
    buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 8002128:	4b64      	ldr	r3, [pc, #400]	@ (80022bc <readButtonFunction+0x1ec>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b21b      	sxth	r3, r3
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe ff7a 	bl	8001028 <interpolation>
 8002134:	0003      	movs	r3, r0
 8002136:	b29b      	uxth	r3, r3
 8002138:	0018      	movs	r0, r3
 800213a:	f7fe fffb 	bl	8001134 <filterButton>
 800213e:	0003      	movs	r3, r0
 8002140:	001a      	movs	r2, r3
 8002142:	4b60      	ldr	r3, [pc, #384]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002144:	805a      	strh	r2, [r3, #2]
    
    uint8_t rawButtonState = 0;
 8002146:	210f      	movs	r1, #15
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    if(buttonRead[1] <= 50) {
 800214e:	4b5d      	ldr	r3, [pc, #372]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002150:	885b      	ldrh	r3, [r3, #2]
 8002152:	2b32      	cmp	r3, #50	@ 0x32
 8002154:	d803      	bhi.n	800215e <readButtonFunction+0x8e>
        rawButtonState = 1;
 8002156:	187b      	adds	r3, r7, r1
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e029      	b.n	80021b2 <readButtonFunction+0xe2>
    } else if(buttonRead[1] > 290 && buttonRead[1] < 315) {
 800215e:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002160:	885a      	ldrh	r2, [r3, #2]
 8002162:	2391      	movs	r3, #145	@ 0x91
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	429a      	cmp	r2, r3
 8002168:	d90a      	bls.n	8002180 <readButtonFunction+0xb0>
 800216a:	4b56      	ldr	r3, [pc, #344]	@ (80022c4 <readButtonFunction+0x1f4>)
 800216c:	885a      	ldrh	r2, [r3, #2]
 800216e:	239d      	movs	r3, #157	@ 0x9d
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	429a      	cmp	r2, r3
 8002174:	d804      	bhi.n	8002180 <readButtonFunction+0xb0>
        rawButtonState = 2;
 8002176:	230f      	movs	r3, #15
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e018      	b.n	80021b2 <readButtonFunction+0xe2>
    } else if(buttonRead[1] > 186 && buttonRead[1] < 206) {
 8002180:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <readButtonFunction+0x1f4>)
 8002182:	885b      	ldrh	r3, [r3, #2]
 8002184:	2bba      	cmp	r3, #186	@ 0xba
 8002186:	d908      	bls.n	800219a <readButtonFunction+0xca>
 8002188:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <readButtonFunction+0x1f4>)
 800218a:	885b      	ldrh	r3, [r3, #2]
 800218c:	2bcd      	cmp	r3, #205	@ 0xcd
 800218e:	d804      	bhi.n	800219a <readButtonFunction+0xca>
        rawButtonState = 3;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2203      	movs	r2, #3
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e00b      	b.n	80021b2 <readButtonFunction+0xe2>
    } else if(buttonRead[1] > 86 && buttonRead[1] < 108) {
 800219a:	4b4a      	ldr	r3, [pc, #296]	@ (80022c4 <readButtonFunction+0x1f4>)
 800219c:	885b      	ldrh	r3, [r3, #2]
 800219e:	2b56      	cmp	r3, #86	@ 0x56
 80021a0:	d907      	bls.n	80021b2 <readButtonFunction+0xe2>
 80021a2:	4b48      	ldr	r3, [pc, #288]	@ (80022c4 <readButtonFunction+0x1f4>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	2b6b      	cmp	r3, #107	@ 0x6b
 80021a8:	d803      	bhi.n	80021b2 <readButtonFunction+0xe2>
        rawButtonState = 4;
 80021aa:	230f      	movs	r3, #15
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2204      	movs	r2, #4
 80021b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(rawButtonState != buttonState) {
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <readButtonFunction+0x1f8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	220f      	movs	r2, #15
 80021b8:	18ba      	adds	r2, r7, r2
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d100      	bne.n	80021c2 <readButtonFunction+0xf2>
 80021c0:	e06d      	b.n	800229e <readButtonFunction+0x1ce>
        if(!buttonTransitionFlag) {
 80021c2:	4b42      	ldr	r3, [pc, #264]	@ (80022cc <readButtonFunction+0x1fc>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <readButtonFunction+0x106>
            buttonTransitionFlag = 1;
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <readButtonFunction+0x1fc>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 80021d0:	4b3f      	ldr	r3, [pc, #252]	@ (80022d0 <readButtonFunction+0x200>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
        }
        buttonDebounceTimer += 5;
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <readButtonFunction+0x200>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1d5a      	adds	r2, r3, #5
 80021dc:	4b3c      	ldr	r3, [pc, #240]	@ (80022d0 <readButtonFunction+0x200>)
 80021de:	601a      	str	r2, [r3, #0]
        
        if(buttonDebounceTimer >= 50) {
 80021e0:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <readButtonFunction+0x200>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b31      	cmp	r3, #49	@ 0x31
 80021e6:	d960      	bls.n	80022aa <readButtonFunction+0x1da>
            buttonStatePrev = buttonState;
 80021e8:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <readButtonFunction+0x1f8>)
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <readButtonFunction+0x204>)
 80021ee:	701a      	strb	r2, [r3, #0]
            buttonState = rawButtonState;
 80021f0:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <readButtonFunction+0x1f8>)
 80021f2:	220f      	movs	r2, #15
 80021f4:	18ba      	adds	r2, r7, r2
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	701a      	strb	r2, [r3, #0]
            buttonTransitionFlag = 0;
 80021fa:	4b34      	ldr	r3, [pc, #208]	@ (80022cc <readButtonFunction+0x1fc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 8002200:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <readButtonFunction+0x200>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
            
            if(!buttonTransitionFlag) {
 8002206:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <readButtonFunction+0x1fc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d14d      	bne.n	80022aa <readButtonFunction+0x1da>
                if(buttonState == 1 && buttonStatePrev == 0) {
 800220e:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <readButtonFunction+0x1f8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11b      	bne.n	800224e <readButtonFunction+0x17e>
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <readButtonFunction+0x204>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d117      	bne.n	800224e <readButtonFunction+0x17e>
                    if(displayMode==0)displayMode=displayModeMax;
 800221e:	4b2e      	ldr	r3, [pc, #184]	@ (80022d8 <readButtonFunction+0x208>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <readButtonFunction+0x160>
 8002226:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <readButtonFunction+0x20c>)
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <readButtonFunction+0x208>)
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e005      	b.n	800223c <readButtonFunction+0x16c>
                    else displayMode--;
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <readButtonFunction+0x208>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3b01      	subs	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <readButtonFunction+0x208>)
 800223a:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 800223c:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <readButtonFunction+0x210>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 8002242:	f000 f8c5 	bl	80023d0 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <readButtonFunction+0x214>)
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e02d      	b.n	80022aa <readButtonFunction+0x1da>
                }
                else if(buttonState == 2 && buttonStatePrev == 0) {
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <readButtonFunction+0x1f8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d129      	bne.n	80022aa <readButtonFunction+0x1da>
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <readButtonFunction+0x204>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <readButtonFunction+0x1c0>
                    if(displayMode==displayModeMax)displayMode=0;
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <readButtonFunction+0x208>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <readButtonFunction+0x20c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d103      	bne.n	8002272 <readButtonFunction+0x1a2>
 800226a:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <readButtonFunction+0x208>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e005      	b.n	800227e <readButtonFunction+0x1ae>
                    else displayMode++;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <readButtonFunction+0x208>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <readButtonFunction+0x208>)
 800227c:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <readButtonFunction+0x210>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 8002284:	f000 f8a4 	bl	80023d0 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <readButtonFunction+0x214>)
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e00c      	b.n	80022aa <readButtonFunction+0x1da>
                }
                else if(buttonState == 3 && buttonStatePrev == 0) {
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <readButtonFunction+0x1f8>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d108      	bne.n	80022aa <readButtonFunction+0x1da>
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <readButtonFunction+0x204>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	e005      	b.n	80022aa <readButtonFunction+0x1da>

                }
            }
        }
    } else {
        buttonTransitionFlag = 0;
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <readButtonFunction+0x1fc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
        buttonDebounceTimer = 0;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <readButtonFunction+0x200>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    }
    
    osDelay(5);
 80022aa:	2005      	movs	r0, #5
 80022ac:	f003 f938 	bl	8005520 <osDelay>
  {
 80022b0:	e715      	b.n	80020de <readButtonFunction+0xe>
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	20000650 	.word	0x20000650
 80022b8:	20000518 	.word	0x20000518
 80022bc:	20000006 	.word	0x20000006
 80022c0:	0000029a 	.word	0x0000029a
 80022c4:	200004d8 	.word	0x200004d8
 80022c8:	200004dc 	.word	0x200004dc
 80022cc:	200004e4 	.word	0x200004e4
 80022d0:	200004e0 	.word	0x200004e0
 80022d4:	200004dd 	.word	0x200004dd
 80022d8:	20000008 	.word	0x20000008
 80022dc:	20000009 	.word	0x20000009
 80022e0:	200004ec 	.word	0x200004ec
 80022e4:	200004e8 	.word	0x200004e8

080022e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022fa:	f000 f857 	bl	80023ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	40000400 	.word	0x40000400

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	e7fd      	b.n	8002314 <Error_Handler+0x8>

08002318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002320:	4a14      	ldr	r2, [pc, #80]	@ (8002374 <_sbrk+0x5c>)
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <_sbrk+0x60>)
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800232c:	4b13      	ldr	r3, [pc, #76]	@ (800237c <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <_sbrk+0x64>)
 8002336:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <_sbrk+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002348:	f005 fa6e 	bl	8007828 <__errno>
 800234c:	0003      	movs	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002352:	2301      	movs	r3, #1
 8002354:	425b      	negs	r3, r3
 8002356:	e009      	b.n	800236c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002358:	4b08      	ldr	r3, [pc, #32]	@ (800237c <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	18d2      	adds	r2, r2, r3
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <_sbrk+0x64>)
 8002368:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b006      	add	sp, #24
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20008000 	.word	0x20008000
 8002378:	00000400 	.word	0x00000400
 800237c:	20000654 	.word	0x20000654
 8002380:	20006308 	.word	0x20006308

08002384 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_Init+0x24>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_Init+0x24>)
 800238e:	2110      	movs	r1, #16
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002394:	2003      	movs	r0, #3
 8002396:	f7fe f969 	bl	800066c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239a:	f7fe f85f 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40022000 	.word	0x40022000

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_IncTick+0x1c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	001a      	movs	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_IncTick+0x20>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	18d2      	adds	r2, r2, r3
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_IncTick+0x20>)
 80023be:	601a      	str	r2, [r3, #0]
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	20000418 	.word	0x20000418
 80023cc:	20000658 	.word	0x20000658

080023d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b02      	ldr	r3, [pc, #8]	@ (80023e0 <HAL_GetTick+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	20000658 	.word	0x20000658

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3301      	adds	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_Delay+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	001a      	movs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	189b      	adds	r3, r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	f7ff ffe0 	bl	80023d0 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	20000418 	.word	0x20000418

0800242c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e125      	b.n	8002696 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2234      	movs	r2, #52	@ 0x34
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f7fe f824 	bl	80004b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246c:	2210      	movs	r2, #16
 800246e:	4013      	ands	r3, r2
 8002470:	d000      	beq.n	8002474 <HAL_ADC_Init+0x48>
 8002472:	e103      	b.n	800267c <HAL_ADC_Init+0x250>
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d000      	beq.n	8002480 <HAL_ADC_Init+0x54>
 800247e:	e0fd      	b.n	800267c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800248a:	d000      	beq.n	800248e <HAL_ADC_Init+0x62>
 800248c:	e0f6      	b.n	800267c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	4a83      	ldr	r2, [pc, #524]	@ (80026a0 <HAL_ADC_Init+0x274>)
 8002494:	4013      	ands	r3, r2
 8002496:	2202      	movs	r2, #2
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2203      	movs	r2, #3
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d112      	bne.n	80024d2 <HAL_ADC_Init+0xa6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d009      	beq.n	80024ce <HAL_ADC_Init+0xa2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	401a      	ands	r2, r3
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0xa6>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_ADC_Init+0xa8>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d116      	bne.n	8002506 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2218      	movs	r2, #24
 80024e0:	4393      	bics	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	0899      	lsrs	r1, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4964      	ldr	r1, [pc, #400]	@ (80026a4 <HAL_ADC_Init+0x278>)
 8002512:	400a      	ands	r2, r1
 8002514:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7e1b      	ldrb	r3, [r3, #24]
 800251a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e5b      	ldrb	r3, [r3, #25]
 8002520:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002522:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e9b      	ldrb	r3, [r3, #26]
 8002528:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800252a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	2b01      	cmp	r3, #1
 8002532:	d002      	beq.n	800253a <HAL_ADC_Init+0x10e>
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	015b      	lsls	r3, r3, #5
 8002538:	e000      	b.n	800253c <HAL_ADC_Init+0x110>
 800253a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800253c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002542:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d101      	bne.n	8002550 <HAL_ADC_Init+0x124>
 800254c:	2304      	movs	r3, #4
 800254e:	e000      	b.n	8002552 <HAL_ADC_Init+0x126>
 8002550:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002552:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2124      	movs	r1, #36	@ 0x24
 8002558:	5c5b      	ldrb	r3, [r3, r1]
 800255a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800255c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7edb      	ldrb	r3, [r3, #27]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d115      	bne.n	8002598 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e9b      	ldrb	r3, [r3, #26]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	0252      	lsls	r2, r2, #9
 800257a:	4313      	orrs	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	e00b      	b.n	8002598 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	2220      	movs	r2, #32
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	2201      	movs	r2, #1
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	23c2      	movs	r3, #194	@ 0xc2
 800259e:	33ff      	adds	r3, #255	@ 0xff
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	055b      	lsls	r3, r3, #21
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d01b      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d017      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d013      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d00f      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d00b      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d007      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d003      	beq.n	8002608 <HAL_ADC_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	2b07      	cmp	r3, #7
 8002606:	d112      	bne.n	800262e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2107      	movs	r1, #7
 8002614:	438a      	bics	r2, r1
 8002616:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	2207      	movs	r2, #7
 8002624:	401a      	ands	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <HAL_ADC_Init+0x27c>)
 8002636:	4013      	ands	r3, r2
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	2203      	movs	r2, #3
 800264a:	4393      	bics	r3, r2
 800264c:	2201      	movs	r2, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002654:	e01c      	b.n	8002690 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265a:	2212      	movs	r2, #18
 800265c:	4393      	bics	r3, r2
 800265e:	2210      	movs	r2, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	2201      	movs	r2, #1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002672:	230f      	movs	r3, #15
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800267a:	e009      	b.n	8002690 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2210      	movs	r2, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002690:	230f      	movs	r3, #15
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	fffffefd 	.word	0xfffffefd
 80026a4:	fffe0219 	.word	0xfffe0219
 80026a8:	833fffe7 	.word	0x833fffe7

080026ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b4:	230f      	movs	r3, #15
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	d138      	bne.n	800273a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2234      	movs	r2, #52	@ 0x34
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Start+0x2a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e038      	b.n	8002748 <HAL_ADC_Start+0x9c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2234      	movs	r2, #52	@ 0x34
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e5b      	ldrb	r3, [r3, #25]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d007      	beq.n	80026f6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026e6:	230f      	movs	r3, #15
 80026e8:	18fc      	adds	r4, r7, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fa23 	bl	8002b38 <ADC_Enable>
 80026f2:	0003      	movs	r3, r0
 80026f4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026f6:	230f      	movs	r3, #15
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d120      	bne.n	8002742 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_ADC_Start+0xa4>)
 8002706:	4013      	ands	r3, r2
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2234      	movs	r2, #52	@ 0x34
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	221c      	movs	r2, #28
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2104      	movs	r1, #4
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e003      	b.n	8002742 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800273a:	230f      	movs	r3, #15
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781b      	ldrb	r3, [r3, #0]
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b005      	add	sp, #20
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	fffff0fe 	.word	0xfffff0fe

08002754 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2234      	movs	r2, #52	@ 0x34
 8002768:	5c9b      	ldrb	r3, [r3, r2]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Stop+0x1e>
 800276e:	2302      	movs	r3, #2
 8002770:	e029      	b.n	80027c6 <HAL_ADC_Stop+0x72>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2234      	movs	r2, #52	@ 0x34
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800277a:	250f      	movs	r5, #15
 800277c:	197c      	adds	r4, r7, r5
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 face 	bl	8002d22 <ADC_ConversionStop>
 8002786:	0003      	movs	r3, r0
 8002788:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800278a:	197b      	adds	r3, r7, r5
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002792:	197c      	adds	r4, r7, r5
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fa52 	bl	8002c40 <ADC_Disable>
 800279c:	0003      	movs	r3, r0
 800279e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027a0:	197b      	adds	r3, r7, r5
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_ADC_Stop+0x7c>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	2201      	movs	r2, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2234      	movs	r2, #52	@ 0x34
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bdb0      	pop	{r4, r5, r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	fffffefe 	.word	0xfffffefe

080027d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80027e6:	2308      	movs	r3, #8
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e014      	b.n	8002816 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10b      	bne.n	8002812 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fe:	2220      	movs	r2, #32
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2234      	movs	r2, #52	@ 0x34
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e071      	b.n	80028f6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002812:	230c      	movs	r3, #12
 8002814:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002816:	f7ff fddb 	bl	80023d0 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800281e:	e01f      	b.n	8002860 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	d01c      	beq.n	8002860 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_ADC_PollForConversion+0x68>
 800282c:	f7ff fdd0 	bl	80023d0 <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d211      	bcs.n	8002860 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	d10b      	bne.n	8002860 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	2204      	movs	r2, #4
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2234      	movs	r2, #52	@ 0x34
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e04a      	b.n	80028f6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	d0d9      	beq.n	8002820 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	23c0      	movs	r3, #192	@ 0xc0
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d12d      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800288c:	2b00      	cmp	r3, #0
 800288e:	d129      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2208      	movs	r2, #8
 8002898:	4013      	ands	r3, r2
 800289a:	2b08      	cmp	r3, #8
 800289c:	d122      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2204      	movs	r2, #4
 80028a6:	4013      	ands	r3, r2
 80028a8:	d110      	bne.n	80028cc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	210c      	movs	r1, #12
 80028b6:	438a      	bics	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	4a10      	ldr	r2, [pc, #64]	@ (8002900 <HAL_ADC_PollForConversion+0x12c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	2201      	movs	r2, #1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80028ca:	e00b      	b.n	80028e4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	2220      	movs	r2, #32
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	2201      	movs	r2, #1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	220c      	movs	r2, #12
 80028f2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	fffffefe 	.word	0xfffffefe

08002904 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	055b      	lsls	r3, r3, #21
 800293a:	429a      	cmp	r2, r3
 800293c:	d011      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x46>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d00d      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x46>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	2b02      	cmp	r3, #2
 800294c:	d009      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x46>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	2b03      	cmp	r3, #3
 8002954:	d005      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x46>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	2b04      	cmp	r3, #4
 800295c:	d001      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x46>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2234      	movs	r2, #52	@ 0x34
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x54>
 800296c:	2302      	movs	r3, #2
 800296e:	e0d0      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x1f6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2234      	movs	r2, #52	@ 0x34
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2204      	movs	r2, #4
 8002980:	4013      	ands	r3, r2
 8002982:	d000      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x6a>
 8002984:	e0b4      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a64      	ldr	r2, [pc, #400]	@ (8002b1c <HAL_ADC_ConfigChannel+0x200>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x76>
 8002990:	e082      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	055b      	lsls	r3, r3, #21
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d037      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d033      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d02f      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d02b      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d027      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d023      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	2b06      	cmp	r3, #6
 80029e2:	d01f      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	2b07      	cmp	r3, #7
 80029ea:	d01b      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2107      	movs	r1, #7
 80029f8:	400b      	ands	r3, r1
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d012      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2107      	movs	r1, #7
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d007      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0x120>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b11      	cmp	r3, #17
 8002a32:	d003      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0x120>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	d163      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a3c:	4b38      	ldr	r3, [pc, #224]	@ (8002b20 <HAL_ADC_ConfigChannel+0x204>)
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d009      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x140>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b11      	cmp	r3, #17
 8002a4e:	d102      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x13a>
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	03db      	lsls	r3, r3, #15
 8002a54:	e004      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x144>
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	045b      	lsls	r3, r3, #17
 8002a5a:	e001      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x144>
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <HAL_ADC_ConfigChannel+0x204>)
 8002a62:	430b      	orrs	r3, r1
 8002a64:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d14a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <HAL_ADC_ConfigChannel+0x208>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	492d      	ldr	r1, [pc, #180]	@ (8002b28 <HAL_ADC_ConfigChannel+0x20c>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7fd fb51 	bl	800011c <__udivsi3>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	0013      	movs	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a88:	e002      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f9      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x16e>
 8002a96:	e035      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4099      	lsls	r1, r3
 8002aa6:	000b      	movs	r3, r1
 8002aa8:	43d9      	mvns	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	400a      	ands	r2, r1
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d007      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x1ae>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b11      	cmp	r3, #17
 8002ac0:	d003      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x1ae>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d11c      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_ADC_ConfigChannel+0x204>)
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d007      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x1ca>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b11      	cmp	r3, #17
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1c6>
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_ADC_ConfigChannel+0x210>)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_ADC_ConfigChannel+0x214>)
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ae6:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_ADC_ConfigChannel+0x218>)
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <HAL_ADC_ConfigChannel+0x204>)
 8002aea:	400b      	ands	r3, r1
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e009      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	2220      	movs	r2, #32
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2234      	movs	r2, #52	@ 0x34
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	00001001 	.word	0x00001001
 8002b20:	40012708 	.word	0x40012708
 8002b24:	20000000 	.word	0x20000000
 8002b28:	000f4240 	.word	0x000f4240
 8002b2c:	ffbfffff 	.word	0xffbfffff
 8002b30:	feffffff 	.word	0xfeffffff
 8002b34:	ff7fffff 	.word	0xff7fffff

08002b38 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d112      	bne.n	8002b7c <ADC_Enable+0x44>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d009      	beq.n	8002b78 <ADC_Enable+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	401a      	ands	r2, r3
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d101      	bne.n	8002b7c <ADC_Enable+0x44>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <ADC_Enable+0x46>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d152      	bne.n	8002c28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a2a      	ldr	r2, [pc, #168]	@ (8002c34 <ADC_Enable+0xfc>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	2210      	movs	r2, #16
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e03f      	b.n	8002c2a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <ADC_Enable+0x100>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	491f      	ldr	r1, [pc, #124]	@ (8002c3c <ADC_Enable+0x104>)
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fd faab 	bl	800011c <__udivsi3>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bca:	e002      	b.n	8002bd2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bd8:	f7ff fbfa 	bl	80023d0 <HAL_GetTick>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002be0:	e01b      	b.n	8002c1a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be2:	f7ff fbf5 	bl	80023d0 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d914      	bls.n	8002c1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	2210      	movs	r2, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d1dc      	bne.n	8002be2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	80000017 	.word	0x80000017
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	000f4240 	.word	0x000f4240

08002c40 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2203      	movs	r2, #3
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d112      	bne.n	8002c80 <ADC_Disable+0x40>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d009      	beq.n	8002c7c <ADC_Disable+0x3c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	401a      	ands	r2, r3
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d101      	bne.n	8002c80 <ADC_Disable+0x40>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <ADC_Disable+0x42>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d048      	beq.n	8002d18 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d110      	bne.n	8002cb6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cac:	f7ff fb90 	bl	80023d0 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cb4:	e029      	b.n	8002d0a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	2210      	movs	r2, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e023      	b.n	8002d1a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cd2:	f7ff fb7d 	bl	80023d0 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d914      	bls.n	8002d0a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10d      	bne.n	8002d0a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d0dc      	beq.n	8002cd2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b004      	add	sp, #16
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d03a      	beq.n	8002db0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2204      	movs	r2, #4
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d10d      	bne.n	8002d64 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d52:	d107      	bne.n	8002d64 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2110      	movs	r1, #16
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d64:	f7ff fb34 	bl	80023d0 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d6c:	e01a      	b.n	8002da4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d6e:	f7ff fb2f 	bl	80023d0 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d913      	bls.n	8002da4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00d      	beq.n	8002da4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e006      	b.n	8002db2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2204      	movs	r2, #4
 8002dac:	4013      	ands	r3, r2
 8002dae:	d1de      	bne.n	8002d6e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dce:	d809      	bhi.n	8002de4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	231f      	movs	r3, #31
 8002dd8:	401a      	ands	r2, r3
 8002dda:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <__NVIC_EnableIRQ+0x30>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4091      	lsls	r1, r2
 8002de0:	000a      	movs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
  }
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e04:	d828      	bhi.n	8002e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec4 <__NVIC_SetPriority+0xd4>)
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	33c0      	adds	r3, #192	@ 0xc0
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	589b      	ldr	r3, [r3, r2]
 8002e16:	1dfa      	adds	r2, r7, #7
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	400a      	ands	r2, r1
 8002e20:	00d2      	lsls	r2, r2, #3
 8002e22:	21ff      	movs	r1, #255	@ 0xff
 8002e24:	4091      	lsls	r1, r2
 8002e26:	000a      	movs	r2, r1
 8002e28:	43d2      	mvns	r2, r2
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	22ff      	movs	r2, #255	@ 0xff
 8002e34:	401a      	ands	r2, r3
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	4003      	ands	r3, r0
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e44:	481f      	ldr	r0, [pc, #124]	@ (8002ec4 <__NVIC_SetPriority+0xd4>)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	33c0      	adds	r3, #192	@ 0xc0
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e56:	e031      	b.n	8002ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <__NVIC_SetPriority+0xd8>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	0019      	movs	r1, r3
 8002e60:	230f      	movs	r3, #15
 8002e62:	400b      	ands	r3, r1
 8002e64:	3b08      	subs	r3, #8
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3306      	adds	r3, #6
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	3304      	adds	r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1dfa      	adds	r2, r7, #7
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	0011      	movs	r1, r2
 8002e78:	2203      	movs	r2, #3
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	00d2      	lsls	r2, r2, #3
 8002e7e:	21ff      	movs	r1, #255	@ 0xff
 8002e80:	4091      	lsls	r1, r2
 8002e82:	000a      	movs	r2, r1
 8002e84:	43d2      	mvns	r2, r2
 8002e86:	401a      	ands	r2, r3
 8002e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	22ff      	movs	r2, #255	@ 0xff
 8002e90:	401a      	ands	r2, r3
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	0018      	movs	r0, r3
 8002e98:	2303      	movs	r3, #3
 8002e9a:	4003      	ands	r3, r0
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea0:	4809      	ldr	r0, [pc, #36]	@ (8002ec8 <__NVIC_SetPriority+0xd8>)
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	001c      	movs	r4, r3
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	4023      	ands	r3, r4
 8002eac:	3b08      	subs	r3, #8
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	3306      	adds	r3, #6
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	18c3      	adds	r3, r0, r3
 8002eb8:	3304      	adds	r3, #4
 8002eba:	601a      	str	r2, [r3, #0]
}
 8002ebc:	46c0      	nop			@ (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b003      	add	sp, #12
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	1c02      	adds	r2, r0, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff ff81 	bl	8002df0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	0002      	movs	r2, r0
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff ff57 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f26:	e155      	b.n	80031d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4091      	lsls	r1, r2
 8002f32:	000a      	movs	r2, r1
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <HAL_GPIO_Init+0x28>
 8002f3e:	e146      	b.n	80031ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d005      	beq.n	8002f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d130      	bne.n	8002fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	409a      	lsls	r2, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	0013      	movs	r3, r2
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8e:	2201      	movs	r2, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
 8002f94:	0013      	movs	r3, r2
 8002f96:	43da      	mvns	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d017      	beq.n	8002ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d123      	bne.n	800304a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3208      	adds	r2, #8
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	58d3      	ldr	r3, [r2, r3]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2207      	movs	r2, #7
 8003014:	4013      	ands	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	43da      	mvns	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2107      	movs	r1, #7
 800302e:	400b      	ands	r3, r1
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	6939      	ldr	r1, [r7, #16]
 8003048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	409a      	lsls	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	43da      	mvns	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	401a      	ands	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	23c0      	movs	r3, #192	@ 0xc0
 8003084:	029b      	lsls	r3, r3, #10
 8003086:	4013      	ands	r3, r2
 8003088:	d100      	bne.n	800308c <HAL_GPIO_Init+0x174>
 800308a:	e0a0      	b.n	80031ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308c:	4b57      	ldr	r3, [pc, #348]	@ (80031ec <HAL_GPIO_Init+0x2d4>)
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	4b56      	ldr	r3, [pc, #344]	@ (80031ec <HAL_GPIO_Init+0x2d4>)
 8003092:	2101      	movs	r1, #1
 8003094:	430a      	orrs	r2, r1
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	4b54      	ldr	r3, [pc, #336]	@ (80031ec <HAL_GPIO_Init+0x2d4>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030a4:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_GPIO_Init+0x2d8>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	589b      	ldr	r3, [r3, r2]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	43da      	mvns	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	2390      	movs	r3, #144	@ 0x90
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d019      	beq.n	8003106 <HAL_GPIO_Init+0x1ee>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a47      	ldr	r2, [pc, #284]	@ (80031f4 <HAL_GPIO_Init+0x2dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x1ea>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a46      	ldr	r2, [pc, #280]	@ (80031f8 <HAL_GPIO_Init+0x2e0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x1e6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <HAL_GPIO_Init+0x2e4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x1e2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a44      	ldr	r2, [pc, #272]	@ (8003200 <HAL_GPIO_Init+0x2e8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x1de>
 80030f2:	2304      	movs	r3, #4
 80030f4:	e008      	b.n	8003108 <HAL_GPIO_Init+0x1f0>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x1f0>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e004      	b.n	8003108 <HAL_GPIO_Init+0x1f0>
 80030fe:	2302      	movs	r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_Init+0x1f0>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_GPIO_Init+0x1f0>
 8003106:	2300      	movs	r3, #0
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	2103      	movs	r1, #3
 800310c:	400a      	ands	r2, r1
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4093      	lsls	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003118:	4935      	ldr	r1, [pc, #212]	@ (80031f0 <HAL_GPIO_Init+0x2d8>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003126:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43da      	mvns	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	035b      	lsls	r3, r3, #13
 800313e:	4013      	ands	r3, r2
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800314a:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003150:	4b2c      	ldr	r3, [pc, #176]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43da      	mvns	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	039b      	lsls	r3, r3, #14
 8003168:	4013      	ands	r3, r2
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003174:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800319e:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80031a4:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	4013      	ands	r3, r2
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	40da      	lsrs	r2, r3
 80031dc:	1e13      	subs	r3, r2, #0
 80031de:	d000      	beq.n	80031e2 <HAL_GPIO_Init+0x2ca>
 80031e0:	e6a2      	b.n	8002f28 <HAL_GPIO_Init+0x10>
  } 
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b006      	add	sp, #24
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48001000 	.word	0x48001000
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	0008      	movs	r0, r1
 8003212:	0011      	movs	r1, r2
 8003214:	1cbb      	adds	r3, r7, #2
 8003216:	1c02      	adds	r2, r0, #0
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	1c7b      	adds	r3, r7, #1
 800321c:	1c0a      	adds	r2, r1, #0
 800321e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003220:	1c7b      	adds	r3, r7, #1
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003232:	1cbb      	adds	r3, r7, #2
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f000 fb76 	bl	8003944 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	4013      	ands	r3, r2
 8003260:	d100      	bne.n	8003264 <HAL_RCC_OscConfig+0x20>
 8003262:	e08e      	b.n	8003382 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003264:	4bc5      	ldr	r3, [pc, #788]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	220c      	movs	r2, #12
 800326a:	4013      	ands	r3, r2
 800326c:	2b04      	cmp	r3, #4
 800326e:	d00e      	beq.n	800328e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003270:	4bc2      	ldr	r3, [pc, #776]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	220c      	movs	r2, #12
 8003276:	4013      	ands	r3, r2
 8003278:	2b08      	cmp	r3, #8
 800327a:	d117      	bne.n	80032ac <HAL_RCC_OscConfig+0x68>
 800327c:	4bbf      	ldr	r3, [pc, #764]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	23c0      	movs	r3, #192	@ 0xc0
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	401a      	ands	r2, r3
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	025b      	lsls	r3, r3, #9
 800328a:	429a      	cmp	r2, r3
 800328c:	d10e      	bne.n	80032ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328e:	4bbb      	ldr	r3, [pc, #748]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	4013      	ands	r3, r2
 8003298:	d100      	bne.n	800329c <HAL_RCC_OscConfig+0x58>
 800329a:	e071      	b.n	8003380 <HAL_RCC_OscConfig+0x13c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d000      	beq.n	80032a6 <HAL_RCC_OscConfig+0x62>
 80032a4:	e06c      	b.n	8003380 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f000 fb4c 	bl	8003944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x80>
 80032b4:	4bb1      	ldr	r3, [pc, #708]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4bb0      	ldr	r3, [pc, #704]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032ba:	2180      	movs	r1, #128	@ 0x80
 80032bc:	0249      	lsls	r1, r1, #9
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e02f      	b.n	8003324 <HAL_RCC_OscConfig+0xe0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCC_OscConfig+0xa2>
 80032cc:	4bab      	ldr	r3, [pc, #684]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4baa      	ldr	r3, [pc, #680]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032d2:	49ab      	ldr	r1, [pc, #684]	@ (8003580 <HAL_RCC_OscConfig+0x33c>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	4ba8      	ldr	r3, [pc, #672]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4ba7      	ldr	r3, [pc, #668]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032de:	49a9      	ldr	r1, [pc, #676]	@ (8003584 <HAL_RCC_OscConfig+0x340>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e01e      	b.n	8003324 <HAL_RCC_OscConfig+0xe0>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d10e      	bne.n	800330c <HAL_RCC_OscConfig+0xc8>
 80032ee:	4ba3      	ldr	r3, [pc, #652]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4ba2      	ldr	r3, [pc, #648]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032f4:	2180      	movs	r1, #128	@ 0x80
 80032f6:	02c9      	lsls	r1, r1, #11
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	4b9f      	ldr	r3, [pc, #636]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b9e      	ldr	r3, [pc, #632]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	0249      	lsls	r1, r1, #9
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xe0>
 800330c:	4b9b      	ldr	r3, [pc, #620]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b9a      	ldr	r3, [pc, #616]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003312:	499b      	ldr	r1, [pc, #620]	@ (8003580 <HAL_RCC_OscConfig+0x33c>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4b98      	ldr	r3, [pc, #608]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b97      	ldr	r3, [pc, #604]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800331e:	4999      	ldr	r1, [pc, #612]	@ (8003584 <HAL_RCC_OscConfig+0x340>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d014      	beq.n	8003356 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7ff f850 	bl	80023d0 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003336:	f7ff f84b 	bl	80023d0 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	@ 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e2fd      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003348:	4b8c      	ldr	r3, [pc, #560]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	029b      	lsls	r3, r3, #10
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0xf2>
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7ff f83b 	bl	80023d0 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7ff f836 	bl	80023d0 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e2e8      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b82      	ldr	r3, [pc, #520]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x11c>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d100      	bne.n	800338e <HAL_RCC_OscConfig+0x14a>
 800338c:	e06c      	b.n	8003468 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800338e:	4b7b      	ldr	r3, [pc, #492]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	220c      	movs	r2, #12
 8003394:	4013      	ands	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003398:	4b78      	ldr	r3, [pc, #480]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	220c      	movs	r2, #12
 800339e:	4013      	ands	r3, r2
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d11f      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1a0>
 80033a4:	4b75      	ldr	r3, [pc, #468]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	23c0      	movs	r3, #192	@ 0xc0
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	401a      	ands	r2, r3
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d116      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	4b71      	ldr	r3, [pc, #452]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	d005      	beq.n	80033cc <HAL_RCC_OscConfig+0x188>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e2bb      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b6b      	ldr	r3, [pc, #428]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	22f8      	movs	r2, #248	@ 0xf8
 80033d2:	4393      	bics	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00da      	lsls	r2, r3, #3
 80033dc:	4b67      	ldr	r3, [pc, #412]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	e041      	b.n	8003468 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d024      	beq.n	8003436 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ec:	4b63      	ldr	r3, [pc, #396]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b62      	ldr	r3, [pc, #392]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe ffea 	bl	80023d0 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003402:	f7fe ffe5 	bl	80023d0 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e297      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	4b59      	ldr	r3, [pc, #356]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	4013      	ands	r3, r2
 800341c:	d0f1      	beq.n	8003402 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b57      	ldr	r3, [pc, #348]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	22f8      	movs	r2, #248	@ 0xf8
 8003424:	4393      	bics	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00da      	lsls	r2, r3, #3
 800342e:	4b53      	ldr	r3, [pc, #332]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e018      	b.n	8003468 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b51      	ldr	r3, [pc, #324]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b50      	ldr	r3, [pc, #320]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800343c:	2101      	movs	r1, #1
 800343e:	438a      	bics	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe ffc5 	bl	80023d0 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe ffc0 	bl	80023d0 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e272      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d1f1      	bne.n	800344c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2208      	movs	r2, #8
 800346e:	4013      	ands	r3, r2
 8003470:	d036      	beq.n	80034e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b40      	ldr	r3, [pc, #256]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800347c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800347e:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fe ffa3 	bl	80023d0 <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003490:	f7fe ff9e 	bl	80023d0 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e250      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d0f1      	beq.n	8003490 <HAL_RCC_OscConfig+0x24c>
 80034ac:	e018      	b.n	80034e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ae:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80034b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b2:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	438a      	bics	r2, r1
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe ff89 	bl	80023d0 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe ff84 	bl	80023d0 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e236      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d6:	4b29      	ldr	r3, [pc, #164]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	2202      	movs	r2, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	d1f1      	bne.n	80034c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2204      	movs	r2, #4
 80034e6:	4013      	ands	r3, r2
 80034e8:	d100      	bne.n	80034ec <HAL_RCC_OscConfig+0x2a8>
 80034ea:	e0b5      	b.n	8003658 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ec:	201f      	movs	r0, #31
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f4:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	055b      	lsls	r3, r3, #21
 80034fc:	4013      	ands	r3, r2
 80034fe:	d110      	bne.n	8003522 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	0549      	lsls	r1, r1, #21
 800350a:	430a      	orrs	r2, r1
 800350c:	61da      	str	r2, [r3, #28]
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	055b      	lsls	r3, r3, #21
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800351c:	183b      	adds	r3, r7, r0
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_OscConfig+0x344>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4013      	ands	r3, r2
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b16      	ldr	r3, [pc, #88]	@ (8003588 <HAL_RCC_OscConfig+0x344>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <HAL_RCC_OscConfig+0x344>)
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	0049      	lsls	r1, r1, #1
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353c:	f7fe ff48 	bl	80023d0 <HAL_GetTick>
 8003540:	0003      	movs	r3, r0
 8003542:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe ff43 	bl	80023d0 <HAL_GetTick>
 800354a:	0002      	movs	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b64      	cmp	r3, #100	@ 0x64
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e1f5      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x344>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10f      	bne.n	800358c <HAL_RCC_OscConfig+0x348>
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	4b02      	ldr	r3, [pc, #8]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003572:	2101      	movs	r1, #1
 8003574:	430a      	orrs	r2, r1
 8003576:	621a      	str	r2, [r3, #32]
 8003578:	e036      	b.n	80035e8 <HAL_RCC_OscConfig+0x3a4>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	40021000 	.word	0x40021000
 8003580:	fffeffff 	.word	0xfffeffff
 8003584:	fffbffff 	.word	0xfffbffff
 8003588:	40007000 	.word	0x40007000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10c      	bne.n	80035ae <HAL_RCC_OscConfig+0x36a>
 8003594:	4bca      	ldr	r3, [pc, #808]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	4bc9      	ldr	r3, [pc, #804]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	621a      	str	r2, [r3, #32]
 80035a0:	4bc7      	ldr	r3, [pc, #796]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	4bc6      	ldr	r3, [pc, #792]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035a6:	2104      	movs	r1, #4
 80035a8:	438a      	bics	r2, r1
 80035aa:	621a      	str	r2, [r3, #32]
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x3a4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x38c>
 80035b6:	4bc2      	ldr	r3, [pc, #776]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	4bc1      	ldr	r3, [pc, #772]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035bc:	2104      	movs	r1, #4
 80035be:	430a      	orrs	r2, r1
 80035c0:	621a      	str	r2, [r3, #32]
 80035c2:	4bbf      	ldr	r3, [pc, #764]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	4bbe      	ldr	r3, [pc, #760]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	621a      	str	r2, [r3, #32]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x3a4>
 80035d0:	4bbb      	ldr	r3, [pc, #748]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	4bba      	ldr	r3, [pc, #744]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	438a      	bics	r2, r1
 80035da:	621a      	str	r2, [r3, #32]
 80035dc:	4bb8      	ldr	r3, [pc, #736]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	4bb7      	ldr	r3, [pc, #732]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80035e2:	2104      	movs	r1, #4
 80035e4:	438a      	bics	r2, r1
 80035e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d014      	beq.n	800361a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fe feee 	bl	80023d0 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e009      	b.n	800360e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fee9 	bl	80023d0 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	4aaf      	ldr	r2, [pc, #700]	@ (80038c4 <HAL_RCC_OscConfig+0x680>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e19a      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4bac      	ldr	r3, [pc, #688]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	2202      	movs	r2, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x3b6>
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fed9 	bl	80023d0 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e009      	b.n	8003638 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fed4 	bl	80023d0 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	4aa5      	ldr	r2, [pc, #660]	@ (80038c4 <HAL_RCC_OscConfig+0x680>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e185      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	4ba1      	ldr	r3, [pc, #644]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	2202      	movs	r2, #2
 800363e:	4013      	ands	r3, r2
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003642:	231f      	movs	r3, #31
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b9c      	ldr	r3, [pc, #624]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	4b9b      	ldr	r3, [pc, #620]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003652:	499d      	ldr	r1, [pc, #628]	@ (80038c8 <HAL_RCC_OscConfig+0x684>)
 8003654:	400a      	ands	r2, r1
 8003656:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	4013      	ands	r3, r2
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d12a      	bne.n	80036c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800366a:	4b95      	ldr	r3, [pc, #596]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800366c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800366e:	4b94      	ldr	r3, [pc, #592]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003670:	2104      	movs	r1, #4
 8003672:	430a      	orrs	r2, r1
 8003674:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003676:	4b92      	ldr	r3, [pc, #584]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367a:	4b91      	ldr	r3, [pc, #580]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003682:	f7fe fea5 	bl	80023d0 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800368c:	f7fe fea0 	bl	80023d0 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e152      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800369e:	4b88      	ldr	r3, [pc, #544]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	d0f1      	beq.n	800368c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036a8:	4b85      	ldr	r3, [pc, #532]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ac:	22f8      	movs	r2, #248	@ 0xf8
 80036ae:	4393      	bics	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	00da      	lsls	r2, r3, #3
 80036b8:	4b81      	ldr	r3, [pc, #516]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80036be:	e034      	b.n	800372a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	3305      	adds	r3, #5
 80036c6:	d111      	bne.n	80036ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036c8:	4b7d      	ldr	r3, [pc, #500]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036cc:	4b7c      	ldr	r3, [pc, #496]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036ce:	2104      	movs	r1, #4
 80036d0:	438a      	bics	r2, r1
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036d4:	4b7a      	ldr	r3, [pc, #488]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	22f8      	movs	r2, #248	@ 0xf8
 80036da:	4393      	bics	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	00da      	lsls	r2, r3, #3
 80036e4:	4b76      	ldr	r3, [pc, #472]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ea:	e01e      	b.n	800372a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036ec:	4b74      	ldr	r3, [pc, #464]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f0:	4b73      	ldr	r3, [pc, #460]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036f2:	2104      	movs	r1, #4
 80036f4:	430a      	orrs	r2, r1
 80036f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80036f8:	4b71      	ldr	r3, [pc, #452]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036fc:	4b70      	ldr	r3, [pc, #448]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fe64 	bl	80023d0 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800370e:	f7fe fe5f 	bl	80023d0 <HAL_GetTick>
 8003712:	0002      	movs	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e111      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003720:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d1f1      	bne.n	800370e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	d05c      	beq.n	80037ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003734:	4b62      	ldr	r3, [pc, #392]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	220c      	movs	r2, #12
 800373a:	4013      	ands	r3, r2
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d00e      	beq.n	800375e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003740:	4b5f      	ldr	r3, [pc, #380]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	220c      	movs	r2, #12
 8003746:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003748:	2b08      	cmp	r3, #8
 800374a:	d114      	bne.n	8003776 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800374c:	4b5c      	ldr	r3, [pc, #368]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	23c0      	movs	r3, #192	@ 0xc0
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	401a      	ands	r2, r3
 8003756:	23c0      	movs	r3, #192	@ 0xc0
 8003758:	025b      	lsls	r3, r3, #9
 800375a:	429a      	cmp	r2, r3
 800375c:	d10b      	bne.n	8003776 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800375e:	4b58      	ldr	r3, [pc, #352]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	4013      	ands	r3, r2
 8003768:	d040      	beq.n	80037ec <HAL_RCC_OscConfig+0x5a8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d03c      	beq.n	80037ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0e6      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800377e:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003782:	4b4f      	ldr	r3, [pc, #316]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003784:	2180      	movs	r1, #128	@ 0x80
 8003786:	0249      	lsls	r1, r1, #9
 8003788:	430a      	orrs	r2, r1
 800378a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fe20 	bl	80023d0 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003796:	f7fe fe1b 	bl	80023d0 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0cd      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80037a8:	4b45      	ldr	r3, [pc, #276]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80037aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ac:	2380      	movs	r3, #128	@ 0x80
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	4013      	ands	r3, r2
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x552>
 80037b4:	e01b      	b.n	80037ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037b6:	4b42      	ldr	r3, [pc, #264]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80037b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ba:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80037bc:	4943      	ldr	r1, [pc, #268]	@ (80038cc <HAL_RCC_OscConfig+0x688>)
 80037be:	400a      	ands	r2, r1
 80037c0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fe fe05 	bl	80023d0 <HAL_GetTick>
 80037c6:	0003      	movs	r3, r0
 80037c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037cc:	f7fe fe00 	bl	80023d0 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0b2      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037de:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80037e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4013      	ands	r3, r2
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x588>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80037ec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d100      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5b4>
 80037f6:	e0a4      	b.n	8003942 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f8:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	220c      	movs	r2, #12
 80037fe:	4013      	ands	r3, r2
 8003800:	2b08      	cmp	r3, #8
 8003802:	d100      	bne.n	8003806 <HAL_RCC_OscConfig+0x5c2>
 8003804:	e078      	b.n	80038f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	2b02      	cmp	r3, #2
 800380c:	d14c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003814:	492e      	ldr	r1, [pc, #184]	@ (80038d0 <HAL_RCC_OscConfig+0x68c>)
 8003816:	400a      	ands	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fe fdd9 	bl	80023d0 <HAL_GetTick>
 800381e:	0003      	movs	r3, r0
 8003820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fdd4 	bl	80023d0 <HAL_GetTick>
 8003828:	0002      	movs	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e086      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	4b22      	ldr	r3, [pc, #136]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	2380      	movs	r3, #128	@ 0x80
 800383c:	049b      	lsls	r3, r3, #18
 800383e:	4013      	ands	r3, r2
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003842:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	220f      	movs	r2, #15
 8003848:	4393      	bics	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003852:	430a      	orrs	r2, r1
 8003854:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003856:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_RCC_OscConfig+0x690>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	431a      	orrs	r2, r3
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	0449      	lsls	r1, r1, #17
 800387a:	430a      	orrs	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fe fda7 	bl	80023d0 <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fda2 	bl	80023d0 <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e054      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800389a:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	049b      	lsls	r3, r3, #18
 80038a2:	4013      	ands	r3, r2
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x644>
 80038a6:	e04c      	b.n	8003942 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_RCC_OscConfig+0x67c>)
 80038ae:	4908      	ldr	r1, [pc, #32]	@ (80038d0 <HAL_RCC_OscConfig+0x68c>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fd8c 	bl	80023d0 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x6a6>
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	40021000 	.word	0x40021000
 80038c4:	00001388 	.word	0x00001388
 80038c8:	efffffff 	.word	0xefffffff
 80038cc:	fffeffff 	.word	0xfffeffff
 80038d0:	feffffff 	.word	0xfeffffff
 80038d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe fd7a 	bl	80023d0 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e02c      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_RCC_OscConfig+0x708>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	049b      	lsls	r3, r3, #18
 80038f2:	4013      	ands	r3, r2
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x694>
 80038f6:	e024      	b.n	8003942 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e01f      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <HAL_RCC_OscConfig+0x708>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_RCC_OscConfig+0x708>)
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	23c0      	movs	r3, #192	@ 0xc0
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	401a      	ands	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	429a      	cmp	r2, r3
 800391e:	d10e      	bne.n	800393e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	220f      	movs	r2, #15
 8003924:	401a      	ands	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d107      	bne.n	800393e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	23f0      	movs	r3, #240	@ 0xf0
 8003932:	039b      	lsls	r3, r3, #14
 8003934:	401a      	ands	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b008      	add	sp, #32
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000

08003950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0bf      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b61      	ldr	r3, [pc, #388]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d911      	bls.n	8003996 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b5e      	ldr	r3, [pc, #376]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4393      	bics	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003984:	4b59      	ldr	r3, [pc, #356]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	4013      	ands	r3, r2
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0a6      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	d015      	beq.n	80039cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d006      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039aa:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039b0:	21e0      	movs	r1, #224	@ 0xe0
 80039b2:	00c9      	lsls	r1, r1, #3
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	22f0      	movs	r2, #240	@ 0xf0
 80039be:	4393      	bics	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	d04c      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b44      	ldr	r3, [pc, #272]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	4013      	ands	r3, r2
 80039e8:	d120      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e07a      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f6:	4b3e      	ldr	r3, [pc, #248]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	049b      	lsls	r3, r3, #18
 80039fe:	4013      	ands	r3, r2
 8003a00:	d114      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06e      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a0e:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	4013      	ands	r3, r2
 8003a18:	d108      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e062      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	4b34      	ldr	r3, [pc, #208]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e05b      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2c:	4b30      	ldr	r3, [pc, #192]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4393      	bics	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a40:	f7fe fcc6 	bl	80023d0 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a48:	e009      	b.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4a:	f7fe fcc1 	bl	80023d0 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_RCC_ClockConfig+0x1a4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e042      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	220c      	movs	r2, #12
 8003a64:	401a      	ands	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1ec      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4013      	ands	r3, r2
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d211      	bcs.n	8003aa2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2201      	movs	r2, #1
 8003a84:	4393      	bics	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a90:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <HAL_RCC_ClockConfig+0x19c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e020      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a11      	ldr	r2, [pc, #68]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a8>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ac0:	f000 f820 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac4:	0001      	movs	r1, r0
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	220f      	movs	r2, #15
 8003ace:	4013      	ands	r3, r2
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_RCC_ClockConfig+0x1ac>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	000a      	movs	r2, r1
 8003ad6:	40da      	lsrs	r2, r3
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_ClockConfig+0x1b0>)
 8003ada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003adc:	2003      	movs	r0, #3
 8003ade:	f7fc fdc5 	bl	800066c <HAL_InitTick>
  
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	00001388 	.word	0x00001388
 8003af8:	fffff8ff 	.word	0xfffff8ff
 8003afc:	080081fc 	.word	0x080081fc
 8003b00:	20000000 	.word	0x20000000

08003b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	220c      	movs	r2, #12
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d046      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0xb8>
 8003b2e:	d848      	bhi.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d002      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x36>
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d003      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x3c>
 8003b38:	e043      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b3c:	613b      	str	r3, [r7, #16]
      break;
 8003b3e:	e043      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0c9b      	lsrs	r3, r3, #18
 8003b44:	220f      	movs	r2, #15
 8003b46:	4013      	ands	r3, r2
 8003b48:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	220f      	movs	r2, #15
 8003b54:	4013      	ands	r3, r2
 8003b56:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	23c0      	movs	r3, #192	@ 0xc0
 8003b60:	025b      	lsls	r3, r3, #9
 8003b62:	401a      	ands	r2, r3
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	481a      	ldr	r0, [pc, #104]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b70:	f7fc fad4 	bl	800011c <__udivsi3>
 8003b74:	0003      	movs	r3, r0
 8003b76:	001a      	movs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4353      	muls	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e01a      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	23c0      	movs	r3, #192	@ 0xc0
 8003b84:	025b      	lsls	r3, r3, #9
 8003b86:	401a      	ands	r2, r3
 8003b88:	23c0      	movs	r3, #192	@ 0xc0
 8003b8a:	025b      	lsls	r3, r3, #9
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4814      	ldr	r0, [pc, #80]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003b94:	f7fc fac2 	bl	800011c <__udivsi3>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4353      	muls	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	480c      	ldr	r0, [pc, #48]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ba8:	f7fc fab8 	bl	800011c <__udivsi3>
 8003bac:	0003      	movs	r3, r0
 8003bae:	001a      	movs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4353      	muls	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	613b      	str	r3, [r7, #16]
      break;
 8003bba:	e005      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003bbe:	613b      	str	r3, [r7, #16]
      break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bc2:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bc4:	613b      	str	r3, [r7, #16]
      break;
 8003bc6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003bc8:	693b      	ldr	r3, [r7, #16]
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b006      	add	sp, #24
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	007a1200 	.word	0x007a1200
 8003bdc:	08008c84 	.word	0x08008c84
 8003be0:	08008c94 	.word	0x08008c94
 8003be4:	02dc6c00 	.word	0x02dc6c00

08003be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b02      	ldr	r3, [pc, #8]	@ (8003bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	20000000 	.word	0x20000000

08003bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003c00:	f7ff fff2 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c04:	0001      	movs	r1, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	2207      	movs	r2, #7
 8003c0e:	4013      	ands	r3, r2
 8003c10:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	40d9      	lsrs	r1, r3
 8003c16:	000b      	movs	r3, r1
}    
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800820c 	.word	0x0800820c

08003c28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2207      	movs	r2, #7
 8003c36:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <HAL_RCC_GetClockConfig+0x4c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_GetClockConfig+0x4c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	22f0      	movs	r2, #240	@ 0xf0
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <HAL_RCC_GetClockConfig+0x4c>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	23e0      	movs	r3, #224	@ 0xe0
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	401a      	ands	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_GetClockConfig+0x50>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	401a      	ands	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40022000 	.word	0x40022000

08003c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	4013      	ands	r3, r2
 8003c96:	d100      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003c98:	e08e      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2017      	movs	r0, #23
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	2380      	movs	r3, #128	@ 0x80
 8003ca8:	055b      	lsls	r3, r3, #21
 8003caa:	4013      	ands	r3, r2
 8003cac:	d110      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b6b      	ldr	r3, [pc, #428]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cb4:	2180      	movs	r1, #128	@ 0x80
 8003cb6:	0549      	lsls	r1, r1, #21
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]
 8003cbc:	4b67      	ldr	r3, [pc, #412]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	055b      	lsls	r3, r3, #21
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d11a      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cdc:	4b60      	ldr	r3, [pc, #384]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ce2:	2180      	movs	r1, #128	@ 0x80
 8003ce4:	0049      	lsls	r1, r1, #1
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fb71 	bl	80023d0 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	e008      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fe fb6c 	bl	80023d0 <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	@ 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0a6      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b56      	ldr	r3, [pc, #344]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d12:	4b52      	ldr	r3, [pc, #328]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	23c0      	movs	r3, #192	@ 0xc0
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d034      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	23c0      	movs	r3, #192	@ 0xc0
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d02c      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d34:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	4b46      	ldr	r3, [pc, #280]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d44:	2180      	movs	r1, #128	@ 0x80
 8003d46:	0249      	lsls	r1, r1, #9
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4c:	4b43      	ldr	r3, [pc, #268]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	4b42      	ldr	r3, [pc, #264]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d52:	4945      	ldr	r1, [pc, #276]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d58:	4b40      	ldr	r3, [pc, #256]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fb33 	bl	80023d0 <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe fb2e 	bl	80023d0 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e067      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	4b33      	ldr	r3, [pc, #204]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a34      	ldr	r2, [pc, #208]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	0019      	movs	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003da2:	2317      	movs	r3, #23
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dac:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003db2:	492f      	ldr	r1, [pc, #188]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc2:	4b26      	ldr	r3, [pc, #152]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	4393      	bics	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	4b22      	ldr	r3, [pc, #136]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	4a23      	ldr	r2, [pc, #140]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003df0:	430a      	orrs	r2, r1
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	02db      	lsls	r3, r3, #11
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	2210      	movs	r2, #16
 8003e24:	4393      	bics	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	2240      	movs	r2, #64	@ 0x40
 8003e44:	4393      	bics	r3, r2
 8003e46:	0019      	movs	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b006      	add	sp, #24
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	fffffcff 	.word	0xfffffcff
 8003e68:	fffeffff 	.word	0xfffeffff
 8003e6c:	00001388 	.word	0x00001388
 8003e70:	efffffff 	.word	0xefffffff
 8003e74:	fffcffff 	.word	0xfffcffff
 8003e78:	fff3ffff 	.word	0xfff3ffff

08003e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0a8      	b.n	8003fe0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	2382      	movs	r3, #130	@ 0x82
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d009      	beq.n	8003eb6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	61da      	str	r2, [r3, #28]
 8003ea8:	e005      	b.n	8003eb6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	225d      	movs	r2, #93	@ 0x5d
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	225c      	movs	r2, #92	@ 0x5c
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fc fb32 	bl	800053c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	225d      	movs	r2, #93	@ 0x5d
 8003edc:	2102      	movs	r1, #2
 8003ede:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2140      	movs	r1, #64	@ 0x40
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	23e0      	movs	r3, #224	@ 0xe0
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d902      	bls.n	8003f02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e002      	b.n	8003f08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	015b      	lsls	r3, r3, #5
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	23f0      	movs	r3, #240	@ 0xf0
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d008      	beq.n	8003f26 <HAL_SPI_Init+0xaa>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	23e0      	movs	r3, #224	@ 0xe0
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	2382      	movs	r3, #130	@ 0x82
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	2384      	movs	r3, #132	@ 0x84
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	400b      	ands	r3, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2102      	movs	r1, #2
 8003f42:	400b      	ands	r3, r1
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6999      	ldr	r1, [r3, #24]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	400b      	ands	r3, r1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2138      	movs	r1, #56	@ 0x38
 8003f62:	400b      	ands	r3, r1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2180      	movs	r1, #128	@ 0x80
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	0011      	movs	r1, r2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	2110      	movs	r1, #16
 8003f94:	400b      	ands	r3, r1
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	23f0      	movs	r3, #240	@ 0xf0
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	400b      	ands	r3, r1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	0011      	movs	r1, r2
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	015b      	lsls	r3, r3, #5
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <HAL_SPI_Init+0x16c>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	225d      	movs	r2, #93	@ 0x5d
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b004      	add	sp, #16
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	fffff7ff 	.word	0xfffff7ff

08003fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	1dbb      	adds	r3, r7, #6
 8003ffa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	225c      	movs	r2, #92	@ 0x5c
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_SPI_Transmit+0x26>
 800400e:	2302      	movs	r3, #2
 8004010:	e147      	b.n	80042a2 <HAL_SPI_Transmit+0x2b6>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	225c      	movs	r2, #92	@ 0x5c
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401a:	f7fe f9d9 	bl	80023d0 <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004022:	2316      	movs	r3, #22
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	1dba      	adds	r2, r7, #6
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	225d      	movs	r2, #93	@ 0x5d
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d004      	beq.n	8004042 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004038:	231f      	movs	r3, #31
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2202      	movs	r2, #2
 800403e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004040:	e128      	b.n	8004294 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_SPI_Transmit+0x64>
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004050:	231f      	movs	r3, #31
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
    goto error;
 8004058:	e11c      	b.n	8004294 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	225d      	movs	r2, #93	@ 0x5d
 800405e:	2103      	movs	r1, #3
 8004060:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1dba      	adds	r2, r7, #6
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1dba      	adds	r2, r7, #6
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2244      	movs	r2, #68	@ 0x44
 8004088:	2100      	movs	r1, #0
 800408a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2246      	movs	r2, #70	@ 0x46
 8004090:	2100      	movs	r1, #0
 8004092:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	2380      	movs	r3, #128	@ 0x80
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d110      	bne.n	80040ce <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2140      	movs	r1, #64	@ 0x40
 80040b8:	438a      	bics	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	01c9      	lsls	r1, r1, #7
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2240      	movs	r2, #64	@ 0x40
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d007      	beq.n	80040ec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2140      	movs	r1, #64	@ 0x40
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	23e0      	movs	r3, #224	@ 0xe0
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d952      	bls.n	800419e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_SPI_Transmit+0x11e>
 8004100:	2316      	movs	r3, #22
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d143      	bne.n	8004192 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800412e:	e030      	b.n	8004192 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2202      	movs	r2, #2
 8004138:	4013      	ands	r3, r2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d112      	bne.n	8004164 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004162:	e016      	b.n	8004192 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004164:	f7fe f934 	bl	80023d0 <HAL_GetTick>
 8004168:	0002      	movs	r2, r0
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d802      	bhi.n	800417a <HAL_SPI_Transmit+0x18e>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_SPI_Transmit+0x194>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2203      	movs	r2, #3
 8004186:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	225d      	movs	r2, #93	@ 0x5d
 800418c:	2101      	movs	r1, #1
 800418e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004190:	e080      	b.n	8004294 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1c9      	bne.n	8004130 <HAL_SPI_Transmit+0x144>
 800419c:	e053      	b.n	8004246 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_SPI_Transmit+0x1c4>
 80041a6:	2316      	movs	r3, #22
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d145      	bne.n	800423c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80041d6:	e031      	b.n	800423c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2202      	movs	r2, #2
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d113      	bne.n	800420e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800420c:	e016      	b.n	800423c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fe f8df 	bl	80023d0 <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d802      	bhi.n	8004224 <HAL_SPI_Transmit+0x238>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_SPI_Transmit+0x23e>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800422a:	231f      	movs	r3, #31
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2203      	movs	r2, #3
 8004230:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	225d      	movs	r2, #93	@ 0x5d
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]
          goto error;
 800423a:	e02b      	b.n	8004294 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1c8      	bne.n	80041d8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f95d 	bl	800450c <SPI_EndRxTxTransaction>
 8004252:	1e03      	subs	r3, r0, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004282:	231f      	movs	r3, #31
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e003      	b.n	8004294 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	225d      	movs	r2, #93	@ 0x5d
 8004290:	2101      	movs	r1, #1
 8004292:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	225c      	movs	r2, #92	@ 0x5c
 8004298:	2100      	movs	r1, #0
 800429a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800429c:	231f      	movs	r3, #31
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b008      	add	sp, #32
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042bc:	f7fe f888 	bl	80023d0 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042cc:	f7fe f880 	bl	80023d0 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042d4:	4b3a      	ldr	r3, [pc, #232]	@ (80043c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	015b      	lsls	r3, r3, #5
 80042da:	0d1b      	lsrs	r3, r3, #20
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	4353      	muls	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	e058      	b.n	8004396 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	d055      	beq.n	8004396 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042ea:	f7fe f871 	bl	80023d0 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d902      	bls.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d142      	bne.n	8004386 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	21e0      	movs	r1, #224	@ 0xe0
 800430c:	438a      	bics	r2, r1
 800430e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2382      	movs	r3, #130	@ 0x82
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	429a      	cmp	r2, r3
 800431a:	d113      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x98>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	429a      	cmp	r2, r3
 8004326:	d005      	beq.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	429a      	cmp	r2, r3
 8004332:	d107      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2140      	movs	r1, #64	@ 0x40
 8004340:	438a      	bics	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004348:	2380      	movs	r3, #128	@ 0x80
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	429a      	cmp	r2, r3
 800434e:	d110      	bne.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	491a      	ldr	r1, [pc, #104]	@ (80043c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800435c:	400a      	ands	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	0189      	lsls	r1, r1, #6
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	225d      	movs	r2, #93	@ 0x5d
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	225c      	movs	r2, #92	@ 0x5c
 800437e:	2100      	movs	r1, #0
 8004380:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e017      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3b01      	subs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	425a      	negs	r2, r3
 80043a6:	4153      	adcs	r3, r2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	001a      	movs	r2, r3
 80043ac:	1dfb      	adds	r3, r7, #7
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d197      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	0018      	movs	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b008      	add	sp, #32
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	20000000 	.word	0x20000000
 80043c4:	ffffdfff 	.word	0xffffdfff

080043c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043d6:	2317      	movs	r3, #23
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043de:	f7fd fff7 	bl	80023d0 <HAL_GetTick>
 80043e2:	0002      	movs	r2, r0
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ee:	f7fd ffef 	bl	80023d0 <HAL_GetTick>
 80043f2:	0003      	movs	r3, r0
 80043f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043fe:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	0013      	movs	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	189b      	adds	r3, r3, r2
 8004408:	00da      	lsls	r2, r3, #3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	0d1b      	lsrs	r3, r3, #20
 800440e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004410:	4353      	muls	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004414:	e068      	b.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	23c0      	movs	r3, #192	@ 0xc0
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	429a      	cmp	r2, r3
 800441e:	d10a      	bne.n	8004436 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	2117      	movs	r1, #23
 800442e:	187b      	adds	r3, r7, r1
 8004430:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004432:	187b      	adds	r3, r7, r1
 8004434:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	d055      	beq.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800443c:	f7fd ffc8 	bl	80023d0 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004448:	429a      	cmp	r2, r3
 800444a:	d902      	bls.n	8004452 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d142      	bne.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	21e0      	movs	r1, #224	@ 0xe0
 800445e:	438a      	bics	r2, r1
 8004460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	2382      	movs	r3, #130	@ 0x82
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	429a      	cmp	r2, r3
 800446c:	d113      	bne.n	8004496 <SPI_WaitFifoStateUntilTimeout+0xce>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	429a      	cmp	r2, r3
 8004478:	d005      	beq.n	8004486 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	429a      	cmp	r2, r3
 8004484:	d107      	bne.n	8004496 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	438a      	bics	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	429a      	cmp	r2, r3
 80044a0:	d110      	bne.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4916      	ldr	r1, [pc, #88]	@ (8004508 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2180      	movs	r1, #128	@ 0x80
 80044be:	0189      	lsls	r1, r1, #6
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	225d      	movs	r2, #93	@ 0x5d
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	225c      	movs	r2, #92	@ 0x5c
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e010      	b.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d18e      	bne.n	8004416 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b00a      	add	sp, #40	@ 0x28
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	20000000 	.word	0x20000000
 8004508:	ffffdfff 	.word	0xffffdfff

0800450c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	23c0      	movs	r3, #192	@ 0xc0
 800451c:	0159      	lsls	r1, r3, #5
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	0013      	movs	r3, r2
 8004526:	2200      	movs	r2, #0
 8004528:	f7ff ff4e 	bl	80043c8 <SPI_WaitFifoStateUntilTimeout>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d007      	beq.n	8004540 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	2220      	movs	r2, #32
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e027      	b.n	8004590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	0013      	movs	r3, r2
 800454a:	2200      	movs	r2, #0
 800454c:	2180      	movs	r1, #128	@ 0x80
 800454e:	f7ff fead 	bl	80042ac <SPI_WaitFlagStateUntilTimeout>
 8004552:	1e03      	subs	r3, r0, #0
 8004554:	d007      	beq.n	8004566 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455a:	2220      	movs	r2, #32
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e014      	b.n	8004590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	23c0      	movs	r3, #192	@ 0xc0
 800456a:	00d9      	lsls	r1, r3, #3
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	0013      	movs	r3, r2
 8004574:	2200      	movs	r2, #0
 8004576:	f7ff ff27 	bl	80043c8 <SPI_WaitFifoStateUntilTimeout>
 800457a:	1e03      	subs	r3, r0, #0
 800457c:	d007      	beq.n	800458e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	2220      	movs	r2, #32
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e000      	b.n	8004590 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e042      	b.n	8004630 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	223d      	movs	r2, #61	@ 0x3d
 80045ae:	5c9b      	ldrb	r3, [r3, r2]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	223c      	movs	r2, #60	@ 0x3c
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f839 	bl	8004638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	223d      	movs	r2, #61	@ 0x3d
 80045ca:	2102      	movs	r1, #2
 80045cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	0019      	movs	r1, r3
 80045d8:	0010      	movs	r0, r2
 80045da:	f000 f995 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2246      	movs	r2, #70	@ 0x46
 80045e2:	2101      	movs	r1, #1
 80045e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	223e      	movs	r2, #62	@ 0x3e
 80045ea:	2101      	movs	r1, #1
 80045ec:	5499      	strb	r1, [r3, r2]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	223f      	movs	r2, #63	@ 0x3f
 80045f2:	2101      	movs	r1, #1
 80045f4:	5499      	strb	r1, [r3, r2]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2240      	movs	r2, #64	@ 0x40
 80045fa:	2101      	movs	r1, #1
 80045fc:	5499      	strb	r1, [r3, r2]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2241      	movs	r2, #65	@ 0x41
 8004602:	2101      	movs	r1, #1
 8004604:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2242      	movs	r2, #66	@ 0x42
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2243      	movs	r2, #67	@ 0x43
 8004612:	2101      	movs	r1, #1
 8004614:	5499      	strb	r1, [r3, r2]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2244      	movs	r2, #68	@ 0x44
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2245      	movs	r2, #69	@ 0x45
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	223d      	movs	r2, #61	@ 0x3d
 800462a:	2101      	movs	r1, #1
 800462c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b002      	add	sp, #8
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	223d      	movs	r2, #61	@ 0x3d
 8004654:	5c9b      	ldrb	r3, [r3, r2]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e03b      	b.n	80046d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	223d      	movs	r2, #61	@ 0x3d
 8004664:	2102      	movs	r1, #2
 8004666:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2101      	movs	r1, #1
 8004674:	430a      	orrs	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <HAL_TIM_Base_Start_IT+0x98>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00f      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0x5a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	429a      	cmp	r2, r3
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0x5a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0x5a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a12      	ldr	r2, [pc, #72]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d111      	bne.n	80046c6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2207      	movs	r2, #7
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d010      	beq.n	80046d6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2101      	movs	r1, #1
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c4:	e007      	b.n	80046d6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	430a      	orrs	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40014000 	.word	0x40014000

080046ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	d021      	beq.n	8004750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2202      	movs	r2, #2
 8004710:	4013      	ands	r3, r2
 8004712:	d01d      	beq.n	8004750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2203      	movs	r2, #3
 800471a:	4252      	negs	r2, r2
 800471c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2203      	movs	r2, #3
 800472c:	4013      	ands	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 f8d0 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004738:	e007      	b.n	800474a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f8c3 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f8cf 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2204      	movs	r2, #4
 8004754:	4013      	ands	r3, r2
 8004756:	d022      	beq.n	800479e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2204      	movs	r2, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d01e      	beq.n	800479e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2205      	movs	r2, #5
 8004766:	4252      	negs	r2, r2
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	23c0      	movs	r3, #192	@ 0xc0
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4013      	ands	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f8a9 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004786:	e007      	b.n	8004798 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 f89c 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f8a8 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2208      	movs	r2, #8
 80047a2:	4013      	ands	r3, r2
 80047a4:	d021      	beq.n	80047ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2208      	movs	r2, #8
 80047aa:	4013      	ands	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2209      	movs	r2, #9
 80047b4:	4252      	negs	r2, r2
 80047b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2203      	movs	r2, #3
 80047c6:	4013      	ands	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f883 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 80047d2:	e007      	b.n	80047e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 f876 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f882 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2210      	movs	r2, #16
 80047ee:	4013      	ands	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4013      	ands	r3, r2
 80047f8:	d01e      	beq.n	8004838 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2211      	movs	r2, #17
 8004800:	4252      	negs	r2, r2
 8004802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2208      	movs	r2, #8
 8004808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	23c0      	movs	r3, #192	@ 0xc0
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4013      	ands	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 f85c 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004820:	e007      	b.n	8004832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f000 f84f 	bl	80048c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f85b 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d00c      	beq.n	800485a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d008      	beq.n	800485a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	4252      	negs	r2, r2
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7fd fd47 	bl	80022e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2280      	movs	r2, #128	@ 0x80
 800485e:	4013      	ands	r3, r2
 8004860:	d00c      	beq.n	800487c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2280      	movs	r2, #128	@ 0x80
 8004866:	4013      	ands	r3, r2
 8004868:	d008      	beq.n	800487c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2281      	movs	r2, #129	@ 0x81
 8004870:	4252      	negs	r2, r2
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0018      	movs	r0, r3
 8004878:	f000 f8dc 	bl	8004a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	4013      	ands	r3, r2
 8004882:	d00c      	beq.n	800489e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	@ 0x40
 8004888:	4013      	ands	r3, r2
 800488a:	d008      	beq.n	800489e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2241      	movs	r2, #65	@ 0x41
 8004892:	4252      	negs	r2, r2
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f82d 	bl	80048f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2220      	movs	r2, #32
 80048a2:	4013      	ands	r3, r2
 80048a4:	d00c      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	4013      	ands	r3, r2
 80048ac:	d008      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2221      	movs	r2, #33	@ 0x21
 80048b4:	4252      	negs	r2, r2
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 f8b2 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a08 <TIM_Base_SetConfig+0x100>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d008      	beq.n	8004932 <TIM_Base_SetConfig+0x2a>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	05db      	lsls	r3, r3, #23
 8004926:	429a      	cmp	r2, r3
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x2a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a37      	ldr	r2, [pc, #220]	@ (8004a0c <TIM_Base_SetConfig+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2270      	movs	r2, #112	@ 0x70
 8004936:	4393      	bics	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <TIM_Base_SetConfig+0x100>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	05db      	lsls	r3, r3, #23
 8004952:	429a      	cmp	r2, r3
 8004954:	d013      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2c      	ldr	r2, [pc, #176]	@ (8004a0c <TIM_Base_SetConfig+0x104>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2b      	ldr	r2, [pc, #172]	@ (8004a10 <TIM_Base_SetConfig+0x108>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2a      	ldr	r2, [pc, #168]	@ (8004a14 <TIM_Base_SetConfig+0x10c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <TIM_Base_SetConfig+0x110>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0x76>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <TIM_Base_SetConfig+0x114>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <TIM_Base_SetConfig+0x118>)
 8004982:	4013      	ands	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2280      	movs	r2, #128	@ 0x80
 8004994:	4393      	bics	r3, r2
 8004996:	001a      	movs	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	@ (8004a08 <TIM_Base_SetConfig+0x100>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a14      	ldr	r2, [pc, #80]	@ (8004a14 <TIM_Base_SetConfig+0x10c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <TIM_Base_SetConfig+0x110>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0xce>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <TIM_Base_SetConfig+0x114>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d103      	bne.n	80049de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2201      	movs	r2, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4393      	bics	r3, r2
 80049f8:	001a      	movs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]
  }
}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b004      	add	sp, #16
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40002000 	.word	0x40002000
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	fffffcff 	.word	0xfffffcff

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b002      	add	sp, #8
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3c:	46c0      	nop			@ (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e044      	b.n	8004ae0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2278      	movs	r2, #120	@ 0x78
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7fb fdb3 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2224      	movs	r2, #36	@ 0x24
 8004a72:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fa14 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f828 	bl	8004aec <UART_SetConfig>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e01c      	b.n	8004ae0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	490d      	ldr	r1, [pc, #52]	@ (8004ae8 <HAL_UART_Init+0xa4>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	212a      	movs	r1, #42	@ 0x2a
 8004ac2:	438a      	bics	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 faa3 	bl	8005024 <UART_CheckIdleState>
 8004ade:	0003      	movs	r3, r0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	ffffb7ff 	.word	0xffffb7ff

08004aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af4:	231e      	movs	r3, #30
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4abe      	ldr	r2, [pc, #760]	@ (8004e14 <UART_SetConfig+0x328>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4ab9      	ldr	r2, [pc, #740]	@ (8004e18 <UART_SetConfig+0x32c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4ab0      	ldr	r2, [pc, #704]	@ (8004e1c <UART_SetConfig+0x330>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4aac      	ldr	r2, [pc, #688]	@ (8004e20 <UART_SetConfig+0x334>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d127      	bne.n	8004bc2 <UART_SetConfig+0xd6>
 8004b72:	4bac      	ldr	r3, [pc, #688]	@ (8004e24 <UART_SetConfig+0x338>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	2203      	movs	r2, #3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d00d      	beq.n	8004b9a <UART_SetConfig+0xae>
 8004b7e:	d81b      	bhi.n	8004bb8 <UART_SetConfig+0xcc>
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d014      	beq.n	8004bae <UART_SetConfig+0xc2>
 8004b84:	d818      	bhi.n	8004bb8 <UART_SetConfig+0xcc>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <UART_SetConfig+0xa4>
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d00a      	beq.n	8004ba4 <UART_SetConfig+0xb8>
 8004b8e:	e013      	b.n	8004bb8 <UART_SetConfig+0xcc>
 8004b90:	231f      	movs	r3, #31
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e0bd      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004b9a:	231f      	movs	r3, #31
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e0b8      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004ba4:	231f      	movs	r3, #31
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2204      	movs	r2, #4
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e0b3      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004bae:	231f      	movs	r3, #31
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e0ae      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004bb8:	231f      	movs	r3, #31
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e0a9      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a98      	ldr	r2, [pc, #608]	@ (8004e28 <UART_SetConfig+0x33c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d134      	bne.n	8004c36 <UART_SetConfig+0x14a>
 8004bcc:	4b95      	ldr	r3, [pc, #596]	@ (8004e24 <UART_SetConfig+0x338>)
 8004bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd0:	23c0      	movs	r3, #192	@ 0xc0
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	22c0      	movs	r2, #192	@ 0xc0
 8004bd8:	0292      	lsls	r2, r2, #10
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d017      	beq.n	8004c0e <UART_SetConfig+0x122>
 8004bde:	22c0      	movs	r2, #192	@ 0xc0
 8004be0:	0292      	lsls	r2, r2, #10
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d822      	bhi.n	8004c2c <UART_SetConfig+0x140>
 8004be6:	2280      	movs	r2, #128	@ 0x80
 8004be8:	0292      	lsls	r2, r2, #10
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d019      	beq.n	8004c22 <UART_SetConfig+0x136>
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	0292      	lsls	r2, r2, #10
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d81a      	bhi.n	8004c2c <UART_SetConfig+0x140>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <UART_SetConfig+0x118>
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	0252      	lsls	r2, r2, #9
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00a      	beq.n	8004c18 <UART_SetConfig+0x12c>
 8004c02:	e013      	b.n	8004c2c <UART_SetConfig+0x140>
 8004c04:	231f      	movs	r3, #31
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e083      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c0e:	231f      	movs	r3, #31
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2202      	movs	r2, #2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e07e      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c18:	231f      	movs	r3, #31
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e079      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c22:	231f      	movs	r3, #31
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2208      	movs	r2, #8
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e074      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c2c:	231f      	movs	r3, #31
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2210      	movs	r2, #16
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e06f      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e2c <UART_SetConfig+0x340>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d134      	bne.n	8004caa <UART_SetConfig+0x1be>
 8004c40:	4b78      	ldr	r3, [pc, #480]	@ (8004e24 <UART_SetConfig+0x338>)
 8004c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c44:	23c0      	movs	r3, #192	@ 0xc0
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	4013      	ands	r3, r2
 8004c4a:	22c0      	movs	r2, #192	@ 0xc0
 8004c4c:	0312      	lsls	r2, r2, #12
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d017      	beq.n	8004c82 <UART_SetConfig+0x196>
 8004c52:	22c0      	movs	r2, #192	@ 0xc0
 8004c54:	0312      	lsls	r2, r2, #12
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d822      	bhi.n	8004ca0 <UART_SetConfig+0x1b4>
 8004c5a:	2280      	movs	r2, #128	@ 0x80
 8004c5c:	0312      	lsls	r2, r2, #12
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d019      	beq.n	8004c96 <UART_SetConfig+0x1aa>
 8004c62:	2280      	movs	r2, #128	@ 0x80
 8004c64:	0312      	lsls	r2, r2, #12
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d81a      	bhi.n	8004ca0 <UART_SetConfig+0x1b4>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <UART_SetConfig+0x18c>
 8004c6e:	2280      	movs	r2, #128	@ 0x80
 8004c70:	02d2      	lsls	r2, r2, #11
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00a      	beq.n	8004c8c <UART_SetConfig+0x1a0>
 8004c76:	e013      	b.n	8004ca0 <UART_SetConfig+0x1b4>
 8004c78:	231f      	movs	r3, #31
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e049      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c82:	231f      	movs	r3, #31
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	2202      	movs	r2, #2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e044      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c8c:	231f      	movs	r3, #31
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2204      	movs	r2, #4
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e03f      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004c96:	231f      	movs	r3, #31
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e03a      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e035      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a60      	ldr	r2, [pc, #384]	@ (8004e30 <UART_SetConfig+0x344>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d104      	bne.n	8004cbe <UART_SetConfig+0x1d2>
 8004cb4:	231f      	movs	r3, #31
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e02b      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <UART_SetConfig+0x348>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d104      	bne.n	8004cd2 <UART_SetConfig+0x1e6>
 8004cc8:	231f      	movs	r3, #31
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e021      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a58      	ldr	r2, [pc, #352]	@ (8004e38 <UART_SetConfig+0x34c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d104      	bne.n	8004ce6 <UART_SetConfig+0x1fa>
 8004cdc:	231f      	movs	r3, #31
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e017      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a54      	ldr	r2, [pc, #336]	@ (8004e3c <UART_SetConfig+0x350>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d104      	bne.n	8004cfa <UART_SetConfig+0x20e>
 8004cf0:	231f      	movs	r3, #31
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e00d      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a50      	ldr	r2, [pc, #320]	@ (8004e40 <UART_SetConfig+0x354>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d104      	bne.n	8004d0e <UART_SetConfig+0x222>
 8004d04:	231f      	movs	r3, #31
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e003      	b.n	8004d16 <UART_SetConfig+0x22a>
 8004d0e:	231f      	movs	r3, #31
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2210      	movs	r2, #16
 8004d14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d15c      	bne.n	8004ddc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8004d22:	231f      	movs	r3, #31
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d015      	beq.n	8004d58 <UART_SetConfig+0x26c>
 8004d2c:	dc18      	bgt.n	8004d60 <UART_SetConfig+0x274>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d00d      	beq.n	8004d4e <UART_SetConfig+0x262>
 8004d32:	dc15      	bgt.n	8004d60 <UART_SetConfig+0x274>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <UART_SetConfig+0x252>
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d005      	beq.n	8004d48 <UART_SetConfig+0x25c>
 8004d3c:	e010      	b.n	8004d60 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7fe ff5d 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8004d42:	0003      	movs	r3, r0
 8004d44:	61bb      	str	r3, [r7, #24]
        break;
 8004d46:	e012      	b.n	8004d6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <UART_SetConfig+0x358>)
 8004d4a:	61bb      	str	r3, [r7, #24]
        break;
 8004d4c:	e00f      	b.n	8004d6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe fed9 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8004d52:	0003      	movs	r3, r0
 8004d54:	61bb      	str	r3, [r7, #24]
        break;
 8004d56:	e00a      	b.n	8004d6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d58:	2380      	movs	r3, #128	@ 0x80
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	61bb      	str	r3, [r7, #24]
        break;
 8004d5e:	e006      	b.n	8004d6e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d64:	231e      	movs	r3, #30
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
        break;
 8004d6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d100      	bne.n	8004d76 <UART_SetConfig+0x28a>
 8004d74:	e095      	b.n	8004ea2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	005a      	lsls	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	18d2      	adds	r2, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	0019      	movs	r1, r3
 8004d88:	0010      	movs	r0, r2
 8004d8a:	f7fb f9c7 	bl	800011c <__udivsi3>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d91c      	bls.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d217      	bcs.n	8004dd2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	200e      	movs	r0, #14
 8004da8:	183b      	adds	r3, r7, r0
 8004daa:	210f      	movs	r1, #15
 8004dac:	438a      	bics	r2, r1
 8004dae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2207      	movs	r2, #7
 8004db8:	4013      	ands	r3, r2
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	183b      	adds	r3, r7, r0
 8004dbe:	183a      	adds	r2, r7, r0
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	183a      	adds	r2, r7, r0
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e067      	b.n	8004ea2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd2:	231e      	movs	r3, #30
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e062      	b.n	8004ea2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ddc:	231f      	movs	r3, #31
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d030      	beq.n	8004e48 <UART_SetConfig+0x35c>
 8004de6:	dc33      	bgt.n	8004e50 <UART_SetConfig+0x364>
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d00d      	beq.n	8004e08 <UART_SetConfig+0x31c>
 8004dec:	dc30      	bgt.n	8004e50 <UART_SetConfig+0x364>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0x30c>
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d005      	beq.n	8004e02 <UART_SetConfig+0x316>
 8004df6:	e02b      	b.n	8004e50 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7fe ff00 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e02d      	b.n	8004e5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e02:	4b10      	ldr	r3, [pc, #64]	@ (8004e44 <UART_SetConfig+0x358>)
 8004e04:	61bb      	str	r3, [r7, #24]
        break;
 8004e06:	e02a      	b.n	8004e5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e08:	f7fe fe7c 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	61bb      	str	r3, [r7, #24]
        break;
 8004e10:	e025      	b.n	8004e5e <UART_SetConfig+0x372>
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	efff69f3 	.word	0xefff69f3
 8004e18:	ffffcfff 	.word	0xffffcfff
 8004e1c:	fffff4ff 	.word	0xfffff4ff
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	40004c00 	.word	0x40004c00
 8004e34:	40005000 	.word	0x40005000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	40011800 	.word	0x40011800
 8004e40:	40011c00 	.word	0x40011c00
 8004e44:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	61bb      	str	r3, [r7, #24]
        break;
 8004e4e:	e006      	b.n	8004e5e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e54:	231e      	movs	r3, #30
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
        break;
 8004e5c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01e      	beq.n	8004ea2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	085a      	lsrs	r2, r3, #1
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	18d2      	adds	r2, r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	0019      	movs	r1, r3
 8004e74:	0010      	movs	r0, r2
 8004e76:	f7fb f951 	bl	800011c <__udivsi3>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b0f      	cmp	r3, #15
 8004e82:	d90a      	bls.n	8004e9a <UART_SetConfig+0x3ae>
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	2380      	movs	r3, #128	@ 0x80
 8004e88:	025b      	lsls	r3, r3, #9
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d205      	bcs.n	8004e9a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	e003      	b.n	8004ea2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9a:	231e      	movs	r3, #30
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004eae:	231e      	movs	r3, #30
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	781b      	ldrb	r3, [r3, #0]
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b008      	add	sp, #32
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	2208      	movs	r2, #8
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <UART_AdvFeatureConfig+0x144>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	0019      	movs	r1, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a43      	ldr	r2, [pc, #268]	@ (8005004 <UART_AdvFeatureConfig+0x148>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a3b      	ldr	r2, [pc, #236]	@ (8005008 <UART_AdvFeatureConfig+0x14c>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	2204      	movs	r2, #4
 8004f30:	4013      	ands	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4a34      	ldr	r2, [pc, #208]	@ (800500c <UART_AdvFeatureConfig+0x150>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	0019      	movs	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	2210      	movs	r2, #16
 8004f52:	4013      	ands	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005010 <UART_AdvFeatureConfig+0x154>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	2220      	movs	r2, #32
 8004f74:	4013      	ands	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4a25      	ldr	r2, [pc, #148]	@ (8005014 <UART_AdvFeatureConfig+0x158>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2240      	movs	r2, #64	@ 0x40
 8004f96:	4013      	ands	r3, r2
 8004f98:	d01d      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <UART_AdvFeatureConfig+0x15c>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	035b      	lsls	r3, r3, #13
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d10b      	bne.n	8004fd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	@ (800501c <UART_AdvFeatureConfig+0x160>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	0019      	movs	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	2280      	movs	r2, #128	@ 0x80
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8005020 <UART_AdvFeatureConfig+0x164>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	0019      	movs	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }
}
 8004ff8:	46c0      	nop			@ (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	ffff7fff 	.word	0xffff7fff
 8005004:	fffdffff 	.word	0xfffdffff
 8005008:	fffeffff 	.word	0xfffeffff
 800500c:	fffbffff 	.word	0xfffbffff
 8005010:	ffffefff 	.word	0xffffefff
 8005014:	ffffdfff 	.word	0xffffdfff
 8005018:	ffefffff 	.word	0xffefffff
 800501c:	ff9fffff 	.word	0xff9fffff
 8005020:	fff7ffff 	.word	0xfff7ffff

08005024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b092      	sub	sp, #72	@ 0x48
 8005028:	af02      	add	r7, sp, #8
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2284      	movs	r2, #132	@ 0x84
 8005030:	2100      	movs	r1, #0
 8005032:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005034:	f7fd f9cc 	bl	80023d0 <HAL_GetTick>
 8005038:	0003      	movs	r3, r0
 800503a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2208      	movs	r2, #8
 8005044:	4013      	ands	r3, r2
 8005046:	2b08      	cmp	r3, #8
 8005048:	d12c      	bne.n	80050a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504c:	2280      	movs	r2, #128	@ 0x80
 800504e:	0391      	lsls	r1, r2, #14
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4a46      	ldr	r2, [pc, #280]	@ (800516c <UART_CheckIdleState+0x148>)
 8005054:	9200      	str	r2, [sp, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	f000 f88c 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 800505c:	1e03      	subs	r3, r0, #0
 800505e:	d021      	beq.n	80050a4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005060:	f3ef 8310 	mrs	r3, PRIMASK
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800506a:	2301      	movs	r3, #1
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	f383 8810 	msr	PRIMASK, r3
}
 8005074:	46c0      	nop			@ (mov r8, r8)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2180      	movs	r1, #128	@ 0x80
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	f383 8810 	msr	PRIMASK, r3
}
 8005090:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2278      	movs	r2, #120	@ 0x78
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e05f      	b.n	8005164 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2204      	movs	r2, #4
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d146      	bne.n	8005140 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	03d1      	lsls	r1, r2, #15
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <UART_CheckIdleState+0x148>)
 80050bc:	9200      	str	r2, [sp, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	f000 f858 	bl	8005174 <UART_WaitOnFlagUntilTimeout>
 80050c4:	1e03      	subs	r3, r0, #0
 80050c6:	d03b      	beq.n	8005140 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c8:	f3ef 8310 	mrs	r3, PRIMASK
 80050cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d2:	2301      	movs	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			@ (mov r8, r8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4921      	ldr	r1, [pc, #132]	@ (8005170 <UART_CheckIdleState+0x14c>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fa:	f3ef 8310 	mrs	r3, PRIMASK
 80050fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005100:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	633b      	str	r3, [r7, #48]	@ 0x30
 8005104:	2301      	movs	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2101      	movs	r1, #1
 800511c:	438a      	bics	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2280      	movs	r2, #128	@ 0x80
 8005130:	2120      	movs	r1, #32
 8005132:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2278      	movs	r2, #120	@ 0x78
 8005138:	2100      	movs	r1, #0
 800513a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e011      	b.n	8005164 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2280      	movs	r2, #128	@ 0x80
 800514a:	2120      	movs	r1, #32
 800514c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2278      	movs	r2, #120	@ 0x78
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b010      	add	sp, #64	@ 0x40
 800516a:	bd80      	pop	{r7, pc}
 800516c:	01ffffff 	.word	0x01ffffff
 8005170:	fffffedf 	.word	0xfffffedf

08005174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	e051      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	3301      	adds	r3, #1
 800518a:	d04e      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fd f920 	bl	80023d0 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e051      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2204      	movs	r2, #4
 80051ae:	4013      	ands	r3, r2
 80051b0:	d03b      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b80      	cmp	r3, #128	@ 0x80
 80051b6:	d038      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b40      	cmp	r3, #64	@ 0x40
 80051bc:	d035      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2208      	movs	r2, #8
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d111      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2208      	movs	r2, #8
 80051d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f000 f83c 	bl	8005254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2284      	movs	r2, #132	@ 0x84
 80051e0:	2108      	movs	r1, #8
 80051e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2278      	movs	r2, #120	@ 0x78
 80051e8:	2100      	movs	r1, #0
 80051ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e02c      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	401a      	ands	r2, r3
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	429a      	cmp	r2, r3
 8005202:	d112      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2280      	movs	r2, #128	@ 0x80
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	0018      	movs	r0, r3
 8005212:	f000 f81f 	bl	8005254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2284      	movs	r2, #132	@ 0x84
 800521a:	2120      	movs	r1, #32
 800521c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2278      	movs	r2, #120	@ 0x78
 8005222:	2100      	movs	r1, #0
 8005224:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e00f      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	425a      	negs	r2, r3
 800523a:	4153      	adcs	r3, r2
 800523c:	b2db      	uxtb	r3, r3
 800523e:	001a      	movs	r2, r3
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d09e      	beq.n	8005186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b004      	add	sp, #16
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	@ 0x38
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525c:	f3ef 8310 	mrs	r3, PRIMASK
 8005260:	617b      	str	r3, [r7, #20]
  return(result);
 8005262:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
 8005266:	2301      	movs	r3, #1
 8005268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f383 8810 	msr	PRIMASK, r3
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4926      	ldr	r1, [pc, #152]	@ (8005318 <UART_EndRxTransfer+0xc4>)
 800527e:	400a      	ands	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f383 8810 	msr	PRIMASK, r3
}
 800528c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	623b      	str	r3, [r7, #32]
  return(result);
 8005294:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	633b      	str	r3, [r7, #48]	@ 0x30
 8005298:	2301      	movs	r3, #1
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2101      	movs	r1, #1
 80052b0:	438a      	bics	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d118      	bne.n	80052fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c8:	f3ef 8310 	mrs	r3, PRIMASK
 80052cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d2:	2301      	movs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f383 8810 	msr	PRIMASK, r3
}
 80052dc:	46c0      	nop			@ (mov r8, r8)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2110      	movs	r1, #16
 80052ea:	438a      	bics	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2280      	movs	r2, #128	@ 0x80
 80052fe:	2120      	movs	r1, #32
 8005300:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b00e      	add	sp, #56	@ 0x38
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	fffffedf 	.word	0xfffffedf

0800531c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005322:	f3ef 8305 	mrs	r3, IPSR
 8005326:	60bb      	str	r3, [r7, #8]
  return(result);
 8005328:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532e:	f3ef 8310 	mrs	r3, PRIMASK
 8005332:	607b      	str	r3, [r7, #4]
  return(result);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <osKernelInitialize+0x2e>
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <osKernelInitialize+0x54>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d103      	bne.n	800534a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005342:	2306      	movs	r3, #6
 8005344:	425b      	negs	r3, r3
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e00c      	b.n	8005364 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800534a:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <osKernelInitialize+0x54>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005352:	4b07      	ldr	r3, [pc, #28]	@ (8005370 <osKernelInitialize+0x54>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e002      	b.n	8005364 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800535e:	2301      	movs	r3, #1
 8005360:	425b      	negs	r3, r3
 8005362:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005364:	68fb      	ldr	r3, [r7, #12]
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	2000065c 	.word	0x2000065c

08005374 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537a:	f3ef 8305 	mrs	r3, IPSR
 800537e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005386:	f3ef 8310 	mrs	r3, PRIMASK
 800538a:	607b      	str	r3, [r7, #4]
  return(result);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <osKernelStart+0x2e>
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <osKernelStart+0x58>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d103      	bne.n	80053a2 <osKernelStart+0x2e>
    stat = osErrorISR;
 800539a:	2306      	movs	r3, #6
 800539c:	425b      	negs	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e00e      	b.n	80053c0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <osKernelStart+0x58>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <osKernelStart+0x58>)
 80053ac:	2202      	movs	r2, #2
 80053ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80053b0:	f000 ff78 	bl	80062a4 <vTaskStartScheduler>
      stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80053ba:	2301      	movs	r3, #1
 80053bc:	425b      	negs	r3, r3
 80053be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	2000065c 	.word	0x2000065c

080053d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053d0:	b5b0      	push	{r4, r5, r7, lr}
 80053d2:	b090      	sub	sp, #64	@ 0x40
 80053d4:	af04      	add	r7, sp, #16
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e0:	f3ef 8305 	mrs	r3, IPSR
 80053e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d000      	beq.n	80053ee <osThreadNew+0x1e>
 80053ec:	e090      	b.n	8005510 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <osThreadNew+0x34>
 80053fa:	4b48      	ldr	r3, [pc, #288]	@ (800551c <osThreadNew+0x14c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d100      	bne.n	8005404 <osThreadNew+0x34>
 8005402:	e085      	b.n	8005510 <osThreadNew+0x140>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d100      	bne.n	800540c <osThreadNew+0x3c>
 800540a:	e081      	b.n	8005510 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005410:	2318      	movs	r3, #24
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24

    empty = '\0';
 8005414:	2117      	movs	r1, #23
 8005416:	187b      	adds	r3, r7, r1
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800541c:	187b      	adds	r3, r7, r1
 800541e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem   = -1;
 8005420:	2301      	movs	r3, #1
 8005422:	425b      	negs	r3, r3
 8005424:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d044      	beq.n	80054b6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <osThreadNew+0x6a>
        name = attr->name;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <osThreadNew+0x8e>
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b38      	cmp	r3, #56	@ 0x38
 8005452:	d804      	bhi.n	800545e <osThreadNew+0x8e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	4013      	ands	r3, r2
 800545c:	d001      	beq.n	8005462 <osThreadNew+0x92>
        return (NULL);
 800545e:	2300      	movs	r3, #0
 8005460:	e057      	b.n	8005512 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <osThreadNew+0xc8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005480:	d90a      	bls.n	8005498 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <osThreadNew+0xc8>
        mem = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	e010      	b.n	80054ba <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10c      	bne.n	80054ba <osThreadNew+0xea>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <osThreadNew+0xea>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <osThreadNew+0xea>
          mem = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	e001      	b.n	80054ba <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d112      	bne.n	80054e6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054c8:	68bd      	ldr	r5, [r7, #8]
 80054ca:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80054cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	002b      	movs	r3, r5
 80054da:	0022      	movs	r2, r4
 80054dc:	f000 fd47 	bl	8005f6e <xTaskCreateStatic>
 80054e0:	0003      	movs	r3, r0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e014      	b.n	8005510 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68bc      	ldr	r4, [r7, #8]
 80054f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	2310      	movs	r3, #16
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	0023      	movs	r3, r4
 8005502:	f000 fd7a 	bl	8005ffa <xTaskCreate>
 8005506:	0003      	movs	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d001      	beq.n	8005510 <osThreadNew+0x140>
          hTask = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005510:	693b      	ldr	r3, [r7, #16]
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	b00c      	add	sp, #48	@ 0x30
 8005518:	bdb0      	pop	{r4, r5, r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	2000065c 	.word	0x2000065c

08005520 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005528:	f3ef 8305 	mrs	r3, IPSR
 800552c:	613b      	str	r3, [r7, #16]
  return(result);
 800552e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	60fb      	str	r3, [r7, #12]
  return(result);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <osDelay+0x30>
 8005540:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <osDelay+0x4c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d103      	bne.n	8005550 <osDelay+0x30>
    stat = osErrorISR;
 8005548:	2306      	movs	r3, #6
 800554a:	425b      	negs	r3, r3
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e008      	b.n	8005562 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <osDelay+0x42>
      vTaskDelay(ticks);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fe7b 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b006      	add	sp, #24
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2000065c 	.word	0x2000065c

08005570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <vApplicationGetIdleTaskMemory+0x28>)
 8005580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4a05      	ldr	r2, [pc, #20]	@ (800559c <vApplicationGetIdleTaskMemory+0x2c>)
 8005586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	@ 0x80
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	b004      	add	sp, #16
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			@ (mov r8, r8)
 8005598:	20000660 	.word	0x20000660
 800559c:	200006bc 	.word	0x200006bc

080055a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a06      	ldr	r2, [pc, #24]	@ (80055c8 <vApplicationGetTimerTaskMemory+0x28>)
 80055b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a05      	ldr	r2, [pc, #20]	@ (80055cc <vApplicationGetTimerTaskMemory+0x2c>)
 80055b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2280      	movs	r2, #128	@ 0x80
 80055bc:	0052      	lsls	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200008bc 	.word	0x200008bc
 80055cc:	20000918 	.word	0x20000918

080055d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3308      	adds	r3, #8
 80055dc:	001a      	movs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	4252      	negs	r2, r2
 80055e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3308      	adds	r3, #8
 80055ee:	001a      	movs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3308      	adds	r3, #8
 80055f8:	001a      	movs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005604:	46c0      	nop			@ (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}

08005622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	b004      	add	sp, #16
 8005664:	bd80      	pop	{r7, pc}

08005666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3301      	adds	r3, #1
 800567a:	d103      	bne.n	8005684 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e00c      	b.n	800569e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3308      	adds	r3, #8
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e002      	b.n	8005692 <vListInsert+0x2c>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	d2f6      	bcs.n	800568c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b004      	add	sp, #16
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d103      	bne.n	8005706 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1e5a      	subs	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b004      	add	sp, #16
 8005720:	bd80      	pop	{r7, pc}

08005722 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <xQueueGenericReset+0x1a>
 8005736:	b672      	cpsid	i
 8005738:	46c0      	nop			@ (mov r8, r8)
 800573a:	e7fd      	b.n	8005738 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800573c:	f001 fdb8 	bl	80072b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	434b      	muls	r3, r1
 800574e:	18d2      	adds	r2, r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576a:	1e59      	subs	r1, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	434b      	muls	r3, r1
 8005772:	18d2      	adds	r2, r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2244      	movs	r2, #68	@ 0x44
 800577c:	21ff      	movs	r1, #255	@ 0xff
 800577e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2245      	movs	r2, #69	@ 0x45
 8005784:	21ff      	movs	r1, #255	@ 0xff
 8005786:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <xQueueGenericReset+0x80>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <xQueueGenericReset+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3310      	adds	r3, #16
 800579a:	0018      	movs	r0, r3
 800579c:	f000 ffa6 	bl	80066ec <xTaskRemoveFromEventList>
 80057a0:	e009      	b.n	80057b6 <xQueueGenericReset+0x94>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3310      	adds	r3, #16
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7ff ff12 	bl	80055d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3324      	adds	r3, #36	@ 0x24
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff ff0d 	bl	80055d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b6:	f001 fd8d 	bl	80072d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b089      	sub	sp, #36	@ 0x24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xQueueGenericCreateStatic+0x1a>
 80057d8:	b672      	cpsid	i
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	e7fd      	b.n	80057da <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <xQueueGenericCreateStatic+0x26>
 80057e4:	b672      	cpsid	i
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	e7fd      	b.n	80057e6 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <xQueueGenericCreateStatic+0x32>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <xQueueGenericCreateStatic+0x36>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericCreateStatic+0x38>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <xQueueGenericCreateStatic+0x42>
 8005800:	b672      	cpsid	i
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	e7fd      	b.n	8005802 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <xQueueGenericCreateStatic+0x4e>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <xQueueGenericCreateStatic+0x52>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <xQueueGenericCreateStatic+0x54>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <xQueueGenericCreateStatic+0x5e>
 800581c:	b672      	cpsid	i
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	e7fd      	b.n	800581e <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005822:	2350      	movs	r3, #80	@ 0x50
 8005824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b50      	cmp	r3, #80	@ 0x50
 800582a:	d002      	beq.n	8005832 <xQueueGenericCreateStatic+0x6e>
 800582c:	b672      	cpsid	i
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	e7fd      	b.n	800582e <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2246      	movs	r2, #70	@ 0x46
 8005840:	2101      	movs	r1, #1
 8005842:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005844:	2328      	movs	r3, #40	@ 0x28
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781c      	ldrb	r4, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0023      	movs	r3, r4
 8005856:	f000 f805 	bl	8005864 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800585a:	697b      	ldr	r3, [r7, #20]
	}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b007      	add	sp, #28
 8005862:	bd90      	pop	{r4, r7, pc}

08005864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	001a      	movs	r2, r3
 8005872:	1cfb      	adds	r3, r7, #3
 8005874:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e002      	b.n	800588a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2101      	movs	r1, #1
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff ff41 	bl	8005722 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	1cfa      	adds	r2, r7, #3
 80058a4:	214c      	movs	r1, #76	@ 0x4c
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08a      	sub	sp, #40	@ 0x28
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <xQueueGenericSend+0x22>
 80058ce:	b672      	cpsid	i
 80058d0:	46c0      	nop			@ (mov r8, r8)
 80058d2:	e7fd      	b.n	80058d0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <xQueueGenericSend+0x30>
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <xQueueGenericSend+0x34>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueGenericSend+0x36>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <xQueueGenericSend+0x40>
 80058ec:	b672      	cpsid	i
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	e7fd      	b.n	80058ee <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d103      	bne.n	8005900 <xQueueGenericSend+0x4e>
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <xQueueGenericSend+0x52>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericSend+0x54>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <xQueueGenericSend+0x5e>
 800590a:	b672      	cpsid	i
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	e7fd      	b.n	800590c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005910:	f001 f884 	bl	8006a1c <xTaskGetSchedulerState>
 8005914:	1e03      	subs	r3, r0, #0
 8005916:	d102      	bne.n	800591e <xQueueGenericSend+0x6c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueGenericSend+0x70>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSend+0x72>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <xQueueGenericSend+0x7c>
 8005928:	b672      	cpsid	i
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	e7fd      	b.n	800592a <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800592e:	f001 fcbf 	bl	80072b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <xQueueGenericSend+0x92>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d114      	bne.n	800596e <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	0018      	movs	r0, r3
 800594c:	f000 f997 	bl	8005c7e <prvCopyDataToQueue>
 8005950:	0003      	movs	r3, r0
 8005952:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <xQueueGenericSend+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	0018      	movs	r0, r3
 8005962:	f000 fec3 	bl	80066ec <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005966:	f001 fcb5 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	e05b      	b.n	8005a26 <xQueueGenericSend+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <xQueueGenericSend+0xca>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005974:	f001 fcae 	bl	80072d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005978:	2300      	movs	r3, #0
 800597a:	e054      	b.n	8005a26 <xQueueGenericSend+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <xQueueGenericSend+0xde>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005982:	2314      	movs	r3, #20
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	0018      	movs	r0, r3
 8005988:	f000 ff0e 	bl	80067a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005990:	f001 fca0 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005994:	f000 fcdc 	bl	8006350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005998:	f001 fc8a 	bl	80072b0 <vPortEnterCritical>
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2244      	movs	r2, #68	@ 0x44
 80059a0:	5c9b      	ldrb	r3, [r3, r2]
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	d103      	bne.n	80059b0 <xQueueGenericSend+0xfe>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2244      	movs	r2, #68	@ 0x44
 80059ac:	2100      	movs	r1, #0
 80059ae:	5499      	strb	r1, [r3, r2]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2245      	movs	r2, #69	@ 0x45
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	3301      	adds	r3, #1
 80059ba:	d103      	bne.n	80059c4 <xQueueGenericSend+0x112>
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2245      	movs	r2, #69	@ 0x45
 80059c0:	2100      	movs	r1, #0
 80059c2:	5499      	strb	r1, [r3, r2]
 80059c4:	f001 fc86 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059c8:	1d3a      	adds	r2, r7, #4
 80059ca:	2314      	movs	r3, #20
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	0011      	movs	r1, r2
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 fefd 	bl	80067d0 <xTaskCheckForTimeOut>
 80059d6:	1e03      	subs	r3, r0, #0
 80059d8:	d11e      	bne.n	8005a18 <xQueueGenericSend+0x166>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 fa53 	bl	8005e88 <prvIsQueueFull>
 80059e2:	1e03      	subs	r3, r0, #0
 80059e4:	d011      	beq.n	8005a0a <xQueueGenericSend+0x158>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	3310      	adds	r3, #16
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	0011      	movs	r1, r2
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fe34 	bl	800665c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 f9d2 	bl	8005da0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059fc:	f000 fcb4 	bl	8006368 <xTaskResumeAll>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	d194      	bne.n	800592e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8005a04:	f001 fc44 	bl	8007290 <vPortYield>
 8005a08:	e791      	b.n	800592e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f000 f9c7 	bl	8005da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a12:	f000 fca9 	bl	8006368 <xTaskResumeAll>
 8005a16:	e78a      	b.n	800592e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 f9c0 	bl	8005da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a20:	f000 fca2 	bl	8006368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a24:	2300      	movs	r3, #0
		}
	}
}
 8005a26:	0018      	movs	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b00a      	add	sp, #40	@ 0x28
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b089      	sub	sp, #36	@ 0x24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <xQueueGenericSendFromISR+0x1e>
 8005a46:	b672      	cpsid	i
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	e7fd      	b.n	8005a48 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <xQueueGenericSendFromISR+0x2c>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <xQueueGenericSendFromISR+0x30>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueGenericSendFromISR+0x32>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <xQueueGenericSendFromISR+0x3c>
 8005a64:	b672      	cpsid	i
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	e7fd      	b.n	8005a66 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d103      	bne.n	8005a78 <xQueueGenericSendFromISR+0x4a>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <xQueueGenericSendFromISR+0x4e>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <xQueueGenericSendFromISR+0x50>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <xQueueGenericSendFromISR+0x5a>
 8005a82:	b672      	cpsid	i
 8005a84:	46c0      	nop			@ (mov r8, r8)
 8005a86:	e7fd      	b.n	8005a84 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a88:	f001 fc3c 	bl	8007304 <ulSetInterruptMaskFromISR>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <xQueueGenericSendFromISR+0x74>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d12e      	bne.n	8005b00 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005aa2:	2413      	movs	r4, #19
 8005aa4:	193b      	adds	r3, r7, r4
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	2145      	movs	r1, #69	@ 0x45
 8005aaa:	5c52      	ldrb	r2, [r2, r1]
 8005aac:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 f8e2 	bl	8005c7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aba:	193b      	adds	r3, r7, r4
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	d111      	bne.n	8005ae8 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d016      	beq.n	8005afa <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	3324      	adds	r3, #36	@ 0x24
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f000 fe0b 	bl	80066ec <xTaskRemoveFromEventList>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d00f      	beq.n	8005afa <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e008      	b.n	8005afa <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae8:	2313      	movs	r3, #19
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	b259      	sxtb	r1, r3
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2245      	movs	r2, #69	@ 0x45
 8005af8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005afa:	2301      	movs	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
		{
 8005afe:	e001      	b.n	8005b04 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f001 fc02 	bl	8007310 <vClearInterruptMaskFromISR>

	return xReturn;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b009      	add	sp, #36	@ 0x24
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	@ 0x28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xQueueReceive+0x20>
 8005b30:	b672      	cpsid	i
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	e7fd      	b.n	8005b32 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <xQueueReceive+0x2e>
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <xQueueReceive+0x32>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <xQueueReceive+0x34>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <xQueueReceive+0x3e>
 8005b4e:	b672      	cpsid	i
 8005b50:	46c0      	nop			@ (mov r8, r8)
 8005b52:	e7fd      	b.n	8005b50 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b54:	f000 ff62 	bl	8006a1c <xTaskGetSchedulerState>
 8005b58:	1e03      	subs	r3, r0, #0
 8005b5a:	d102      	bne.n	8005b62 <xQueueReceive+0x4c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <xQueueReceive+0x50>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueReceive+0x52>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <xQueueReceive+0x5c>
 8005b6c:	b672      	cpsid	i
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	e7fd      	b.n	8005b6e <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b72:	f001 fb9d 	bl	80072b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <xQueueReceive+0x9a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 f8e3 	bl	8005d54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <xQueueReceive+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 fda2 	bl	80066ec <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ba8:	f001 fb94 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e062      	b.n	8005c76 <xQueueReceive+0x160>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <xQueueReceive+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bb6:	f001 fb8d 	bl	80072d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e05b      	b.n	8005c76 <xQueueReceive+0x160>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bc4:	2314      	movs	r3, #20
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fded 	bl	80067a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bd2:	f001 fb7f 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bd6:	f000 fbbb 	bl	8006350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bda:	f001 fb69 	bl	80072b0 <vPortEnterCritical>
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	2244      	movs	r2, #68	@ 0x44
 8005be2:	5c9b      	ldrb	r3, [r3, r2]
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	3301      	adds	r3, #1
 8005be8:	d103      	bne.n	8005bf2 <xQueueReceive+0xdc>
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	2244      	movs	r2, #68	@ 0x44
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5499      	strb	r1, [r3, r2]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	2245      	movs	r2, #69	@ 0x45
 8005bf6:	5c9b      	ldrb	r3, [r3, r2]
 8005bf8:	b25b      	sxtb	r3, r3
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	d103      	bne.n	8005c06 <xQueueReceive+0xf0>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	2245      	movs	r2, #69	@ 0x45
 8005c02:	2100      	movs	r1, #0
 8005c04:	5499      	strb	r1, [r3, r2]
 8005c06:	f001 fb65 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c0a:	1d3a      	adds	r2, r7, #4
 8005c0c:	2314      	movs	r3, #20
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 fddc 	bl	80067d0 <xTaskCheckForTimeOut>
 8005c18:	1e03      	subs	r3, r0, #0
 8005c1a:	d11e      	bne.n	8005c5a <xQueueReceive+0x144>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 f91c 	bl	8005e5c <prvIsQueueEmpty>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d011      	beq.n	8005c4c <xQueueReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	3324      	adds	r3, #36	@ 0x24
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 fd13 	bl	800665c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f000 f8b1 	bl	8005da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c3e:	f000 fb93 	bl	8006368 <xTaskResumeAll>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d195      	bne.n	8005b72 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8005c46:	f001 fb23 	bl	8007290 <vPortYield>
 8005c4a:	e792      	b.n	8005b72 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f8a6 	bl	8005da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c54:	f000 fb88 	bl	8006368 <xTaskResumeAll>
 8005c58:	e78b      	b.n	8005b72 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 f89f 	bl	8005da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c62:	f000 fb81 	bl	8006368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 f8f7 	bl	8005e5c <prvIsQueueEmpty>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d100      	bne.n	8005c74 <xQueueReceive+0x15e>
 8005c72:	e77e      	b.n	8005b72 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c76:	0018      	movs	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b00a      	add	sp, #40	@ 0x28
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10e      	bne.n	8005cba <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d14e      	bne.n	8005d42 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 fed3 	bl	8006a54 <xTaskPriorityDisinherit>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	e043      	b.n	8005d42 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d119      	bne.n	8005cf4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6898      	ldr	r0, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	0019      	movs	r1, r3
 8005ccc:	f001 fdd8 	bl	8007880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	18d2      	adds	r2, r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d32b      	bcc.n	8005d42 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	e026      	b.n	8005d42 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68d8      	ldr	r0, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	0019      	movs	r1, r3
 8005d00:	f001 fdbe 	bl	8007880 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	18d2      	adds	r2, r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d207      	bcs.n	8005d30 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d28:	425b      	negs	r3, r3
 8005d2a:	18d2      	adds	r2, r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d105      	bne.n	8005d42 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b006      	add	sp, #24
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	18d2      	adds	r2, r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d303      	bcc.n	8005d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	0018      	movs	r0, r3
 8005d94:	f001 fd74 	bl	8007880 <memcpy>
	}
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005da8:	f001 fa82 	bl	80072b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dac:	230f      	movs	r3, #15
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	2145      	movs	r1, #69	@ 0x45
 8005db4:	5c52      	ldrb	r2, [r2, r1]
 8005db6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db8:	e013      	b.n	8005de2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3324      	adds	r3, #36	@ 0x24
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 fc90 	bl	80066ec <xTaskRemoveFromEventList>
 8005dcc:	1e03      	subs	r3, r0, #0
 8005dce:	d001      	beq.n	8005dd4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dd0:	f000 fd50 	bl	8006874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dd4:	210f      	movs	r1, #15
 8005dd6:	187b      	adds	r3, r7, r1
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de2:	230f      	movs	r3, #15
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dce5      	bgt.n	8005dba <prvUnlockQueue+0x1a>
 8005dee:	e000      	b.n	8005df2 <prvUnlockQueue+0x52>
					break;
 8005df0:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2245      	movs	r2, #69	@ 0x45
 8005df6:	21ff      	movs	r1, #255	@ 0xff
 8005df8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005dfa:	f001 fa6b 	bl	80072d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dfe:	f001 fa57 	bl	80072b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e02:	230e      	movs	r3, #14
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	2144      	movs	r1, #68	@ 0x44
 8005e0a:	5c52      	ldrb	r2, [r2, r1]
 8005e0c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	e013      	b.n	8005e38 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d016      	beq.n	8005e46 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3310      	adds	r3, #16
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fc65 	bl	80066ec <xTaskRemoveFromEventList>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d001      	beq.n	8005e2a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005e26:	f000 fd25 	bl	8006874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e2a:	210e      	movs	r1, #14
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e38:	230e      	movs	r3, #14
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b25b      	sxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dce5      	bgt.n	8005e10 <prvUnlockQueue+0x70>
 8005e44:	e000      	b.n	8005e48 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005e46:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2244      	movs	r2, #68	@ 0x44
 8005e4c:	21ff      	movs	r1, #255	@ 0xff
 8005e4e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005e50:	f001 fa40 	bl	80072d4 <vPortExitCritical>
}
 8005e54:	46c0      	nop			@ (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e64:	f001 fa24 	bl	80072b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e001      	b.n	8005e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e7a:	f001 fa2b 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b004      	add	sp, #16
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e90:	f001 fa0e 	bl	80072b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d102      	bne.n	8005ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e001      	b.n	8005eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005eaa:	f001 fa13 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8005eae:	68fb      	ldr	r3, [r7, #12]
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e015      	b.n	8005ef4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f04 <vQueueAddToRegistry+0x4c>)
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	00d2      	lsls	r2, r2, #3
 8005ece:	58d3      	ldr	r3, [r2, r3]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10c      	bne.n	8005eee <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <vQueueAddToRegistry+0x4c>)
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	00d2      	lsls	r2, r2, #3
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <vQueueAddToRegistry+0x4c>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	18d3      	adds	r3, r2, r3
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eec:	e006      	b.n	8005efc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b07      	cmp	r3, #7
 8005ef8:	d9e6      	bls.n	8005ec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	46c0      	nop			@ (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b004      	add	sp, #16
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000d18 	.word	0x20000d18

08005f08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f18:	f001 f9ca 	bl	80072b0 <vPortEnterCritical>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2244      	movs	r2, #68	@ 0x44
 8005f20:	5c9b      	ldrb	r3, [r3, r2]
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	3301      	adds	r3, #1
 8005f26:	d103      	bne.n	8005f30 <vQueueWaitForMessageRestricted+0x28>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2244      	movs	r2, #68	@ 0x44
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	5499      	strb	r1, [r3, r2]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2245      	movs	r2, #69	@ 0x45
 8005f34:	5c9b      	ldrb	r3, [r3, r2]
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	d103      	bne.n	8005f44 <vQueueWaitForMessageRestricted+0x3c>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2245      	movs	r2, #69	@ 0x45
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]
 8005f44:	f001 f9c6 	bl	80072d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3324      	adds	r3, #36	@ 0x24
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 fb9f 	bl	800669c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff ff1d 	bl	8005da0 <prvUnlockQueue>
	}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f6e:	b590      	push	{r4, r7, lr}
 8005f70:	b08d      	sub	sp, #52	@ 0x34
 8005f72:	af04      	add	r7, sp, #16
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <xTaskCreateStatic+0x1a>
 8005f82:	b672      	cpsid	i
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	e7fd      	b.n	8005f84 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <xTaskCreateStatic+0x26>
 8005f8e:	b672      	cpsid	i
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	e7fd      	b.n	8005f90 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f94:	235c      	movs	r3, #92	@ 0x5c
 8005f96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f9c:	d002      	beq.n	8005fa4 <xTaskCreateStatic+0x36>
 8005f9e:	b672      	cpsid	i
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	e7fd      	b.n	8005fa0 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <xTaskCreateStatic+0x7e>
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01d      	beq.n	8005fec <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2259      	movs	r2, #89	@ 0x59
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fc2:	683c      	ldr	r4, [r7, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9303      	str	r3, [sp, #12]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	9302      	str	r3, [sp, #8]
 8005fd2:	2318      	movs	r3, #24
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	0023      	movs	r3, r4
 8005fde:	f000 f859 	bl	8006094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 f8d7 	bl	8006198 <prvAddNewTaskToReadyList>
 8005fea:	e001      	b.n	8005ff0 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b009      	add	sp, #36	@ 0x24
 8005ff8:	bd90      	pop	{r4, r7, pc}

08005ffa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ffa:	b590      	push	{r4, r7, lr}
 8005ffc:	b08d      	sub	sp, #52	@ 0x34
 8005ffe:	af04      	add	r7, sp, #16
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	1dbb      	adds	r3, r7, #6
 8006008:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600a:	1dbb      	adds	r3, r7, #6
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	0018      	movs	r0, r3
 8006012:	f001 f9e5 	bl	80073e0 <pvPortMalloc>
 8006016:	0003      	movs	r3, r0
 8006018:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006020:	205c      	movs	r0, #92	@ 0x5c
 8006022:	f001 f9dd 	bl	80073e0 <pvPortMalloc>
 8006026:	0003      	movs	r3, r0
 8006028:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
 8006036:	e006      	b.n	8006046 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	0018      	movs	r0, r3
 800603c:	f001 fa78 	bl	8007530 <vPortFree>
 8006040:	e001      	b.n	8006046 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2259      	movs	r2, #89	@ 0x59
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	881a      	ldrh	r2, [r3, #0]
 8006058:	683c      	ldr	r4, [r7, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	2300      	movs	r3, #0
 8006060:	9303      	str	r3, [sp, #12]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	9302      	str	r3, [sp, #8]
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	0023      	movs	r3, r4
 8006070:	f000 f810 	bl	8006094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 f88e 	bl	8006198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800607c:	2301      	movs	r3, #1
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e002      	b.n	8006088 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006082:	2301      	movs	r3, #1
 8006084:	425b      	negs	r3, r3
 8006086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006088:	69bb      	ldr	r3, [r7, #24]
	}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b009      	add	sp, #36	@ 0x24
 8006090:	bd90      	pop	{r4, r7, pc}
	...

08006094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	001a      	movs	r2, r3
 80060ac:	21a5      	movs	r1, #165	@ 0xa5
 80060ae:	f001 fbb3 	bl	8007818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4936      	ldr	r1, [pc, #216]	@ (8006194 <prvInitialiseNewTask+0x100>)
 80060ba:	468c      	mov	ip, r1
 80060bc:	4463      	add	r3, ip
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	18d3      	adds	r3, r2, r3
 80060c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2207      	movs	r2, #7
 80060c8:	4393      	bics	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2207      	movs	r2, #7
 80060d0:	4013      	ands	r3, r2
 80060d2:	d002      	beq.n	80060da <prvInitialiseNewTask+0x46>
 80060d4:	b672      	cpsid	i
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	e7fd      	b.n	80060d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e013      	b.n	8006108 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	18d3      	adds	r3, r2, r3
 80060e6:	7818      	ldrb	r0, [r3, #0]
 80060e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ea:	2134      	movs	r1, #52	@ 0x34
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	18d3      	adds	r3, r2, r3
 80060f0:	185b      	adds	r3, r3, r1
 80060f2:	1c02      	adds	r2, r0, #0
 80060f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	18d3      	adds	r3, r2, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	3301      	adds	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d9e8      	bls.n	80060e0 <prvInitialiseNewTask+0x4c>
 800610e:	e000      	b.n	8006112 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006110:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	2243      	movs	r2, #67	@ 0x43
 8006116:	2100      	movs	r1, #0
 8006118:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	2b37      	cmp	r3, #55	@ 0x37
 800611e:	d901      	bls.n	8006124 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006120:	2337      	movs	r3, #55	@ 0x37
 8006122:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	2200      	movs	r2, #0
 8006134:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006138:	3304      	adds	r3, #4
 800613a:	0018      	movs	r0, r3
 800613c:	f7ff fa66 	bl	800560c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	3318      	adds	r3, #24
 8006144:	0018      	movs	r0, r3
 8006146:	f7ff fa61 	bl	800560c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800614e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2238      	movs	r2, #56	@ 0x38
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	2200      	movs	r2, #0
 8006164:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	2258      	movs	r2, #88	@ 0x58
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	68f9      	ldr	r1, [r7, #12]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	0018      	movs	r0, r3
 8006176:	f001 f803 	bl	8007180 <pxPortInitialiseStack>
 800617a:	0002      	movs	r2, r0
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800618c:	46c0      	nop			@ (mov r8, r8)
 800618e:	46bd      	mov	sp, r7
 8006190:	b006      	add	sp, #24
 8006192:	bd80      	pop	{r7, pc}
 8006194:	3fffffff 	.word	0x3fffffff

08006198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061a0:	f001 f886 	bl	80072b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061a4:	4b26      	ldr	r3, [pc, #152]	@ (8006240 <prvAddNewTaskToReadyList+0xa8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <prvAddNewTaskToReadyList+0xa8>)
 80061ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80061ae:	4b25      	ldr	r3, [pc, #148]	@ (8006244 <prvAddNewTaskToReadyList+0xac>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061b6:	4b23      	ldr	r3, [pc, #140]	@ (8006244 <prvAddNewTaskToReadyList+0xac>)
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061bc:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <prvAddNewTaskToReadyList+0xa8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d110      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061c4:	f000 fb6a 	bl	800689c <prvInitialiseTaskLists>
 80061c8:	e00d      	b.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <prvAddNewTaskToReadyList+0xb0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006244 <prvAddNewTaskToReadyList+0xac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d802      	bhi.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061e0:	4b18      	ldr	r3, [pc, #96]	@ (8006244 <prvAddNewTaskToReadyList+0xac>)
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061e6:	4b19      	ldr	r3, [pc, #100]	@ (800624c <prvAddNewTaskToReadyList+0xb4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	4b17      	ldr	r3, [pc, #92]	@ (800624c <prvAddNewTaskToReadyList+0xb4>)
 80061ee:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061f0:	4b16      	ldr	r3, [pc, #88]	@ (800624c <prvAddNewTaskToReadyList+0xb4>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fc:	4b14      	ldr	r3, [pc, #80]	@ (8006250 <prvAddNewTaskToReadyList+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <prvAddNewTaskToReadyList+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006208:	4b11      	ldr	r3, [pc, #68]	@ (8006250 <prvAddNewTaskToReadyList+0xb8>)
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006210:	0013      	movs	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	189b      	adds	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a0e      	ldr	r2, [pc, #56]	@ (8006254 <prvAddNewTaskToReadyList+0xbc>)
 800621a:	189a      	adds	r2, r3, r2
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	0019      	movs	r1, r3
 8006222:	0010      	movs	r0, r2
 8006224:	f7ff f9fd 	bl	8005622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006228:	f001 f854 	bl	80072d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800622c:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <prvAddNewTaskToReadyList+0xb0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006234:	4b03      	ldr	r3, [pc, #12]	@ (8006244 <prvAddNewTaskToReadyList+0xac>)
 8006236:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}
 8006240:	2000122c 	.word	0x2000122c
 8006244:	20000d58 	.word	0x20000d58
 8006248:	20001238 	.word	0x20001238
 800624c:	20001248 	.word	0x20001248
 8006250:	20001234 	.word	0x20001234
 8006254:	20000d5c 	.word	0x20000d5c

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <vTaskDelay+0x48>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <vTaskDelay+0x20>
 8006272:	b672      	cpsid	i
 8006274:	46c0      	nop			@ (mov r8, r8)
 8006276:	e7fd      	b.n	8006274 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006278:	f000 f86a 	bl	8006350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2100      	movs	r1, #0
 8006280:	0018      	movs	r0, r3
 8006282:	f000 fc45 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006286:	f000 f86f 	bl	8006368 <xTaskResumeAll>
 800628a:	0003      	movs	r3, r0
 800628c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8006294:	f000 fffc 	bl	8007290 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b004      	add	sp, #16
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20001254 	.word	0x20001254

080062a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b089      	sub	sp, #36	@ 0x24
 80062a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062b2:	003a      	movs	r2, r7
 80062b4:	1d39      	adds	r1, r7, #4
 80062b6:	2308      	movs	r3, #8
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7ff f958 	bl	8005570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062c0:	683c      	ldr	r4, [r7, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	491c      	ldr	r1, [pc, #112]	@ (8006338 <vTaskStartScheduler+0x94>)
 80062c8:	481c      	ldr	r0, [pc, #112]	@ (800633c <vTaskStartScheduler+0x98>)
 80062ca:	9202      	str	r2, [sp, #8]
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	2300      	movs	r3, #0
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	0022      	movs	r2, r4
 80062d6:	f7ff fe4a 	bl	8005f6e <xTaskCreateStatic>
 80062da:	0002      	movs	r2, r0
 80062dc:	4b18      	ldr	r3, [pc, #96]	@ (8006340 <vTaskStartScheduler+0x9c>)
 80062de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062e0:	4b17      	ldr	r3, [pc, #92]	@ (8006340 <vTaskStartScheduler+0x9c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062e8:	2301      	movs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e001      	b.n	80062f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d103      	bne.n	8006300 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80062f8:	f000 fc5e 	bl	8006bb8 <xTimerCreateTimerTask>
 80062fc:	0003      	movs	r3, r0
 80062fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10d      	bne.n	8006322 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006306:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006308:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <vTaskStartScheduler+0xa0>)
 800630a:	2201      	movs	r2, #1
 800630c:	4252      	negs	r2, r2
 800630e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006310:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <vTaskStartScheduler+0xa4>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <vTaskStartScheduler+0xa8>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800631c:	f000 ff94 	bl	8007248 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006320:	e005      	b.n	800632e <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	d102      	bne.n	800632e <vTaskStartScheduler+0x8a>
 8006328:	b672      	cpsid	i
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	e7fd      	b.n	800632a <vTaskStartScheduler+0x86>
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b005      	add	sp, #20
 8006334:	bd90      	pop	{r4, r7, pc}
 8006336:	46c0      	nop			@ (mov r8, r8)
 8006338:	080081e4 	.word	0x080081e4
 800633c:	08006889 	.word	0x08006889
 8006340:	20001250 	.word	0x20001250
 8006344:	2000124c 	.word	0x2000124c
 8006348:	20001238 	.word	0x20001238
 800634c:	20001230 	.word	0x20001230

08006350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006354:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <vTaskSuspendAll+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	4b02      	ldr	r3, [pc, #8]	@ (8006364 <vTaskSuspendAll+0x14>)
 800635c:	601a      	str	r2, [r3, #0]
}
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20001254 	.word	0x20001254

08006368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006376:	4b37      	ldr	r3, [pc, #220]	@ (8006454 <xTaskResumeAll+0xec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <xTaskResumeAll+0x1c>
 800637e:	b672      	cpsid	i
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	e7fd      	b.n	8006380 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006384:	f000 ff94 	bl	80072b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006388:	4b32      	ldr	r3, [pc, #200]	@ (8006454 <xTaskResumeAll+0xec>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <xTaskResumeAll+0xec>)
 8006390:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006392:	4b30      	ldr	r3, [pc, #192]	@ (8006454 <xTaskResumeAll+0xec>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d155      	bne.n	8006446 <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639a:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <xTaskResumeAll+0xf0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d051      	beq.n	8006446 <xTaskResumeAll+0xde>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a2:	e02f      	b.n	8006404 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063a4:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <xTaskResumeAll+0xf4>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3318      	adds	r3, #24
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7ff f98e 	bl	80056d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3304      	adds	r3, #4
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff f989 	bl	80056d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c4:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <xTaskResumeAll+0xf8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d903      	bls.n	80063d4 <xTaskResumeAll+0x6c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d0:	4b23      	ldr	r3, [pc, #140]	@ (8006460 <xTaskResumeAll+0xf8>)
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d8:	0013      	movs	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	189b      	adds	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a20      	ldr	r2, [pc, #128]	@ (8006464 <xTaskResumeAll+0xfc>)
 80063e2:	189a      	adds	r2, r3, r2
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3304      	adds	r3, #4
 80063e8:	0019      	movs	r1, r3
 80063ea:	0010      	movs	r0, r2
 80063ec:	f7ff f919 	bl	8005622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <xTaskResumeAll+0x100>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80063fe:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <xTaskResumeAll+0x104>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006404:	4b15      	ldr	r3, [pc, #84]	@ (800645c <xTaskResumeAll+0xf4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1cb      	bne.n	80063a4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006412:	f000 fadf 	bl	80069d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006416:	4b16      	ldr	r3, [pc, #88]	@ (8006470 <xTaskResumeAll+0x108>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00f      	beq.n	8006442 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006422:	f000 f835 	bl	8006490 <xTaskIncrementTick>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d002      	beq.n	8006430 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800642a:	4b10      	ldr	r3, [pc, #64]	@ (800646c <xTaskResumeAll+0x104>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f2      	bne.n	8006422 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 800643c:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <xTaskResumeAll+0x108>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <xTaskResumeAll+0x104>)
 8006444:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006446:	f000 ff45 	bl	80072d4 <vPortExitCritical>

	return xAlreadyYielded;
 800644a:	687b      	ldr	r3, [r7, #4]
}
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	b004      	add	sp, #16
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20001254 	.word	0x20001254
 8006458:	2000122c 	.word	0x2000122c
 800645c:	200011ec 	.word	0x200011ec
 8006460:	20001234 	.word	0x20001234
 8006464:	20000d5c 	.word	0x20000d5c
 8006468:	20000d58 	.word	0x20000d58
 800646c:	20001240 	.word	0x20001240
 8006470:	2000123c 	.word	0x2000123c

08006474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800647a:	4b04      	ldr	r3, [pc, #16]	@ (800648c <xTaskGetTickCount+0x18>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006480:	687b      	ldr	r3, [r7, #4]
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b002      	add	sp, #8
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	20001230 	.word	0x20001230

08006490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649a:	4b3e      	ldr	r3, [pc, #248]	@ (8006594 <xTaskIncrementTick+0x104>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d000      	beq.n	80064a4 <xTaskIncrementTick+0x14>
 80064a2:	e06d      	b.n	8006580 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006598 <xTaskIncrementTick+0x108>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006598 <xTaskIncrementTick+0x108>)
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d118      	bne.n	80064ea <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064b8:	4b38      	ldr	r3, [pc, #224]	@ (800659c <xTaskIncrementTick+0x10c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <xTaskIncrementTick+0x38>
 80064c2:	b672      	cpsid	i
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	e7fd      	b.n	80064c4 <xTaskIncrementTick+0x34>
 80064c8:	4b34      	ldr	r3, [pc, #208]	@ (800659c <xTaskIncrementTick+0x10c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	4b34      	ldr	r3, [pc, #208]	@ (80065a0 <xTaskIncrementTick+0x110>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b32      	ldr	r3, [pc, #200]	@ (800659c <xTaskIncrementTick+0x10c>)
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	4b32      	ldr	r3, [pc, #200]	@ (80065a0 <xTaskIncrementTick+0x110>)
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	4b31      	ldr	r3, [pc, #196]	@ (80065a4 <xTaskIncrementTick+0x114>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	4b30      	ldr	r3, [pc, #192]	@ (80065a4 <xTaskIncrementTick+0x114>)
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f000 fa75 	bl	80069d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ea:	4b2f      	ldr	r3, [pc, #188]	@ (80065a8 <xTaskIncrementTick+0x118>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d34a      	bcc.n	800658a <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f4:	4b29      	ldr	r3, [pc, #164]	@ (800659c <xTaskIncrementTick+0x10c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <xTaskIncrementTick+0x72>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <xTaskIncrementTick+0x74>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006508:	4b27      	ldr	r3, [pc, #156]	@ (80065a8 <xTaskIncrementTick+0x118>)
 800650a:	2201      	movs	r2, #1
 800650c:	4252      	negs	r2, r2
 800650e:	601a      	str	r2, [r3, #0]
					break;
 8006510:	e03b      	b.n	800658a <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006512:	4b22      	ldr	r3, [pc, #136]	@ (800659c <xTaskIncrementTick+0x10c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d203      	bcs.n	8006532 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800652a:	4b1f      	ldr	r3, [pc, #124]	@ (80065a8 <xTaskIncrementTick+0x118>)
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
						break;
 8006530:	e02b      	b.n	800658a <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	3304      	adds	r3, #4
 8006536:	0018      	movs	r0, r3
 8006538:	f7ff f8cb 	bl	80056d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3318      	adds	r3, #24
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff f8c2 	bl	80056d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006552:	4b16      	ldr	r3, [pc, #88]	@ (80065ac <xTaskIncrementTick+0x11c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d903      	bls.n	8006562 <xTaskIncrementTick+0xd2>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655e:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <xTaskIncrementTick+0x11c>)
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006566:	0013      	movs	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	189b      	adds	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <xTaskIncrementTick+0x120>)
 8006570:	189a      	adds	r2, r3, r2
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	3304      	adds	r3, #4
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f7ff f852 	bl	8005622 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800657e:	e7b9      	b.n	80064f4 <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006580:	4b0c      	ldr	r3, [pc, #48]	@ (80065b4 <xTaskIncrementTick+0x124>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <xTaskIncrementTick+0x124>)
 8006588:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b006      	add	sp, #24
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20001254 	.word	0x20001254
 8006598:	20001230 	.word	0x20001230
 800659c:	200011e4 	.word	0x200011e4
 80065a0:	200011e8 	.word	0x200011e8
 80065a4:	20001244 	.word	0x20001244
 80065a8:	2000124c 	.word	0x2000124c
 80065ac:	20001234 	.word	0x20001234
 80065b0:	20000d5c 	.word	0x20000d5c
 80065b4:	2000123c 	.word	0x2000123c

080065b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065be:	4b22      	ldr	r3, [pc, #136]	@ (8006648 <vTaskSwitchContext+0x90>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065c6:	4b21      	ldr	r3, [pc, #132]	@ (800664c <vTaskSwitchContext+0x94>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065cc:	e038      	b.n	8006640 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80065ce:	4b1f      	ldr	r3, [pc, #124]	@ (800664c <vTaskSwitchContext+0x94>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006650 <vTaskSwitchContext+0x98>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	e008      	b.n	80065ee <vTaskSwitchContext+0x36>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <vTaskSwitchContext+0x30>
 80065e2:	b672      	cpsid	i
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	e7fd      	b.n	80065e4 <vTaskSwitchContext+0x2c>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	4919      	ldr	r1, [pc, #100]	@ (8006654 <vTaskSwitchContext+0x9c>)
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	0013      	movs	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	585b      	ldr	r3, [r3, r1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0ed      	beq.n	80065dc <vTaskSwitchContext+0x24>
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	0013      	movs	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	189b      	adds	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4a12      	ldr	r2, [pc, #72]	@ (8006654 <vTaskSwitchContext+0x9c>)
 800660c:	189b      	adds	r3, r3, r2
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	429a      	cmp	r2, r3
 8006624:	d104      	bne.n	8006630 <vTaskSwitchContext+0x78>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	4b08      	ldr	r3, [pc, #32]	@ (8006658 <vTaskSwitchContext+0xa0>)
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <vTaskSwitchContext+0x98>)
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]
}
 8006640:	46c0      	nop			@ (mov r8, r8)
 8006642:	46bd      	mov	sp, r7
 8006644:	b002      	add	sp, #8
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20001254 	.word	0x20001254
 800664c:	20001240 	.word	0x20001240
 8006650:	20001234 	.word	0x20001234
 8006654:	20000d5c 	.word	0x20000d5c
 8006658:	20000d58 	.word	0x20000d58

0800665c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <vTaskPlaceOnEventList+0x16>
 800666c:	b672      	cpsid	i
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	e7fd      	b.n	800666e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006672:	4b09      	ldr	r3, [pc, #36]	@ (8006698 <vTaskPlaceOnEventList+0x3c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3318      	adds	r3, #24
 8006678:	001a      	movs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f7fe fff1 	bl	8005666 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2101      	movs	r1, #1
 8006688:	0018      	movs	r0, r3
 800668a:	f000 fa41 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
}
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	20000d58 	.word	0x20000d58

0800669c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <vTaskPlaceOnEventListRestricted+0x18>
 80066ae:	b672      	cpsid	i
 80066b0:	46c0      	nop			@ (mov r8, r8)
 80066b2:	e7fd      	b.n	80066b0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <vTaskPlaceOnEventListRestricted+0x4c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3318      	adds	r3, #24
 80066ba:	001a      	movs	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7fe ffae 	bl	8005622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 80066cc:	2301      	movs	r3, #1
 80066ce:	425b      	negs	r3, r3
 80066d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	0011      	movs	r1, r2
 80066d8:	0018      	movs	r0, r3
 80066da:	f000 fa19 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
	}
 80066de:	46c0      	nop			@ (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	20000d58 	.word	0x20000d58

080066ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <xTaskRemoveFromEventList+0x1c>
 8006702:	b672      	cpsid	i
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	e7fd      	b.n	8006704 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	3318      	adds	r3, #24
 800670c:	0018      	movs	r0, r3
 800670e:	f7fe ffe0 	bl	80056d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006712:	4b1f      	ldr	r3, [pc, #124]	@ (8006790 <xTaskRemoveFromEventList+0xa4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11d      	bne.n	8006756 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3304      	adds	r3, #4
 800671e:	0018      	movs	r0, r3
 8006720:	f7fe ffd7 	bl	80056d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006728:	4b1a      	ldr	r3, [pc, #104]	@ (8006794 <xTaskRemoveFromEventList+0xa8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d903      	bls.n	8006738 <xTaskRemoveFromEventList+0x4c>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006734:	4b17      	ldr	r3, [pc, #92]	@ (8006794 <xTaskRemoveFromEventList+0xa8>)
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	0013      	movs	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	189b      	adds	r3, r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <xTaskRemoveFromEventList+0xac>)
 8006746:	189a      	adds	r2, r3, r2
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3304      	adds	r3, #4
 800674c:	0019      	movs	r1, r3
 800674e:	0010      	movs	r0, r2
 8006750:	f7fe ff67 	bl	8005622 <vListInsertEnd>
 8006754:	e007      	b.n	8006766 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	3318      	adds	r3, #24
 800675a:	001a      	movs	r2, r3
 800675c:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <xTaskRemoveFromEventList+0xb0>)
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f7fe ff5e 	bl	8005622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <xTaskRemoveFromEventList+0xb4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	429a      	cmp	r2, r3
 8006772:	d905      	bls.n	8006780 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006778:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <xTaskRemoveFromEventList+0xb8>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e001      	b.n	8006784 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b004      	add	sp, #16
 800678c:	bd80      	pop	{r7, pc}
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	20001254 	.word	0x20001254
 8006794:	20001234 	.word	0x20001234
 8006798:	20000d5c 	.word	0x20000d5c
 800679c:	200011ec 	.word	0x200011ec
 80067a0:	20000d58 	.word	0x20000d58
 80067a4:	20001240 	.word	0x20001240

080067a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067b0:	4b05      	ldr	r3, [pc, #20]	@ (80067c8 <vTaskInternalSetTimeOutState+0x20>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067b8:	4b04      	ldr	r3, [pc, #16]	@ (80067cc <vTaskInternalSetTimeOutState+0x24>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
}
 80067c0:	46c0      	nop			@ (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b002      	add	sp, #8
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20001244 	.word	0x20001244
 80067cc:	20001230 	.word	0x20001230

080067d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <xTaskCheckForTimeOut+0x16>
 80067e0:	b672      	cpsid	i
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	e7fd      	b.n	80067e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <xTaskCheckForTimeOut+0x22>
 80067ec:	b672      	cpsid	i
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	e7fd      	b.n	80067ee <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80067f2:	f000 fd5d 	bl	80072b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067f6:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <xTaskCheckForTimeOut+0x9c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	d102      	bne.n	8006814 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e024      	b.n	800685e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <xTaskCheckForTimeOut+0xa0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d007      	beq.n	8006830 <xTaskCheckForTimeOut+0x60>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d302      	bcc.n	8006830 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800682a:	2301      	movs	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e016      	b.n	800685e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d20c      	bcs.n	8006854 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0018      	movs	r0, r3
 800684a:	f7ff ffad 	bl	80067a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e004      	b.n	800685e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800685e:	f000 fd39 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8006862:	697b      	ldr	r3, [r7, #20]
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b006      	add	sp, #24
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20001230 	.word	0x20001230
 8006870:	20001244 	.word	0x20001244

08006874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006878:	4b02      	ldr	r3, [pc, #8]	@ (8006884 <vTaskMissedYield+0x10>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20001240 	.word	0x20001240

08006888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006890:	f000 f848 	bl	8006924 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8006894:	f000 fcfc 	bl	8007290 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	e7f9      	b.n	8006890 <prvIdleTask+0x8>

0800689c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	e00c      	b.n	80068c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	0013      	movs	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4a14      	ldr	r2, [pc, #80]	@ (8006904 <prvInitialiseTaskLists+0x68>)
 80068b4:	189b      	adds	r3, r3, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7fe fe8a 	bl	80055d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3301      	adds	r3, #1
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b37      	cmp	r3, #55	@ 0x37
 80068c6:	d9ef      	bls.n	80068a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <prvInitialiseTaskLists+0x6c>)
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fe fe80 	bl	80055d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068d0:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <prvInitialiseTaskLists+0x70>)
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fe fe7c 	bl	80055d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <prvInitialiseTaskLists+0x74>)
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fe78 	bl	80055d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <prvInitialiseTaskLists+0x78>)
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7fe fe74 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <prvInitialiseTaskLists+0x7c>)
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7fe fe70 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068f0:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <prvInitialiseTaskLists+0x80>)
 80068f2:	4a05      	ldr	r2, [pc, #20]	@ (8006908 <prvInitialiseTaskLists+0x6c>)
 80068f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006920 <prvInitialiseTaskLists+0x84>)
 80068f8:	4a04      	ldr	r2, [pc, #16]	@ (800690c <prvInitialiseTaskLists+0x70>)
 80068fa:	601a      	str	r2, [r3, #0]
}
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000d5c 	.word	0x20000d5c
 8006908:	200011bc 	.word	0x200011bc
 800690c:	200011d0 	.word	0x200011d0
 8006910:	200011ec 	.word	0x200011ec
 8006914:	20001200 	.word	0x20001200
 8006918:	20001218 	.word	0x20001218
 800691c:	200011e4 	.word	0x200011e4
 8006920:	200011e8 	.word	0x200011e8

08006924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800692a:	e01a      	b.n	8006962 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800692c:	f000 fcc0 	bl	80072b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <prvCheckTasksWaitingTermination+0x50>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	0018      	movs	r0, r3
 800693e:	f7fe fec8 	bl	80056d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006942:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <prvCheckTasksWaitingTermination+0x54>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <prvCheckTasksWaitingTermination+0x54>)
 800694a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800694c:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <prvCheckTasksWaitingTermination+0x58>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <prvCheckTasksWaitingTermination+0x58>)
 8006954:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006956:	f000 fcbd 	bl	80072d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f000 f80f 	bl	8006980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006962:	4b06      	ldr	r3, [pc, #24]	@ (800697c <prvCheckTasksWaitingTermination+0x58>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e0      	bne.n	800692c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	46c0      	nop			@ (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	b002      	add	sp, #8
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20001200 	.word	0x20001200
 8006978:	2000122c 	.word	0x2000122c
 800697c:	20001214 	.word	0x20001214

08006980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2259      	movs	r2, #89	@ 0x59
 800698c:	5c9b      	ldrb	r3, [r3, r2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006996:	0018      	movs	r0, r3
 8006998:	f000 fdca 	bl	8007530 <vPortFree>
				vPortFree( pxTCB );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	0018      	movs	r0, r3
 80069a0:	f000 fdc6 	bl	8007530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069a4:	e011      	b.n	80069ca <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2259      	movs	r2, #89	@ 0x59
 80069aa:	5c9b      	ldrb	r3, [r3, r2]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d104      	bne.n	80069ba <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fdbc 	bl	8007530 <vPortFree>
	}
 80069b8:	e007      	b.n	80069ca <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2259      	movs	r2, #89	@ 0x59
 80069be:	5c9b      	ldrb	r3, [r3, r2]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d002      	beq.n	80069ca <prvDeleteTCB+0x4a>
 80069c4:	b672      	cpsid	i
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	e7fd      	b.n	80069c6 <prvDeleteTCB+0x46>
	}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b002      	add	sp, #8
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069da:	4b0e      	ldr	r3, [pc, #56]	@ (8006a14 <prvResetNextTaskUnblockTime+0x40>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <prvResetNextTaskUnblockTime+0x14>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <prvResetNextTaskUnblockTime+0x16>
 80069e8:	2300      	movs	r3, #0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <prvResetNextTaskUnblockTime+0x44>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	4252      	negs	r2, r2
 80069f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069f6:	e008      	b.n	8006a0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <prvResetNextTaskUnblockTime+0x40>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <prvResetNextTaskUnblockTime+0x44>)
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	200011e4 	.word	0x200011e4
 8006a18:	2000124c 	.word	0x2000124c

08006a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <xTaskGetSchedulerState+0x30>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e008      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <xTaskGetSchedulerState+0x34>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	e001      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a42:	687b      	ldr	r3, [r7, #4]
	}
 8006a44:	0018      	movs	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20001238 	.word	0x20001238
 8006a50:	20001254 	.word	0x20001254

08006a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d046      	beq.n	8006af8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a6a:	4b26      	ldr	r3, [pc, #152]	@ (8006b04 <xTaskPriorityDisinherit+0xb0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d002      	beq.n	8006a7a <xTaskPriorityDisinherit+0x26>
 8006a74:	b672      	cpsid	i
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	e7fd      	b.n	8006a76 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <xTaskPriorityDisinherit+0x34>
 8006a82:	b672      	cpsid	i
 8006a84:	46c0      	nop			@ (mov r8, r8)
 8006a86:	e7fd      	b.n	8006a84 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d02c      	beq.n	8006af8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d128      	bne.n	8006af8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f7fe fe11 	bl	80056d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	2238      	movs	r2, #56	@ 0x38
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <xTaskPriorityDisinherit+0xb4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <xTaskPriorityDisinherit+0x84>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <xTaskPriorityDisinherit+0xb4>)
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006adc:	0013      	movs	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a09      	ldr	r2, [pc, #36]	@ (8006b0c <xTaskPriorityDisinherit+0xb8>)
 8006ae6:	189a      	adds	r2, r3, r2
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3304      	adds	r3, #4
 8006aec:	0019      	movs	r1, r3
 8006aee:	0010      	movs	r0, r2
 8006af0:	f7fe fd97 	bl	8005622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af8:	68fb      	ldr	r3, [r7, #12]
	}
 8006afa:	0018      	movs	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b004      	add	sp, #16
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	20000d58 	.word	0x20000d58
 8006b08:	20001234 	.word	0x20001234
 8006b0c:	20000d5c 	.word	0x20000d5c

08006b10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1a:	4b21      	ldr	r3, [pc, #132]	@ (8006ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7fe fdd3 	bl	80056d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	d10b      	bne.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	1d1a      	adds	r2, r3, #4
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b40:	0011      	movs	r1, r2
 8006b42:	0018      	movs	r0, r3
 8006b44:	f7fe fd6d 	bl	8005622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b48:	e026      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	18d3      	adds	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b52:	4b14      	ldr	r3, [pc, #80]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d209      	bcs.n	8006b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	0010      	movs	r0, r2
 8006b70:	f7fe fd79 	bl	8005666 <vListInsert>
}
 8006b74:	e010      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	0019      	movs	r1, r3
 8006b82:	0010      	movs	r0, r2
 8006b84:	f7fe fd6f 	bl	8005666 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d202      	bcs.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b92:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	601a      	str	r2, [r3, #0]
}
 8006b98:	46c0      	nop			@ (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b004      	add	sp, #16
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20001230 	.word	0x20001230
 8006ba4:	20000d58 	.word	0x20000d58
 8006ba8:	20001218 	.word	0x20001218
 8006bac:	200011e8 	.word	0x200011e8
 8006bb0:	200011e4 	.word	0x200011e4
 8006bb4:	2000124c 	.word	0x2000124c

08006bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bb8:	b590      	push	{r4, r7, lr}
 8006bba:	b089      	sub	sp, #36	@ 0x24
 8006bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bc2:	f000 fa9b 	bl	80070fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bc6:	4b18      	ldr	r3, [pc, #96]	@ (8006c28 <xTimerCreateTimerTask+0x70>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d020      	beq.n	8006c10 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bd6:	003a      	movs	r2, r7
 8006bd8:	1d39      	adds	r1, r7, #4
 8006bda:	2308      	movs	r3, #8
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fe fcde 	bl	80055a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006be4:	683c      	ldr	r4, [r7, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	4910      	ldr	r1, [pc, #64]	@ (8006c2c <xTimerCreateTimerTask+0x74>)
 8006bec:	4810      	ldr	r0, [pc, #64]	@ (8006c30 <xTimerCreateTimerTask+0x78>)
 8006bee:	9202      	str	r2, [sp, #8]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	0022      	movs	r2, r4
 8006bfa:	f7ff f9b8 	bl	8005f6e <xTaskCreateStatic>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <xTimerCreateTimerTask+0x7c>)
 8006c02:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c04:	4b0b      	ldr	r3, [pc, #44]	@ (8006c34 <xTimerCreateTimerTask+0x7c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <xTimerCreateTimerTask+0x64>
 8006c16:	b672      	cpsid	i
 8006c18:	46c0      	nop			@ (mov r8, r8)
 8006c1a:	e7fd      	b.n	8006c18 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	0018      	movs	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b005      	add	sp, #20
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	20001288 	.word	0x20001288
 8006c2c:	080081ec 	.word	0x080081ec
 8006c30:	08006d45 	.word	0x08006d45
 8006c34:	2000128c 	.word	0x2000128c

08006c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b08b      	sub	sp, #44	@ 0x2c
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <xTimerGenericCommand+0x1e>
 8006c50:	b672      	cpsid	i
 8006c52:	46c0      	nop			@ (mov r8, r8)
 8006c54:	e7fd      	b.n	8006c52 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <xTimerGenericCommand+0x94>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d030      	beq.n	8006cc0 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c5e:	2414      	movs	r4, #20
 8006c60:	193b      	adds	r3, r7, r4
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c66:	193b      	adds	r3, r7, r4
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c6c:	193b      	adds	r3, r7, r4
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	dc19      	bgt.n	8006cac <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c78:	f7ff fed0 	bl	8006a1c <xTaskGetSchedulerState>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d109      	bne.n	8006c96 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c82:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <xTimerGenericCommand+0x94>)
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c88:	1939      	adds	r1, r7, r4
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f7fe fe11 	bl	80058b2 <xQueueGenericSend>
 8006c90:	0003      	movs	r3, r0
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c94:	e014      	b.n	8006cc0 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <xTimerGenericCommand+0x94>)
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	2314      	movs	r3, #20
 8006c9c:	18f9      	adds	r1, r7, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f7fe fe06 	bl	80058b2 <xQueueGenericSend>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006caa:	e009      	b.n	8006cc0 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cac:	4b07      	ldr	r3, [pc, #28]	@ (8006ccc <xTimerGenericCommand+0x94>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	2314      	movs	r3, #20
 8006cb4:	18f9      	adds	r1, r7, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7fe feb9 	bl	8005a2e <xQueueGenericSendFromISR>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b00b      	add	sp, #44	@ 0x2c
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	20001288 	.word	0x20001288

08006cd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cda:	4b19      	ldr	r3, [pc, #100]	@ (8006d40 <prvProcessExpiredTimer+0x70>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fe fcf2 	bl	80056d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d11a      	bne.n	8006d2c <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	18d1      	adds	r1, r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f8ba 	bl	8006e7c <prvInsertTimerInActiveList>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d00f      	beq.n	8006d2c <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	2100      	movs	r1, #0
 8006d18:	f7ff ff8e 	bl	8006c38 <xTimerGenericCommand>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <prvProcessExpiredTimer+0x5c>
 8006d26:	b672      	cpsid	i
 8006d28:	46c0      	nop			@ (mov r8, r8)
 8006d2a:	e7fd      	b.n	8006d28 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	0010      	movs	r0, r2
 8006d34:	4798      	blx	r3
}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b004      	add	sp, #16
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	20001280 	.word	0x20001280

08006d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	0018      	movs	r0, r3
 8006d52:	f000 f853 	bl	8006dfc <prvGetNextExpireTime>
 8006d56:	0003      	movs	r3, r0
 8006d58:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	0011      	movs	r1, r2
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 f805 	bl	8006d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d66:	f000 f8cb 	bl	8006f00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	e7ee      	b.n	8006d4c <prvTimerTask+0x8>
	...

08006d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d7a:	f7ff fae9 	bl	8006350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d7e:	2308      	movs	r3, #8
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 f85a 	bl	8006e3c <prvSampleTimeNow>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d129      	bne.n	8006de6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10c      	bne.n	8006db2 <prvProcessTimerOrBlockTask+0x42>
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d808      	bhi.n	8006db2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006da0:	f7ff fae2 	bl	8006368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0011      	movs	r1, r2
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7ff ff90 	bl	8006cd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006db0:	e01b      	b.n	8006dea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d006      	beq.n	8006dc6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006db8:	4b0e      	ldr	r3, [pc, #56]	@ (8006df4 <prvProcessTimerOrBlockTask+0x84>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	425a      	negs	r2, r3
 8006dc0:	4153      	adcs	r3, r2
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <prvProcessTimerOrBlockTask+0x88>)
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	0019      	movs	r1, r3
 8006dd4:	f7ff f898 	bl	8005f08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dd8:	f7ff fac6 	bl	8006368 <xTaskResumeAll>
 8006ddc:	1e03      	subs	r3, r0, #0
 8006dde:	d104      	bne.n	8006dea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006de0:	f000 fa56 	bl	8007290 <vPortYield>
}
 8006de4:	e001      	b.n	8006dea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006de6:	f7ff fabf 	bl	8006368 <xTaskResumeAll>
}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	46bd      	mov	sp, r7
 8006dee:	b004      	add	sp, #16
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	20001284 	.word	0x20001284
 8006df8:	20001288 	.word	0x20001288

08006dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <prvGetNextExpireTime+0x3c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	425a      	negs	r2, r3
 8006e0c:	4153      	adcs	r3, r2
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	001a      	movs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <prvGetNextExpireTime+0x3c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e001      	b.n	8006e2e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20001280 	.word	0x20001280

08006e3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e44:	f7ff fb16 	bl	8006474 <xTaskGetTickCount>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <prvSampleTimeNow+0x3c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d205      	bcs.n	8006e62 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006e56:	f000 f8f5 	bl	8007044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e002      	b.n	8006e68 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e68:	4b03      	ldr	r3, [pc, #12]	@ (8006e78 <prvSampleTimeNow+0x3c>)
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
}
 8006e70:	0018      	movs	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b004      	add	sp, #16
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20001290 	.word	0x20001290

08006e7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d812      	bhi.n	8006ec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	1ad2      	subs	r2, r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e01b      	b.n	8006eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ef8 <prvInsertTimerInActiveList+0x7c>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	0019      	movs	r1, r3
 8006ec0:	0010      	movs	r0, r2
 8006ec2:	f7fe fbd0 	bl	8005666 <vListInsert>
 8006ec6:	e012      	b.n	8006eee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d206      	bcs.n	8006ede <prvInsertTimerInActiveList+0x62>
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d302      	bcc.n	8006ede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e007      	b.n	8006eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ede:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <prvInsertTimerInActiveList+0x80>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	0010      	movs	r0, r2
 8006eea:	f7fe fbbc 	bl	8005666 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006eee:	697b      	ldr	r3, [r7, #20]
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b006      	add	sp, #24
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20001284 	.word	0x20001284
 8006efc:	20001280 	.word	0x20001280

08006f00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b08d      	sub	sp, #52	@ 0x34
 8006f04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f06:	e089      	b.n	800701c <prvProcessReceivedCommands+0x11c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f08:	2208      	movs	r2, #8
 8006f0a:	18bb      	adds	r3, r7, r2
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da10      	bge.n	8006f34 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f12:	18bb      	adds	r3, r7, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <prvProcessReceivedCommands+0x24>
 8006f1e:	b672      	cpsid	i
 8006f20:	46c0      	nop			@ (mov r8, r8)
 8006f22:	e7fd      	b.n	8006f20 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	6858      	ldr	r0, [r3, #4]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	0019      	movs	r1, r3
 8006f32:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f34:	2208      	movs	r2, #8
 8006f36:	18bb      	adds	r3, r7, r2
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da00      	bge.n	8006f40 <prvProcessReceivedCommands+0x40>
 8006f3e:	e06d      	b.n	800701c <prvProcessReceivedCommands+0x11c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f40:	18bb      	adds	r3, r7, r2
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	3304      	adds	r3, #4
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7fe fbbd 	bl	80056d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7ff ff6e 	bl	8006e3c <prvSampleTimeNow>
 8006f60:	0003      	movs	r3, r0
 8006f62:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006f64:	2308      	movs	r3, #8
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b09      	cmp	r3, #9
 8006f6c:	d84f      	bhi.n	800700e <prvProcessReceivedCommands+0x10e>
 8006f6e:	009a      	lsls	r2, r3, #2
 8006f70:	4b32      	ldr	r3, [pc, #200]	@ (800703c <prvProcessReceivedCommands+0x13c>)
 8006f72:	18d3      	adds	r3, r2, r3
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f78:	2408      	movs	r4, #8
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	18d1      	adds	r1, r2, r3
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	6a38      	ldr	r0, [r7, #32]
 8006f8c:	f7ff ff76 	bl	8006e7c <prvInsertTimerInActiveList>
 8006f90:	1e03      	subs	r3, r0, #0
 8006f92:	d040      	beq.n	8007016 <prvProcessReceivedCommands+0x116>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	0010      	movs	r0, r2
 8006f9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d137      	bne.n	8007016 <prvProcessReceivedCommands+0x116>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa6:	193b      	adds	r3, r7, r4
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	18d2      	adds	r2, r2, r3
 8006fb0:	6a38      	ldr	r0, [r7, #32]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f7ff fe3d 	bl	8006c38 <xTimerGenericCommand>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d126      	bne.n	8007016 <prvProcessReceivedCommands+0x116>
 8006fc8:	b672      	cpsid	i
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	e7fd      	b.n	8006fca <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fce:	2308      	movs	r3, #8
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <prvProcessReceivedCommands+0xe6>
 8006fe0:	b672      	cpsid	i
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	e7fd      	b.n	8006fe2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	18d1      	adds	r1, r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	6a38      	ldr	r0, [r7, #32]
 8006ff4:	f7ff ff42 	bl	8006e7c <prvInsertTimerInActiveList>
					break;
 8006ff8:	e010      	b.n	800701c <prvProcessReceivedCommands+0x11c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	222c      	movs	r2, #44	@ 0x2c
 8006ffe:	5c9b      	ldrb	r3, [r3, r2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <prvProcessReceivedCommands+0x11a>
						{
							vPortFree( pxTimer );
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	0018      	movs	r0, r3
 8007008:	f000 fa92 	bl	8007530 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800700c:	e005      	b.n	800701a <prvProcessReceivedCommands+0x11a>

				default	:
					/* Don't expect to get here. */
					break;
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	e004      	b.n	800701c <prvProcessReceivedCommands+0x11c>
					break;
 8007012:	46c0      	nop			@ (mov r8, r8)
 8007014:	e002      	b.n	800701c <prvProcessReceivedCommands+0x11c>
					break;
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	e000      	b.n	800701c <prvProcessReceivedCommands+0x11c>
					break;
 800701a:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800701c:	4b08      	ldr	r3, [pc, #32]	@ (8007040 <prvProcessReceivedCommands+0x140>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2208      	movs	r2, #8
 8007022:	18b9      	adds	r1, r7, r2
 8007024:	2200      	movs	r2, #0
 8007026:	0018      	movs	r0, r3
 8007028:	f7fe fd75 	bl	8005b16 <xQueueReceive>
 800702c:	1e03      	subs	r3, r0, #0
 800702e:	d000      	beq.n	8007032 <prvProcessReceivedCommands+0x132>
 8007030:	e76a      	b.n	8006f08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b00b      	add	sp, #44	@ 0x2c
 800703a:	bd90      	pop	{r4, r7, pc}
 800703c:	08008ca4 	.word	0x08008ca4
 8007040:	20001288 	.word	0x20001288

08007044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800704a:	e03f      	b.n	80070cc <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800704c:	4b29      	ldr	r3, [pc, #164]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007056:	4b27      	ldr	r3, [pc, #156]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3304      	adds	r3, #4
 8007064:	0018      	movs	r0, r3
 8007066:	f7fe fb34 	bl	80056d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	0010      	movs	r0, r2
 8007072:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d127      	bne.n	80070cc <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	18d3      	adds	r3, r2, r3
 8007084:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d90e      	bls.n	80070ac <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709a:	4b16      	ldr	r3, [pc, #88]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3304      	adds	r3, #4
 80070a2:	0019      	movs	r1, r3
 80070a4:	0010      	movs	r0, r2
 80070a6:	f7fe fade 	bl	8005666 <vListInsert>
 80070aa:	e00f      	b.n	80070cc <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	2300      	movs	r3, #0
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2100      	movs	r1, #0
 80070b8:	f7ff fdbe 	bl	8006c38 <xTimerGenericCommand>
 80070bc:	0003      	movs	r3, r0
 80070be:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <prvSwitchTimerLists+0x88>
 80070c6:	b672      	cpsid	i
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	e7fd      	b.n	80070c8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070cc:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1ba      	bne.n	800704c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070d6:	4b07      	ldr	r3, [pc, #28]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <prvSwitchTimerLists+0xb4>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b04      	ldr	r3, [pc, #16]	@ (80070f4 <prvSwitchTimerLists+0xb0>)
 80070e2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <prvSwitchTimerLists+0xb4>)
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b006      	add	sp, #24
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	20001280 	.word	0x20001280
 80070f8:	20001284 	.word	0x20001284

080070fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007102:	f000 f8d5 	bl	80072b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007106:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <prvCheckForValidListAndQueue+0x64>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d123      	bne.n	8007156 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800710e:	4b15      	ldr	r3, [pc, #84]	@ (8007164 <prvCheckForValidListAndQueue+0x68>)
 8007110:	0018      	movs	r0, r3
 8007112:	f7fe fa5d 	bl	80055d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007116:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <prvCheckForValidListAndQueue+0x6c>)
 8007118:	0018      	movs	r0, r3
 800711a:	f7fe fa59 	bl	80055d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800711e:	4b13      	ldr	r3, [pc, #76]	@ (800716c <prvCheckForValidListAndQueue+0x70>)
 8007120:	4a10      	ldr	r2, [pc, #64]	@ (8007164 <prvCheckForValidListAndQueue+0x68>)
 8007122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007124:	4b12      	ldr	r3, [pc, #72]	@ (8007170 <prvCheckForValidListAndQueue+0x74>)
 8007126:	4a10      	ldr	r2, [pc, #64]	@ (8007168 <prvCheckForValidListAndQueue+0x6c>)
 8007128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800712a:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <prvCheckForValidListAndQueue+0x78>)
 800712c:	4a12      	ldr	r2, [pc, #72]	@ (8007178 <prvCheckForValidListAndQueue+0x7c>)
 800712e:	2100      	movs	r1, #0
 8007130:	9100      	str	r1, [sp, #0]
 8007132:	2110      	movs	r1, #16
 8007134:	200a      	movs	r0, #10
 8007136:	f7fe fb45 	bl	80057c4 <xQueueGenericCreateStatic>
 800713a:	0002      	movs	r2, r0
 800713c:	4b08      	ldr	r3, [pc, #32]	@ (8007160 <prvCheckForValidListAndQueue+0x64>)
 800713e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007140:	4b07      	ldr	r3, [pc, #28]	@ (8007160 <prvCheckForValidListAndQueue+0x64>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d006      	beq.n	8007156 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <prvCheckForValidListAndQueue+0x64>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0b      	ldr	r2, [pc, #44]	@ (800717c <prvCheckForValidListAndQueue+0x80>)
 800714e:	0011      	movs	r1, r2
 8007150:	0018      	movs	r0, r3
 8007152:	f7fe feb1 	bl	8005eb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007156:	f000 f8bd 	bl	80072d4 <vPortExitCritical>
}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20001288 	.word	0x20001288
 8007164:	20001258 	.word	0x20001258
 8007168:	2000126c 	.word	0x2000126c
 800716c:	20001280 	.word	0x20001280
 8007170:	20001284 	.word	0x20001284
 8007174:	20001334 	.word	0x20001334
 8007178:	20001294 	.word	0x20001294
 800717c:	080081f4 	.word	0x080081f4

08007180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b04      	subs	r3, #4
 8007190:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2280      	movs	r2, #128	@ 0x80
 8007196:	0452      	lsls	r2, r2, #17
 8007198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3b04      	subs	r3, #4
 800719e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071ac:	4a08      	ldr	r2, [pc, #32]	@ (80071d0 <pxPortInitialiseStack+0x50>)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3b14      	subs	r3, #20
 80071b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b20      	subs	r3, #32
 80071c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	0018      	movs	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b004      	add	sp, #16
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	080071d5 	.word	0x080071d5

080071d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071de:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <prvTaskExitError+0x2c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	d002      	beq.n	80071ec <prvTaskExitError+0x18>
 80071e6:	b672      	cpsid	i
 80071e8:	46c0      	nop			@ (mov r8, r8)
 80071ea:	e7fd      	b.n	80071e8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80071ec:	b672      	cpsid	i
	while( ulDummy == 0 )
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0fc      	beq.n	80071f0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071f6:	46c0      	nop			@ (mov r8, r8)
 80071f8:	46c0      	nop			@ (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2000041c 	.word	0x2000041c

08007204 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007208:	46c0      	nop			@ (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007210:	4a0b      	ldr	r2, [pc, #44]	@ (8007240 <pxCurrentTCBConst2>)
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	3020      	adds	r0, #32
 8007218:	f380 8809 	msr	PSP, r0
 800721c:	2002      	movs	r0, #2
 800721e:	f380 8814 	msr	CONTROL, r0
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007228:	46ae      	mov	lr, r5
 800722a:	bc08      	pop	{r3}
 800722c:	bc04      	pop	{r2}
 800722e:	b662      	cpsie	i
 8007230:	4718      	bx	r3
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	46c0      	nop			@ (mov r8, r8)
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	46c0      	nop			@ (mov r8, r8)
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	46c0      	nop			@ (mov r8, r8)
 800723e:	46c0      	nop			@ (mov r8, r8)

08007240 <pxCurrentTCBConst2>:
 8007240:	20000d58 	.word	0x20000d58
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007244:	46c0      	nop			@ (mov r8, r8)
 8007246:	46c0      	nop			@ (mov r8, r8)

08007248 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800724c:	4b0e      	ldr	r3, [pc, #56]	@ (8007288 <xPortStartScheduler+0x40>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <xPortStartScheduler+0x40>)
 8007252:	21ff      	movs	r1, #255	@ 0xff
 8007254:	0409      	lsls	r1, r1, #16
 8007256:	430a      	orrs	r2, r1
 8007258:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800725a:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <xPortStartScheduler+0x40>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <xPortStartScheduler+0x40>)
 8007260:	21ff      	movs	r1, #255	@ 0xff
 8007262:	0609      	lsls	r1, r1, #24
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007268:	f000 f898 	bl	800739c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800726c:	4b07      	ldr	r3, [pc, #28]	@ (800728c <xPortStartScheduler+0x44>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007272:	f7ff ffcd 	bl	8007210 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007276:	f7ff f99f 	bl	80065b8 <vTaskSwitchContext>
	prvTaskExitError();
 800727a:	f7ff ffab 	bl	80071d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800727e:	2300      	movs	r3, #0
}
 8007280:	0018      	movs	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	e000ed20 	.word	0xe000ed20
 800728c:	2000041c 	.word	0x2000041c

08007290 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007294:	4b05      	ldr	r3, [pc, #20]	@ (80072ac <vPortYield+0x1c>)
 8007296:	2280      	movs	r2, #128	@ 0x80
 8007298:	0552      	lsls	r2, r2, #21
 800729a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800729c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80072a0:	f3bf 8f6f 	isb	sy
}
 80072a4:	46c0      	nop			@ (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80072b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80072b6:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <vPortEnterCritical+0x20>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <vPortEnterCritical+0x20>)
 80072be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80072c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80072c4:	f3bf 8f6f 	isb	sy
}
 80072c8:	46c0      	nop			@ (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			@ (mov r8, r8)
 80072d0:	2000041c 	.word	0x2000041c

080072d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072d8:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <vPortExitCritical+0x2c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <vPortExitCritical+0x12>
 80072e0:	b672      	cpsid	i
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	e7fd      	b.n	80072e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80072e6:	4b06      	ldr	r3, [pc, #24]	@ (8007300 <vPortExitCritical+0x2c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	1e5a      	subs	r2, r3, #1
 80072ec:	4b04      	ldr	r3, [pc, #16]	@ (8007300 <vPortExitCritical+0x2c>)
 80072ee:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80072f0:	4b03      	ldr	r3, [pc, #12]	@ (8007300 <vPortExitCritical+0x2c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d100      	bne.n	80072fa <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80072f8:	b662      	cpsie	i
    }
}
 80072fa:	46c0      	nop			@ (mov r8, r8)
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	2000041c 	.word	0x2000041c

08007304 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007304:	f3ef 8010 	mrs	r0, PRIMASK
 8007308:	b672      	cpsid	i
 800730a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	0018      	movs	r0, r3

08007310 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007310:	f380 8810 	msr	PRIMASK, r0
 8007314:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007316:	46c0      	nop			@ (mov r8, r8)
	...

08007320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007320:	f3ef 8009 	mrs	r0, PSP
 8007324:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <pxCurrentTCBConst>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	3820      	subs	r0, #32
 800732a:	6010      	str	r0, [r2, #0]
 800732c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800732e:	4644      	mov	r4, r8
 8007330:	464d      	mov	r5, r9
 8007332:	4656      	mov	r6, sl
 8007334:	465f      	mov	r7, fp
 8007336:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007338:	b508      	push	{r3, lr}
 800733a:	b672      	cpsid	i
 800733c:	f7ff f93c 	bl	80065b8 <vTaskSwitchContext>
 8007340:	b662      	cpsie	i
 8007342:	bc0c      	pop	{r2, r3}
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	6808      	ldr	r0, [r1, #0]
 8007348:	3010      	adds	r0, #16
 800734a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800734c:	46a0      	mov	r8, r4
 800734e:	46a9      	mov	r9, r5
 8007350:	46b2      	mov	sl, r6
 8007352:	46bb      	mov	fp, r7
 8007354:	f380 8809 	msr	PSP, r0
 8007358:	3820      	subs	r0, #32
 800735a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800735c:	4718      	bx	r3
 800735e:	46c0      	nop			@ (mov r8, r8)

08007360 <pxCurrentTCBConst>:
 8007360:	20000d58 	.word	0x20000d58
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007364:	46c0      	nop			@ (mov r8, r8)
 8007366:	46c0      	nop			@ (mov r8, r8)

08007368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800736e:	f7ff ffc9 	bl	8007304 <ulSetInterruptMaskFromISR>
 8007372:	0003      	movs	r3, r0
 8007374:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007376:	f7ff f88b 	bl	8006490 <xTaskIncrementTick>
 800737a:	1e03      	subs	r3, r0, #0
 800737c:	d003      	beq.n	8007386 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800737e:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <SysTick_Handler+0x30>)
 8007380:	2280      	movs	r2, #128	@ 0x80
 8007382:	0552      	lsls	r2, r2, #21
 8007384:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f7ff ffc1 	bl	8007310 <vClearInterruptMaskFromISR>
}
 800738e:	46c0      	nop			@ (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b002      	add	sp, #8
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <prvSetupTimerInterrupt+0x34>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <prvSetupTimerInterrupt+0x38>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <prvSetupTimerInterrupt+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	22fa      	movs	r2, #250	@ 0xfa
 80073b2:	0091      	lsls	r1, r2, #2
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7f8 feb1 	bl	800011c <__udivsi3>
 80073ba:	0003      	movs	r3, r0
 80073bc:	001a      	movs	r2, r3
 80073be:	4b07      	ldr	r3, [pc, #28]	@ (80073dc <prvSetupTimerInterrupt+0x40>)
 80073c0:	3a01      	subs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80073c4:	4b02      	ldr	r3, [pc, #8]	@ (80073d0 <prvSetupTimerInterrupt+0x34>)
 80073c6:	2207      	movs	r2, #7
 80073c8:	601a      	str	r2, [r3, #0]
}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000000 	.word	0x20000000
 80073dc:	e000e014 	.word	0xe000e014

080073e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80073ec:	f7fe ffb0 	bl	8006350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073f0:	4b4a      	ldr	r3, [pc, #296]	@ (800751c <pvPortMalloc+0x13c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073f8:	f000 f8e4 	bl	80075c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073fc:	4b48      	ldr	r3, [pc, #288]	@ (8007520 <pvPortMalloc+0x140>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4013      	ands	r3, r2
 8007404:	d000      	beq.n	8007408 <pvPortMalloc+0x28>
 8007406:	e07b      	b.n	8007500 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800740e:	2208      	movs	r2, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	189b      	adds	r3, r3, r2
 8007414:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2207      	movs	r2, #7
 800741a:	4013      	ands	r3, r2
 800741c:	d00b      	beq.n	8007436 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2207      	movs	r2, #7
 8007422:	4393      	bics	r3, r2
 8007424:	3308      	adds	r3, #8
 8007426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2207      	movs	r2, #7
 800742c:	4013      	ands	r3, r2
 800742e:	d002      	beq.n	8007436 <pvPortMalloc+0x56>
 8007430:	b672      	cpsid	i
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	e7fd      	b.n	8007432 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d061      	beq.n	8007500 <pvPortMalloc+0x120>
 800743c:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <pvPortMalloc+0x144>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d85c      	bhi.n	8007500 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007446:	4b38      	ldr	r3, [pc, #224]	@ (8007528 <pvPortMalloc+0x148>)
 8007448:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800744a:	4b37      	ldr	r3, [pc, #220]	@ (8007528 <pvPortMalloc+0x148>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007450:	e004      	b.n	800745c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d903      	bls.n	800746e <pvPortMalloc+0x8e>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f1      	bne.n	8007452 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800746e:	4b2b      	ldr	r3, [pc, #172]	@ (800751c <pvPortMalloc+0x13c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	429a      	cmp	r2, r3
 8007476:	d043      	beq.n	8007500 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	189b      	adds	r3, r3, r2
 8007480:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	2308      	movs	r3, #8
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	429a      	cmp	r2, r3
 8007498:	d917      	bls.n	80074ca <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2207      	movs	r2, #7
 80074a6:	4013      	ands	r3, r2
 80074a8:	d002      	beq.n	80074b0 <pvPortMalloc+0xd0>
 80074aa:	b672      	cpsid	i
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	e7fd      	b.n	80074ac <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f000 f8dd 	bl	8007684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074ca:	4b16      	ldr	r3, [pc, #88]	@ (8007524 <pvPortMalloc+0x144>)
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	4b13      	ldr	r3, [pc, #76]	@ (8007524 <pvPortMalloc+0x144>)
 80074d6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074d8:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <pvPortMalloc+0x144>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b13      	ldr	r3, [pc, #76]	@ (800752c <pvPortMalloc+0x14c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d203      	bcs.n	80074ec <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007524 <pvPortMalloc+0x144>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4b10      	ldr	r3, [pc, #64]	@ (800752c <pvPortMalloc+0x14c>)
 80074ea:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <pvPortMalloc+0x140>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007500:	f7fe ff32 	bl	8006368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2207      	movs	r2, #7
 8007508:	4013      	ands	r3, r2
 800750a:	d002      	beq.n	8007512 <pvPortMalloc+0x132>
 800750c:	b672      	cpsid	i
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	e7fd      	b.n	800750e <pvPortMalloc+0x12e>
	return pvReturn;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b006      	add	sp, #24
 800751a:	bd80      	pop	{r7, pc}
 800751c:	200061ac 	.word	0x200061ac
 8007520:	200061b8 	.word	0x200061b8
 8007524:	200061b0 	.word	0x200061b0
 8007528:	200061a4 	.word	0x200061a4
 800752c:	200061b4 	.word	0x200061b4

08007530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d037      	beq.n	80075b2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007542:	2308      	movs	r3, #8
 8007544:	425b      	negs	r3, r3
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	18d3      	adds	r3, r2, r3
 800754a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	4b19      	ldr	r3, [pc, #100]	@ (80075bc <vPortFree+0x8c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4013      	ands	r3, r2
 800755a:	d102      	bne.n	8007562 <vPortFree+0x32>
 800755c:	b672      	cpsid	i
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	e7fd      	b.n	800755e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <vPortFree+0x40>
 800756a:	b672      	cpsid	i
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	e7fd      	b.n	800756c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <vPortFree+0x8c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4013      	ands	r3, r2
 800757a:	d01a      	beq.n	80075b2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d116      	bne.n	80075b2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <vPortFree+0x8c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	43db      	mvns	r3, r3
 800758e:	401a      	ands	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007594:	f7fe fedc 	bl	8006350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b08      	ldr	r3, [pc, #32]	@ (80075c0 <vPortFree+0x90>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	18d2      	adds	r2, r2, r3
 80075a2:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <vPortFree+0x90>)
 80075a4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f86b 	bl	8007684 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075ae:	f7fe fedb 	bl	8006368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b004      	add	sp, #16
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	200061b8 	.word	0x200061b8
 80075c0:	200061b0 	.word	0x200061b0

080075c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ca:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <prvHeapInit+0xa4>)
 80075cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075ce:	4b27      	ldr	r3, [pc, #156]	@ (800766c <prvHeapInit+0xa8>)
 80075d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2207      	movs	r2, #7
 80075d6:	4013      	ands	r3, r2
 80075d8:	d00c      	beq.n	80075f4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2207      	movs	r2, #7
 80075e4:	4393      	bics	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	4b1f      	ldr	r3, [pc, #124]	@ (800766c <prvHeapInit+0xa8>)
 80075f0:	18d3      	adds	r3, r2, r3
 80075f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <prvHeapInit+0xac>)
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <prvHeapInit+0xac>)
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	18d3      	adds	r3, r2, r3
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2207      	movs	r2, #7
 8007618:	4393      	bics	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <prvHeapInit+0xb0>)
 8007620:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvHeapInit+0xb0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvHeapInit+0xb0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvHeapInit+0xb0>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <prvHeapInit+0xb4>)
 800764e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	4b09      	ldr	r3, [pc, #36]	@ (800767c <prvHeapInit+0xb8>)
 8007656:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <prvHeapInit+0xbc>)
 800765a:	2280      	movs	r2, #128	@ 0x80
 800765c:	0612      	lsls	r2, r2, #24
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	46c0      	nop			@ (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}
 8007668:	00004e20 	.word	0x00004e20
 800766c:	20001384 	.word	0x20001384
 8007670:	200061a4 	.word	0x200061a4
 8007674:	200061ac 	.word	0x200061ac
 8007678:	200061b4 	.word	0x200061b4
 800767c:	200061b0 	.word	0x200061b0
 8007680:	200061b8 	.word	0x200061b8

08007684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <prvInsertBlockIntoFreeList+0xa8>)
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <prvInsertBlockIntoFreeList+0x14>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8f7      	bhi.n	8007692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	18d3      	adds	r3, r2, r3
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	18d2      	adds	r2, r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	18d2      	adds	r2, r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d118      	bne.n	800770c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b14      	ldr	r3, [pc, #80]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d00d      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	18d2      	adds	r2, r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e008      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007702:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e003      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b004      	add	sp, #16
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	200061a4 	.word	0x200061a4
 8007730:	200061ac 	.word	0x200061ac

08007734 <__itoa>:
 8007734:	1e93      	subs	r3, r2, #2
 8007736:	b510      	push	{r4, lr}
 8007738:	000c      	movs	r4, r1
 800773a:	2b22      	cmp	r3, #34	@ 0x22
 800773c:	d904      	bls.n	8007748 <__itoa+0x14>
 800773e:	2300      	movs	r3, #0
 8007740:	001c      	movs	r4, r3
 8007742:	700b      	strb	r3, [r1, #0]
 8007744:	0020      	movs	r0, r4
 8007746:	bd10      	pop	{r4, pc}
 8007748:	2a0a      	cmp	r2, #10
 800774a:	d109      	bne.n	8007760 <__itoa+0x2c>
 800774c:	2800      	cmp	r0, #0
 800774e:	da07      	bge.n	8007760 <__itoa+0x2c>
 8007750:	232d      	movs	r3, #45	@ 0x2d
 8007752:	700b      	strb	r3, [r1, #0]
 8007754:	2101      	movs	r1, #1
 8007756:	4240      	negs	r0, r0
 8007758:	1861      	adds	r1, r4, r1
 800775a:	f000 f807 	bl	800776c <__utoa>
 800775e:	e7f1      	b.n	8007744 <__itoa+0x10>
 8007760:	2100      	movs	r1, #0
 8007762:	e7f9      	b.n	8007758 <__itoa+0x24>

08007764 <itoa>:
 8007764:	b510      	push	{r4, lr}
 8007766:	f7ff ffe5 	bl	8007734 <__itoa>
 800776a:	bd10      	pop	{r4, pc}

0800776c <__utoa>:
 800776c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776e:	000c      	movs	r4, r1
 8007770:	0016      	movs	r6, r2
 8007772:	b08d      	sub	sp, #52	@ 0x34
 8007774:	2225      	movs	r2, #37	@ 0x25
 8007776:	0007      	movs	r7, r0
 8007778:	4915      	ldr	r1, [pc, #84]	@ (80077d0 <__utoa+0x64>)
 800777a:	a802      	add	r0, sp, #8
 800777c:	f000 f880 	bl	8007880 <memcpy>
 8007780:	1e62      	subs	r2, r4, #1
 8007782:	1eb3      	subs	r3, r6, #2
 8007784:	2500      	movs	r5, #0
 8007786:	9201      	str	r2, [sp, #4]
 8007788:	2b22      	cmp	r3, #34	@ 0x22
 800778a:	d904      	bls.n	8007796 <__utoa+0x2a>
 800778c:	7025      	strb	r5, [r4, #0]
 800778e:	002c      	movs	r4, r5
 8007790:	0020      	movs	r0, r4
 8007792:	b00d      	add	sp, #52	@ 0x34
 8007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007796:	0038      	movs	r0, r7
 8007798:	0031      	movs	r1, r6
 800779a:	f7f8 fd45 	bl	8000228 <__aeabi_uidivmod>
 800779e:	000b      	movs	r3, r1
 80077a0:	aa02      	add	r2, sp, #8
 80077a2:	5cd3      	ldrb	r3, [r2, r3]
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	0029      	movs	r1, r5
 80077a8:	3501      	adds	r5, #1
 80077aa:	5553      	strb	r3, [r2, r5]
 80077ac:	003b      	movs	r3, r7
 80077ae:	0007      	movs	r7, r0
 80077b0:	429e      	cmp	r6, r3
 80077b2:	d9f0      	bls.n	8007796 <__utoa+0x2a>
 80077b4:	2300      	movs	r3, #0
 80077b6:	0022      	movs	r2, r4
 80077b8:	5563      	strb	r3, [r4, r5]
 80077ba:	000b      	movs	r3, r1
 80077bc:	1ac8      	subs	r0, r1, r3
 80077be:	4283      	cmp	r3, r0
 80077c0:	dde6      	ble.n	8007790 <__utoa+0x24>
 80077c2:	7810      	ldrb	r0, [r2, #0]
 80077c4:	5ce5      	ldrb	r5, [r4, r3]
 80077c6:	7015      	strb	r5, [r2, #0]
 80077c8:	54e0      	strb	r0, [r4, r3]
 80077ca:	3201      	adds	r2, #1
 80077cc:	3b01      	subs	r3, #1
 80077ce:	e7f5      	b.n	80077bc <__utoa+0x50>
 80077d0:	08008ccc 	.word	0x08008ccc

080077d4 <siprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b510      	push	{r4, lr}
 80077d8:	2400      	movs	r4, #0
 80077da:	490c      	ldr	r1, [pc, #48]	@ (800780c <siprintf+0x38>)
 80077dc:	b09d      	sub	sp, #116	@ 0x74
 80077de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80077e0:	9002      	str	r0, [sp, #8]
 80077e2:	9006      	str	r0, [sp, #24]
 80077e4:	9107      	str	r1, [sp, #28]
 80077e6:	9104      	str	r1, [sp, #16]
 80077e8:	4809      	ldr	r0, [pc, #36]	@ (8007810 <siprintf+0x3c>)
 80077ea:	490a      	ldr	r1, [pc, #40]	@ (8007814 <siprintf+0x40>)
 80077ec:	cb04      	ldmia	r3!, {r2}
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	6800      	ldr	r0, [r0, #0]
 80077f2:	a902      	add	r1, sp, #8
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80077f8:	f000 f9a8 	bl	8007b4c <_svfiprintf_r>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	701c      	strb	r4, [r3, #0]
 8007800:	b01d      	add	sp, #116	@ 0x74
 8007802:	bc10      	pop	{r4}
 8007804:	bc08      	pop	{r3}
 8007806:	b003      	add	sp, #12
 8007808:	4718      	bx	r3
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	7fffffff 	.word	0x7fffffff
 8007810:	20000420 	.word	0x20000420
 8007814:	ffff0208 	.word	0xffff0208

08007818 <memset>:
 8007818:	0003      	movs	r3, r0
 800781a:	1882      	adds	r2, r0, r2
 800781c:	4293      	cmp	r3, r2
 800781e:	d100      	bne.n	8007822 <memset+0xa>
 8007820:	4770      	bx	lr
 8007822:	7019      	strb	r1, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	e7f9      	b.n	800781c <memset+0x4>

08007828 <__errno>:
 8007828:	4b01      	ldr	r3, [pc, #4]	@ (8007830 <__errno+0x8>)
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	4770      	bx	lr
 800782e:	46c0      	nop			@ (mov r8, r8)
 8007830:	20000420 	.word	0x20000420

08007834 <__libc_init_array>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	2600      	movs	r6, #0
 8007838:	4c0c      	ldr	r4, [pc, #48]	@ (800786c <__libc_init_array+0x38>)
 800783a:	4d0d      	ldr	r5, [pc, #52]	@ (8007870 <__libc_init_array+0x3c>)
 800783c:	1b64      	subs	r4, r4, r5
 800783e:	10a4      	asrs	r4, r4, #2
 8007840:	42a6      	cmp	r6, r4
 8007842:	d109      	bne.n	8007858 <__libc_init_array+0x24>
 8007844:	2600      	movs	r6, #0
 8007846:	f000 fc63 	bl	8008110 <_init>
 800784a:	4c0a      	ldr	r4, [pc, #40]	@ (8007874 <__libc_init_array+0x40>)
 800784c:	4d0a      	ldr	r5, [pc, #40]	@ (8007878 <__libc_init_array+0x44>)
 800784e:	1b64      	subs	r4, r4, r5
 8007850:	10a4      	asrs	r4, r4, #2
 8007852:	42a6      	cmp	r6, r4
 8007854:	d105      	bne.n	8007862 <__libc_init_array+0x2e>
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	00b3      	lsls	r3, r6, #2
 800785a:	58eb      	ldr	r3, [r5, r3]
 800785c:	4798      	blx	r3
 800785e:	3601      	adds	r6, #1
 8007860:	e7ee      	b.n	8007840 <__libc_init_array+0xc>
 8007862:	00b3      	lsls	r3, r6, #2
 8007864:	58eb      	ldr	r3, [r5, r3]
 8007866:	4798      	blx	r3
 8007868:	3601      	adds	r6, #1
 800786a:	e7f2      	b.n	8007852 <__libc_init_array+0x1e>
 800786c:	08008d24 	.word	0x08008d24
 8007870:	08008d24 	.word	0x08008d24
 8007874:	08008d28 	.word	0x08008d28
 8007878:	08008d24 	.word	0x08008d24

0800787c <__retarget_lock_acquire_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_release_recursive>:
 800787e:	4770      	bx	lr

08007880 <memcpy>:
 8007880:	2300      	movs	r3, #0
 8007882:	b510      	push	{r4, lr}
 8007884:	429a      	cmp	r2, r3
 8007886:	d100      	bne.n	800788a <memcpy+0xa>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	5ccc      	ldrb	r4, [r1, r3]
 800788c:	54c4      	strb	r4, [r0, r3]
 800788e:	3301      	adds	r3, #1
 8007890:	e7f8      	b.n	8007884 <memcpy+0x4>
	...

08007894 <_free_r>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	0005      	movs	r5, r0
 8007898:	1e0c      	subs	r4, r1, #0
 800789a:	d010      	beq.n	80078be <_free_r+0x2a>
 800789c:	3c04      	subs	r4, #4
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da00      	bge.n	80078a6 <_free_r+0x12>
 80078a4:	18e4      	adds	r4, r4, r3
 80078a6:	0028      	movs	r0, r5
 80078a8:	f000 f8e0 	bl	8007a6c <__malloc_lock>
 80078ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007924 <_free_r+0x90>)
 80078ae:	6813      	ldr	r3, [r2, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <_free_r+0x2c>
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6014      	str	r4, [r2, #0]
 80078b8:	0028      	movs	r0, r5
 80078ba:	f000 f8df 	bl	8007a7c <__malloc_unlock>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	d908      	bls.n	80078d6 <_free_r+0x42>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	1821      	adds	r1, r4, r0
 80078c8:	428b      	cmp	r3, r1
 80078ca:	d1f3      	bne.n	80078b4 <_free_r+0x20>
 80078cc:	6819      	ldr	r1, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	1809      	adds	r1, r1, r0
 80078d2:	6021      	str	r1, [r4, #0]
 80078d4:	e7ee      	b.n	80078b4 <_free_r+0x20>
 80078d6:	001a      	movs	r2, r3
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <_free_r+0x4e>
 80078de:	42a3      	cmp	r3, r4
 80078e0:	d9f9      	bls.n	80078d6 <_free_r+0x42>
 80078e2:	6811      	ldr	r1, [r2, #0]
 80078e4:	1850      	adds	r0, r2, r1
 80078e6:	42a0      	cmp	r0, r4
 80078e8:	d10b      	bne.n	8007902 <_free_r+0x6e>
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	1809      	adds	r1, r1, r0
 80078ee:	1850      	adds	r0, r2, r1
 80078f0:	6011      	str	r1, [r2, #0]
 80078f2:	4283      	cmp	r3, r0
 80078f4:	d1e0      	bne.n	80078b8 <_free_r+0x24>
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	1841      	adds	r1, r0, r1
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	e7da      	b.n	80078b8 <_free_r+0x24>
 8007902:	42a0      	cmp	r0, r4
 8007904:	d902      	bls.n	800790c <_free_r+0x78>
 8007906:	230c      	movs	r3, #12
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	e7d5      	b.n	80078b8 <_free_r+0x24>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	1821      	adds	r1, r4, r0
 8007910:	428b      	cmp	r3, r1
 8007912:	d103      	bne.n	800791c <_free_r+0x88>
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	1809      	adds	r1, r1, r0
 800791a:	6021      	str	r1, [r4, #0]
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	6054      	str	r4, [r2, #4]
 8007920:	e7ca      	b.n	80078b8 <_free_r+0x24>
 8007922:	46c0      	nop			@ (mov r8, r8)
 8007924:	20006300 	.word	0x20006300

08007928 <sbrk_aligned>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4e0f      	ldr	r6, [pc, #60]	@ (8007968 <sbrk_aligned+0x40>)
 800792c:	000d      	movs	r5, r1
 800792e:	6831      	ldr	r1, [r6, #0]
 8007930:	0004      	movs	r4, r0
 8007932:	2900      	cmp	r1, #0
 8007934:	d102      	bne.n	800793c <sbrk_aligned+0x14>
 8007936:	f000 fb95 	bl	8008064 <_sbrk_r>
 800793a:	6030      	str	r0, [r6, #0]
 800793c:	0029      	movs	r1, r5
 800793e:	0020      	movs	r0, r4
 8007940:	f000 fb90 	bl	8008064 <_sbrk_r>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d103      	bne.n	8007950 <sbrk_aligned+0x28>
 8007948:	2501      	movs	r5, #1
 800794a:	426d      	negs	r5, r5
 800794c:	0028      	movs	r0, r5
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	2303      	movs	r3, #3
 8007952:	1cc5      	adds	r5, r0, #3
 8007954:	439d      	bics	r5, r3
 8007956:	42a8      	cmp	r0, r5
 8007958:	d0f8      	beq.n	800794c <sbrk_aligned+0x24>
 800795a:	1a29      	subs	r1, r5, r0
 800795c:	0020      	movs	r0, r4
 800795e:	f000 fb81 	bl	8008064 <_sbrk_r>
 8007962:	3001      	adds	r0, #1
 8007964:	d1f2      	bne.n	800794c <sbrk_aligned+0x24>
 8007966:	e7ef      	b.n	8007948 <sbrk_aligned+0x20>
 8007968:	200062fc 	.word	0x200062fc

0800796c <_malloc_r>:
 800796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800796e:	2203      	movs	r2, #3
 8007970:	1ccb      	adds	r3, r1, #3
 8007972:	4393      	bics	r3, r2
 8007974:	3308      	adds	r3, #8
 8007976:	0005      	movs	r5, r0
 8007978:	001f      	movs	r7, r3
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d234      	bcs.n	80079e8 <_malloc_r+0x7c>
 800797e:	270c      	movs	r7, #12
 8007980:	42b9      	cmp	r1, r7
 8007982:	d833      	bhi.n	80079ec <_malloc_r+0x80>
 8007984:	0028      	movs	r0, r5
 8007986:	f000 f871 	bl	8007a6c <__malloc_lock>
 800798a:	4e37      	ldr	r6, [pc, #220]	@ (8007a68 <_malloc_r+0xfc>)
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	001c      	movs	r4, r3
 8007990:	2c00      	cmp	r4, #0
 8007992:	d12f      	bne.n	80079f4 <_malloc_r+0x88>
 8007994:	0039      	movs	r1, r7
 8007996:	0028      	movs	r0, r5
 8007998:	f7ff ffc6 	bl	8007928 <sbrk_aligned>
 800799c:	0004      	movs	r4, r0
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d15f      	bne.n	8007a62 <_malloc_r+0xf6>
 80079a2:	6834      	ldr	r4, [r6, #0]
 80079a4:	9400      	str	r4, [sp, #0]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d14a      	bne.n	8007a42 <_malloc_r+0xd6>
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d052      	beq.n	8007a56 <_malloc_r+0xea>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	0028      	movs	r0, r5
 80079b4:	18e3      	adds	r3, r4, r3
 80079b6:	9900      	ldr	r1, [sp, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f000 fb53 	bl	8008064 <_sbrk_r>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	4283      	cmp	r3, r0
 80079c2:	d148      	bne.n	8007a56 <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	0028      	movs	r0, r5
 80079c8:	1aff      	subs	r7, r7, r3
 80079ca:	0039      	movs	r1, r7
 80079cc:	f7ff ffac 	bl	8007928 <sbrk_aligned>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d040      	beq.n	8007a56 <_malloc_r+0xea>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	19db      	adds	r3, r3, r7
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	6833      	ldr	r3, [r6, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d133      	bne.n	8007a4a <_malloc_r+0xde>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	e019      	b.n	8007a1c <_malloc_r+0xb0>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dac9      	bge.n	8007980 <_malloc_r+0x14>
 80079ec:	230c      	movs	r3, #12
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	2000      	movs	r0, #0
 80079f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079f4:	6821      	ldr	r1, [r4, #0]
 80079f6:	1bc9      	subs	r1, r1, r7
 80079f8:	d420      	bmi.n	8007a3c <_malloc_r+0xd0>
 80079fa:	290b      	cmp	r1, #11
 80079fc:	d90a      	bls.n	8007a14 <_malloc_r+0xa8>
 80079fe:	19e2      	adds	r2, r4, r7
 8007a00:	6027      	str	r7, [r4, #0]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	d104      	bne.n	8007a10 <_malloc_r+0xa4>
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	6011      	str	r1, [r2, #0]
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	e005      	b.n	8007a1c <_malloc_r+0xb0>
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e7f9      	b.n	8007a08 <_malloc_r+0x9c>
 8007a14:	6862      	ldr	r2, [r4, #4]
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	d10e      	bne.n	8007a38 <_malloc_r+0xcc>
 8007a1a:	6032      	str	r2, [r6, #0]
 8007a1c:	0028      	movs	r0, r5
 8007a1e:	f000 f82d 	bl	8007a7c <__malloc_unlock>
 8007a22:	0020      	movs	r0, r4
 8007a24:	2207      	movs	r2, #7
 8007a26:	300b      	adds	r0, #11
 8007a28:	1d23      	adds	r3, r4, #4
 8007a2a:	4390      	bics	r0, r2
 8007a2c:	1ac2      	subs	r2, r0, r3
 8007a2e:	4298      	cmp	r0, r3
 8007a30:	d0df      	beq.n	80079f2 <_malloc_r+0x86>
 8007a32:	1a1b      	subs	r3, r3, r0
 8007a34:	50a3      	str	r3, [r4, r2]
 8007a36:	e7dc      	b.n	80079f2 <_malloc_r+0x86>
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e7ef      	b.n	8007a1c <_malloc_r+0xb0>
 8007a3c:	0023      	movs	r3, r4
 8007a3e:	6864      	ldr	r4, [r4, #4]
 8007a40:	e7a6      	b.n	8007990 <_malloc_r+0x24>
 8007a42:	9c00      	ldr	r4, [sp, #0]
 8007a44:	6863      	ldr	r3, [r4, #4]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	e7ad      	b.n	80079a6 <_malloc_r+0x3a>
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	d1fb      	bne.n	8007a4a <_malloc_r+0xde>
 8007a52:	2300      	movs	r3, #0
 8007a54:	e7da      	b.n	8007a0c <_malloc_r+0xa0>
 8007a56:	230c      	movs	r3, #12
 8007a58:	0028      	movs	r0, r5
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	f000 f80e 	bl	8007a7c <__malloc_unlock>
 8007a60:	e7c6      	b.n	80079f0 <_malloc_r+0x84>
 8007a62:	6007      	str	r7, [r0, #0]
 8007a64:	e7da      	b.n	8007a1c <_malloc_r+0xb0>
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	20006300 	.word	0x20006300

08007a6c <__malloc_lock>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	4802      	ldr	r0, [pc, #8]	@ (8007a78 <__malloc_lock+0xc>)
 8007a70:	f7ff ff04 	bl	800787c <__retarget_lock_acquire_recursive>
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	200062f8 	.word	0x200062f8

08007a7c <__malloc_unlock>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4802      	ldr	r0, [pc, #8]	@ (8007a88 <__malloc_unlock+0xc>)
 8007a80:	f7ff fefd 	bl	800787e <__retarget_lock_release_recursive>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	200062f8 	.word	0x200062f8

08007a8c <__ssputs_r>:
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	688e      	ldr	r6, [r1, #8]
 8007a90:	b085      	sub	sp, #20
 8007a92:	001f      	movs	r7, r3
 8007a94:	000c      	movs	r4, r1
 8007a96:	680b      	ldr	r3, [r1, #0]
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	9203      	str	r2, [sp, #12]
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d830      	bhi.n	8007b02 <__ssputs_r+0x76>
 8007aa0:	210c      	movs	r1, #12
 8007aa2:	5e62      	ldrsh	r2, [r4, r1]
 8007aa4:	2190      	movs	r1, #144	@ 0x90
 8007aa6:	00c9      	lsls	r1, r1, #3
 8007aa8:	420a      	tst	r2, r1
 8007aaa:	d028      	beq.n	8007afe <__ssputs_r+0x72>
 8007aac:	2003      	movs	r0, #3
 8007aae:	6921      	ldr	r1, [r4, #16]
 8007ab0:	1a5b      	subs	r3, r3, r1
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	6963      	ldr	r3, [r4, #20]
 8007ab6:	4343      	muls	r3, r0
 8007ab8:	9801      	ldr	r0, [sp, #4]
 8007aba:	0fdd      	lsrs	r5, r3, #31
 8007abc:	18ed      	adds	r5, r5, r3
 8007abe:	1c7b      	adds	r3, r7, #1
 8007ac0:	181b      	adds	r3, r3, r0
 8007ac2:	106d      	asrs	r5, r5, #1
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	d900      	bls.n	8007aca <__ssputs_r+0x3e>
 8007ac8:	001d      	movs	r5, r3
 8007aca:	0552      	lsls	r2, r2, #21
 8007acc:	d528      	bpl.n	8007b20 <__ssputs_r+0x94>
 8007ace:	0029      	movs	r1, r5
 8007ad0:	9802      	ldr	r0, [sp, #8]
 8007ad2:	f7ff ff4b 	bl	800796c <_malloc_r>
 8007ad6:	1e06      	subs	r6, r0, #0
 8007ad8:	d02c      	beq.n	8007b34 <__ssputs_r+0xa8>
 8007ada:	9a01      	ldr	r2, [sp, #4]
 8007adc:	6921      	ldr	r1, [r4, #16]
 8007ade:	f7ff fecf 	bl	8007880 <memcpy>
 8007ae2:	89a2      	ldrh	r2, [r4, #12]
 8007ae4:	4b18      	ldr	r3, [pc, #96]	@ (8007b48 <__ssputs_r+0xbc>)
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	2380      	movs	r3, #128	@ 0x80
 8007aea:	4313      	orrs	r3, r2
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	6126      	str	r6, [r4, #16]
 8007af2:	18f6      	adds	r6, r6, r3
 8007af4:	6026      	str	r6, [r4, #0]
 8007af6:	003e      	movs	r6, r7
 8007af8:	6165      	str	r5, [r4, #20]
 8007afa:	1aed      	subs	r5, r5, r3
 8007afc:	60a5      	str	r5, [r4, #8]
 8007afe:	42be      	cmp	r6, r7
 8007b00:	d900      	bls.n	8007b04 <__ssputs_r+0x78>
 8007b02:	003e      	movs	r6, r7
 8007b04:	0032      	movs	r2, r6
 8007b06:	9903      	ldr	r1, [sp, #12]
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	f000 fa99 	bl	8008040 <memmove>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	1b9b      	subs	r3, r3, r6
 8007b14:	60a3      	str	r3, [r4, #8]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	199b      	adds	r3, r3, r6
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	b005      	add	sp, #20
 8007b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b20:	002a      	movs	r2, r5
 8007b22:	9802      	ldr	r0, [sp, #8]
 8007b24:	f000 fabb 	bl	800809e <_realloc_r>
 8007b28:	1e06      	subs	r6, r0, #0
 8007b2a:	d1e0      	bne.n	8007aee <__ssputs_r+0x62>
 8007b2c:	6921      	ldr	r1, [r4, #16]
 8007b2e:	9802      	ldr	r0, [sp, #8]
 8007b30:	f7ff feb0 	bl	8007894 <_free_r>
 8007b34:	230c      	movs	r3, #12
 8007b36:	2001      	movs	r0, #1
 8007b38:	9a02      	ldr	r2, [sp, #8]
 8007b3a:	4240      	negs	r0, r0
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	89a2      	ldrh	r2, [r4, #12]
 8007b40:	3334      	adds	r3, #52	@ 0x34
 8007b42:	4313      	orrs	r3, r2
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7e9      	b.n	8007b1c <__ssputs_r+0x90>
 8007b48:	fffffb7f 	.word	0xfffffb7f

08007b4c <_svfiprintf_r>:
 8007b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4e:	b0a1      	sub	sp, #132	@ 0x84
 8007b50:	9003      	str	r0, [sp, #12]
 8007b52:	001d      	movs	r5, r3
 8007b54:	898b      	ldrh	r3, [r1, #12]
 8007b56:	000f      	movs	r7, r1
 8007b58:	0016      	movs	r6, r2
 8007b5a:	061b      	lsls	r3, r3, #24
 8007b5c:	d511      	bpl.n	8007b82 <_svfiprintf_r+0x36>
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10e      	bne.n	8007b82 <_svfiprintf_r+0x36>
 8007b64:	2140      	movs	r1, #64	@ 0x40
 8007b66:	f7ff ff01 	bl	800796c <_malloc_r>
 8007b6a:	6038      	str	r0, [r7, #0]
 8007b6c:	6138      	str	r0, [r7, #16]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d105      	bne.n	8007b7e <_svfiprintf_r+0x32>
 8007b72:	230c      	movs	r3, #12
 8007b74:	9a03      	ldr	r2, [sp, #12]
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	2001      	movs	r0, #1
 8007b7a:	4240      	negs	r0, r0
 8007b7c:	e0cf      	b.n	8007d1e <_svfiprintf_r+0x1d2>
 8007b7e:	2340      	movs	r3, #64	@ 0x40
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	2300      	movs	r3, #0
 8007b84:	ac08      	add	r4, sp, #32
 8007b86:	6163      	str	r3, [r4, #20]
 8007b88:	3320      	adds	r3, #32
 8007b8a:	7663      	strb	r3, [r4, #25]
 8007b8c:	3310      	adds	r3, #16
 8007b8e:	76a3      	strb	r3, [r4, #26]
 8007b90:	9507      	str	r5, [sp, #28]
 8007b92:	0035      	movs	r5, r6
 8007b94:	782b      	ldrb	r3, [r5, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <_svfiprintf_r+0x52>
 8007b9a:	2b25      	cmp	r3, #37	@ 0x25
 8007b9c:	d148      	bne.n	8007c30 <_svfiprintf_r+0xe4>
 8007b9e:	1bab      	subs	r3, r5, r6
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	42b5      	cmp	r5, r6
 8007ba4:	d00b      	beq.n	8007bbe <_svfiprintf_r+0x72>
 8007ba6:	0032      	movs	r2, r6
 8007ba8:	0039      	movs	r1, r7
 8007baa:	9803      	ldr	r0, [sp, #12]
 8007bac:	f7ff ff6e 	bl	8007a8c <__ssputs_r>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d100      	bne.n	8007bb6 <_svfiprintf_r+0x6a>
 8007bb4:	e0ae      	b.n	8007d14 <_svfiprintf_r+0x1c8>
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	9a05      	ldr	r2, [sp, #20]
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	6163      	str	r3, [r4, #20]
 8007bbe:	782b      	ldrb	r3, [r5, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d100      	bne.n	8007bc6 <_svfiprintf_r+0x7a>
 8007bc4:	e0a6      	b.n	8007d14 <_svfiprintf_r+0x1c8>
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4252      	negs	r2, r2
 8007bcc:	6062      	str	r2, [r4, #4]
 8007bce:	a904      	add	r1, sp, #16
 8007bd0:	3254      	adds	r2, #84	@ 0x54
 8007bd2:	1852      	adds	r2, r2, r1
 8007bd4:	1c6e      	adds	r6, r5, #1
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	60e3      	str	r3, [r4, #12]
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	7013      	strb	r3, [r2, #0]
 8007bde:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007be0:	4b54      	ldr	r3, [pc, #336]	@ (8007d34 <_svfiprintf_r+0x1e8>)
 8007be2:	2205      	movs	r2, #5
 8007be4:	0018      	movs	r0, r3
 8007be6:	7831      	ldrb	r1, [r6, #0]
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	f000 fa4d 	bl	8008088 <memchr>
 8007bee:	1c75      	adds	r5, r6, #1
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d11f      	bne.n	8007c34 <_svfiprintf_r+0xe8>
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	06d3      	lsls	r3, r2, #27
 8007bf8:	d504      	bpl.n	8007c04 <_svfiprintf_r+0xb8>
 8007bfa:	2353      	movs	r3, #83	@ 0x53
 8007bfc:	a904      	add	r1, sp, #16
 8007bfe:	185b      	adds	r3, r3, r1
 8007c00:	2120      	movs	r1, #32
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	0713      	lsls	r3, r2, #28
 8007c06:	d504      	bpl.n	8007c12 <_svfiprintf_r+0xc6>
 8007c08:	2353      	movs	r3, #83	@ 0x53
 8007c0a:	a904      	add	r1, sp, #16
 8007c0c:	185b      	adds	r3, r3, r1
 8007c0e:	212b      	movs	r1, #43	@ 0x2b
 8007c10:	7019      	strb	r1, [r3, #0]
 8007c12:	7833      	ldrb	r3, [r6, #0]
 8007c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c16:	d016      	beq.n	8007c46 <_svfiprintf_r+0xfa>
 8007c18:	0035      	movs	r5, r6
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	200a      	movs	r0, #10
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	782a      	ldrb	r2, [r5, #0]
 8007c22:	1c6e      	adds	r6, r5, #1
 8007c24:	3a30      	subs	r2, #48	@ 0x30
 8007c26:	2a09      	cmp	r2, #9
 8007c28:	d950      	bls.n	8007ccc <_svfiprintf_r+0x180>
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d111      	bne.n	8007c52 <_svfiprintf_r+0x106>
 8007c2e:	e017      	b.n	8007c60 <_svfiprintf_r+0x114>
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7af      	b.n	8007b94 <_svfiprintf_r+0x48>
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	1ac0      	subs	r0, r0, r3
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4083      	lsls	r3, r0
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	002e      	movs	r6, r5
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	e7cc      	b.n	8007be0 <_svfiprintf_r+0x94>
 8007c46:	9b07      	ldr	r3, [sp, #28]
 8007c48:	1d19      	adds	r1, r3, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	9107      	str	r1, [sp, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	db01      	blt.n	8007c56 <_svfiprintf_r+0x10a>
 8007c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c54:	e004      	b.n	8007c60 <_svfiprintf_r+0x114>
 8007c56:	425b      	negs	r3, r3
 8007c58:	60e3      	str	r3, [r4, #12]
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	782b      	ldrb	r3, [r5, #0]
 8007c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c64:	d10c      	bne.n	8007c80 <_svfiprintf_r+0x134>
 8007c66:	786b      	ldrb	r3, [r5, #1]
 8007c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6a:	d134      	bne.n	8007cd6 <_svfiprintf_r+0x18a>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	3502      	adds	r5, #2
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9207      	str	r2, [sp, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da01      	bge.n	8007c7e <_svfiprintf_r+0x132>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	425b      	negs	r3, r3
 8007c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c80:	4e2d      	ldr	r6, [pc, #180]	@ (8007d38 <_svfiprintf_r+0x1ec>)
 8007c82:	2203      	movs	r2, #3
 8007c84:	0030      	movs	r0, r6
 8007c86:	7829      	ldrb	r1, [r5, #0]
 8007c88:	f000 f9fe 	bl	8008088 <memchr>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d006      	beq.n	8007c9e <_svfiprintf_r+0x152>
 8007c90:	2340      	movs	r3, #64	@ 0x40
 8007c92:	1b80      	subs	r0, r0, r6
 8007c94:	4083      	lsls	r3, r0
 8007c96:	6822      	ldr	r2, [r4, #0]
 8007c98:	3501      	adds	r5, #1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	7829      	ldrb	r1, [r5, #0]
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	4826      	ldr	r0, [pc, #152]	@ (8007d3c <_svfiprintf_r+0x1f0>)
 8007ca4:	1c6e      	adds	r6, r5, #1
 8007ca6:	7621      	strb	r1, [r4, #24]
 8007ca8:	f000 f9ee 	bl	8008088 <memchr>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d038      	beq.n	8007d22 <_svfiprintf_r+0x1d6>
 8007cb0:	4b23      	ldr	r3, [pc, #140]	@ (8007d40 <_svfiprintf_r+0x1f4>)
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d122      	bne.n	8007cfc <_svfiprintf_r+0x1b0>
 8007cb6:	2207      	movs	r2, #7
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	3307      	adds	r3, #7
 8007cbc:	4393      	bics	r3, r2
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	6963      	ldr	r3, [r4, #20]
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	6163      	str	r3, [r4, #20]
 8007cca:	e762      	b.n	8007b92 <_svfiprintf_r+0x46>
 8007ccc:	4343      	muls	r3, r0
 8007cce:	0035      	movs	r5, r6
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	189b      	adds	r3, r3, r2
 8007cd4:	e7a4      	b.n	8007c20 <_svfiprintf_r+0xd4>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	200a      	movs	r0, #10
 8007cda:	0019      	movs	r1, r3
 8007cdc:	3501      	adds	r5, #1
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	782a      	ldrb	r2, [r5, #0]
 8007ce2:	1c6e      	adds	r6, r5, #1
 8007ce4:	3a30      	subs	r2, #48	@ 0x30
 8007ce6:	2a09      	cmp	r2, #9
 8007ce8:	d903      	bls.n	8007cf2 <_svfiprintf_r+0x1a6>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0c8      	beq.n	8007c80 <_svfiprintf_r+0x134>
 8007cee:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cf0:	e7c6      	b.n	8007c80 <_svfiprintf_r+0x134>
 8007cf2:	4341      	muls	r1, r0
 8007cf4:	0035      	movs	r5, r6
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	1889      	adds	r1, r1, r2
 8007cfa:	e7f1      	b.n	8007ce0 <_svfiprintf_r+0x194>
 8007cfc:	aa07      	add	r2, sp, #28
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	0021      	movs	r1, r4
 8007d02:	003a      	movs	r2, r7
 8007d04:	4b0f      	ldr	r3, [pc, #60]	@ (8007d44 <_svfiprintf_r+0x1f8>)
 8007d06:	9803      	ldr	r0, [sp, #12]
 8007d08:	e000      	b.n	8007d0c <_svfiprintf_r+0x1c0>
 8007d0a:	bf00      	nop
 8007d0c:	9004      	str	r0, [sp, #16]
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	d1d6      	bne.n	8007cc2 <_svfiprintf_r+0x176>
 8007d14:	89bb      	ldrh	r3, [r7, #12]
 8007d16:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d18:	065b      	lsls	r3, r3, #25
 8007d1a:	d500      	bpl.n	8007d1e <_svfiprintf_r+0x1d2>
 8007d1c:	e72c      	b.n	8007b78 <_svfiprintf_r+0x2c>
 8007d1e:	b021      	add	sp, #132	@ 0x84
 8007d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d22:	aa07      	add	r2, sp, #28
 8007d24:	9200      	str	r2, [sp, #0]
 8007d26:	0021      	movs	r1, r4
 8007d28:	003a      	movs	r2, r7
 8007d2a:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <_svfiprintf_r+0x1f8>)
 8007d2c:	9803      	ldr	r0, [sp, #12]
 8007d2e:	f000 f87b 	bl	8007e28 <_printf_i>
 8007d32:	e7eb      	b.n	8007d0c <_svfiprintf_r+0x1c0>
 8007d34:	08008cf1 	.word	0x08008cf1
 8007d38:	08008cf7 	.word	0x08008cf7
 8007d3c:	08008cfb 	.word	0x08008cfb
 8007d40:	00000000 	.word	0x00000000
 8007d44:	08007a8d 	.word	0x08007a8d

08007d48 <_printf_common>:
 8007d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d4a:	0016      	movs	r6, r2
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	688a      	ldr	r2, [r1, #8]
 8007d50:	690b      	ldr	r3, [r1, #16]
 8007d52:	000c      	movs	r4, r1
 8007d54:	9000      	str	r0, [sp, #0]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	da00      	bge.n	8007d5c <_printf_common+0x14>
 8007d5a:	0013      	movs	r3, r2
 8007d5c:	0022      	movs	r2, r4
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	3243      	adds	r2, #67	@ 0x43
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	d001      	beq.n	8007d6c <_printf_common+0x24>
 8007d68:	3301      	adds	r3, #1
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	069b      	lsls	r3, r3, #26
 8007d70:	d502      	bpl.n	8007d78 <_printf_common+0x30>
 8007d72:	6833      	ldr	r3, [r6, #0]
 8007d74:	3302      	adds	r3, #2
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	2306      	movs	r3, #6
 8007d7c:	0015      	movs	r5, r2
 8007d7e:	401d      	ands	r5, r3
 8007d80:	421a      	tst	r2, r3
 8007d82:	d027      	beq.n	8007dd4 <_printf_common+0x8c>
 8007d84:	0023      	movs	r3, r4
 8007d86:	3343      	adds	r3, #67	@ 0x43
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	1e5a      	subs	r2, r3, #1
 8007d8c:	4193      	sbcs	r3, r2
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	0692      	lsls	r2, r2, #26
 8007d92:	d430      	bmi.n	8007df6 <_printf_common+0xae>
 8007d94:	0022      	movs	r2, r4
 8007d96:	9901      	ldr	r1, [sp, #4]
 8007d98:	9800      	ldr	r0, [sp, #0]
 8007d9a:	9d08      	ldr	r5, [sp, #32]
 8007d9c:	3243      	adds	r2, #67	@ 0x43
 8007d9e:	47a8      	blx	r5
 8007da0:	3001      	adds	r0, #1
 8007da2:	d025      	beq.n	8007df0 <_printf_common+0xa8>
 8007da4:	2206      	movs	r2, #6
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	2500      	movs	r5, #0
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d105      	bne.n	8007dbc <_printf_common+0x74>
 8007db0:	6833      	ldr	r3, [r6, #0]
 8007db2:	68e5      	ldr	r5, [r4, #12]
 8007db4:	1aed      	subs	r5, r5, r3
 8007db6:	43eb      	mvns	r3, r5
 8007db8:	17db      	asrs	r3, r3, #31
 8007dba:	401d      	ands	r5, r3
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	6922      	ldr	r2, [r4, #16]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	dd01      	ble.n	8007dc8 <_printf_common+0x80>
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	18ed      	adds	r5, r5, r3
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42b5      	cmp	r5, r6
 8007dcc:	d120      	bne.n	8007e10 <_printf_common+0xc8>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e010      	b.n	8007df4 <_printf_common+0xac>
 8007dd2:	3501      	adds	r5, #1
 8007dd4:	68e3      	ldr	r3, [r4, #12]
 8007dd6:	6832      	ldr	r2, [r6, #0]
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	42ab      	cmp	r3, r5
 8007ddc:	ddd2      	ble.n	8007d84 <_printf_common+0x3c>
 8007dde:	0022      	movs	r2, r4
 8007de0:	2301      	movs	r3, #1
 8007de2:	9901      	ldr	r1, [sp, #4]
 8007de4:	9800      	ldr	r0, [sp, #0]
 8007de6:	9f08      	ldr	r7, [sp, #32]
 8007de8:	3219      	adds	r2, #25
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	d1f0      	bne.n	8007dd2 <_printf_common+0x8a>
 8007df0:	2001      	movs	r0, #1
 8007df2:	4240      	negs	r0, r0
 8007df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007df6:	2030      	movs	r0, #48	@ 0x30
 8007df8:	18e1      	adds	r1, r4, r3
 8007dfa:	3143      	adds	r1, #67	@ 0x43
 8007dfc:	7008      	strb	r0, [r1, #0]
 8007dfe:	0021      	movs	r1, r4
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	3145      	adds	r1, #69	@ 0x45
 8007e04:	7809      	ldrb	r1, [r1, #0]
 8007e06:	18a2      	adds	r2, r4, r2
 8007e08:	3243      	adds	r2, #67	@ 0x43
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	7011      	strb	r1, [r2, #0]
 8007e0e:	e7c1      	b.n	8007d94 <_printf_common+0x4c>
 8007e10:	0022      	movs	r2, r4
 8007e12:	2301      	movs	r3, #1
 8007e14:	9901      	ldr	r1, [sp, #4]
 8007e16:	9800      	ldr	r0, [sp, #0]
 8007e18:	9f08      	ldr	r7, [sp, #32]
 8007e1a:	321a      	adds	r2, #26
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d0e6      	beq.n	8007df0 <_printf_common+0xa8>
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7d1      	b.n	8007dca <_printf_common+0x82>
	...

08007e28 <_printf_i>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b08b      	sub	sp, #44	@ 0x2c
 8007e2c:	9206      	str	r2, [sp, #24]
 8007e2e:	000a      	movs	r2, r1
 8007e30:	3243      	adds	r2, #67	@ 0x43
 8007e32:	9307      	str	r3, [sp, #28]
 8007e34:	9005      	str	r0, [sp, #20]
 8007e36:	9203      	str	r2, [sp, #12]
 8007e38:	7e0a      	ldrb	r2, [r1, #24]
 8007e3a:	000c      	movs	r4, r1
 8007e3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e3e:	2a78      	cmp	r2, #120	@ 0x78
 8007e40:	d809      	bhi.n	8007e56 <_printf_i+0x2e>
 8007e42:	2a62      	cmp	r2, #98	@ 0x62
 8007e44:	d80b      	bhi.n	8007e5e <_printf_i+0x36>
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	d100      	bne.n	8007e4c <_printf_i+0x24>
 8007e4a:	e0ba      	b.n	8007fc2 <_printf_i+0x19a>
 8007e4c:	497a      	ldr	r1, [pc, #488]	@ (8008038 <_printf_i+0x210>)
 8007e4e:	9104      	str	r1, [sp, #16]
 8007e50:	2a58      	cmp	r2, #88	@ 0x58
 8007e52:	d100      	bne.n	8007e56 <_printf_i+0x2e>
 8007e54:	e08e      	b.n	8007f74 <_printf_i+0x14c>
 8007e56:	0025      	movs	r5, r4
 8007e58:	3542      	adds	r5, #66	@ 0x42
 8007e5a:	702a      	strb	r2, [r5, #0]
 8007e5c:	e022      	b.n	8007ea4 <_printf_i+0x7c>
 8007e5e:	0010      	movs	r0, r2
 8007e60:	3863      	subs	r0, #99	@ 0x63
 8007e62:	2815      	cmp	r0, #21
 8007e64:	d8f7      	bhi.n	8007e56 <_printf_i+0x2e>
 8007e66:	f7f8 f94f 	bl	8000108 <__gnu_thumb1_case_shi>
 8007e6a:	0016      	.short	0x0016
 8007e6c:	fff6001f 	.word	0xfff6001f
 8007e70:	fff6fff6 	.word	0xfff6fff6
 8007e74:	001ffff6 	.word	0x001ffff6
 8007e78:	fff6fff6 	.word	0xfff6fff6
 8007e7c:	fff6fff6 	.word	0xfff6fff6
 8007e80:	0036009f 	.word	0x0036009f
 8007e84:	fff6007e 	.word	0xfff6007e
 8007e88:	00b0fff6 	.word	0x00b0fff6
 8007e8c:	0036fff6 	.word	0x0036fff6
 8007e90:	fff6fff6 	.word	0xfff6fff6
 8007e94:	0082      	.short	0x0082
 8007e96:	0025      	movs	r5, r4
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	3542      	adds	r5, #66	@ 0x42
 8007e9c:	1d11      	adds	r1, r2, #4
 8007e9e:	6019      	str	r1, [r3, #0]
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	702b      	strb	r3, [r5, #0]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e09e      	b.n	8007fe6 <_printf_i+0x1be>
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	6809      	ldr	r1, [r1, #0]
 8007eac:	1d02      	adds	r2, r0, #4
 8007eae:	060d      	lsls	r5, r1, #24
 8007eb0:	d50b      	bpl.n	8007eca <_printf_i+0xa2>
 8007eb2:	6806      	ldr	r6, [r0, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	da03      	bge.n	8007ec2 <_printf_i+0x9a>
 8007eba:	232d      	movs	r3, #45	@ 0x2d
 8007ebc:	9a03      	ldr	r2, [sp, #12]
 8007ebe:	4276      	negs	r6, r6
 8007ec0:	7013      	strb	r3, [r2, #0]
 8007ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8008038 <_printf_i+0x210>)
 8007ec4:	270a      	movs	r7, #10
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	e018      	b.n	8007efc <_printf_i+0xd4>
 8007eca:	6806      	ldr	r6, [r0, #0]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	0649      	lsls	r1, r1, #25
 8007ed0:	d5f1      	bpl.n	8007eb6 <_printf_i+0x8e>
 8007ed2:	b236      	sxth	r6, r6
 8007ed4:	e7ef      	b.n	8007eb6 <_printf_i+0x8e>
 8007ed6:	6808      	ldr	r0, [r1, #0]
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	c940      	ldmia	r1!, {r6}
 8007edc:	0605      	lsls	r5, r0, #24
 8007ede:	d402      	bmi.n	8007ee6 <_printf_i+0xbe>
 8007ee0:	0640      	lsls	r0, r0, #25
 8007ee2:	d500      	bpl.n	8007ee6 <_printf_i+0xbe>
 8007ee4:	b2b6      	uxth	r6, r6
 8007ee6:	6019      	str	r1, [r3, #0]
 8007ee8:	4b53      	ldr	r3, [pc, #332]	@ (8008038 <_printf_i+0x210>)
 8007eea:	270a      	movs	r7, #10
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ef0:	d100      	bne.n	8007ef4 <_printf_i+0xcc>
 8007ef2:	3f02      	subs	r7, #2
 8007ef4:	0023      	movs	r3, r4
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	3343      	adds	r3, #67	@ 0x43
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db06      	blt.n	8007f12 <_printf_i+0xea>
 8007f04:	2104      	movs	r1, #4
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	9d03      	ldr	r5, [sp, #12]
 8007f0a:	438a      	bics	r2, r1
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	4333      	orrs	r3, r6
 8007f10:	d00c      	beq.n	8007f2c <_printf_i+0x104>
 8007f12:	9d03      	ldr	r5, [sp, #12]
 8007f14:	0030      	movs	r0, r6
 8007f16:	0039      	movs	r1, r7
 8007f18:	f7f8 f986 	bl	8000228 <__aeabi_uidivmod>
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	3d01      	subs	r5, #1
 8007f20:	5c5b      	ldrb	r3, [r3, r1]
 8007f22:	702b      	strb	r3, [r5, #0]
 8007f24:	0033      	movs	r3, r6
 8007f26:	0006      	movs	r6, r0
 8007f28:	429f      	cmp	r7, r3
 8007f2a:	d9f3      	bls.n	8007f14 <_printf_i+0xec>
 8007f2c:	2f08      	cmp	r7, #8
 8007f2e:	d109      	bne.n	8007f44 <_printf_i+0x11c>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07db      	lsls	r3, r3, #31
 8007f34:	d506      	bpl.n	8007f44 <_printf_i+0x11c>
 8007f36:	6862      	ldr	r2, [r4, #4]
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	dc02      	bgt.n	8007f44 <_printf_i+0x11c>
 8007f3e:	2330      	movs	r3, #48	@ 0x30
 8007f40:	3d01      	subs	r5, #1
 8007f42:	702b      	strb	r3, [r5, #0]
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1b5b      	subs	r3, r3, r5
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	9b07      	ldr	r3, [sp, #28]
 8007f4c:	0021      	movs	r1, r4
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	9805      	ldr	r0, [sp, #20]
 8007f52:	9b06      	ldr	r3, [sp, #24]
 8007f54:	aa09      	add	r2, sp, #36	@ 0x24
 8007f56:	f7ff fef7 	bl	8007d48 <_printf_common>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d148      	bne.n	8007ff0 <_printf_i+0x1c8>
 8007f5e:	2001      	movs	r0, #1
 8007f60:	4240      	negs	r0, r0
 8007f62:	b00b      	add	sp, #44	@ 0x2c
 8007f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f66:	2220      	movs	r2, #32
 8007f68:	6809      	ldr	r1, [r1, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	2278      	movs	r2, #120	@ 0x78
 8007f70:	4932      	ldr	r1, [pc, #200]	@ (800803c <_printf_i+0x214>)
 8007f72:	9104      	str	r1, [sp, #16]
 8007f74:	0021      	movs	r1, r4
 8007f76:	3145      	adds	r1, #69	@ 0x45
 8007f78:	700a      	strb	r2, [r1, #0]
 8007f7a:	6819      	ldr	r1, [r3, #0]
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	c940      	ldmia	r1!, {r6}
 8007f80:	0610      	lsls	r0, r2, #24
 8007f82:	d402      	bmi.n	8007f8a <_printf_i+0x162>
 8007f84:	0650      	lsls	r0, r2, #25
 8007f86:	d500      	bpl.n	8007f8a <_printf_i+0x162>
 8007f88:	b2b6      	uxth	r6, r6
 8007f8a:	6019      	str	r1, [r3, #0]
 8007f8c:	07d3      	lsls	r3, r2, #31
 8007f8e:	d502      	bpl.n	8007f96 <_printf_i+0x16e>
 8007f90:	2320      	movs	r3, #32
 8007f92:	4313      	orrs	r3, r2
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	d001      	beq.n	8007f9e <_printf_i+0x176>
 8007f9a:	2710      	movs	r7, #16
 8007f9c:	e7aa      	b.n	8007ef4 <_printf_i+0xcc>
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	4393      	bics	r3, r2
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	e7f8      	b.n	8007f9a <_printf_i+0x172>
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	680d      	ldr	r5, [r1, #0]
 8007fac:	1d10      	adds	r0, r2, #4
 8007fae:	6949      	ldr	r1, [r1, #20]
 8007fb0:	6018      	str	r0, [r3, #0]
 8007fb2:	6813      	ldr	r3, [r2, #0]
 8007fb4:	062e      	lsls	r6, r5, #24
 8007fb6:	d501      	bpl.n	8007fbc <_printf_i+0x194>
 8007fb8:	6019      	str	r1, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <_printf_i+0x19a>
 8007fbc:	066d      	lsls	r5, r5, #25
 8007fbe:	d5fb      	bpl.n	8007fb8 <_printf_i+0x190>
 8007fc0:	8019      	strh	r1, [r3, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9d03      	ldr	r5, [sp, #12]
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	e7bf      	b.n	8007f4a <_printf_i+0x122>
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	1d11      	adds	r1, r2, #4
 8007fce:	6019      	str	r1, [r3, #0]
 8007fd0:	6815      	ldr	r5, [r2, #0]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	0028      	movs	r0, r5
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	f000 f856 	bl	8008088 <memchr>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d001      	beq.n	8007fe4 <_printf_i+0x1bc>
 8007fe0:	1b40      	subs	r0, r0, r5
 8007fe2:	6060      	str	r0, [r4, #4]
 8007fe4:	6863      	ldr	r3, [r4, #4]
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9a03      	ldr	r2, [sp, #12]
 8007fec:	7013      	strb	r3, [r2, #0]
 8007fee:	e7ac      	b.n	8007f4a <_printf_i+0x122>
 8007ff0:	002a      	movs	r2, r5
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	9906      	ldr	r1, [sp, #24]
 8007ff6:	9805      	ldr	r0, [sp, #20]
 8007ff8:	9d07      	ldr	r5, [sp, #28]
 8007ffa:	47a8      	blx	r5
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d0ae      	beq.n	8007f5e <_printf_i+0x136>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	079b      	lsls	r3, r3, #30
 8008004:	d415      	bmi.n	8008032 <_printf_i+0x20a>
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	68e0      	ldr	r0, [r4, #12]
 800800a:	4298      	cmp	r0, r3
 800800c:	daa9      	bge.n	8007f62 <_printf_i+0x13a>
 800800e:	0018      	movs	r0, r3
 8008010:	e7a7      	b.n	8007f62 <_printf_i+0x13a>
 8008012:	0022      	movs	r2, r4
 8008014:	2301      	movs	r3, #1
 8008016:	9906      	ldr	r1, [sp, #24]
 8008018:	9805      	ldr	r0, [sp, #20]
 800801a:	9e07      	ldr	r6, [sp, #28]
 800801c:	3219      	adds	r2, #25
 800801e:	47b0      	blx	r6
 8008020:	3001      	adds	r0, #1
 8008022:	d09c      	beq.n	8007f5e <_printf_i+0x136>
 8008024:	3501      	adds	r5, #1
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	42ab      	cmp	r3, r5
 800802e:	dcf0      	bgt.n	8008012 <_printf_i+0x1ea>
 8008030:	e7e9      	b.n	8008006 <_printf_i+0x1de>
 8008032:	2500      	movs	r5, #0
 8008034:	e7f7      	b.n	8008026 <_printf_i+0x1fe>
 8008036:	46c0      	nop			@ (mov r8, r8)
 8008038:	08008d02 	.word	0x08008d02
 800803c:	08008d13 	.word	0x08008d13

08008040 <memmove>:
 8008040:	b510      	push	{r4, lr}
 8008042:	4288      	cmp	r0, r1
 8008044:	d902      	bls.n	800804c <memmove+0xc>
 8008046:	188b      	adds	r3, r1, r2
 8008048:	4298      	cmp	r0, r3
 800804a:	d308      	bcc.n	800805e <memmove+0x1e>
 800804c:	2300      	movs	r3, #0
 800804e:	429a      	cmp	r2, r3
 8008050:	d007      	beq.n	8008062 <memmove+0x22>
 8008052:	5ccc      	ldrb	r4, [r1, r3]
 8008054:	54c4      	strb	r4, [r0, r3]
 8008056:	3301      	adds	r3, #1
 8008058:	e7f9      	b.n	800804e <memmove+0xe>
 800805a:	5c8b      	ldrb	r3, [r1, r2]
 800805c:	5483      	strb	r3, [r0, r2]
 800805e:	3a01      	subs	r2, #1
 8008060:	d2fb      	bcs.n	800805a <memmove+0x1a>
 8008062:	bd10      	pop	{r4, pc}

08008064 <_sbrk_r>:
 8008064:	2300      	movs	r3, #0
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	4d06      	ldr	r5, [pc, #24]	@ (8008084 <_sbrk_r+0x20>)
 800806a:	0004      	movs	r4, r0
 800806c:	0008      	movs	r0, r1
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	f7fa f952 	bl	8002318 <_sbrk>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d103      	bne.n	8008080 <_sbrk_r+0x1c>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d000      	beq.n	8008080 <_sbrk_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd70      	pop	{r4, r5, r6, pc}
 8008082:	46c0      	nop			@ (mov r8, r8)
 8008084:	200062f4 	.word	0x200062f4

08008088 <memchr>:
 8008088:	b2c9      	uxtb	r1, r1
 800808a:	1882      	adds	r2, r0, r2
 800808c:	4290      	cmp	r0, r2
 800808e:	d101      	bne.n	8008094 <memchr+0xc>
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	7803      	ldrb	r3, [r0, #0]
 8008096:	428b      	cmp	r3, r1
 8008098:	d0fb      	beq.n	8008092 <memchr+0xa>
 800809a:	3001      	adds	r0, #1
 800809c:	e7f6      	b.n	800808c <memchr+0x4>

0800809e <_realloc_r>:
 800809e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a0:	0006      	movs	r6, r0
 80080a2:	000c      	movs	r4, r1
 80080a4:	0015      	movs	r5, r2
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d105      	bne.n	80080b6 <_realloc_r+0x18>
 80080aa:	0011      	movs	r1, r2
 80080ac:	f7ff fc5e 	bl	800796c <_malloc_r>
 80080b0:	0004      	movs	r4, r0
 80080b2:	0020      	movs	r0, r4
 80080b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d103      	bne.n	80080c2 <_realloc_r+0x24>
 80080ba:	f7ff fbeb 	bl	8007894 <_free_r>
 80080be:	002c      	movs	r4, r5
 80080c0:	e7f7      	b.n	80080b2 <_realloc_r+0x14>
 80080c2:	f000 f81c 	bl	80080fe <_malloc_usable_size_r>
 80080c6:	0007      	movs	r7, r0
 80080c8:	4285      	cmp	r5, r0
 80080ca:	d802      	bhi.n	80080d2 <_realloc_r+0x34>
 80080cc:	0843      	lsrs	r3, r0, #1
 80080ce:	42ab      	cmp	r3, r5
 80080d0:	d3ef      	bcc.n	80080b2 <_realloc_r+0x14>
 80080d2:	0029      	movs	r1, r5
 80080d4:	0030      	movs	r0, r6
 80080d6:	f7ff fc49 	bl	800796c <_malloc_r>
 80080da:	9001      	str	r0, [sp, #4]
 80080dc:	2800      	cmp	r0, #0
 80080de:	d101      	bne.n	80080e4 <_realloc_r+0x46>
 80080e0:	9c01      	ldr	r4, [sp, #4]
 80080e2:	e7e6      	b.n	80080b2 <_realloc_r+0x14>
 80080e4:	002a      	movs	r2, r5
 80080e6:	42bd      	cmp	r5, r7
 80080e8:	d900      	bls.n	80080ec <_realloc_r+0x4e>
 80080ea:	003a      	movs	r2, r7
 80080ec:	0021      	movs	r1, r4
 80080ee:	9801      	ldr	r0, [sp, #4]
 80080f0:	f7ff fbc6 	bl	8007880 <memcpy>
 80080f4:	0021      	movs	r1, r4
 80080f6:	0030      	movs	r0, r6
 80080f8:	f7ff fbcc 	bl	8007894 <_free_r>
 80080fc:	e7f0      	b.n	80080e0 <_realloc_r+0x42>

080080fe <_malloc_usable_size_r>:
 80080fe:	1f0b      	subs	r3, r1, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	1f18      	subs	r0, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	da01      	bge.n	800810c <_malloc_usable_size_r+0xe>
 8008108:	580b      	ldr	r3, [r1, r0]
 800810a:	18c0      	adds	r0, r0, r3
 800810c:	4770      	bx	lr
	...

08008110 <_init>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	46c0      	nop			@ (mov r8, r8)
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr

0800811c <_fini>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr
