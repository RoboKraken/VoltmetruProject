
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  0000841c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006a40  08006a40  0000841c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006a40  08006a40  0000841c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a44  08006a44  00007a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  08006a48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  2000041c  08006e64  0000841c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb0  08006e64  00008eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00017321  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0001387b  00000000  00000000  0001f7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d11  00000000  00000000  00033049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001280  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b4f55  00000000  00000000  00036fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e8e  00000000  00000000  000ebf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001cee2  00000000  00000000  000ecdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109ca5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042d8  00000000  00000000  00109ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000041c 	.word	0x2000041c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e98 	.word	0x08005e98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000420 	.word	0x20000420
 8000104:	08005e98 	.word	0x08005e98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f000 f9c6 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f005 fd0b 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f001 f9b5 	bl	8001794 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 8000438:	08006a48 	.word	0x08006a48
  ldr r2, =_sbss
 800043c:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 8000440:	20000eb0 	.word	0x20000eb0

08000444 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_COMP_IRQHandler>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_MspInit+0x50>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <HAL_MspInit+0x50>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x50>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x50>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <HAL_MspInit+0x50>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x50>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000482:	2302      	movs	r3, #2
 8000484:	425b      	negs	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	2103      	movs	r1, #3
 800048a:	0018      	movs	r0, r3
 800048c:	f003 f8ae 	bl	80035ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	@ 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f005 fcbc 	bl	8005e2c <memset>
  if(hadc->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <HAL_ADC_MspInit+0x84>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d12b      	bne.n	8000516 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	193a      	adds	r2, r7, r4
 800050a:	2390      	movs	r3, #144	@ 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f003 f891 	bl	8003638 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b00b      	add	sp, #44	@ 0x2c
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	40012400 	.word	0x40012400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b08b      	sub	sp, #44	@ 0x2c
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	2414      	movs	r4, #20
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f005 fc76 	bl	8005e2c <memset>
  if(hspi->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <HAL_SPI_MspInit+0x90>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d132      	bne.n	80005b0 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0149      	lsls	r1, r1, #5
 8000554:	430a      	orrs	r2, r1
 8000556:	619a      	str	r2, [r3, #24]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	22a0      	movs	r2, #160	@ 0xa0
 8000588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2203      	movs	r2, #3
 800059a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	2390      	movs	r3, #144	@ 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 f844 	bl	8003638 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00b      	add	sp, #44	@ 0x2c
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40013000 	.word	0x40013000
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2414      	movs	r4, #20
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f005 fc2a 	bl	8005e2c <memset>
  if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <HAL_UART_MspInit+0x90>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d132      	bne.n	8000648 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_UART_MspInit+0x94>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	2390      	movs	r3, #144	@ 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f002 fff8 	bl	8003638 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00b      	add	sp, #44	@ 0x2c
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40004400 	.word	0x40004400
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000668:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <HAL_InitTick+0xf0>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <HAL_InitTick+0xf0>)
 800066e:	2102      	movs	r1, #2
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <HAL_InitTick+0xf0>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2202      	movs	r2, #2
 800067a:	4013      	ands	r3, r2
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000680:	230c      	movs	r3, #12
 8000682:	18fa      	adds	r2, r7, r3
 8000684:	2410      	movs	r4, #16
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f003 fe5c 	bl	8004348 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800069c:	f003 fe3e 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 80006a0:	0003      	movs	r3, r0
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006a4:	e004      	b.n	80006b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006a6:	f003 fe39 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 80006aa:	0003      	movs	r3, r0
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b2:	4926      	ldr	r1, [pc, #152]	@ (800074c <HAL_InitTick+0xf4>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fd27 	bl	8000108 <__udivsi3>
 80006ba:	0003      	movs	r3, r0
 80006bc:	3b01      	subs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <HAL_InitTick+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c8:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <HAL_InitTick+0x100>)
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ce:	6a3a      	ldr	r2, [r7, #32]
 80006d0:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_InitTick+0xf8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <HAL_InitTick+0xf8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_InitTick+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006e4:	252b      	movs	r5, #43	@ 0x2b
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 fae4 	bl	8004cb8 <HAL_TIM_Base_Init>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11e      	bne.n	800073a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006fc:	197c      	adds	r4, r7, r5
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_InitTick+0xf8>)
 8000700:	0018      	movs	r0, r3
 8000702:	f004 fb31 	bl	8004d68 <HAL_TIM_Base_Start_IT>
 8000706:	0003      	movs	r3, r0
 8000708:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800070a:	197b      	adds	r3, r7, r5
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d113      	bne.n	800073a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000712:	2010      	movs	r0, #16
 8000714:	f002 ff7f 	bl	8003616 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d809      	bhi.n	8000732 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	0019      	movs	r1, r3
 8000724:	2010      	movs	r0, #16
 8000726:	f002 ff61 	bl	80035ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_InitTick+0x104>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e003      	b.n	800073a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000732:	232b      	movs	r3, #43	@ 0x2b
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800073a:	232b      	movs	r3, #43	@ 0x2b
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b00c      	add	sp, #48	@ 0x30
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	000f4240 	.word	0x000f4240
 8000750:	20000438 	.word	0x20000438
 8000754:	40000400 	.word	0x40000400
 8000758:	000003e7 	.word	0x000003e7
 800075c:	20000414 	.word	0x20000414

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <TIM3_IRQHandler+0x14>)
 8000776:	0018      	movs	r0, r3
 8000778:	f004 fb48 	bl	8004e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	20000438 	.word	0x20000438

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    uint8_t p;
    for (p = 0; p < 8; p++) {
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e042      	b.n	800082c <st7565_write_buffer+0x98>
        CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <st7565_write_buffer+0xac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 f8bb 	bl	8003928 <HAL_GPIO_WritePin>
 80007b2:	240f      	movs	r4, #15
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <st7565_write_buffer+0xb0>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	2250      	movs	r2, #80	@ 0x50
 80007be:	4252      	negs	r2, r2
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f841 	bl	800084c <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <st7565_write_buffer+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f8a9 	bl	8003928 <HAL_GPIO_WritePin>
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f838 	bl	800084c <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <st7565_write_buffer+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 f8a0 	bl	8003928 <HAL_GPIO_WritePin>
 80007e8:	2010      	movs	r0, #16
 80007ea:	f000 f82f 	bl	800084c <st7565_sendbyte>
        CMD(ST7565_CMD_RMW);
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <st7565_write_buffer+0xac>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	2180      	movs	r1, #128	@ 0x80
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 f897 	bl	8003928 <HAL_GPIO_WritePin>
 80007fa:	20e0      	movs	r0, #224	@ 0xe0
 80007fc:	f000 f826 	bl	800084c <st7565_sendbyte>
        HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <st7565_write_buffer+0xac>)
 8000802:	2201      	movs	r2, #1
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	0018      	movs	r0, r3
 8000808:	f003 f88e 	bl	8003928 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, &buffer[128 * p], 128, 6);
 800080c:	193b      	adds	r3, r7, r4
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	001a      	movs	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1899      	adds	r1, r3, r2
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <st7565_write_buffer+0xb4>)
 800081a:	2306      	movs	r3, #6
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	f003 ff75 	bl	800470c <HAL_SPI_Transmit>
    for (p = 0; p < 8; p++) {
 8000822:	193b      	adds	r3, r7, r4
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	193b      	adds	r3, r7, r4
 8000828:	3201      	adds	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d9b7      	bls.n	80007a6 <st7565_write_buffer+0x12>
    }
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b005      	add	sp, #20
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	48000800 	.word	0x48000800
 8000844:	2000040c 	.word	0x2000040c
 8000848:	2000051c 	.word	0x2000051c

0800084c <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000858:	1df9      	adds	r1, r7, #7
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <st7565_sendbyte+0x20>)
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	f003 ff54 	bl	800470c <HAL_SPI_Transmit>
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000051c 	.word	0x2000051c

08000870 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	0059      	lsls	r1, r3, #1
 8000878:	2390      	movs	r3, #144	@ 0x90
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	2201      	movs	r2, #1
 800087e:	0018      	movs	r0, r3
 8000880:	f003 f852 	bl	8003928 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000884:	4b4e      	ldr	r3, [pc, #312]	@ (80009c0 <st7565_init+0x150>)
 8000886:	2201      	movs	r2, #1
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0018      	movs	r0, r3
 800088c:	f003 f84c 	bl	8003928 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	0099      	lsls	r1, r3, #2
 8000894:	2390      	movs	r3, #144	@ 0x90
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2201      	movs	r2, #1
 800089a:	0018      	movs	r0, r3
 800089c:	f003 f844 	bl	8003928 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 80008a0:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <st7565_init+0x154>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	0018      	movs	r0, r3
 80008a8:	f003 f83e 	bl	8003928 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 80008ac:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <st7565_init+0x154>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	0018      	movs	r0, r3
 80008b4:	f003 f838 	bl	8003928 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	0099      	lsls	r1, r3, #2
 80008bc:	2390      	movs	r3, #144	@ 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2200      	movs	r2, #0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f003 f830 	bl	8003928 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 80008c8:	23fa      	movs	r3, #250	@ 0xfa
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 f919 	bl	8002b04 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	0099      	lsls	r1, r3, #2
 80008d6:	2390      	movs	r3, #144	@ 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 f823 	bl	8003928 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 80008e2:	4b37      	ldr	r3, [pc, #220]	@ (80009c0 <st7565_init+0x150>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 f81d 	bl	8003928 <HAL_GPIO_WritePin>
 80008ee:	20a3      	movs	r0, #163	@ 0xa3
 80008f0:	f7ff ffac 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 80008f4:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <st7565_init+0x150>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 f814 	bl	8003928 <HAL_GPIO_WritePin>
 8000900:	20a0      	movs	r0, #160	@ 0xa0
 8000902:	f7ff ffa3 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <st7565_init+0x150>)
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	0018      	movs	r0, r3
 800090e:	f003 f80b 	bl	8003928 <HAL_GPIO_WritePin>
 8000912:	20c0      	movs	r0, #192	@ 0xc0
 8000914:	f7ff ff9a 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000918:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <st7565_init+0x150>)
 800091a:	2200      	movs	r2, #0
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0018      	movs	r0, r3
 8000920:	f003 f802 	bl	8003928 <HAL_GPIO_WritePin>
 8000924:	2040      	movs	r0, #64	@ 0x40
 8000926:	f7ff ff91 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 800092a:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <st7565_init+0x150>)
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	0018      	movs	r0, r3
 8000932:	f002 fff9 	bl	8003928 <HAL_GPIO_WritePin>
 8000936:	202c      	movs	r0, #44	@ 0x2c
 8000938:	f7ff ff88 	bl	800084c <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 800093c:	2032      	movs	r0, #50	@ 0x32
 800093e:	f002 f8e1 	bl	8002b04 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <st7565_init+0x150>)
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	0018      	movs	r0, r3
 800094a:	f002 ffed 	bl	8003928 <HAL_GPIO_WritePin>
 800094e:	202e      	movs	r0, #46	@ 0x2e
 8000950:	f7ff ff7c 	bl	800084c <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000954:	2032      	movs	r0, #50	@ 0x32
 8000956:	f002 f8d5 	bl	8002b04 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <st7565_init+0x150>)
 800095c:	2200      	movs	r2, #0
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	0018      	movs	r0, r3
 8000962:	f002 ffe1 	bl	8003928 <HAL_GPIO_WritePin>
 8000966:	202f      	movs	r0, #47	@ 0x2f
 8000968:	f7ff ff70 	bl	800084c <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 800096c:	200a      	movs	r0, #10
 800096e:	f002 f8c9 	bl	8002b04 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <st7565_init+0x150>)
 8000974:	2200      	movs	r2, #0
 8000976:	2180      	movs	r1, #128	@ 0x80
 8000978:	0018      	movs	r0, r3
 800097a:	f002 ffd5 	bl	8003928 <HAL_GPIO_WritePin>
 800097e:	2026      	movs	r0, #38	@ 0x26
 8000980:	f7ff ff64 	bl	800084c <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <st7565_init+0x150>)
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	0018      	movs	r0, r3
 800098c:	f002 ffcc 	bl	8003928 <HAL_GPIO_WritePin>
 8000990:	20af      	movs	r0, #175	@ 0xaf
 8000992:	f7ff ff5b 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <st7565_init+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	0018      	movs	r0, r3
 800099e:	f002 ffc3 	bl	8003928 <HAL_GPIO_WritePin>
 80009a2:	20a4      	movs	r0, #164	@ 0xa4
 80009a4:	f7ff ff52 	bl	800084c <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f81d 	bl	80009e8 <st7565_set_brightness>
 	st7565_clear_screen();
 80009ae:	f000 f83f 	bl	8000a30 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <st7565_init+0x158>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 f897 	bl	8000ae8 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	48000800 	.word	0x48000800
 80009c4:	48000400 	.word	0x48000400
 80009c8:	2000000c 	.word	0x2000000c

080009cc <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	0059      	lsls	r1, r3, #1
 80009d4:	2390      	movs	r3, #144	@ 0x90
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2201      	movs	r2, #1
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 ffa4 	bl	8003928 <HAL_GPIO_WritePin>
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	0002      	movs	r2, r0
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <st7565_set_brightness+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 ff94 	bl	8003928 <HAL_GPIO_WritePin>
 8000a00:	2081      	movs	r0, #129	@ 0x81
 8000a02:	f7ff ff23 	bl	800084c <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <st7565_set_brightness+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 ff8b 	bl	8003928 <HAL_GPIO_WritePin>
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	223f      	movs	r2, #63	@ 0x3f
 8000a18:	4013      	ands	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff ff15 	bl	800084c <st7565_sendbyte>
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	48000800 	.word	0x48000800

08000a30 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e049      	b.n	8000ad2 <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <st7565_clear_screen+0xb4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	2180      	movs	r1, #128	@ 0x80
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 ff6f 	bl	8003928 <HAL_GPIO_WritePin>
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2250      	movs	r2, #80	@ 0x50
 8000a50:	4252      	negs	r2, r2
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fef8 	bl	800084c <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a5c:	1dbb      	adds	r3, r7, #6
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e02d      	b.n	8000ac0 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <st7565_clear_screen+0xb4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 ff5c 	bl	8003928 <HAL_GPIO_WritePin>
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	220f      	movs	r2, #15
 8000a76:	4013      	ands	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fee6 	bl	800084c <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <st7565_clear_screen+0xb4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 ff4e 	bl	8003928 <HAL_GPIO_WritePin>
 8000a8c:	1dbb      	adds	r3, r7, #6
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	091b      	lsrs	r3, r3, #4
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	2210      	movs	r2, #16
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fed4 	bl	800084c <st7565_sendbyte>
			DATA(0x0);
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <st7565_clear_screen+0xb4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 ff3c 	bl	8003928 <HAL_GPIO_WritePin>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fecb 	bl	800084c <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000ab6:	1dbb      	adds	r3, r7, #6
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	3201      	adds	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b80      	cmp	r3, #128	@ 0x80
 8000ac6:	d9cd      	bls.n	8000a64 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	3201      	adds	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	d9b1      	bls.n	8000a3e <st7565_clear_screen+0xe>
		}
	}
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	00da      	lsls	r2, r3, #3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2100      	movs	r1, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f005 f997 	bl	8005e2c <memset>
}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000b06:	b590      	push	{r4, r7, lr}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	000c      	movs	r4, r1
 8000b10:	0010      	movs	r0, r2
 8000b12:	0019      	movs	r1, r3
 8000b14:	1cfb      	adds	r3, r7, #3
 8000b16:	1c22      	adds	r2, r4, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	1c02      	adds	r2, r0, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	1c7b      	adds	r3, r7, #1
 8000b22:	1c0a      	adds	r2, r1, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000b26:	1cfb      	adds	r3, r7, #3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db51      	blt.n	8000bd4 <st7565_setpixel+0xce>
 8000b30:	1cbb      	adds	r3, r7, #2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b36:	d84d      	bhi.n	8000bd4 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000b38:	1c7b      	adds	r3, r7, #1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d023      	beq.n	8000b88 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000b40:	1cfb      	adds	r3, r7, #3
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	1cbb      	adds	r3, r7, #2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	b2d8      	uxtb	r0, r3
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	01db      	lsls	r3, r3, #7
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	001a      	movs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b25a      	sxtb	r2, r3
 8000b5c:	1cbb      	adds	r3, r7, #2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	2107      	movs	r1, #7
 8000b64:	400b      	ands	r3, r1
 8000b66:	2101      	movs	r1, #1
 8000b68:	4099      	lsls	r1, r3
 8000b6a:	000b      	movs	r3, r1
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b259      	sxtb	r1, r3
 8000b72:	1cfb      	adds	r3, r7, #3
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	0003      	movs	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	18d3      	adds	r3, r2, r3
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e026      	b.n	8000bd6 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000b88:	1cfb      	adds	r3, r7, #3
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	1cbb      	adds	r3, r7, #2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	0003      	movs	r3, r0
 8000b96:	01db      	lsls	r3, r3, #7
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	1cba      	adds	r2, r7, #2
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	2107      	movs	r1, #7
 8000bac:	400a      	ands	r2, r1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	b252      	sxtb	r2, r2
 8000bb6:	43d2      	mvns	r2, r2
 8000bb8:	b252      	sxtb	r2, r2
 8000bba:	4013      	ands	r3, r2
 8000bbc:	b259      	sxtb	r1, r3
 8000bbe:	1cfb      	adds	r3, r7, #3
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	01db      	lsls	r3, r3, #7
 8000bc6:	18d3      	adds	r3, r2, r3
 8000bc8:	001a      	movs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	189b      	adds	r3, r3, r2
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e000      	b.n	8000bd6 <st7565_setpixel+0xd0>
		return;
 8000bd4:	46c0      	nop			@ (mov r8, r8)
}
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}

08000bdc <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c,uint8_t fontSelect) {
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	0008      	movs	r0, r1
 8000be6:	0011      	movs	r1, r2
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	230b      	movs	r3, #11
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	1c02      	adds	r2, r0, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	1c0a      	adds	r2, r1, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8000bfa:	e02c      	b.n	8000c56 <st7565_drawstring+0x7a>
		st7565_drawchar(buff, x, line, c[0], fontSelect);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781c      	ldrb	r4, [r3, #0]
 8000c00:	260a      	movs	r6, #10
 8000c02:	19bb      	adds	r3, r7, r6
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	469c      	mov	ip, r3
 8000c08:	250b      	movs	r5, #11
 8000c0a:	197b      	adds	r3, r7, r5
 8000c0c:	7819      	ldrb	r1, [r3, #0]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	2320      	movs	r3, #32
 8000c12:	2208      	movs	r2, #8
 8000c14:	189b      	adds	r3, r3, r2
 8000c16:	19db      	adds	r3, r3, r7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	0023      	movs	r3, r4
 8000c1e:	4662      	mov	r2, ip
 8000c20:	f000 f822 	bl	8000c68 <st7565_drawchar>
		c++;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8000c2a:	197b      	adds	r3, r7, r5
 8000c2c:	197a      	adds	r2, r7, r5
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	3206      	adds	r2, #6
 8000c32:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8000c34:	197b      	adds	r3, r7, r5
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b79      	cmp	r3, #121	@ 0x79
 8000c3a:	d907      	bls.n	8000c4c <st7565_drawstring+0x70>
			x = 0; // ran out of this line
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
			line++;
 8000c42:	19bb      	adds	r3, r7, r6
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	19bb      	adds	r3, r7, r6
 8000c48:	3201      	adds	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d804      	bhi.n	8000c60 <st7565_drawstring+0x84>
	while (c[0] != 0) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1ce      	bne.n	8000bfc <st7565_drawstring+0x20>
 8000c5e:	e000      	b.n	8000c62 <st7565_drawstring+0x86>
			return; // ran out of space :(
 8000c60:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b005      	add	sp, #20
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c68 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c, uint8_t fontSelect) {
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	000c      	movs	r4, r1
 8000c72:	0010      	movs	r0, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	1cfb      	adds	r3, r7, #3
 8000c78:	1c22      	adds	r2, r4, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	1cbb      	adds	r3, r7, #2
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	1c7b      	adds	r3, r7, #1
 8000c84:	1c0a      	adds	r2, r1, #0
 8000c86:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e043      	b.n	8000d1a <st7565_drawchar+0xb2>
		if(fontSelect==0)
 8000c92:	2320      	movs	r3, #32
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d117      	bne.n	8000ccc <st7565_drawchar+0x64>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8000c9c:	1c7b      	adds	r3, r7, #1
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	189b      	adds	r3, r3, r2
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	18d2      	adds	r2, r2, r3
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <st7565_drawchar+0xc8>)
 8000cb2:	18d2      	adds	r2, r2, r3
 8000cb4:	1cfb      	adds	r3, r7, #3
 8000cb6:	7819      	ldrb	r1, [r3, #0]
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	01db      	lsls	r3, r3, #7
 8000cbe:	18cb      	adds	r3, r1, r3
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	185b      	adds	r3, r3, r1
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e01b      	b.n	8000d04 <st7565_drawchar+0x9c>
		else if(fontSelect==1)
 8000ccc:	2320      	movs	r3, #32
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d116      	bne.n	8000d04 <st7565_drawchar+0x9c>
		buff[x + (line * 128)] = *(ultraFont + (c * 5) + i);
 8000cd6:	1c7b      	adds	r3, r7, #1
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	0013      	movs	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	18d2      	adds	r2, r2, r3
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <st7565_drawchar+0xcc>)
 8000cec:	18d2      	adds	r2, r2, r3
 8000cee:	1cfb      	adds	r3, r7, #3
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	18cb      	adds	r3, r1, r3
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	185b      	adds	r3, r3, r1
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	701a      	strb	r2, [r3, #0]
		x++;
 8000d04:	1cfb      	adds	r3, r7, #3
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	1cfb      	adds	r3, r7, #3
 8000d0a:	3201      	adds	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	3201      	adds	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d9b6      	bls.n	8000c92 <st7565_drawchar+0x2a>
	}
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b005      	add	sp, #20
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	080064f0 	.word	0x080064f0
 8000d34:	08005ff4 	.word	0x08005ff4

08000d38 <st7565_drawline_complex>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline_complex(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	000c      	movs	r4, r1
 8000d42:	0010      	movs	r0, r2
 8000d44:	0019      	movs	r1, r3
 8000d46:	1cfb      	adds	r3, r7, #3
 8000d48:	1c22      	adds	r2, r4, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	1c7b      	adds	r3, r7, #1
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8000d60:	1cfa      	adds	r2, r7, #3
 8000d62:	1c7b      	adds	r3, r7, #1
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d908      	bls.n	8000d7e <st7565_drawline_complex+0x46>
		dx = x0 - x1;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	1cf9      	adds	r1, r7, #3
 8000d72:	1c7a      	adds	r2, r7, #1
 8000d74:	7809      	ldrb	r1, [r1, #0]
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	e007      	b.n	8000d8e <st7565_drawline_complex+0x56>
	else
		dx = x1 - x0;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	1c79      	adds	r1, r7, #1
 8000d84:	1cfa      	adds	r2, r7, #3
 8000d86:	7809      	ldrb	r1, [r1, #0]
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	1a8a      	subs	r2, r1, r2
 8000d8c:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8000d8e:	1cba      	adds	r2, r7, #2
 8000d90:	2020      	movs	r0, #32
 8000d92:	183b      	adds	r3, r7, r0
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d908      	bls.n	8000dae <st7565_drawline_complex+0x76>
		dy = y0 - y1;
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	18fa      	adds	r2, r7, r3
 8000da0:	1cb9      	adds	r1, r7, #2
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	7809      	ldrb	r1, [r1, #0]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	7013      	strb	r3, [r2, #0]
 8000dac:	e008      	b.n	8000dc0 <st7565_drawline_complex+0x88>
	else
		dy = y1 - y0;
 8000dae:	230b      	movs	r3, #11
 8000db0:	18fa      	adds	r2, r7, r3
 8000db2:	2320      	movs	r3, #32
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	1cb8      	adds	r0, r7, #2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	7803      	ldrb	r3, [r0, #0]
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8000dc0:	200b      	movs	r0, #11
 8000dc2:	183a      	adds	r2, r7, r0
 8000dc4:	240c      	movs	r4, #12
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d929      	bls.n	8000e24 <st7565_drawline_complex+0xec>
		swap = 1;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8000dd8:	2108      	movs	r1, #8
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	193a      	adds	r2, r7, r4
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
		dx = dy;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	183a      	adds	r2, r7, r0
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	187a      	adds	r2, r7, r1
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	1cfa      	adds	r2, r7, #3
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8000dfa:	1cfb      	adds	r3, r7, #3
 8000dfc:	1cba      	adds	r2, r7, #2
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	187a      	adds	r2, r7, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	1c7a      	adds	r2, r7, #1
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 8000e12:	1c7a      	adds	r2, r7, #1
 8000e14:	2020      	movs	r0, #32
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e1c:	183b      	adds	r3, r7, r0
 8000e1e:	187a      	adds	r2, r7, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 8000e24:	1cfa      	adds	r2, r7, #3
 8000e26:	1c7b      	adds	r3, r7, #1
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d919      	bls.n	8000e64 <st7565_drawline_complex+0x12c>
		tmp = x0;
 8000e30:	2108      	movs	r1, #8
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	1cfa      	adds	r2, r7, #3
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	1c7a      	adds	r2, r7, #1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8000e42:	1c7b      	adds	r3, r7, #1
 8000e44:	187a      	adds	r2, r7, r1
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	1cba      	adds	r2, r7, #2
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8000e52:	1cba      	adds	r2, r7, #2
 8000e54:	2020      	movs	r0, #32
 8000e56:	183b      	adds	r3, r7, r0
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e5c:	183b      	adds	r3, r7, r0
 8000e5e:	187a      	adds	r2, r7, r1
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8000e64:	230c      	movs	r3, #12
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	2309      	movs	r3, #9
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8000e74:	2320      	movs	r3, #32
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	1cb9      	adds	r1, r7, #2
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	780b      	ldrb	r3, [r1, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d904      	bls.n	8000e8c <st7565_drawline_complex+0x154>
		ystep = 1;
 8000e82:	230a      	movs	r3, #10
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e003      	b.n	8000e94 <st7565_drawline_complex+0x15c>
	else
		ystep = -1;
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	22ff      	movs	r2, #255	@ 0xff
 8000e92:	701a      	strb	r2, [r3, #0]
	y = y0;
 8000e94:	230d      	movs	r3, #13
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	1cba      	adds	r2, r7, #2
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	1cfa      	adds	r2, r7, #3
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e045      	b.n	8000f36 <st7565_drawline_complex+0x1fe>
		if (swap == 0)
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10d      	bne.n	8000ed0 <st7565_drawline_complex+0x198>
			st7565_setpixel(buff, x, y, color);
 8000eb4:	2324      	movs	r3, #36	@ 0x24
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	781c      	ldrb	r4, [r3, #0]
 8000eba:	230d      	movs	r3, #13
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	230e      	movs	r3, #14
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	7819      	ldrb	r1, [r3, #0]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	0023      	movs	r3, r4
 8000eca:	f7ff fe1c 	bl	8000b06 <st7565_setpixel>
 8000ece:	e00c      	b.n	8000eea <st7565_drawline_complex+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8000ed0:	2324      	movs	r3, #36	@ 0x24
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	781c      	ldrb	r4, [r3, #0]
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	230d      	movs	r3, #13
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	7819      	ldrb	r1, [r3, #0]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	0023      	movs	r3, r4
 8000ee6:	f7ff fe0e 	bl	8000b06 <st7565_setpixel>
		err -= (uint8_t) dy;
 8000eea:	2009      	movs	r0, #9
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	230b      	movs	r3, #11
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	183b      	adds	r3, r7, r0
 8000efc:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8000efe:	183b      	adds	r3, r7, r0
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f04:	d911      	bls.n	8000f2a <st7565_drawline_complex+0x1f2>
			y += (uint8_t) ystep;
 8000f06:	230a      	movs	r3, #10
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	7819      	ldrb	r1, [r3, #0]
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	18bb      	adds	r3, r7, r2
 8000f10:	18ba      	adds	r2, r7, r2
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	188a      	adds	r2, r1, r2
 8000f16:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000f2a:	210e      	movs	r1, #14
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	3201      	adds	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	230e      	movs	r3, #14
 8000f38:	18fa      	adds	r2, r7, r3
 8000f3a:	1c7b      	adds	r3, r7, #1
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d9b2      	bls.n	8000eaa <st7565_drawline_complex+0x172>
		}
	}
}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b005      	add	sp, #20
 8000f4c:	bd90      	pop	{r4, r7, pc}

08000f4e <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	000c      	movs	r4, r1
 8000f58:	0010      	movs	r0, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	1cfb      	adds	r3, r7, #3
 8000f5e:	1c22      	adds	r2, r4, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	1cbb      	adds	r3, r7, #2
 8000f64:	1c02      	adds	r2, r0, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	1c7b      	adds	r3, r7, #1
 8000f6a:	1c0a      	adds	r2, r1, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    if (x >= LCDWIDTH || y >= LCDHEIGHT)
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <st7565_fillrect+0x2c>
 8000f78:	e0e2      	b.n	8001140 <st7565_fillrect+0x1f2>
 8000f7a:	1cbb      	adds	r3, r7, #2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f80:	d900      	bls.n	8000f84 <st7565_fillrect+0x36>
 8000f82:	e0dd      	b.n	8001140 <st7565_fillrect+0x1f2>
        return;
    if (x + w > LCDWIDTH)
 8000f84:	1cfb      	adds	r3, r7, #3
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	1c7b      	adds	r3, r7, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	2b80      	cmp	r3, #128	@ 0x80
 8000f90:	dd06      	ble.n	8000fa0 <st7565_fillrect+0x52>
        w = LCDWIDTH - x;
 8000f92:	1c7b      	adds	r3, r7, #1
 8000f94:	1cfa      	adds	r2, r7, #3
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	2180      	movs	r1, #128	@ 0x80
 8000f9a:	4249      	negs	r1, r1
 8000f9c:	1a8a      	subs	r2, r1, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
    if (y + h > LCDHEIGHT)
 8000fa0:	1cbb      	adds	r3, r7, #2
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	2128      	movs	r1, #40	@ 0x28
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	18d3      	adds	r3, r2, r3
 8000fac:	2b40      	cmp	r3, #64	@ 0x40
 8000fae:	dd05      	ble.n	8000fbc <st7565_fillrect+0x6e>
        h = LCDHEIGHT - y;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	1cba      	adds	r2, r7, #2
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	2140      	movs	r1, #64	@ 0x40
 8000fb8:	1a8a      	subs	r2, r1, r2
 8000fba:	701a      	strb	r2, [r3, #0]
    uint8_t y_start = y;
 8000fbc:	2114      	movs	r1, #20
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	1cba      	adds	r2, r7, #2
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
    uint8_t y_end = y + h - 1;
 8000fc6:	1cba      	adds	r2, r7, #2
 8000fc8:	2328      	movs	r3, #40	@ 0x28
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	2013      	movs	r0, #19
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
    uint8_t page_start = y_start / 8;
 8000fdc:	2312      	movs	r3, #18
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	187a      	adds	r2, r7, r1
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	08d2      	lsrs	r2, r2, #3
 8000fe6:	701a      	strb	r2, [r3, #0]
    uint8_t page_end = y_end / 8;
 8000fe8:	2311      	movs	r3, #17
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	183a      	adds	r2, r7, r0
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	08d2      	lsrs	r2, r2, #3
 8000ff2:	701a      	strb	r2, [r3, #0]
    uint8_t bit_start = y_start % 8;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	187a      	adds	r2, r7, r1
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	2107      	movs	r1, #7
 8000ffe:	400a      	ands	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
    uint8_t bit_end = y_end % 8;
 8001002:	230f      	movs	r3, #15
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	183a      	adds	r2, r7, r0
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	2107      	movs	r1, #7
 800100c:	400a      	ands	r2, r1
 800100e:	701a      	strb	r2, [r3, #0]
    for (uint8_t px = x; px < x + w; px++) {
 8001010:	2317      	movs	r3, #23
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	1cfa      	adds	r2, r7, #3
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e085      	b.n	8001128 <st7565_fillrect+0x1da>
        for (uint8_t page = page_start; page <= page_end; page++) {
 800101c:	2316      	movs	r3, #22
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2212      	movs	r2, #18
 8001022:	18ba      	adds	r2, r7, r2
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e070      	b.n	800110c <st7565_fillrect+0x1be>
            uint8_t mask = 0xFF;
 800102a:	2115      	movs	r1, #21
 800102c:	187b      	adds	r3, r7, r1
 800102e:	22ff      	movs	r2, #255	@ 0xff
 8001030:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 8001032:	2316      	movs	r3, #22
 8001034:	18fa      	adds	r2, r7, r3
 8001036:	2312      	movs	r3, #18
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10d      	bne.n	800105e <st7565_fillrect+0x110>
                mask &= (0xFF >> bit_start);
 8001042:	2310      	movs	r3, #16
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	22ff      	movs	r2, #255	@ 0xff
 800104a:	411a      	asrs	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	b25b      	sxtb	r3, r3
 8001050:	187a      	adds	r2, r7, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	b252      	sxtb	r2, r2
 8001056:	4013      	ands	r3, r2
 8001058:	b25a      	sxtb	r2, r3
 800105a:	187b      	adds	r3, r7, r1
 800105c:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 800105e:	2316      	movs	r3, #22
 8001060:	18fa      	adds	r2, r7, r3
 8001062:	2311      	movs	r3, #17
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d110      	bne.n	8001090 <st7565_fillrect+0x142>
                mask &= (0xFF << (7 - bit_end));
 800106e:	230f      	movs	r3, #15
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2207      	movs	r2, #7
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	22ff      	movs	r2, #255	@ 0xff
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	b25b      	sxtb	r3, r3
 8001080:	2115      	movs	r1, #21
 8001082:	187a      	adds	r2, r7, r1
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	b252      	sxtb	r2, r2
 8001088:	4013      	ands	r3, r2
 800108a:	b25a      	sxtb	r2, r3
 800108c:	187b      	adds	r3, r7, r1
 800108e:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = px + page * 128;
 8001090:	2317      	movs	r3, #23
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b299      	uxth	r1, r3
 8001098:	2316      	movs	r3, #22
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	01db      	lsls	r3, r3, #7
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	200c      	movs	r0, #12
 80010a6:	183b      	adds	r3, r7, r0
 80010a8:	188a      	adds	r2, r1, r2
 80010aa:	801a      	strh	r2, [r3, #0]
            if (color)
 80010ac:	232c      	movs	r3, #44	@ 0x2c
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00f      	beq.n	80010d6 <st7565_fillrect+0x188>
                buff[idx] |= mask;
 80010b6:	183b      	adds	r3, r7, r0
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	18d3      	adds	r3, r2, r3
 80010be:	7819      	ldrb	r1, [r3, #0]
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	2215      	movs	r2, #21
 80010ca:	18ba      	adds	r2, r7, r2
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e014      	b.n	8001100 <st7565_fillrect+0x1b2>
            else
                buff[idx] &= ~mask;
 80010d6:	200c      	movs	r0, #12
 80010d8:	183b      	adds	r3, r7, r0
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	18d3      	adds	r3, r2, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	2215      	movs	r2, #21
 80010e6:	18ba      	adds	r2, r7, r2
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	b252      	sxtb	r2, r2
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	b252      	sxtb	r2, r2
 80010f0:	4013      	ands	r3, r2
 80010f2:	b259      	sxtb	r1, r3
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	b2ca      	uxtb	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 8001100:	2116      	movs	r1, #22
 8001102:	187b      	adds	r3, r7, r1
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	187b      	adds	r3, r7, r1
 8001108:	3201      	adds	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	2316      	movs	r3, #22
 800110e:	18fa      	adds	r2, r7, r3
 8001110:	2311      	movs	r3, #17
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d986      	bls.n	800102a <st7565_fillrect+0xdc>
    for (uint8_t px = x; px < x + w; px++) {
 800111c:	2117      	movs	r1, #23
 800111e:	187b      	adds	r3, r7, r1
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	187b      	adds	r3, r7, r1
 8001124:	3201      	adds	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	2317      	movs	r3, #23
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	1cfb      	adds	r3, r7, #3
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	1c7b      	adds	r3, r7, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	18cb      	adds	r3, r1, r3
 8001138:	429a      	cmp	r2, r3
 800113a:	da00      	bge.n	800113e <st7565_fillrect+0x1f0>
 800113c:	e76e      	b.n	800101c <st7565_fillrect+0xce>
 800113e:	e000      	b.n	8001142 <st7565_fillrect+0x1f4>
        return;
 8001140:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8001142:	46bd      	mov	sp, r7
 8001144:	b007      	add	sp, #28
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <st7565_drawline>:
			st7565_setpixel(buff, x0 - y, i, color);
		}
	}
}

void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b08b      	sub	sp, #44	@ 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	000c      	movs	r4, r1
 8001152:	0010      	movs	r0, r2
 8001154:	0019      	movs	r1, r3
 8001156:	1cfb      	adds	r3, r7, #3
 8001158:	1c22      	adds	r2, r4, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	1cbb      	adds	r3, r7, #2
 800115e:	1c02      	adds	r2, r0, #0
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	1c7b      	adds	r3, r7, #1
 8001164:	1c0a      	adds	r2, r1, #0
 8001166:	701a      	strb	r2, [r3, #0]
    if (x0 == x1) {
 8001168:	1cfa      	adds	r2, r7, #3
 800116a:	1c7b      	adds	r3, r7, #1
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d000      	beq.n	8001176 <st7565_drawline+0x2e>
 8001174:	e0c8      	b.n	8001308 <st7565_drawline+0x1c0>
        if (x0 >= LCDWIDTH)
 8001176:	1cfb      	adds	r3, r7, #3
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	da00      	bge.n	8001182 <st7565_drawline+0x3a>
 8001180:	e1f0      	b.n	8001564 <st7565_drawline+0x41c>
            return;
        uint8_t y_start = y0 < y1 ? y0 : y1;
 8001182:	2313      	movs	r3, #19
 8001184:	18fa      	adds	r2, r7, r3
 8001186:	2338      	movs	r3, #56	@ 0x38
 8001188:	2108      	movs	r1, #8
 800118a:	185b      	adds	r3, r3, r1
 800118c:	19db      	adds	r3, r3, r7
 800118e:	1cb9      	adds	r1, r7, #2
 8001190:	780c      	ldrb	r4, [r1, #0]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2d8      	uxtb	r0, r3
 8001196:	b2e1      	uxtb	r1, r4
 8001198:	4288      	cmp	r0, r1
 800119a:	d900      	bls.n	800119e <st7565_drawline+0x56>
 800119c:	1c23      	adds	r3, r4, #0
 800119e:	7013      	strb	r3, [r2, #0]
        uint8_t y_end = y0 > y1 ? y0 : y1;
 80011a0:	2327      	movs	r3, #39	@ 0x27
 80011a2:	18fa      	adds	r2, r7, r3
 80011a4:	2338      	movs	r3, #56	@ 0x38
 80011a6:	2108      	movs	r1, #8
 80011a8:	185b      	adds	r3, r3, r1
 80011aa:	19db      	adds	r3, r3, r7
 80011ac:	1cb9      	adds	r1, r7, #2
 80011ae:	780c      	ldrb	r4, [r1, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2d8      	uxtb	r0, r3
 80011b4:	b2e1      	uxtb	r1, r4
 80011b6:	4288      	cmp	r0, r1
 80011b8:	d200      	bcs.n	80011bc <st7565_drawline+0x74>
 80011ba:	1c23      	adds	r3, r4, #0
 80011bc:	7013      	strb	r3, [r2, #0]
        if (y_end >= LCDHEIGHT)
 80011be:	2227      	movs	r2, #39	@ 0x27
 80011c0:	18bb      	adds	r3, r7, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80011c6:	d902      	bls.n	80011ce <st7565_drawline+0x86>
            y_end = LCDHEIGHT - 1;
 80011c8:	18bb      	adds	r3, r7, r2
 80011ca:	223f      	movs	r2, #63	@ 0x3f
 80011cc:	701a      	strb	r2, [r3, #0]
        uint8_t page_start = y_start / 8;
 80011ce:	2012      	movs	r0, #18
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	2113      	movs	r1, #19
 80011d4:	187a      	adds	r2, r7, r1
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	08d2      	lsrs	r2, r2, #3
 80011da:	701a      	strb	r2, [r3, #0]
        uint8_t page_end = y_end / 8;
 80011dc:	2311      	movs	r3, #17
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2427      	movs	r4, #39	@ 0x27
 80011e2:	193a      	adds	r2, r7, r4
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	08d2      	lsrs	r2, r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
        uint8_t bit_start = y_start % 8;
 80011ea:	2310      	movs	r3, #16
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	187a      	adds	r2, r7, r1
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	2107      	movs	r1, #7
 80011f4:	400a      	ands	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
        uint8_t bit_end = y_end % 8;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	193a      	adds	r2, r7, r4
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	2107      	movs	r1, #7
 8001202:	400a      	ands	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 8001206:	2326      	movs	r3, #38	@ 0x26
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	183a      	adds	r2, r7, r0
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e071      	b.n	80012f6 <st7565_drawline+0x1ae>
            uint8_t mask = 0xFF;
 8001212:	2125      	movs	r1, #37	@ 0x25
 8001214:	187b      	adds	r3, r7, r1
 8001216:	22ff      	movs	r2, #255	@ 0xff
 8001218:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 800121a:	2326      	movs	r3, #38	@ 0x26
 800121c:	18fa      	adds	r2, r7, r3
 800121e:	2312      	movs	r3, #18
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d10d      	bne.n	8001246 <st7565_drawline+0xfe>
                mask &= (0xFF >> bit_start);
 800122a:	2310      	movs	r3, #16
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	22ff      	movs	r2, #255	@ 0xff
 8001232:	411a      	asrs	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	b25b      	sxtb	r3, r3
 8001238:	187a      	adds	r2, r7, r1
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	b252      	sxtb	r2, r2
 800123e:	4013      	ands	r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	187b      	adds	r3, r7, r1
 8001244:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 8001246:	2326      	movs	r3, #38	@ 0x26
 8001248:	18fa      	adds	r2, r7, r3
 800124a:	2311      	movs	r3, #17
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d110      	bne.n	8001278 <st7565_drawline+0x130>
                mask &= (0xFF << (7 - bit_end));
 8001256:	230f      	movs	r3, #15
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2207      	movs	r2, #7
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	22ff      	movs	r2, #255	@ 0xff
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	2125      	movs	r1, #37	@ 0x25
 800126a:	187a      	adds	r2, r7, r1
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	b252      	sxtb	r2, r2
 8001270:	4013      	ands	r3, r2
 8001272:	b25a      	sxtb	r2, r3
 8001274:	187b      	adds	r3, r7, r1
 8001276:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = x0 + page * 128;
 8001278:	1cfb      	adds	r3, r7, #3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b299      	uxth	r1, r3
 800127e:	2326      	movs	r3, #38	@ 0x26
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	01db      	lsls	r3, r3, #7
 8001288:	b29a      	uxth	r2, r3
 800128a:	200c      	movs	r0, #12
 800128c:	183b      	adds	r3, r7, r0
 800128e:	188a      	adds	r2, r1, r2
 8001290:	801a      	strh	r2, [r3, #0]
            if (color)
 8001292:	233c      	movs	r3, #60	@ 0x3c
 8001294:	2208      	movs	r2, #8
 8001296:	189b      	adds	r3, r3, r2
 8001298:	19db      	adds	r3, r3, r7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00f      	beq.n	80012c0 <st7565_drawline+0x178>
                buff[idx] |= mask;
 80012a0:	183b      	adds	r3, r7, r0
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	18d3      	adds	r3, r2, r3
 80012a8:	7819      	ldrb	r1, [r3, #0]
 80012aa:	183b      	adds	r3, r7, r0
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	2225      	movs	r2, #37	@ 0x25
 80012b4:	18ba      	adds	r2, r7, r2
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e014      	b.n	80012ea <st7565_drawline+0x1a2>
            else
                buff[idx] &= ~mask;
 80012c0:	200c      	movs	r0, #12
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	2225      	movs	r2, #37	@ 0x25
 80012d0:	18ba      	adds	r2, r7, r2
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	b252      	sxtb	r2, r2
 80012d6:	43d2      	mvns	r2, r2
 80012d8:	b252      	sxtb	r2, r2
 80012da:	4013      	ands	r3, r2
 80012dc:	b259      	sxtb	r1, r3
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	18d3      	adds	r3, r2, r3
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 80012ea:	2126      	movs	r1, #38	@ 0x26
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	3201      	adds	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	2326      	movs	r3, #38	@ 0x26
 80012f8:	18fa      	adds	r2, r7, r3
 80012fa:	2311      	movs	r3, #17
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d985      	bls.n	8001212 <st7565_drawline+0xca>
 8001306:	e130      	b.n	800156a <st7565_drawline+0x422>
        }
    } else if (y0 == y1) {
 8001308:	1cba      	adds	r2, r7, #2
 800130a:	2338      	movs	r3, #56	@ 0x38
 800130c:	2108      	movs	r1, #8
 800130e:	185b      	adds	r3, r3, r1
 8001310:	19db      	adds	r3, r3, r7
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d000      	beq.n	800131c <st7565_drawline+0x1d4>
 800131a:	e126      	b.n	800156a <st7565_drawline+0x422>
        if (y0 >= LCDHEIGHT)
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b3f      	cmp	r3, #63	@ 0x3f
 8001322:	d900      	bls.n	8001326 <st7565_drawline+0x1de>
 8001324:	e120      	b.n	8001568 <st7565_drawline+0x420>
            return;
        uint8_t x_start = x0 < x1 ? x0 : x1;
 8001326:	231d      	movs	r3, #29
 8001328:	18fa      	adds	r2, r7, r3
 800132a:	1c7b      	adds	r3, r7, #1
 800132c:	1cf9      	adds	r1, r7, #3
 800132e:	780c      	ldrb	r4, [r1, #0]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2d8      	uxtb	r0, r3
 8001334:	b2e1      	uxtb	r1, r4
 8001336:	4288      	cmp	r0, r1
 8001338:	d900      	bls.n	800133c <st7565_drawline+0x1f4>
 800133a:	1c23      	adds	r3, r4, #0
 800133c:	7013      	strb	r3, [r2, #0]
        uint8_t x_end = x0 > x1 ? x0 : x1;
 800133e:	2324      	movs	r3, #36	@ 0x24
 8001340:	18fa      	adds	r2, r7, r3
 8001342:	1c7b      	adds	r3, r7, #1
 8001344:	1cf9      	adds	r1, r7, #3
 8001346:	780c      	ldrb	r4, [r1, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2d8      	uxtb	r0, r3
 800134c:	b2e1      	uxtb	r1, r4
 800134e:	4288      	cmp	r0, r1
 8001350:	d200      	bcs.n	8001354 <st7565_drawline+0x20c>
 8001352:	1c23      	adds	r3, r4, #0
 8001354:	7013      	strb	r3, [r2, #0]
        if (x_end >= LCDWIDTH)
 8001356:	2224      	movs	r2, #36	@ 0x24
 8001358:	18bb      	adds	r3, r7, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	da02      	bge.n	8001368 <st7565_drawline+0x220>
            x_end = LCDWIDTH - 1;
 8001362:	18bb      	adds	r3, r7, r2
 8001364:	227f      	movs	r2, #127	@ 0x7f
 8001366:	701a      	strb	r2, [r3, #0]
        uint8_t page = y0 / 8;
 8001368:	201c      	movs	r0, #28
 800136a:	183b      	adds	r3, r7, r0
 800136c:	1cba      	adds	r2, r7, #2
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	08d2      	lsrs	r2, r2, #3
 8001372:	701a      	strb	r2, [r3, #0]
        uint8_t bit = 7 - (y0 % 8);
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	43db      	mvns	r3, r3
 800137a:	b2da      	uxtb	r2, r3
 800137c:	241b      	movs	r4, #27
 800137e:	193b      	adds	r3, r7, r4
 8001380:	2107      	movs	r1, #7
 8001382:	400a      	ands	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
        uint8_t mask = 1 << bit;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	231a      	movs	r3, #26
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	701a      	strb	r2, [r3, #0]
        uint16_t idx = x_start + page * 128;
 8001394:	231d      	movs	r3, #29
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b299      	uxth	r1, r3
 800139c:	183b      	adds	r3, r7, r0
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	2018      	movs	r0, #24
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	188a      	adds	r2, r1, r2
 80013ac:	801a      	strh	r2, [r3, #0]
        // 32-bit write optimization
        uint32_t *p32 = (uint32_t *)&buff[idx];
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	623b      	str	r3, [r7, #32]
        uint32_t val = color ? 0xFFFFFFFF : 0x00000000;
 80013b8:	233c      	movs	r3, #60	@ 0x3c
 80013ba:	2208      	movs	r2, #8
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	19db      	adds	r3, r3, r7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <st7565_drawline+0x284>
 80013c6:	2301      	movs	r3, #1
 80013c8:	425b      	negs	r3, r3
 80013ca:	e000      	b.n	80013ce <st7565_drawline+0x286>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
        uint8_t rem = (x_end - x_start + 1);
 80013d0:	2324      	movs	r3, #36	@ 0x24
 80013d2:	18fa      	adds	r2, r7, r3
 80013d4:	231d      	movs	r3, #29
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	231f      	movs	r3, #31
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	3201      	adds	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 80013e8:	e030      	b.n	800144c <st7565_drawline+0x304>
            if (color) *p32 |= (val & (mask * 0x01010101));
 80013ea:	233c      	movs	r3, #60	@ 0x3c
 80013ec:	2208      	movs	r2, #8
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	19db      	adds	r3, r3, r7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d011      	beq.n	800141c <st7565_drawline+0x2d4>
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	231a      	movs	r3, #26
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	0013      	movs	r3, r2
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	189b      	adds	r3, r3, r2
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	189b      	adds	r3, r3, r2
 800140c:	001a      	movs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	000a      	movs	r2, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e00e      	b.n	800143a <st7565_drawline+0x2f2>
            else *p32 &= ~(mask * 0x01010101);
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	231a      	movs	r3, #26
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	0013      	movs	r3, r2
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	189b      	adds	r3, r3, r2
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	189b      	adds	r3, r3, r2
 8001430:	43db      	mvns	r3, r3
 8001432:	400b      	ands	r3, r1
 8001434:	001a      	movs	r2, r3
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	601a      	str	r2, [r3, #0]
            p32++;
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
            rem -= 4;
 8001440:	221f      	movs	r2, #31
 8001442:	18bb      	adds	r3, r7, r2
 8001444:	18ba      	adds	r2, r7, r2
 8001446:	7812      	ldrb	r2, [r2, #0]
 8001448:	3a04      	subs	r2, #4
 800144a:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 800144c:	231f      	movs	r3, #31
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d903      	bls.n	800145e <st7565_drawline+0x316>
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
 800145c:	d0c5      	beq.n	80013ea <st7565_drawline+0x2a2>
        }
        idx = (uint8_t *)p32 - &buff[x_start + page * 128];
 800145e:	231d      	movs	r3, #29
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	231c      	movs	r3, #28
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	001a      	movs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	189b      	adds	r3, r3, r2
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	1ad2      	subs	r2, r2, r3
 8001478:	2318      	movs	r3, #24
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 800147e:	231e      	movs	r3, #30
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e064      	b.n	8001552 <st7565_drawline+0x40a>
            if (color) buff[x_start + page * 128 + idx + i] |= mask;
 8001488:	233c      	movs	r3, #60	@ 0x3c
 800148a:	2208      	movs	r2, #8
 800148c:	189b      	adds	r3, r3, r2
 800148e:	19db      	adds	r3, r3, r7
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d029      	beq.n	80014ea <st7565_drawline+0x3a2>
 8001496:	201d      	movs	r0, #29
 8001498:	183b      	adds	r3, r7, r0
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	241c      	movs	r4, #28
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	18d2      	adds	r2, r2, r3
 80014a6:	2518      	movs	r5, #24
 80014a8:	197b      	adds	r3, r7, r5
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	18d2      	adds	r2, r2, r3
 80014ae:	261e      	movs	r6, #30
 80014b0:	19bb      	adds	r3, r7, r6
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	001a      	movs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	7819      	ldrb	r1, [r3, #0]
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	18d2      	adds	r2, r2, r3
 80014ca:	197b      	adds	r3, r7, r5
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	18d2      	adds	r2, r2, r3
 80014d0:	19bb      	adds	r3, r7, r6
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	001a      	movs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	221a      	movs	r2, #26
 80014de:	18ba      	adds	r2, r7, r2
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e02d      	b.n	8001546 <st7565_drawline+0x3fe>
            else buff[x_start + page * 128 + idx + i] &= ~mask;
 80014ea:	201d      	movs	r0, #29
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	241c      	movs	r4, #28
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	18d2      	adds	r2, r2, r3
 80014fa:	2518      	movs	r5, #24
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	18d2      	adds	r2, r2, r3
 8001502:	261e      	movs	r6, #30
 8001504:	19bb      	adds	r3, r7, r6
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	18d3      	adds	r3, r2, r3
 800150a:	001a      	movs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	189b      	adds	r3, r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b25b      	sxtb	r3, r3
 8001514:	221a      	movs	r2, #26
 8001516:	18ba      	adds	r2, r7, r2
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	b252      	sxtb	r2, r2
 800151c:	43d2      	mvns	r2, r2
 800151e:	b252      	sxtb	r2, r2
 8001520:	4013      	ands	r3, r2
 8001522:	b259      	sxtb	r1, r3
 8001524:	183b      	adds	r3, r7, r0
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	193b      	adds	r3, r7, r4
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	01db      	lsls	r3, r3, #7
 800152e:	18d2      	adds	r2, r2, r3
 8001530:	197b      	adds	r3, r7, r5
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	18d2      	adds	r2, r2, r3
 8001536:	19bb      	adds	r3, r7, r6
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	001a      	movs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	189b      	adds	r3, r3, r2
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 8001546:	211e      	movs	r1, #30
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	187b      	adds	r3, r7, r1
 800154e:	3201      	adds	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	231e      	movs	r3, #30
 8001554:	18fa      	adds	r2, r7, r3
 8001556:	231f      	movs	r3, #31
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d392      	bcc.n	8001488 <st7565_drawline+0x340>
 8001562:	e002      	b.n	800156a <st7565_drawline+0x422>
            return;
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	e000      	b.n	800156a <st7565_drawline+0x422>
            return;
 8001568:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800156a:	46bd      	mov	sp, r7
 800156c:	b00b      	add	sp, #44	@ 0x2c
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001570 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 800157c:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <interpolation+0x108>)
 800157e:	2200      	movs	r2, #0
 8001580:	5e9b      	ldrsh	r3, [r3, r2]
 8001582:	1dba      	adds	r2, r7, #6
 8001584:	2100      	movs	r1, #0
 8001586:	5e52      	ldrsh	r2, [r2, r1]
 8001588:	429a      	cmp	r2, r3
 800158a:	dc11      	bgt.n	80015b0 <interpolation+0x40>
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <interpolation+0x108>)
 800158e:	2202      	movs	r2, #2
 8001590:	5e9b      	ldrsh	r3, [r3, r2]
 8001592:	001a      	movs	r2, r3
 8001594:	1dbb      	adds	r3, r7, #6
 8001596:	2100      	movs	r1, #0
 8001598:	5e5b      	ldrsh	r3, [r3, r1]
 800159a:	435a      	muls	r2, r3
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <interpolation+0x108>)
 800159e:	2100      	movs	r1, #0
 80015a0:	5e5b      	ldrsh	r3, [r3, r1]
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f7fe fe39 	bl	800021c <__divsi3>
 80015aa:	0003      	movs	r3, r0
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	e05e      	b.n	800166e <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <interpolation+0x108>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	5e9b      	ldrsh	r3, [r3, r2]
 80015b6:	1dba      	adds	r2, r7, #6
 80015b8:	2100      	movs	r1, #0
 80015ba:	5e52      	ldrsh	r2, [r2, r1]
 80015bc:	429a      	cmp	r2, r3
 80015be:	db03      	blt.n	80015c8 <interpolation+0x58>
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <interpolation+0x108>)
 80015c2:	220a      	movs	r2, #10
 80015c4:	5e9b      	ldrsh	r3, [r3, r2]
 80015c6:	e052      	b.n	800166e <interpolation+0xfe>
    if (input <= pts[1].x) {
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <interpolation+0x108>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	5e9b      	ldrsh	r3, [r3, r2]
 80015ce:	1dba      	adds	r2, r7, #6
 80015d0:	2100      	movs	r1, #0
 80015d2:	5e52      	ldrsh	r2, [r2, r1]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dc25      	bgt.n	8001624 <interpolation+0xb4>
        return pts[0].y +
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <interpolation+0x108>)
 80015da:	2202      	movs	r2, #2
 80015dc:	5e9b      	ldrsh	r3, [r3, r2]
 80015de:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 80015e0:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <interpolation+0x108>)
 80015e2:	2206      	movs	r2, #6
 80015e4:	5e9b      	ldrsh	r3, [r3, r2]
 80015e6:	001a      	movs	r2, r3
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <interpolation+0x108>)
 80015ea:	2102      	movs	r1, #2
 80015ec:	5e5b      	ldrsh	r3, [r3, r1]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1dba      	adds	r2, r7, #6
 80015f2:	2100      	movs	r1, #0
 80015f4:	5e52      	ldrsh	r2, [r2, r1]
 80015f6:	4920      	ldr	r1, [pc, #128]	@ (8001678 <interpolation+0x108>)
 80015f8:	2000      	movs	r0, #0
 80015fa:	5e09      	ldrsh	r1, [r1, r0]
 80015fc:	1a52      	subs	r2, r2, r1
 80015fe:	435a      	muls	r2, r3
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <interpolation+0x108>)
 8001602:	2104      	movs	r1, #4
 8001604:	5e5b      	ldrsh	r3, [r3, r1]
 8001606:	0019      	movs	r1, r3
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <interpolation+0x108>)
 800160a:	2000      	movs	r0, #0
 800160c:	5e1b      	ldrsh	r3, [r3, r0]
 800160e:	1acb      	subs	r3, r1, r3
 8001610:	0019      	movs	r1, r3
 8001612:	0010      	movs	r0, r2
 8001614:	f7fe fe02 	bl	800021c <__divsi3>
 8001618:	0003      	movs	r3, r0
        return pts[0].y +
 800161a:	b29b      	uxth	r3, r3
 800161c:	18e3      	adds	r3, r4, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21b      	sxth	r3, r3
 8001622:	e024      	b.n	800166e <interpolation+0xfe>
    } else {

        return pts[1].y +
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <interpolation+0x108>)
 8001626:	2206      	movs	r2, #6
 8001628:	5e9b      	ldrsh	r3, [r3, r2]
 800162a:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <interpolation+0x108>)
 800162e:	220a      	movs	r2, #10
 8001630:	5e9b      	ldrsh	r3, [r3, r2]
 8001632:	001a      	movs	r2, r3
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <interpolation+0x108>)
 8001636:	2106      	movs	r1, #6
 8001638:	5e5b      	ldrsh	r3, [r3, r1]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	1dba      	adds	r2, r7, #6
 800163e:	2100      	movs	r1, #0
 8001640:	5e52      	ldrsh	r2, [r2, r1]
 8001642:	490d      	ldr	r1, [pc, #52]	@ (8001678 <interpolation+0x108>)
 8001644:	2004      	movs	r0, #4
 8001646:	5e09      	ldrsh	r1, [r1, r0]
 8001648:	1a52      	subs	r2, r2, r1
 800164a:	435a      	muls	r2, r3
 800164c:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <interpolation+0x108>)
 800164e:	2108      	movs	r1, #8
 8001650:	5e5b      	ldrsh	r3, [r3, r1]
 8001652:	0019      	movs	r1, r3
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <interpolation+0x108>)
 8001656:	2004      	movs	r0, #4
 8001658:	5e1b      	ldrsh	r3, [r3, r0]
 800165a:	1acb      	subs	r3, r1, r3
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f7fe fddc 	bl	800021c <__divsi3>
 8001664:	0003      	movs	r3, r0
        return pts[1].y +
 8001666:	b29b      	uxth	r3, r3
 8001668:	18e3      	adds	r3, r4, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	b21b      	sxth	r3, r3
    }
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b003      	add	sp, #12
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	080069ec 	.word	0x080069ec

0800167c <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[4];

static uint16_t filterButton(uint16_t voltIn){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	0002      	movs	r2, r0
 8001684:	1dbb      	adds	r3, r7, #6
 8001686:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001688:	230e      	movs	r3, #14
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	1dba      	adds	r2, r7, #6
 800168e:	8812      	ldrh	r2, [r2, #0]
 8001690:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<3;i++){
 8001692:	230d      	movs	r3, #13
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e01c      	b.n	80016d6 <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 800169c:	200d      	movs	r0, #13
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <filterButton+0x84>)
 80016a6:	0052      	lsls	r2, r2, #1
 80016a8:	5ad1      	ldrh	r1, [r2, r3]
 80016aa:	220e      	movs	r2, #14
 80016ac:	18bb      	adds	r3, r7, r2
 80016ae:	18ba      	adds	r2, r7, r2
 80016b0:	8812      	ldrh	r2, [r2, #0]
 80016b2:	188a      	adds	r2, r1, r2
 80016b4:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <filterButton+0x84>)
 80016c2:	0049      	lsls	r1, r1, #1
 80016c4:	5ac9      	ldrh	r1, [r1, r3]
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <filterButton+0x84>)
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<3;i++){
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	183b      	adds	r3, r7, r0
 80016d2:	3201      	adds	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	230d      	movs	r3, #13
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d9dd      	bls.n	800169c <filterButton+0x20>
	}
	MAVectorButton[3]=voltIn;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <filterButton+0x84>)
 80016e2:	1dba      	adds	r2, r7, #6
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	80da      	strh	r2, [r3, #6]
	media/=4;
 80016e8:	210e      	movs	r1, #14
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	187a      	adds	r2, r7, r1
 80016ee:	8812      	ldrh	r2, [r2, #0]
 80016f0:	0892      	lsrs	r2, r2, #2
 80016f2:	801a      	strh	r2, [r3, #0]

	//if(media>)
	return media;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	881b      	ldrh	r3, [r3, #0]
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200004c0 	.word	0x200004c0

08001704 <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	0002      	movs	r2, r0
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001710:	230e      	movs	r3, #14
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	1dba      	adds	r2, r7, #6
 8001716:	8812      	ldrh	r2, [r2, #0]
 8001718:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 800171a:	230d      	movs	r3, #13
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e01c      	b.n	800175e <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 8001724:	200d      	movs	r0, #13
 8001726:	183b      	adds	r3, r7, r0
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <filterVolt+0x8c>)
 800172e:	0052      	lsls	r2, r2, #1
 8001730:	5ad1      	ldrh	r1, [r2, r3]
 8001732:	220e      	movs	r2, #14
 8001734:	18bb      	adds	r3, r7, r2
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	188a      	adds	r2, r1, r2
 800173c:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 800173e:	183b      	adds	r3, r7, r0
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	183b      	adds	r3, r7, r0
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <filterVolt+0x8c>)
 800174a:	0049      	lsls	r1, r1, #1
 800174c:	5ac9      	ldrh	r1, [r1, r3]
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <filterVolt+0x8c>)
 8001750:	0052      	lsls	r2, r2, #1
 8001752:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001754:	183b      	adds	r3, r7, r0
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	183b      	adds	r3, r7, r0
 800175a:	3201      	adds	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	230d      	movs	r3, #13
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d9dd      	bls.n	8001724 <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <filterVolt+0x8c>)
 800176a:	1dba      	adds	r2, r7, #6
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001770:	250e      	movs	r5, #14
 8001772:	197c      	adds	r4, r7, r5
 8001774:	197b      	adds	r3, r7, r5
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	210a      	movs	r1, #10
 800177a:	0018      	movs	r0, r3
 800177c:	f7fe fcc4 	bl	8000108 <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	8023      	strh	r3, [r4, #0]
	return media;
 8001784:	197b      	adds	r3, r7, r5
 8001786:	881b      	ldrh	r3, [r3, #0]
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bdb0      	pop	{r4, r5, r7, pc}
 8001790:	200004c8 	.word	0x200004c8

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179a:	f001 f983 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179e:	f000 f829 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a2:	f000 f965 	bl	8001a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017a6:	f000 f933 	bl	8001a10 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80017aa:	f000 f88b 	bl	80018c4 <MX_ADC_Init>
  MX_SPI1_Init();
 80017ae:	f000 f8f1 	bl	8001994 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uint8_t nrTasks=3; //Numar taskuri
 80017b2:	252f      	movs	r5, #47	@ 0x2f
 80017b4:	197b      	adds	r3, r7, r5
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
  SimpleTask tasks[] = {
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <main+0x54>)
 80017be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017c0:	c313      	stmia	r3!, {r0, r1, r4}
 80017c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017c4:	c313      	stmia	r3!, {r0, r1, r4}
 80017c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017c8:	c313      	stmia	r3!, {r0, r1, r4}
    {"readAdcVoltFunction", readAdcVoltFunction, 1},
	{"displayVoltReadFunction", displayVoltReadFunction, 1},
    {"readButtonFunction",readButtonFunction,1}
  };//timpul total pana vom intra din nou intr-o functie, ex readAdcVoltFunction, e suma tuturor ms a tuturor taskurilor.

  uint32_t initTaskMaxTime=1570; //timp alocat task-ului de init OS(dupa initializarea OS-ului in sine). In ms.
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <main+0x58>)
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  OS_Init(tasks, nrTasks, init_task,initTaskMaxTime);
 80017ce:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <main+0x5c>)
 80017d2:	197b      	adds	r3, r7, r5
 80017d4:	7819      	ldrb	r1, [r3, #0]
 80017d6:	1d38      	adds	r0, r7, #4
 80017d8:	0023      	movs	r3, r4
 80017da:	f001 f8af 	bl	800293c <OS_Init>
  OS_Run();
 80017de:	f001 f8d1 	bl	8002984 <OS_Run>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	e7fd      	b.n	80017e2 <main+0x4e>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	08005f18 	.word	0x08005f18
 80017ec:	00000622 	.word	0x00000622
 80017f0:	08001bcd 	.word	0x08001bcd

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b099      	sub	sp, #100	@ 0x64
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	242c      	movs	r4, #44	@ 0x2c
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	0018      	movs	r0, r3
 8001800:	2334      	movs	r3, #52	@ 0x34
 8001802:	001a      	movs	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	f004 fb11 	bl	8005e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180a:	231c      	movs	r3, #28
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	0018      	movs	r0, r3
 8001810:	2310      	movs	r3, #16
 8001812:	001a      	movs	r2, r3
 8001814:	2100      	movs	r1, #0
 8001816:	f004 fb09 	bl	8005e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181a:	003b      	movs	r3, r7
 800181c:	0018      	movs	r0, r3
 800181e:	231c      	movs	r3, #28
 8001820:	001a      	movs	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	f004 fb02 	bl	8005e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001828:	0021      	movs	r1, r4
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2212      	movs	r2, #18
 800182e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2201      	movs	r2, #1
 8001834:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2201      	movs	r2, #1
 800183a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2210      	movs	r2, #16
 8001840:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2210      	movs	r2, #16
 8001846:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2202      	movs	r2, #2
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	22a0      	movs	r2, #160	@ 0xa0
 800185a:	0392      	lsls	r2, r2, #14
 800185c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2201      	movs	r2, #1
 8001862:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	187b      	adds	r3, r7, r1
 8001866:	0018      	movs	r0, r3
 8001868:	f002 f87c 	bl	8003964 <HAL_RCC_OscConfig>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001870:	f001 f85e 	bl	8002930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	211c      	movs	r1, #28
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2202      	movs	r2, #2
 8001880:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	187b      	adds	r3, r7, r1
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2101      	movs	r1, #1
 8001892:	0018      	movs	r0, r3
 8001894:	f002 fbec 	bl	8004070 <HAL_RCC_ClockConfig>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800189c:	f001 f848 	bl	8002930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018a0:	003b      	movs	r3, r7
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018a6:	003b      	movs	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ac:	003b      	movs	r3, r7
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 fd74 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80018b8:	f001 f83a 	bl	8002930 <Error_Handler>
  }
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b019      	add	sp, #100	@ 0x64
 80018c2:	bd90      	pop	{r4, r7, pc}

080018c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	0018      	movs	r0, r3
 80018ce:	230c      	movs	r3, #12
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f004 faaa 	bl	8005e2c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <MX_ADC_Init+0xc8>)
 80018da:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <MX_ADC_Init+0xcc>)
 80018dc:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <MX_ADC_Init+0xc8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80018e4:	4b29      	ldr	r3, [pc, #164]	@ (800198c <MX_ADC_Init+0xc8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b28      	ldr	r3, [pc, #160]	@ (800198c <MX_ADC_Init+0xc8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80018f0:	4b26      	ldr	r3, [pc, #152]	@ (800198c <MX_ADC_Init+0xc8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <MX_ADC_Init+0xc8>)
 80018f8:	2204      	movs	r2, #4
 80018fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <MX_ADC_Init+0xc8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <MX_ADC_Init+0xc8>)
 8001904:	2200      	movs	r2, #0
 8001906:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001908:	4b20      	ldr	r3, [pc, #128]	@ (800198c <MX_ADC_Init+0xc8>)
 800190a:	2200      	movs	r2, #0
 800190c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_ADC_Init+0xc8>)
 8001910:	2200      	movs	r2, #0
 8001912:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <MX_ADC_Init+0xc8>)
 8001916:	22c2      	movs	r2, #194	@ 0xc2
 8001918:	32ff      	adds	r2, #255	@ 0xff
 800191a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_ADC_Init+0xc8>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <MX_ADC_Init+0xc8>)
 8001924:	2224      	movs	r2, #36	@ 0x24
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_ADC_Init+0xc8>)
 800192c:	2201      	movs	r2, #1
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_ADC_Init+0xc8>)
 8001932:	0018      	movs	r0, r3
 8001934:	f001 f90a 	bl	8002b4c <HAL_ADC_Init>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800193c:	f000 fff8 	bl	8002930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	0152      	lsls	r2, r2, #5
 800194c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2207      	movs	r2, #7
 8001952:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001954:	1d3a      	adds	r2, r7, #4
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <MX_ADC_Init+0xc8>)
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f001 fb6e 	bl	800303c <HAL_ADC_ConfigChannel>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001964:	f000 ffe4 	bl	8002930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800196e:	1d3a      	adds	r2, r7, #4
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_ADC_Init+0xc8>)
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f001 fb61 	bl	800303c <HAL_ADC_ConfigChannel>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800197e:	f000 ffd7 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	200004dc 	.word	0x200004dc
 8001990:	40012400 	.word	0x40012400

08001994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_SPI1_Init+0x74>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <MX_SPI1_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019a0:	2282      	movs	r2, #130	@ 0x82
 80019a2:	0052      	lsls	r2, r2, #1
 80019a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019ae:	22e0      	movs	r2, #224	@ 0xe0
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019ca:	2218      	movs	r2, #24
 80019cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019e2:	2207      	movs	r2, #7
 80019e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019ee:	2208      	movs	r2, #8
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <MX_SPI1_Init+0x74>)
 80019f4:	0018      	movs	r0, r3
 80019f6:	f002 fdd1 	bl	800459c <HAL_SPI_Init>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f000 ff97 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000051c 	.word	0x2000051c
 8001a0c:	40013000 	.word	0x40013000

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a16:	4a15      	ldr	r2, [pc, #84]	@ (8001a6c <MX_USART2_UART_Init+0x5c>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a1c:	22e1      	movs	r2, #225	@ 0xe1
 8001a1e:	0252      	lsls	r2, r2, #9
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	f003 fb85 	bl	8005164 <HAL_UART_Init>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 ff67 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000580 	.word	0x20000580
 8001a6c:	40004400 	.word	0x40004400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08b      	sub	sp, #44	@ 0x2c
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	2414      	movs	r4, #20
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	2314      	movs	r3, #20
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f004 f9d3 	bl	8005e2c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0309      	lsls	r1, r1, #12
 8001a90:	430a      	orrs	r2, r1
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	031b      	lsls	r3, r3, #12
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa2:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	03c9      	lsls	r1, r1, #15
 8001aac:	430a      	orrs	r2, r1
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	4b43      	ldr	r3, [pc, #268]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	03db      	lsls	r3, r3, #15
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	0289      	lsls	r1, r1, #10
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b39      	ldr	r3, [pc, #228]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	02c9      	lsls	r1, r1, #11
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <MX_GPIO_Init+0x150>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	02db      	lsls	r3, r3, #11
 8001af0:	4013      	ands	r3, r2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <MX_GPIO_Init+0x154>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	0018      	movs	r0, r3
 8001afe:	f001 ff13 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	0099      	lsls	r1, r3, #2
 8001b06:	2390      	movs	r3, #144	@ 0x90
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 ff0b 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8001b12:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc8 <MX_GPIO_Init+0x158>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	2140      	movs	r1, #64	@ 0x40
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 ff05 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	0192      	lsls	r2, r2, #6
 8001b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	2284      	movs	r2, #132	@ 0x84
 8001b2a:	0392      	lsls	r2, r2, #14
 8001b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <MX_GPIO_Init+0x154>)
 8001b38:	0019      	movs	r1, r3
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	f001 fd7c 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	2280      	movs	r2, #128	@ 0x80
 8001b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	2201      	movs	r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc4 <MX_GPIO_Init+0x154>)
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f001 fd6a 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8001b64:	0021      	movs	r1, r4
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	22c0      	movs	r2, #192	@ 0xc0
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	000c      	movs	r4, r1
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	2201      	movs	r2, #1
 8001b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	193a      	adds	r2, r7, r4
 8001b84:	2390      	movs	r3, #144	@ 0x90
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f001 fd54 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8001b90:	0021      	movs	r1, r4
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2240      	movs	r2, #64	@ 0x40
 8001b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <MX_GPIO_Init+0x158>)
 8001bae:	0019      	movs	r1, r3
 8001bb0:	0010      	movs	r0, r2
 8001bb2:	f001 fd41 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b00b      	add	sp, #44	@ 0x2c
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000400 	.word	0x48000400

08001bcc <init_task>:

/* USER CODE BEGIN 4 */
// Facem OS custom aici, avem un init task dupa care vin celalalte.
void init_task(void) {
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af02      	add	r7, sp, #8
    test = 42;
 8001bd2:	4bb0      	ldr	r3, [pc, #704]	@ (8001e94 <init_task+0x2c8>)
 8001bd4:	222a      	movs	r2, #42	@ 0x2a
 8001bd6:	701a      	strb	r2, [r3, #0]
    st7565_init();
 8001bd8:	f7fe fe4a 	bl	8000870 <st7565_init>
      			  st7565_backlight_enable();
 8001bdc:	f7fe fef6 	bl	80009cc <st7565_backlight_enable>
      			  st7565_clear_screen();
 8001be0:	f7fe ff26 	bl	8000a30 <st7565_clear_screen>
      			st7565_set_brightness(0);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7fe feff 	bl	80009e8 <st7565_set_brightness>
      			//osDelay(1000);

      			//st7565_fade_in(10);


      			  st7565_clear_buffer(buffer);
 8001bea:	4bab      	ldr	r3, [pc, #684]	@ (8001e98 <init_task+0x2cc>)
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe ff7b 	bl	8000ae8 <st7565_clear_buffer>

      			    			  //Animatie jmekera de startup

      			  uint8_t spacingx=126/10; //Cat de distantate sunt liniile in animatie x
 8001bf2:	230b      	movs	r3, #11
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	701a      	strb	r2, [r3, #0]
      			  uint8_t spacingy=63/6;
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	220a      	movs	r2, #10
 8001c00:	701a      	strb	r2, [r3, #0]
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001c02:	231e      	movs	r3, #30
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e0ab      	b.n	8001d64 <init_task+0x198>
      				  //spacing=5+i/10;
      				  if(i%4==0)st7565_set_brightness(i/4);
 8001c0c:	211e      	movs	r1, #30
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <init_task+0x60>
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7fe fede 	bl	80009e8 <st7565_set_brightness>
      				  uint16_t j=i/2;
 8001c2c:	1dbb      	adds	r3, r7, #6
 8001c2e:	221e      	movs	r2, #30
 8001c30:	18ba      	adds	r2, r7, r2
 8001c32:	8812      	ldrh	r2, [r2, #0]
 8001c34:	0852      	lsrs	r2, r2, #1
 8001c36:	801a      	strh	r2, [r3, #0]
      				  st7565_clear_buffer(buffer);
 8001c38:	4b97      	ldr	r3, [pc, #604]	@ (8001e98 <init_task+0x2cc>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe ff54 	bl	8000ae8 <st7565_clear_buffer>
      				  //Linie de la i,j la marginea dreapta
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001c40:	231c      	movs	r3, #28
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
 8001c48:	e017      	b.n	8001c7a <init_task+0xae>
      					st7565_drawline_complex(buffer,i,j,126,j2,1);
 8001c4a:	231e      	movs	r3, #30
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	8819      	ldrh	r1, [r3, #0]
 8001c50:	1dbb      	adds	r3, r7, #6
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	251c      	movs	r5, #28
 8001c56:	197b      	adds	r3, r7, r5
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	488f      	ldr	r0, [pc, #572]	@ (8001e98 <init_task+0x2cc>)
 8001c5c:	2401      	movs	r4, #1
 8001c5e:	9401      	str	r4, [sp, #4]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	237e      	movs	r3, #126	@ 0x7e
 8001c64:	f7ff f868 	bl	8000d38 <st7565_drawline_complex>
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001c68:	230a      	movs	r3, #10
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	197b      	adds	r3, r7, r5
 8001c72:	197a      	adds	r2, r7, r5
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	188a      	adds	r2, r1, r2
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	231c      	movs	r3, #28
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c82:	d9e2      	bls.n	8001c4a <init_task+0x7e>
      				  }
      				//Linie de la i,j la marginea stanga
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001c84:	231a      	movs	r3, #26
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	e017      	b.n	8001cbe <init_task+0xf2>
      				  					st7565_drawline_complex(buffer,i,j,0,j2,1);
 8001c8e:	231e      	movs	r3, #30
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	8819      	ldrh	r1, [r3, #0]
 8001c94:	1dbb      	adds	r3, r7, #6
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	251a      	movs	r5, #26
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	487e      	ldr	r0, [pc, #504]	@ (8001e98 <init_task+0x2cc>)
 8001ca0:	2401      	movs	r4, #1
 8001ca2:	9401      	str	r4, [sp, #4]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f7ff f846 	bl	8000d38 <st7565_drawline_complex>
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001cac:	230a      	movs	r3, #10
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	197b      	adds	r3, r7, r5
 8001cb6:	197a      	adds	r2, r7, r5
 8001cb8:	8812      	ldrh	r2, [r2, #0]
 8001cba:	188a      	adds	r2, r1, r2
 8001cbc:	801a      	strh	r2, [r3, #0]
 8001cbe:	231a      	movs	r3, #26
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cc6:	d9e2      	bls.n	8001c8e <init_task+0xc2>
      				  				  }

      				  //Linie de la i,j la margine jos
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001cc8:	2318      	movs	r3, #24
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e017      	b.n	8001d02 <init_task+0x136>
      				  		st7565_drawline_complex(buffer,i,j,i2,63,1);
 8001cd2:	231e      	movs	r3, #30
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	8819      	ldrh	r1, [r3, #0]
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	2518      	movs	r5, #24
 8001cde:	197b      	adds	r3, r7, r5
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	486d      	ldr	r0, [pc, #436]	@ (8001e98 <init_task+0x2cc>)
 8001ce4:	2401      	movs	r4, #1
 8001ce6:	9401      	str	r4, [sp, #4]
 8001ce8:	243f      	movs	r4, #63	@ 0x3f
 8001cea:	9400      	str	r4, [sp, #0]
 8001cec:	f7ff f824 	bl	8000d38 <st7565_drawline_complex>
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001cf0:	230b      	movs	r3, #11
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	197b      	adds	r3, r7, r5
 8001cfa:	197a      	adds	r2, r7, r5
 8001cfc:	8812      	ldrh	r2, [r2, #0]
 8001cfe:	188a      	adds	r2, r1, r2
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	2318      	movs	r3, #24
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b7e      	cmp	r3, #126	@ 0x7e
 8001d0a:	d9e2      	bls.n	8001cd2 <init_task+0x106>
      				  				  }
      				//Linie de la i,j la margine sus
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001d0c:	2316      	movs	r3, #22
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	e017      	b.n	8001d46 <init_task+0x17a>
      				  				  		st7565_drawline_complex(buffer,i,j,i2,0,1);
 8001d16:	231e      	movs	r3, #30
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	8819      	ldrh	r1, [r3, #0]
 8001d1c:	1dbb      	adds	r3, r7, #6
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	2516      	movs	r5, #22
 8001d22:	197b      	adds	r3, r7, r5
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	485c      	ldr	r0, [pc, #368]	@ (8001e98 <init_task+0x2cc>)
 8001d28:	2401      	movs	r4, #1
 8001d2a:	9401      	str	r4, [sp, #4]
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	9400      	str	r4, [sp, #0]
 8001d30:	f7ff f802 	bl	8000d38 <st7565_drawline_complex>
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001d34:	230b      	movs	r3, #11
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	197b      	adds	r3, r7, r5
 8001d3e:	197a      	adds	r2, r7, r5
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	188a      	adds	r2, r1, r2
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	2316      	movs	r3, #22
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001d4e:	d9e2      	bls.n	8001d16 <init_task+0x14a>
      				  				  }

      				//deseneaza frame
      				st7565_write_buffer(buffer);
 8001d50:	4b51      	ldr	r3, [pc, #324]	@ (8001e98 <init_task+0x2cc>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe fd1e 	bl	8000794 <st7565_write_buffer>
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001d58:	221e      	movs	r2, #30
 8001d5a:	18bb      	adds	r3, r7, r2
 8001d5c:	18ba      	adds	r2, r7, r2
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	3202      	adds	r2, #2
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	231e      	movs	r3, #30
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d6c:	d800      	bhi.n	8001d70 <init_task+0x1a4>
 8001d6e:	e74d      	b.n	8001c0c <init_task+0x40>
    				//HAL_Delay(50);

      				//osDelay(2);

      			  }
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001d70:	2314      	movs	r3, #20
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2240      	movs	r2, #64	@ 0x40
 8001d76:	801a      	strh	r2, [r3, #0]
 8001d78:	e0b8      	b.n	8001eec <init_task+0x320>
      				//spacing=11-(i-64)/10;
      				if(i%4==0)st7565_set_brightness((126-i)/4);
 8001d7a:	2114      	movs	r1, #20
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4013      	ands	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <init_task+0x1d4>
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	227e      	movs	r2, #126	@ 0x7e
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	d500      	bpl.n	8001d96 <init_task+0x1ca>
 8001d94:	3303      	adds	r3, #3
 8001d96:	109b      	asrs	r3, r3, #2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe fe24 	bl	80009e8 <st7565_set_brightness>
      			  				  uint16_t j=i/2;
 8001da0:	2308      	movs	r3, #8
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2214      	movs	r2, #20
 8001da6:	18ba      	adds	r2, r7, r2
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	801a      	strh	r2, [r3, #0]
      			  				  st7565_clear_buffer(buffer);
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <init_task+0x2cc>)
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7fe fe99 	bl	8000ae8 <st7565_clear_buffer>
      			  				//Linie de la i,j la marginea dreapta
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001db6:	2312      	movs	r3, #18
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e018      	b.n	8001df2 <init_task+0x226>
      			  				  					st7565_drawline_complex(buffer,i,j,126,j2,1);
 8001dc0:	2314      	movs	r3, #20
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	2512      	movs	r5, #18
 8001dce:	197b      	adds	r3, r7, r5
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	4831      	ldr	r0, [pc, #196]	@ (8001e98 <init_task+0x2cc>)
 8001dd4:	2401      	movs	r4, #1
 8001dd6:	9401      	str	r4, [sp, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	237e      	movs	r3, #126	@ 0x7e
 8001ddc:	f7fe ffac 	bl	8000d38 <st7565_drawline_complex>
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001de0:	230a      	movs	r3, #10
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b299      	uxth	r1, r3
 8001de8:	197b      	adds	r3, r7, r5
 8001dea:	197a      	adds	r2, r7, r5
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	188a      	adds	r2, r1, r2
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	2312      	movs	r3, #18
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dfa:	d9e1      	bls.n	8001dc0 <init_task+0x1f4>
      			  				  				  }
      			  				  				//Linie de la i,j la marginea stanga
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e018      	b.n	8001e38 <init_task+0x26c>
      			  				  				  					st7565_drawline_complex(buffer,i,j,0,j2,1);
 8001e06:	2314      	movs	r3, #20
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	8819      	ldrh	r1, [r3, #0]
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	881a      	ldrh	r2, [r3, #0]
 8001e12:	2510      	movs	r5, #16
 8001e14:	197b      	adds	r3, r7, r5
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	481f      	ldr	r0, [pc, #124]	@ (8001e98 <init_task+0x2cc>)
 8001e1a:	2401      	movs	r4, #1
 8001e1c:	9401      	str	r4, [sp, #4]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2300      	movs	r3, #0
 8001e22:	f7fe ff89 	bl	8000d38 <st7565_drawline_complex>
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001e26:	230a      	movs	r3, #10
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	197b      	adds	r3, r7, r5
 8001e30:	197a      	adds	r2, r7, r5
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	188a      	adds	r2, r1, r2
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	2310      	movs	r3, #16
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e40:	d9e1      	bls.n	8001e06 <init_task+0x23a>
      			  				  				  				  }

      			  				  				  //Linie de la i,j la margine jos
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001e42:	230e      	movs	r3, #14
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e018      	b.n	8001e7e <init_task+0x2b2>
      			  				  				  		st7565_drawline_complex(buffer,i,j,i2,63,1);
 8001e4c:	2314      	movs	r3, #20
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	8819      	ldrh	r1, [r3, #0]
 8001e52:	2308      	movs	r3, #8
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	250e      	movs	r5, #14
 8001e5a:	197b      	adds	r3, r7, r5
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	480e      	ldr	r0, [pc, #56]	@ (8001e98 <init_task+0x2cc>)
 8001e60:	2401      	movs	r4, #1
 8001e62:	9401      	str	r4, [sp, #4]
 8001e64:	243f      	movs	r4, #63	@ 0x3f
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	f7fe ff66 	bl	8000d38 <st7565_drawline_complex>
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001e6c:	230b      	movs	r3, #11
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b299      	uxth	r1, r3
 8001e74:	197b      	adds	r3, r7, r5
 8001e76:	197a      	adds	r2, r7, r5
 8001e78:	8812      	ldrh	r2, [r2, #0]
 8001e7a:	188a      	adds	r2, r1, r2
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	230e      	movs	r3, #14
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e86:	d9e1      	bls.n	8001e4c <init_task+0x280>
      			  				  				  }
      			  				  				//Linie de la i,j la margine sus
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001e88:	230c      	movs	r3, #12
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	e01d      	b.n	8001ece <init_task+0x302>
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	20000608 	.word	0x20000608
 8001e98:	2000000c 	.word	0x2000000c
      			  				  				  				  		st7565_drawline_complex(buffer,i,j,i2,0,1);
 8001e9c:	2314      	movs	r3, #20
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	8819      	ldrh	r1, [r3, #0]
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	250c      	movs	r5, #12
 8001eaa:	197b      	adds	r3, r7, r5
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	4816      	ldr	r0, [pc, #88]	@ (8001f08 <init_task+0x33c>)
 8001eb0:	2401      	movs	r4, #1
 8001eb2:	9401      	str	r4, [sp, #4]
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	f7fe ff3e 	bl	8000d38 <st7565_drawline_complex>
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001ebc:	230b      	movs	r3, #11
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	197b      	adds	r3, r7, r5
 8001ec6:	197a      	adds	r2, r7, r5
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	188a      	adds	r2, r1, r2
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	230c      	movs	r3, #12
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ed6:	d9e1      	bls.n	8001e9c <init_task+0x2d0>
      			  				  				  				  }

      			  				//deseneaza frame
      			  				st7565_write_buffer(buffer);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <init_task+0x33c>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe fc5a 	bl	8000794 <st7565_write_buffer>
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001ee0:	2214      	movs	r2, #20
 8001ee2:	18bb      	adds	r3, r7, r2
 8001ee4:	18ba      	adds	r2, r7, r2
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	3202      	adds	r2, #2
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	2314      	movs	r3, #20
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ef4:	d800      	bhi.n	8001ef8 <init_task+0x32c>
 8001ef6:	e740      	b.n	8001d7a <init_task+0x1ae>


      			  //HAL_ReadPin
      			  //Trimitem comanda sa desenam

      			st7565_set_brightness(0);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7fe fd75 	bl	80009e8 <st7565_set_brightness>
  }
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b008      	add	sp, #32
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <readAdcVoltFunction+0x68>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	629a      	str	r2, [r3, #40]	@ 0x28
	      HAL_ADC_Start(&hadc);
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <readAdcVoltFunction+0x68>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 ff56 	bl	8002dcc <HAL_ADC_Start>
	      if(HAL_ADC_PollForConversion(&hadc, 30)==HAL_OK)
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <readAdcVoltFunction+0x68>)
 8001f22:	211e      	movs	r1, #30
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 ffe5 	bl	8002ef4 <HAL_ADC_PollForConversion>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d108      	bne.n	8001f40 <readAdcVoltFunction+0x34>
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <readAdcVoltFunction+0x68>)
 8001f30:	0018      	movs	r0, r3
 8001f32:	f001 f877 	bl	8003024 <HAL_ADC_GetValue>
 8001f36:	0003      	movs	r3, r0
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <readAdcVoltFunction+0x6c>)
 8001f3c:	801a      	strh	r2, [r3, #0]
 8001f3e:	e002      	b.n	8001f46 <readAdcVoltFunction+0x3a>
	      else voltReadRaw=0;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <readAdcVoltFunction+0x6c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	801a      	strh	r2, [r3, #0]

	      HAL_ADC_Stop(&hadc);
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <readAdcVoltFunction+0x68>)
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 ff93 	bl	8002e74 <HAL_ADC_Stop>

	      voltRead = filterVolt(interpolation(voltReadRaw));
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <readAdcVoltFunction+0x6c>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fb0b 	bl	8001570 <interpolation>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fbd0 	bl	8001704 <filterVolt>
 8001f64:	0003      	movs	r3, r0
 8001f66:	001a      	movs	r2, r3
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <readAdcVoltFunction+0x70>)
 8001f6a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 5 */
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	200004dc 	.word	0x200004dc
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	20000480 	.word	0x20000480

08001f80 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b0b5      	sub	sp, #212	@ 0xd4
 8001f84:	af02      	add	r7, sp, #8
    enum { DRAWING, SENDING_PAGE, WAITING };
    static uint8_t state = DRAWING;
    static uint8_t current_page = 0;
    static uint32_t last_frame_time = 0;
    static uint8_t local_buffer[1024];
    uint32_t now = HAL_GetTick();
 8001f86:	f000 fdb3 	bl	8002af0 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	22bc      	movs	r2, #188	@ 0xbc
 8001f8e:	18ba      	adds	r2, r7, r2
 8001f90:	6013      	str	r3, [r2, #0]

    switch(state) {
 8001f92:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <displayVoltReadFunction+0x1d0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d100      	bne.n	8001f9c <displayVoltReadFunction+0x1c>
 8001f9a:	e365      	b.n	8002668 <displayVoltReadFunction+0x6e8>
 8001f9c:	dd00      	ble.n	8001fa0 <displayVoltReadFunction+0x20>
 8001f9e:	e372      	b.n	8002686 <displayVoltReadFunction+0x706>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <displayVoltReadFunction+0x2c>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d100      	bne.n	8001faa <displayVoltReadFunction+0x2a>
 8001fa8:	e30e      	b.n	80025c8 <displayVoltReadFunction+0x648>
            if (now - last_frame_time >= 42) {
                state = DRAWING;
            }
            break;
    }
}
 8001faa:	e36c      	b.n	8002686 <displayVoltReadFunction+0x706>
            st7565_clear_buffer(local_buffer);
 8001fac:	4b69      	ldr	r3, [pc, #420]	@ (8002154 <displayVoltReadFunction+0x1d4>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fd9a 	bl	8000ae8 <st7565_clear_buffer>
            if(displayMode==0){
 8001fb4:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <displayVoltReadFunction+0x1d8>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d159      	bne.n	8002070 <displayVoltReadFunction+0xf0>
                st7565_drawstring(local_buffer,0,0,"Volt:",fontMode);
 8001fbc:	4b67      	ldr	r3, [pc, #412]	@ (800215c <displayVoltReadFunction+0x1dc>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	@ (8002160 <displayVoltReadFunction+0x1e0>)
 8001fc2:	4864      	ldr	r0, [pc, #400]	@ (8002154 <displayVoltReadFunction+0x1d4>)
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f7fe fe06 	bl	8000bdc <st7565_drawstring>
                itoa(voltRead,volt,10);
 8001fd0:	4b64      	ldr	r3, [pc, #400]	@ (8002164 <displayVoltReadFunction+0x1e4>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	220a      	movs	r2, #10
 8001fda:	0019      	movs	r1, r3
 8001fdc:	f003 feee 	bl	8005dbc <itoa>
                if(voltRead<10){
 8001fe0:	4b60      	ldr	r3, [pc, #384]	@ (8002164 <displayVoltReadFunction+0x1e4>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d810      	bhi.n	800200a <displayVoltReadFunction+0x8a>
                    volt[4]='\0';
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[0];
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	70da      	strb	r2, [r3, #3]
                    volt[2]='0';
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	2230      	movs	r2, #48	@ 0x30
 8001ffa:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	222e      	movs	r2, #46	@ 0x2e
 8002000:	705a      	strb	r2, [r3, #1]
                    volt[0]='0';
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2230      	movs	r2, #48	@ 0x30
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e027      	b.n	800205a <displayVoltReadFunction+0xda>
                else if(voltRead>=10&&voltRead<100){
 800200a:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <displayVoltReadFunction+0x1e4>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	2b09      	cmp	r3, #9
 8002010:	d915      	bls.n	800203e <displayVoltReadFunction+0xbe>
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <displayVoltReadFunction+0x1e4>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	2b63      	cmp	r3, #99	@ 0x63
 8002018:	d811      	bhi.n	800203e <displayVoltReadFunction+0xbe>
                    volt[4]='\0';
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[1];
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	785a      	ldrb	r2, [r3, #1]
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	70da      	strb	r2, [r3, #3]
                    volt[2]=volt[0];
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	222e      	movs	r2, #46	@ 0x2e
 8002034:	705a      	strb	r2, [r3, #1]
                    volt[0]='0';
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2230      	movs	r2, #48	@ 0x30
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e00d      	b.n	800205a <displayVoltReadFunction+0xda>
                    volt[4]='\0';
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[2];
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	789a      	ldrb	r2, [r3, #2]
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	70da      	strb	r2, [r3, #3]
                    volt[2]=volt[1];
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	785a      	ldrb	r2, [r3, #1]
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	222e      	movs	r2, #46	@ 0x2e
 8002058:	705a      	strb	r2, [r3, #1]
                st7565_drawstring(local_buffer,0,1,volt,fontMode);
 800205a:	4b40      	ldr	r3, [pc, #256]	@ (800215c <displayVoltReadFunction+0x1dc>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	1d3a      	adds	r2, r7, #4
 8002060:	483c      	ldr	r0, [pc, #240]	@ (8002154 <displayVoltReadFunction+0x1d4>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	0013      	movs	r3, r2
 8002066:	2201      	movs	r2, #1
 8002068:	2100      	movs	r1, #0
 800206a:	f7fe fdb7 	bl	8000bdc <st7565_drawstring>
 800206e:	e1bd      	b.n	80023ec <displayVoltReadFunction+0x46c>
            } else if(displayMode==1){
 8002070:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <displayVoltReadFunction+0x1d8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d000      	beq.n	800207a <displayVoltReadFunction+0xfa>
 8002078:	e1aa      	b.n	80023d0 <displayVoltReadFunction+0x450>
                st7565_drawstring(local_buffer,30,2,"Volt Range",fontMode);
 800207a:	4b38      	ldr	r3, [pc, #224]	@ (800215c <displayVoltReadFunction+0x1dc>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4a3a      	ldr	r2, [pc, #232]	@ (8002168 <displayVoltReadFunction+0x1e8>)
 8002080:	4834      	ldr	r0, [pc, #208]	@ (8002154 <displayVoltReadFunction+0x1d4>)
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	0013      	movs	r3, r2
 8002086:	2202      	movs	r2, #2
 8002088:	211e      	movs	r1, #30
 800208a:	f7fe fda7 	bl	8000bdc <st7565_drawstring>
                int bar_x0 = 5;
 800208e:	2305      	movs	r3, #5
 8002090:	22b8      	movs	r2, #184	@ 0xb8
 8002092:	18b9      	adds	r1, r7, r2
 8002094:	600b      	str	r3, [r1, #0]
                int bar_x1 = 121;
 8002096:	2379      	movs	r3, #121	@ 0x79
 8002098:	20b4      	movs	r0, #180	@ 0xb4
 800209a:	1839      	adds	r1, r7, r0
 800209c:	600b      	str	r3, [r1, #0]
                int bar_y0 = 30;
 800209e:	231e      	movs	r3, #30
 80020a0:	24b0      	movs	r4, #176	@ 0xb0
 80020a2:	1939      	adds	r1, r7, r4
 80020a4:	600b      	str	r3, [r1, #0]
                int bar_y1 = 37;
 80020a6:	2325      	movs	r3, #37	@ 0x25
 80020a8:	26ac      	movs	r6, #172	@ 0xac
 80020aa:	19b9      	adds	r1, r7, r6
 80020ac:	600b      	str	r3, [r1, #0]
                int squares = 10;
 80020ae:	230a      	movs	r3, #10
 80020b0:	21a8      	movs	r1, #168	@ 0xa8
 80020b2:	187d      	adds	r5, r7, r1
 80020b4:	602b      	str	r3, [r5, #0]
                int inner_x0 = bar_x0 + 1;
 80020b6:	18bb      	adds	r3, r7, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	25a4      	movs	r5, #164	@ 0xa4
 80020be:	197a      	adds	r2, r7, r5
 80020c0:	6013      	str	r3, [r2, #0]
                int inner_x1 = bar_x1 - 1;
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	22a0      	movs	r2, #160	@ 0xa0
 80020ca:	18b8      	adds	r0, r7, r2
 80020cc:	6003      	str	r3, [r0, #0]
                int inner_y0 = bar_y0 + 1;
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	209c      	movs	r0, #156	@ 0x9c
 80020d6:	1838      	adds	r0, r7, r0
 80020d8:	6003      	str	r3, [r0, #0]
                int inner_y1 = bar_y1 - 1;
 80020da:	19bb      	adds	r3, r7, r6
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	2098      	movs	r0, #152	@ 0x98
 80020e2:	1838      	adds	r0, r7, r0
 80020e4:	6003      	str	r3, [r0, #0]
                int inner_width = inner_x1 - inner_x0 + 1;
 80020e6:	18bb      	adds	r3, r7, r2
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	197b      	adds	r3, r7, r5
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	2694      	movs	r6, #148	@ 0x94
 80020f4:	19ba      	adds	r2, r7, r6
 80020f6:	6013      	str	r3, [r2, #0]
                int square_width = inner_width / squares;
 80020f8:	000c      	movs	r4, r1
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	19bb      	adds	r3, r7, r6
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	f7fe f88b 	bl	800021c <__divsi3>
 8002106:	0003      	movs	r3, r0
 8002108:	2290      	movs	r2, #144	@ 0x90
 800210a:	18b9      	adds	r1, r7, r2
 800210c:	600b      	str	r3, [r1, #0]
                int remainder = inner_width - square_width * squares;
 800210e:	18bb      	adds	r3, r7, r2
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0021      	movs	r1, r4
 8002114:	187a      	adds	r2, r7, r1
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4353      	muls	r3, r2
 800211a:	19ba      	adds	r2, r7, r6
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	228c      	movs	r2, #140	@ 0x8c
 8002122:	18ba      	adds	r2, r7, r2
 8002124:	6013      	str	r3, [r2, #0]
                int volt_step = 330 / squares;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	23a5      	movs	r3, #165	@ 0xa5
 800212c:	0058      	lsls	r0, r3, #1
 800212e:	f7fe f875 	bl	800021c <__divsi3>
 8002132:	0003      	movs	r3, r0
 8002134:	2288      	movs	r2, #136	@ 0x88
 8002136:	18ba      	adds	r2, r7, r2
 8002138:	6013      	str	r3, [r2, #0]
                int x = inner_x0;
 800213a:	197b      	adds	r3, r7, r5
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	22c4      	movs	r2, #196	@ 0xc4
 8002140:	18ba      	adds	r2, r7, r2
 8002142:	6013      	str	r3, [r2, #0]
                for(int i = 0; i < squares; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	22c0      	movs	r2, #192	@ 0xc0
 8002148:	18ba      	adds	r2, r7, r2
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e062      	b.n	8002214 <displayVoltReadFunction+0x294>
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	20000609 	.word	0x20000609
 8002154:	2000060c 	.word	0x2000060c
 8002158:	20000008 	.word	0x20000008
 800215c:	20000488 	.word	0x20000488
 8002160:	08005f3c 	.word	0x08005f3c
 8002164:	20000480 	.word	0x20000480
 8002168:	08005f44 	.word	0x08005f44
                    int w = square_width + (i < remainder ? 1 : 0);
 800216c:	2301      	movs	r3, #1
 800216e:	1c19      	adds	r1, r3, #0
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	238c      	movs	r3, #140	@ 0x8c
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	db01      	blt.n	8002184 <displayVoltReadFunction+0x204>
 8002180:	2300      	movs	r3, #0
 8002182:	1c19      	adds	r1, r3, #0
 8002184:	b2cb      	uxtb	r3, r1
 8002186:	001a      	movs	r2, r3
 8002188:	2390      	movs	r3, #144	@ 0x90
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	189b      	adds	r3, r3, r2
 8002190:	2084      	movs	r0, #132	@ 0x84
 8002192:	183a      	adds	r2, r7, r0
 8002194:	6013      	str	r3, [r2, #0]
                    int threshold = (i + 1) * volt_step;
 8002196:	23c0      	movs	r3, #192	@ 0xc0
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	2388      	movs	r3, #136	@ 0x88
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4353      	muls	r3, r2
 80021a6:	2180      	movs	r1, #128	@ 0x80
 80021a8:	187a      	adds	r2, r7, r1
 80021aa:	6013      	str	r3, [r2, #0]
                    if(voltRead >= threshold) {
 80021ac:	4bf6      	ldr	r3, [pc, #984]	@ (8002588 <displayVoltReadFunction+0x608>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	dc1d      	bgt.n	80021f6 <displayVoltReadFunction+0x276>
                        st7565_fillrect(local_buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 80021ba:	23c4      	movs	r3, #196	@ 0xc4
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b2d9      	uxtb	r1, r3
 80021c2:	269c      	movs	r6, #156	@ 0x9c
 80021c4:	19bb      	adds	r3, r7, r6
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b2dc      	uxtb	r4, r3
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b2dd      	uxtb	r5, r3
 80021d0:	2398      	movs	r3, #152	@ 0x98
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	19bb      	adds	r3, r7, r6
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	48e9      	ldr	r0, [pc, #932]	@ (800258c <displayVoltReadFunction+0x60c>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	9201      	str	r2, [sp, #4]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	002b      	movs	r3, r5
 80021f0:	0022      	movs	r2, r4
 80021f2:	f7fe feac 	bl	8000f4e <st7565_fillrect>
                    x += w;
 80021f6:	21c4      	movs	r1, #196	@ 0xc4
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2384      	movs	r3, #132	@ 0x84
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	187a      	adds	r2, r7, r1
 8002206:	6013      	str	r3, [r2, #0]
                for(int i = 0; i < squares; i++) {
 8002208:	22c0      	movs	r2, #192	@ 0xc0
 800220a:	18bb      	adds	r3, r7, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	18ba      	adds	r2, r7, r2
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	23c0      	movs	r3, #192	@ 0xc0
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	23a8      	movs	r3, #168	@ 0xa8
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	dba3      	blt.n	800216c <displayVoltReadFunction+0x1ec>
                st7565_drawline(local_buffer, bar_x0+1, bar_y0, bar_x1-1, bar_y0, 1);
 8002224:	26b8      	movs	r6, #184	@ 0xb8
 8002226:	19bb      	adds	r3, r7, r6
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2d9      	uxtb	r1, r3
 8002230:	20b0      	movs	r0, #176	@ 0xb0
 8002232:	183b      	adds	r3, r7, r0
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	25b4      	movs	r5, #180	@ 0xb4
 800223a:	197b      	adds	r3, r7, r5
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b2dc      	uxtb	r4, r3
 8002244:	183b      	adds	r3, r7, r0
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	48d0      	ldr	r0, [pc, #832]	@ (800258c <displayVoltReadFunction+0x60c>)
 800224c:	2501      	movs	r5, #1
 800224e:	9501      	str	r5, [sp, #4]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	0023      	movs	r3, r4
 8002254:	f7fe ff78 	bl	8001148 <st7565_drawline>
                st7565_drawline(local_buffer, bar_x0+1, bar_y1, bar_x1-1, bar_y1, 1);
 8002258:	19bb      	adds	r3, r7, r6
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3301      	adds	r3, #1
 8002260:	b2d9      	uxtb	r1, r3
 8002262:	23ac      	movs	r3, #172	@ 0xac
 8002264:	0018      	movs	r0, r3
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	25b4      	movs	r5, #180	@ 0xb4
 800226e:	197b      	adds	r3, r7, r5
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b2dc      	uxtb	r4, r3
 8002278:	0003      	movs	r3, r0
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	48c2      	ldr	r0, [pc, #776]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002282:	2501      	movs	r5, #1
 8002284:	9501      	str	r5, [sp, #4]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	0023      	movs	r3, r4
 800228a:	f7fe ff5d 	bl	8001148 <st7565_drawline>
                st7565_drawline(local_buffer, bar_x0, bar_y0+1, bar_x0, bar_y1-1, 1);
 800228e:	19ba      	adds	r2, r7, r6
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	b2d9      	uxtb	r1, r3
 8002294:	20b0      	movs	r0, #176	@ 0xb0
 8002296:	183a      	adds	r2, r7, r0
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	19bc      	adds	r4, r7, r6
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	b2dc      	uxtb	r4, r3
 80022a6:	23ac      	movs	r3, #172	@ 0xac
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	48b6      	ldr	r0, [pc, #728]	@ (800258c <displayVoltReadFunction+0x60c>)
 80022b4:	2501      	movs	r5, #1
 80022b6:	9501      	str	r5, [sp, #4]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	0023      	movs	r3, r4
 80022bc:	f7fe ff44 	bl	8001148 <st7565_drawline>
                st7565_drawline(local_buffer, bar_x1, bar_y0+1, bar_x1, bar_y1-1, 1);
 80022c0:	25b4      	movs	r5, #180	@ 0xb4
 80022c2:	197a      	adds	r2, r7, r5
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	b2d9      	uxtb	r1, r3
 80022c8:	20b0      	movs	r0, #176	@ 0xb0
 80022ca:	183a      	adds	r2, r7, r0
 80022cc:	6813      	ldr	r3, [r2, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	1978      	adds	r0, r7, r5
 80022d6:	6803      	ldr	r3, [r0, #0]
 80022d8:	b2dc      	uxtb	r4, r3
 80022da:	23ac      	movs	r3, #172	@ 0xac
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	48a9      	ldr	r0, [pc, #676]	@ (800258c <displayVoltReadFunction+0x60c>)
 80022e8:	2501      	movs	r5, #1
 80022ea:	9501      	str	r5, [sp, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0023      	movs	r3, r4
 80022f0:	f7fe ff2a 	bl	8001148 <st7565_drawline>
                st7565_setpixel(local_buffer, bar_x0 +1, bar_y0+1, 1);
 80022f4:	19ba      	adds	r2, r7, r6
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	24b0      	movs	r4, #176	@ 0xb0
 8002300:	193a      	adds	r2, r7, r4
 8002302:	6813      	ldr	r3, [r2, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	48a0      	ldr	r0, [pc, #640]	@ (800258c <displayVoltReadFunction+0x60c>)
 800230c:	2301      	movs	r3, #1
 800230e:	f7fe fbfa 	bl	8000b06 <st7565_setpixel>
                st7565_setpixel(local_buffer, bar_x0 +1, bar_y1-1, 1);
 8002312:	19ba      	adds	r2, r7, r6
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	26ac      	movs	r6, #172	@ 0xac
 800231e:	19bb      	adds	r3, r7, r6
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4898      	ldr	r0, [pc, #608]	@ (800258c <displayVoltReadFunction+0x60c>)
 800232a:	2301      	movs	r3, #1
 800232c:	f7fe fbeb 	bl	8000b06 <st7565_setpixel>
                st7565_setpixel(local_buffer, bar_x1 -1, bar_y0+1, 1);
 8002330:	25b4      	movs	r5, #180	@ 0xb4
 8002332:	197b      	adds	r3, r7, r5
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b2d9      	uxtb	r1, r3
 800233c:	193b      	adds	r3, r7, r4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4891      	ldr	r0, [pc, #580]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002348:	2301      	movs	r3, #1
 800234a:	f7fe fbdc 	bl	8000b06 <st7565_setpixel>
                st7565_setpixel(local_buffer, bar_x1 -1, bar_y1-1, 1);
 800234e:	197b      	adds	r3, r7, r5
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b2d9      	uxtb	r1, r3
 8002358:	19bb      	adds	r3, r7, r6
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	488a      	ldr	r0, [pc, #552]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002364:	2301      	movs	r3, #1
 8002366:	f7fe fbce 	bl	8000b06 <st7565_setpixel>
                st7565_drawstring(local_buffer, 0, 5, "0",fontMode);
 800236a:	4b89      	ldr	r3, [pc, #548]	@ (8002590 <displayVoltReadFunction+0x610>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4a89      	ldr	r2, [pc, #548]	@ (8002594 <displayVoltReadFunction+0x614>)
 8002370:	4886      	ldr	r0, [pc, #536]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	0013      	movs	r3, r2
 8002376:	2205      	movs	r2, #5
 8002378:	2100      	movs	r1, #0
 800237a:	f7fe fc2f 	bl	8000bdc <st7565_drawstring>
                st7565_drawstring(local_buffer, 20, 5, "0.8",fontMode);
 800237e:	4b84      	ldr	r3, [pc, #528]	@ (8002590 <displayVoltReadFunction+0x610>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4a85      	ldr	r2, [pc, #532]	@ (8002598 <displayVoltReadFunction+0x618>)
 8002384:	4881      	ldr	r0, [pc, #516]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0013      	movs	r3, r2
 800238a:	2205      	movs	r2, #5
 800238c:	2114      	movs	r1, #20
 800238e:	f7fe fc25 	bl	8000bdc <st7565_drawstring>
                st7565_drawstring(local_buffer, 45, 5, "1.6",fontMode);
 8002392:	4b7f      	ldr	r3, [pc, #508]	@ (8002590 <displayVoltReadFunction+0x610>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4a81      	ldr	r2, [pc, #516]	@ (800259c <displayVoltReadFunction+0x61c>)
 8002398:	487c      	ldr	r0, [pc, #496]	@ (800258c <displayVoltReadFunction+0x60c>)
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	0013      	movs	r3, r2
 800239e:	2205      	movs	r2, #5
 80023a0:	212d      	movs	r1, #45	@ 0x2d
 80023a2:	f7fe fc1b 	bl	8000bdc <st7565_drawstring>
                st7565_drawstring(local_buffer, 75, 5, "2.5",fontMode);
 80023a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002590 <displayVoltReadFunction+0x610>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4a7d      	ldr	r2, [pc, #500]	@ (80025a0 <displayVoltReadFunction+0x620>)
 80023ac:	4877      	ldr	r0, [pc, #476]	@ (800258c <displayVoltReadFunction+0x60c>)
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	0013      	movs	r3, r2
 80023b2:	2205      	movs	r2, #5
 80023b4:	214b      	movs	r1, #75	@ 0x4b
 80023b6:	f7fe fc11 	bl	8000bdc <st7565_drawstring>
                st7565_drawstring(local_buffer, 108, 5, "3.3",fontMode);
 80023ba:	4b75      	ldr	r3, [pc, #468]	@ (8002590 <displayVoltReadFunction+0x610>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4a79      	ldr	r2, [pc, #484]	@ (80025a4 <displayVoltReadFunction+0x624>)
 80023c0:	4872      	ldr	r0, [pc, #456]	@ (800258c <displayVoltReadFunction+0x60c>)
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	0013      	movs	r3, r2
 80023c6:	2205      	movs	r2, #5
 80023c8:	216c      	movs	r1, #108	@ 0x6c
 80023ca:	f7fe fc07 	bl	8000bdc <st7565_drawstring>
 80023ce:	e00d      	b.n	80023ec <displayVoltReadFunction+0x46c>
            } else if(displayMode==100){
 80023d0:	4b75      	ldr	r3, [pc, #468]	@ (80025a8 <displayVoltReadFunction+0x628>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d109      	bne.n	80023ec <displayVoltReadFunction+0x46c>
                st7565_drawstring(local_buffer, 0, 0, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F",fontMode);
 80023d8:	4b6d      	ldr	r3, [pc, #436]	@ (8002590 <displayVoltReadFunction+0x610>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4a73      	ldr	r2, [pc, #460]	@ (80025ac <displayVoltReadFunction+0x62c>)
 80023de:	486b      	ldr	r0, [pc, #428]	@ (800258c <displayVoltReadFunction+0x60c>)
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	0013      	movs	r3, r2
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	f7fe fbf8 	bl	8000bdc <st7565_drawstring>
            if(showDisplayModeOverlay) {
 80023ec:	4b70      	ldr	r3, [pc, #448]	@ (80025b0 <displayVoltReadFunction+0x630>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <displayVoltReadFunction+0x476>
 80023f4:	e0c1      	b.n	800257a <displayVoltReadFunction+0x5fa>
                if((now - displayModeChangeTime) < 1250) {
 80023f6:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <displayVoltReadFunction+0x634>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	22bc      	movs	r2, #188	@ 0xbc
 80023fc:	18ba      	adds	r2, r7, r2
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a6d      	ldr	r2, [pc, #436]	@ (80025b8 <displayVoltReadFunction+0x638>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d900      	bls.n	800240a <displayVoltReadFunction+0x48a>
 8002408:	e0b4      	b.n	8002574 <displayVoltReadFunction+0x5f4>
                    uint8_t rect_x = 80;
 800240a:	217f      	movs	r1, #127	@ 0x7f
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2250      	movs	r2, #80	@ 0x50
 8002410:	701a      	strb	r2, [r3, #0]
                    uint8_t rect_y = 45;
 8002412:	267e      	movs	r6, #126	@ 0x7e
 8002414:	19bb      	adds	r3, r7, r6
 8002416:	222d      	movs	r2, #45	@ 0x2d
 8002418:	701a      	strb	r2, [r3, #0]
                    uint8_t rect_w = 47;
 800241a:	247d      	movs	r4, #125	@ 0x7d
 800241c:	193b      	adds	r3, r7, r4
 800241e:	222f      	movs	r2, #47	@ 0x2f
 8002420:	701a      	strb	r2, [r3, #0]
                    uint8_t rect_h = 18;
 8002422:	237c      	movs	r3, #124	@ 0x7c
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2212      	movs	r2, #18
 8002428:	701a      	strb	r2, [r3, #0]
                    st7565_fillrect(local_buffer, rect_x, rect_y, rect_w, rect_h, 0);
 800242a:	193b      	adds	r3, r7, r4
 800242c:	781c      	ldrb	r4, [r3, #0]
 800242e:	19bb      	adds	r3, r7, r6
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	000d      	movs	r5, r1
 8002434:	197b      	adds	r3, r7, r5
 8002436:	7819      	ldrb	r1, [r3, #0]
 8002438:	4854      	ldr	r0, [pc, #336]	@ (800258c <displayVoltReadFunction+0x60c>)
 800243a:	2300      	movs	r3, #0
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	237c      	movs	r3, #124	@ 0x7c
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	0023      	movs	r3, r4
 8002448:	f7fe fd81 	bl	8000f4e <st7565_fillrect>
                    st7565_drawline(local_buffer, rect_x, rect_y, rect_x + rect_w, rect_y, 1);
 800244c:	197a      	adds	r2, r7, r5
 800244e:	247d      	movs	r4, #125	@ 0x7d
 8002450:	193b      	adds	r3, r7, r4
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	b2dc      	uxtb	r4, r3
 800245a:	19bb      	adds	r3, r7, r6
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	197b      	adds	r3, r7, r5
 8002460:	7819      	ldrb	r1, [r3, #0]
 8002462:	484a      	ldr	r0, [pc, #296]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002464:	2301      	movs	r3, #1
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	19bb      	adds	r3, r7, r6
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	0023      	movs	r3, r4
 8002470:	f7fe fe6a 	bl	8001148 <st7565_drawline>
                    st7565_drawline(local_buffer, rect_x, rect_y, rect_x, rect_y + rect_h, 1);
 8002474:	0031      	movs	r1, r6
 8002476:	19ba      	adds	r2, r7, r6
 8002478:	237c      	movs	r3, #124	@ 0x7c
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	002e      	movs	r6, r5
 8002486:	19ba      	adds	r2, r7, r6
 8002488:	7815      	ldrb	r5, [r2, #0]
 800248a:	187a      	adds	r2, r7, r1
 800248c:	7814      	ldrb	r4, [r2, #0]
 800248e:	19ba      	adds	r2, r7, r6
 8002490:	7811      	ldrb	r1, [r2, #0]
 8002492:	483e      	ldr	r0, [pc, #248]	@ (800258c <displayVoltReadFunction+0x60c>)
 8002494:	2201      	movs	r2, #1
 8002496:	9201      	str	r2, [sp, #4]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	002b      	movs	r3, r5
 800249c:	0022      	movs	r2, r4
 800249e:	f7fe fe53 	bl	8001148 <st7565_drawline>
                    st7565_drawline(local_buffer, rect_x + rect_w, rect_y, rect_x + rect_w, rect_y + rect_h, 1);
 80024a2:	19ba      	adds	r2, r7, r6
 80024a4:	247d      	movs	r4, #125	@ 0x7d
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	18d3      	adds	r3, r2, r3
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	19ba      	adds	r2, r7, r6
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	b2dc      	uxtb	r4, r3
 80024bc:	207e      	movs	r0, #126	@ 0x7e
 80024be:	183a      	adds	r2, r7, r0
 80024c0:	257c      	movs	r5, #124	@ 0x7c
 80024c2:	197b      	adds	r3, r7, r5
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	18d3      	adds	r3, r2, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	183a      	adds	r2, r7, r0
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	482e      	ldr	r0, [pc, #184]	@ (800258c <displayVoltReadFunction+0x60c>)
 80024d2:	2501      	movs	r5, #1
 80024d4:	9501      	str	r5, [sp, #4]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0023      	movs	r3, r4
 80024da:	f7fe fe35 	bl	8001148 <st7565_drawline>
                    st7565_drawline(local_buffer, rect_x, rect_y + rect_h, rect_x + rect_w, rect_y + rect_h, 1);
 80024de:	217e      	movs	r1, #126	@ 0x7e
 80024e0:	187a      	adds	r2, r7, r1
 80024e2:	207c      	movs	r0, #124	@ 0x7c
 80024e4:	183b      	adds	r3, r7, r0
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	b2dc      	uxtb	r4, r3
 80024ee:	19ba      	adds	r2, r7, r6
 80024f0:	237d      	movs	r3, #125	@ 0x7d
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	b2dd      	uxtb	r5, r3
 80024fc:	187a      	adds	r2, r7, r1
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	18d3      	adds	r3, r2, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	19ba      	adds	r2, r7, r6
 800250a:	7811      	ldrb	r1, [r2, #0]
 800250c:	481f      	ldr	r0, [pc, #124]	@ (800258c <displayVoltReadFunction+0x60c>)
 800250e:	2201      	movs	r2, #1
 8002510:	9201      	str	r2, [sp, #4]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	002b      	movs	r3, r5
 8002516:	0022      	movs	r2, r4
 8002518:	f7fe fe16 	bl	8001148 <st7565_drawline>
                    uint8_t overlay_text[20]="Mode  ";
 800251c:	2468      	movs	r4, #104	@ 0x68
 800251e:	1939      	adds	r1, r7, r4
 8002520:	4a26      	ldr	r2, [pc, #152]	@ (80025bc <displayVoltReadFunction+0x63c>)
 8002522:	000b      	movs	r3, r1
 8002524:	6810      	ldr	r0, [r2, #0]
 8002526:	6018      	str	r0, [r3, #0]
 8002528:	8890      	ldrh	r0, [r2, #4]
 800252a:	8098      	strh	r0, [r3, #4]
 800252c:	7992      	ldrb	r2, [r2, #6]
 800252e:	719a      	strb	r2, [r3, #6]
 8002530:	2307      	movs	r3, #7
 8002532:	18cb      	adds	r3, r1, r3
 8002534:	220d      	movs	r2, #13
 8002536:	2100      	movs	r1, #0
 8002538:	0018      	movs	r0, r3
 800253a:	f003 fc77 	bl	8005e2c <memset>
                    overlay_text[5]=displayMode+'0';
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <displayVoltReadFunction+0x628>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3330      	adds	r3, #48	@ 0x30
 8002544:	b2da      	uxtb	r2, r3
 8002546:	0020      	movs	r0, r4
 8002548:	183b      	adds	r3, r7, r0
 800254a:	715a      	strb	r2, [r3, #5]
                    st7565_drawstring(local_buffer, rect_x + 2, rect_y/8 + 1, overlay_text, fontMode);
 800254c:	19bb      	adds	r3, r7, r6
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	3302      	adds	r3, #2
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	237e      	movs	r3, #126	@ 0x7e
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <displayVoltReadFunction+0x610>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	183c      	adds	r4, r7, r0
 8002568:	4808      	ldr	r0, [pc, #32]	@ (800258c <displayVoltReadFunction+0x60c>)
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	0023      	movs	r3, r4
 800256e:	f7fe fb35 	bl	8000bdc <st7565_drawstring>
 8002572:	e002      	b.n	800257a <displayVoltReadFunction+0x5fa>
                    showDisplayModeOverlay = 0;
 8002574:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <displayVoltReadFunction+0x630>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
            state = SENDING_PAGE;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <displayVoltReadFunction+0x640>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
            current_page = 0;
 8002580:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <displayVoltReadFunction+0x644>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
            break;
 8002586:	e07e      	b.n	8002686 <displayVoltReadFunction+0x706>
 8002588:	20000480 	.word	0x20000480
 800258c:	2000060c 	.word	0x2000060c
 8002590:	20000488 	.word	0x20000488
 8002594:	08005f50 	.word	0x08005f50
 8002598:	08005f54 	.word	0x08005f54
 800259c:	08005f58 	.word	0x08005f58
 80025a0:	08005f5c 	.word	0x08005f5c
 80025a4:	08005f60 	.word	0x08005f60
 80025a8:	20000008 	.word	0x20000008
 80025ac:	08005f64 	.word	0x08005f64
 80025b0:	20000498 	.word	0x20000498
 80025b4:	20000494 	.word	0x20000494
 80025b8:	000004e1 	.word	0x000004e1
 80025bc:	08005fc8 	.word	0x08005fc8
 80025c0:	20000609 	.word	0x20000609
 80025c4:	20000a0c 	.word	0x20000a0c
            CMD(ST7565_CMD_SET_PAGE | pagemap[current_page]);
 80025c8:	4b31      	ldr	r3, [pc, #196]	@ (8002690 <displayVoltReadFunction+0x710>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	2180      	movs	r1, #128	@ 0x80
 80025ce:	0018      	movs	r0, r3
 80025d0:	f001 f9aa 	bl	8003928 <HAL_GPIO_WritePin>
 80025d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <displayVoltReadFunction+0x714>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	001a      	movs	r2, r3
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <displayVoltReadFunction+0x718>)
 80025dc:	5c9b      	ldrb	r3, [r3, r2]
 80025de:	2250      	movs	r2, #80	@ 0x50
 80025e0:	4252      	negs	r2, r2
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fe f930 	bl	800084c <st7565_sendbyte>
            CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <displayVoltReadFunction+0x710>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 f998 	bl	8003928 <HAL_GPIO_WritePin>
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f927 	bl	800084c <st7565_sendbyte>
            CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <displayVoltReadFunction+0x710>)
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	0018      	movs	r0, r3
 8002606:	f001 f98f 	bl	8003928 <HAL_GPIO_WritePin>
 800260a:	2010      	movs	r0, #16
 800260c:	f7fe f91e 	bl	800084c <st7565_sendbyte>
            CMD(ST7565_CMD_RMW);
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <displayVoltReadFunction+0x710>)
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	0018      	movs	r0, r3
 8002618:	f001 f986 	bl	8003928 <HAL_GPIO_WritePin>
 800261c:	20e0      	movs	r0, #224	@ 0xe0
 800261e:	f7fe f915 	bl	800084c <st7565_sendbyte>
            HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <displayVoltReadFunction+0x710>)
 8002624:	2201      	movs	r2, #1
 8002626:	2180      	movs	r1, #128	@ 0x80
 8002628:	0018      	movs	r0, r3
 800262a:	f001 f97d 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_SPI_Transmit(&hspi1, &local_buffer[128 * current_page], 128, 6);
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <displayVoltReadFunction+0x714>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	01da      	lsls	r2, r3, #7
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <displayVoltReadFunction+0x71c>)
 8002636:	18d1      	adds	r1, r2, r3
 8002638:	4819      	ldr	r0, [pc, #100]	@ (80026a0 <displayVoltReadFunction+0x720>)
 800263a:	2306      	movs	r3, #6
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	f002 f865 	bl	800470c <HAL_SPI_Transmit>
            current_page++;
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <displayVoltReadFunction+0x714>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <displayVoltReadFunction+0x714>)
 800264c:	701a      	strb	r2, [r3, #0]
            if (current_page >= 8) {
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <displayVoltReadFunction+0x714>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b07      	cmp	r3, #7
 8002654:	d914      	bls.n	8002680 <displayVoltReadFunction+0x700>
                state = WAITING;
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <displayVoltReadFunction+0x724>)
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
                last_frame_time = now;
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <displayVoltReadFunction+0x728>)
 800265e:	22bc      	movs	r2, #188	@ 0xbc
 8002660:	18ba      	adds	r2, r7, r2
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	601a      	str	r2, [r3, #0]
            break;
 8002666:	e00b      	b.n	8002680 <displayVoltReadFunction+0x700>
            if (now - last_frame_time >= 42) {
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <displayVoltReadFunction+0x728>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	22bc      	movs	r2, #188	@ 0xbc
 800266e:	18ba      	adds	r2, r7, r2
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b29      	cmp	r3, #41	@ 0x29
 8002676:	d905      	bls.n	8002684 <displayVoltReadFunction+0x704>
                state = DRAWING;
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <displayVoltReadFunction+0x724>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
            break;
 800267e:	e001      	b.n	8002684 <displayVoltReadFunction+0x704>
            break;
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	e000      	b.n	8002686 <displayVoltReadFunction+0x706>
            break;
 8002684:	46c0      	nop			@ (mov r8, r8)
}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b033      	add	sp, #204	@ 0xcc
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	48000800 	.word	0x48000800
 8002694:	20000a0c 	.word	0x20000a0c
 8002698:	2000040c 	.word	0x2000040c
 800269c:	2000060c 	.word	0x2000060c
 80026a0:	2000051c 	.word	0x2000051c
 80026a4:	20000609 	.word	0x20000609
 80026a8:	20000a10 	.word	0x20000a10

080026ac <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */

    hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 80026b2:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <readButtonFunction+0x228>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_ADC_Start(&hadc) == HAL_OK) {
 80026ba:	4b86      	ldr	r3, [pc, #536]	@ (80028d4 <readButtonFunction+0x228>)
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fb85 	bl	8002dcc <HAL_ADC_Start>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d113      	bne.n	80026ee <readButtonFunction+0x42>
      if (HAL_ADC_PollForConversion(&hadc, 4) == HAL_OK) {
 80026c6:	4b83      	ldr	r3, [pc, #524]	@ (80028d4 <readButtonFunction+0x228>)
 80026c8:	2104      	movs	r1, #4
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fc12 	bl	8002ef4 <HAL_ADC_PollForConversion>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d108      	bne.n	80026e6 <readButtonFunction+0x3a>
        buttonReadRaw = HAL_ADC_GetValue(&hadc);
 80026d4:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <readButtonFunction+0x228>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fca4 	bl	8003024 <HAL_ADC_GetValue>
 80026dc:	0003      	movs	r3, r0
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <readButtonFunction+0x22c>)
 80026e2:	801a      	strh	r2, [r3, #0]
 80026e4:	e006      	b.n	80026f4 <readButtonFunction+0x48>
      } else {
        buttonReadRaw = 666;
 80026e6:	4b7c      	ldr	r3, [pc, #496]	@ (80028d8 <readButtonFunction+0x22c>)
 80026e8:	4a7c      	ldr	r2, [pc, #496]	@ (80028dc <readButtonFunction+0x230>)
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	e002      	b.n	80026f4 <readButtonFunction+0x48>
      }
    } else {
      buttonReadRaw = 666;
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <readButtonFunction+0x22c>)
 80026f0:	4a7a      	ldr	r2, [pc, #488]	@ (80028dc <readButtonFunction+0x230>)
 80026f2:	801a      	strh	r2, [r3, #0]
    }
    buttonRead[0]=buttonRead[1];
 80026f4:	4b7a      	ldr	r3, [pc, #488]	@ (80028e0 <readButtonFunction+0x234>)
 80026f6:	885a      	ldrh	r2, [r3, #2]
 80026f8:	4b79      	ldr	r3, [pc, #484]	@ (80028e0 <readButtonFunction+0x234>)
 80026fa:	801a      	strh	r2, [r3, #0]
    buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 80026fc:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <readButtonFunction+0x22c>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b21b      	sxth	r3, r3
 8002702:	0018      	movs	r0, r3
 8002704:	f7fe ff34 	bl	8001570 <interpolation>
 8002708:	0003      	movs	r3, r0
 800270a:	b29b      	uxth	r3, r3
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe ffb5 	bl	800167c <filterButton>
 8002712:	0003      	movs	r3, r0
 8002714:	001a      	movs	r2, r3
 8002716:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <readButtonFunction+0x234>)
 8002718:	805a      	strh	r2, [r3, #2]
    
    uint8_t rawButtonState = 0;
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    if(buttonRead[1] <= 50) {
 8002720:	4b6f      	ldr	r3, [pc, #444]	@ (80028e0 <readButtonFunction+0x234>)
 8002722:	885b      	ldrh	r3, [r3, #2]
 8002724:	2b32      	cmp	r3, #50	@ 0x32
 8002726:	d803      	bhi.n	8002730 <readButtonFunction+0x84>
        rawButtonState = 1;
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e026      	b.n	800277e <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 290 && buttonRead[1] < 315) {
 8002730:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <readButtonFunction+0x234>)
 8002732:	885a      	ldrh	r2, [r3, #2]
 8002734:	2391      	movs	r3, #145	@ 0x91
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	429a      	cmp	r2, r3
 800273a:	d909      	bls.n	8002750 <readButtonFunction+0xa4>
 800273c:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <readButtonFunction+0x234>)
 800273e:	885a      	ldrh	r2, [r3, #2]
 8002740:	239d      	movs	r3, #157	@ 0x9d
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	429a      	cmp	r2, r3
 8002746:	d803      	bhi.n	8002750 <readButtonFunction+0xa4>
        rawButtonState = 2;
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e016      	b.n	800277e <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 186 && buttonRead[1] < 206) {
 8002750:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <readButtonFunction+0x234>)
 8002752:	885b      	ldrh	r3, [r3, #2]
 8002754:	2bba      	cmp	r3, #186	@ 0xba
 8002756:	d907      	bls.n	8002768 <readButtonFunction+0xbc>
 8002758:	4b61      	ldr	r3, [pc, #388]	@ (80028e0 <readButtonFunction+0x234>)
 800275a:	885b      	ldrh	r3, [r3, #2]
 800275c:	2bcd      	cmp	r3, #205	@ 0xcd
 800275e:	d803      	bhi.n	8002768 <readButtonFunction+0xbc>
        rawButtonState = 3;
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	2203      	movs	r2, #3
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e00a      	b.n	800277e <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 86 && buttonRead[1] < 108) {
 8002768:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <readButtonFunction+0x234>)
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	2b56      	cmp	r3, #86	@ 0x56
 800276e:	d906      	bls.n	800277e <readButtonFunction+0xd2>
 8002770:	4b5b      	ldr	r3, [pc, #364]	@ (80028e0 <readButtonFunction+0x234>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	2b6b      	cmp	r3, #107	@ 0x6b
 8002776:	d802      	bhi.n	800277e <readButtonFunction+0xd2>
        rawButtonState = 4;
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	2204      	movs	r2, #4
 800277c:	701a      	strb	r2, [r3, #0]
    }
    
    if(rawButtonState != buttonState) {
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <readButtonFunction+0x238>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	1dfa      	adds	r2, r7, #7
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d100      	bne.n	800278c <readButtonFunction+0xe0>
 800278a:	e098      	b.n	80028be <readButtonFunction+0x212>
        if(!buttonTransitionFlag) {
 800278c:	4b56      	ldr	r3, [pc, #344]	@ (80028e8 <readButtonFunction+0x23c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <readButtonFunction+0xf4>
            buttonTransitionFlag = 1;
 8002794:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <readButtonFunction+0x23c>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 800279a:	4b54      	ldr	r3, [pc, #336]	@ (80028ec <readButtonFunction+0x240>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
        }
        buttonDebounceTimer += 5;
 80027a0:	4b52      	ldr	r3, [pc, #328]	@ (80028ec <readButtonFunction+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1d5a      	adds	r2, r3, #5
 80027a6:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <readButtonFunction+0x240>)
 80027a8:	601a      	str	r2, [r3, #0]
        
        if(buttonDebounceTimer >= 15) {
 80027aa:	4b50      	ldr	r3, [pc, #320]	@ (80028ec <readButtonFunction+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b0e      	cmp	r3, #14
 80027b0:	d800      	bhi.n	80027b4 <readButtonFunction+0x108>
 80027b2:	e08b      	b.n	80028cc <readButtonFunction+0x220>
            buttonStatePrev = buttonState;
 80027b4:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <readButtonFunction+0x238>)
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	4b4d      	ldr	r3, [pc, #308]	@ (80028f0 <readButtonFunction+0x244>)
 80027ba:	701a      	strb	r2, [r3, #0]
            buttonState = rawButtonState;
 80027bc:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <readButtonFunction+0x238>)
 80027be:	1dfa      	adds	r2, r7, #7
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
            buttonTransitionFlag = 0;
 80027c4:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <readButtonFunction+0x23c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 80027ca:	4b48      	ldr	r3, [pc, #288]	@ (80028ec <readButtonFunction+0x240>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
            
            if(!buttonTransitionFlag) {
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <readButtonFunction+0x23c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <readButtonFunction+0x12e>
 80027d8:	e078      	b.n	80028cc <readButtonFunction+0x220>
                if(buttonState == 1 && buttonStatePrev == 0) {
 80027da:	4b42      	ldr	r3, [pc, #264]	@ (80028e4 <readButtonFunction+0x238>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d11b      	bne.n	800281a <readButtonFunction+0x16e>
 80027e2:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <readButtonFunction+0x244>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d117      	bne.n	800281a <readButtonFunction+0x16e>
                    if(displayMode==0)displayMode=displayModeMax;
 80027ea:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <readButtonFunction+0x248>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <readButtonFunction+0x150>
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <readButtonFunction+0x24c>)
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	4b3f      	ldr	r3, [pc, #252]	@ (80028f4 <readButtonFunction+0x248>)
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e005      	b.n	8002808 <readButtonFunction+0x15c>
                    else displayMode--;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <readButtonFunction+0x248>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <readButtonFunction+0x248>)
 8002806:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 8002808:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <readButtonFunction+0x250>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 800280e:	f000 f96f 	bl	8002af0 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <readButtonFunction+0x254>)
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e058      	b.n	80028cc <readButtonFunction+0x220>
                }
                else if(buttonState == 2 && buttonStatePrev == 0) {
 800281a:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <readButtonFunction+0x238>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d11c      	bne.n	800285c <readButtonFunction+0x1b0>
 8002822:	4b33      	ldr	r3, [pc, #204]	@ (80028f0 <readButtonFunction+0x244>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <readButtonFunction+0x1b0>
                    if(displayMode==displayModeMax)displayMode=0;
 800282a:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <readButtonFunction+0x248>)
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <readButtonFunction+0x24c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d103      	bne.n	800283e <readButtonFunction+0x192>
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <readButtonFunction+0x248>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e005      	b.n	800284a <readButtonFunction+0x19e>
                    else displayMode++;
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <readButtonFunction+0x248>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <readButtonFunction+0x248>)
 8002848:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 800284a:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <readButtonFunction+0x250>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 8002850:	f000 f94e 	bl	8002af0 <HAL_GetTick>
 8002854:	0002      	movs	r2, r0
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <readButtonFunction+0x254>)
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e037      	b.n	80028cc <readButtonFunction+0x220>
                }
                else if(buttonState == 3 && buttonStatePrev == 0) {//apas jos
 800285c:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <readButtonFunction+0x238>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d113      	bne.n	800288c <readButtonFunction+0x1e0>
 8002864:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <readButtonFunction+0x244>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <readButtonFunction+0x1e0>
                	if(fontMode==0)fontMode=fontModeMax;
 800286c:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <readButtonFunction+0x258>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <readButtonFunction+0x1d2>
 8002874:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <readButtonFunction+0x25c>)
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	4b22      	ldr	r3, [pc, #136]	@ (8002904 <readButtonFunction+0x258>)
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e026      	b.n	80028cc <readButtonFunction+0x220>
                	else fontMode--;
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <readButtonFunction+0x258>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3b01      	subs	r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <readButtonFunction+0x258>)
 8002888:	701a      	strb	r2, [r3, #0]
                	if(fontMode==0)fontMode=fontModeMax;
 800288a:	e01f      	b.n	80028cc <readButtonFunction+0x220>
                }
                else if(buttonState == 4 && buttonStatePrev == 0) {//apas sus
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <readButtonFunction+0x238>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b04      	cmp	r3, #4
 8002892:	d11b      	bne.n	80028cc <readButtonFunction+0x220>
 8002894:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <readButtonFunction+0x244>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d117      	bne.n	80028cc <readButtonFunction+0x220>
                	if(fontMode==fontModeMax)fontMode=0;
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <readButtonFunction+0x258>)
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <readButtonFunction+0x25c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d103      	bne.n	80028b0 <readButtonFunction+0x204>
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <readButtonFunction+0x258>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    } else {
        buttonTransitionFlag = 0;
        buttonDebounceTimer = 0;
    }
  /* USER CODE END readButtonFunction */
}
 80028ae:	e00d      	b.n	80028cc <readButtonFunction+0x220>
                	else fontMode++;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <readButtonFunction+0x258>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <readButtonFunction+0x258>)
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	e006      	b.n	80028cc <readButtonFunction+0x220>
        buttonTransitionFlag = 0;
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <readButtonFunction+0x23c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
        buttonDebounceTimer = 0;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <readButtonFunction+0x240>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	e7ff      	b.n	80028cc <readButtonFunction+0x220>
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200004dc 	.word	0x200004dc
 80028d8:	20000006 	.word	0x20000006
 80028dc:	0000029a 	.word	0x0000029a
 80028e0:	20000484 	.word	0x20000484
 80028e4:	20000489 	.word	0x20000489
 80028e8:	20000490 	.word	0x20000490
 80028ec:	2000048c 	.word	0x2000048c
 80028f0:	2000048a 	.word	0x2000048a
 80028f4:	20000008 	.word	0x20000008
 80028f8:	20000009 	.word	0x20000009
 80028fc:	20000498 	.word	0x20000498
 8002900:	20000494 	.word	0x20000494
 8002904:	20000488 	.word	0x20000488
 8002908:	2000000a 	.word	0x2000000a

0800290c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a04      	ldr	r2, [pc, #16]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800291e:	f000 f8d5 	bl	8002acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	40000400 	.word	0x40000400

08002930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e7fd      	b.n	8002938 <Error_Handler+0x8>

0800293c <OS_Init>:
static const SimpleTask *os_tasks = 0;
static uint8_t os_num_tasks = 0;
static void (*os_init_task)(void) = 0;
static uint32_t os_init_max_time_ms = 0;

void OS_Init(const SimpleTask *tasks, uint8_t num_tasks, void (*init_task)(void), uint32_t init_max_time_ms) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	200b      	movs	r0, #11
 800294a:	183b      	adds	r3, r7, r0
 800294c:	1c0a      	adds	r2, r1, #0
 800294e:	701a      	strb	r2, [r3, #0]
    os_tasks = tasks;
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <OS_Init+0x38>)
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
    os_num_tasks = num_tasks;
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <OS_Init+0x3c>)
 8002958:	183a      	adds	r2, r7, r0
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	701a      	strb	r2, [r3, #0]
    os_init_task = init_task;
 800295e:	4b07      	ldr	r3, [pc, #28]	@ (800297c <OS_Init+0x40>)
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]
    os_init_max_time_ms = init_max_time_ms;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <OS_Init+0x44>)
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	20000a14 	.word	0x20000a14
 8002978:	20000a18 	.word	0x20000a18
 800297c:	20000a1c 	.word	0x20000a1c
 8002980:	20000a20 	.word	0x20000a20

08002984 <OS_Run>:

void OS_Run(void) {
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
    if (os_init_task) {
 800298a:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <OS_Run+0x108>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <OS_Run+0x58>
        uint32_t start = HAL_GetTick();
 8002992:	f000 f8ad 	bl	8002af0 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	613b      	str	r3, [r7, #16]
        os_init_task();
 800299a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <OS_Run+0x108>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick() - start;
 80029a0:	f000 f8a6 	bl	8002af0 <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
        if (elapsed > os_init_max_time_ms) {
 80029ac:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <OS_Run+0x10c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d908      	bls.n	80029c8 <OS_Run+0x44>
            os_task_overrun_count[0]++;
 80029b6:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <OS_Run+0x110>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	4b35      	ldr	r3, [pc, #212]	@ (8002a94 <OS_Run+0x110>)
 80029be:	601a      	str	r2, [r3, #0]
            os_task_overrun_time=elapsed;
 80029c0:	4b35      	ldr	r3, [pc, #212]	@ (8002a98 <OS_Run+0x114>)
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e009      	b.n	80029dc <OS_Run+0x58>
        } else {
            while ((HAL_GetTick() - start) < os_init_max_time_ms) {}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	f000 f891 	bl	8002af0 <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad2      	subs	r2, r2, r3
 80029d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <OS_Run+0x10c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3f6      	bcc.n	80029ca <OS_Run+0x46>
        }
    }
    uint8_t i = 0;
 80029dc:	2317      	movs	r3, #23
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    while (1) {
        uint32_t start = HAL_GetTick();
 80029e4:	f000 f884 	bl	8002af0 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	60bb      	str	r3, [r7, #8]
        os_tasks[i].task_func();
 80029ec:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <OS_Run+0x118>)
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	2417      	movs	r4, #23
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	0013      	movs	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	18cb      	adds	r3, r1, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick() - start;
 8002a04:	f000 f874 	bl	8002af0 <HAL_GetTick>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	607b      	str	r3, [r7, #4]
        if (elapsed > os_tasks[i].max_time_ms) {
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <OS_Run+0x118>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	0013      	movs	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	18cb      	adds	r3, r1, r3
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d90d      	bls.n	8002a46 <OS_Run+0xc2>
            os_task_overrun_count[i+1]++;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <OS_Run+0x110>)
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	588a      	ldr	r2, [r1, r2]
 8002a36:	1c51      	adds	r1, r2, #1
 8002a38:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <OS_Run+0x110>)
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	5099      	str	r1, [r3, r2]
            os_task_overrun_time=elapsed;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <OS_Run+0x114>)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e012      	b.n	8002a6c <OS_Run+0xe8>
        } else {
            while ((HAL_GetTick() - start) < os_tasks[i].max_time_ms) {}//bucla de asteptare pana la urmatorul task
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	f000 f852 	bl	8002af0 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad1      	subs	r1, r2, r3
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <OS_Run+0x118>)
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	2317      	movs	r3, #23
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	189b      	adds	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	18c3      	adds	r3, r0, r3
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	d3ed      	bcc.n	8002a48 <OS_Run+0xc4>
        }
        i++;
 8002a6c:	2117      	movs	r1, #23
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	3201      	adds	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
        if (i >= os_num_tasks) i = 0;
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <OS_Run+0x11c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	187a      	adds	r2, r7, r1
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3af      	bcc.n	80029e4 <OS_Run+0x60>
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
    while (1) {
 8002a8a:	e7ab      	b.n	80029e4 <OS_Run+0x60>
 8002a8c:	20000a1c 	.word	0x20000a1c
 8002a90:	20000a20 	.word	0x20000a20
 8002a94:	2000049c 	.word	0x2000049c
 8002a98:	200004bc 	.word	0x200004bc
 8002a9c:	20000a14 	.word	0x20000a14
 8002aa0:	20000a18 	.word	0x20000a18

08002aa4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <HAL_Init+0x24>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_Init+0x24>)
 8002aae:	2110      	movs	r1, #16
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f7fd fdcf 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aba:	f7fd fcc5 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_IncTick+0x1c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_IncTick+0x20>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	18d2      	adds	r2, r2, r3
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_IncTick+0x20>)
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	20000418 	.word	0x20000418
 8002aec:	20000a24 	.word	0x20000a24

08002af0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b02      	ldr	r3, [pc, #8]	@ (8002b00 <HAL_GetTick+0x10>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	20000a24 	.word	0x20000a24

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	001a      	movs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	189b      	adds	r3, r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	f7ff ffe0 	bl	8002af0 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
  {
  }
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b004      	add	sp, #16
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	20000418 	.word	0x20000418

08002b4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b54:	230f      	movs	r3, #15
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e125      	b.n	8002db6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2234      	movs	r2, #52	@ 0x34
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7fd fc8a 	bl	800049c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d000      	beq.n	8002b94 <HAL_ADC_Init+0x48>
 8002b92:	e103      	b.n	8002d9c <HAL_ADC_Init+0x250>
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d000      	beq.n	8002ba0 <HAL_ADC_Init+0x54>
 8002b9e:	e0fd      	b.n	8002d9c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002baa:	d000      	beq.n	8002bae <HAL_ADC_Init+0x62>
 8002bac:	e0f6      	b.n	8002d9c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb2:	4a83      	ldr	r2, [pc, #524]	@ (8002dc0 <HAL_ADC_Init+0x274>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d112      	bne.n	8002bf2 <HAL_ADC_Init+0xa6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d009      	beq.n	8002bee <HAL_ADC_Init+0xa2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	401a      	ands	r2, r3
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Init+0xa6>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_Init+0xa8>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2218      	movs	r2, #24
 8002c00:	4393      	bics	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	0899      	lsrs	r1, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4964      	ldr	r1, [pc, #400]	@ (8002dc4 <HAL_ADC_Init+0x278>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7e1b      	ldrb	r3, [r3, #24]
 8002c3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e5b      	ldrb	r3, [r3, #25]
 8002c40:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c42:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7e9b      	ldrb	r3, [r3, #26]
 8002c48:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_ADC_Init+0x10e>
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	015b      	lsls	r3, r3, #5
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_Init+0x110>
 8002c5a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c5c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c62:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_Init+0x124>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e000      	b.n	8002c72 <HAL_ADC_Init+0x126>
 8002c70:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c72:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2124      	movs	r1, #36	@ 0x24
 8002c78:	5c5b      	ldrb	r3, [r3, r1]
 8002c7a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c7c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7edb      	ldrb	r3, [r3, #27]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d115      	bne.n	8002cb8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7e9b      	ldrb	r3, [r3, #26]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2280      	movs	r2, #128	@ 0x80
 8002c98:	0252      	lsls	r2, r2, #9
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	23c2      	movs	r3, #194	@ 0xc2
 8002cbe:	33ff      	adds	r3, #255	@ 0xff
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d007      	beq.n	8002cd4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	055b      	lsls	r3, r3, #21
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d01b      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d017      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d013      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d00f      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d00b      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d007      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d003      	beq.n	8002d28 <HAL_ADC_Init+0x1dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	d112      	bne.n	8002d4e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2107      	movs	r1, #7
 8002d34:	438a      	bics	r2, r1
 8002d36:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6959      	ldr	r1, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	2207      	movs	r2, #7
 8002d44:	401a      	ands	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <HAL_ADC_Init+0x27c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d10b      	bne.n	8002d76 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d74:	e01c      	b.n	8002db0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	2212      	movs	r2, #18
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	2210      	movs	r2, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d92:	230f      	movs	r3, #15
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d9a:	e009      	b.n	8002db0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	2210      	movs	r2, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002db0:	230f      	movs	r3, #15
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	781b      	ldrb	r3, [r3, #0]
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	fffffefd 	.word	0xfffffefd
 8002dc4:	fffe0219 	.word	0xfffe0219
 8002dc8:	833fffe7 	.word	0x833fffe7

08002dcc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2204      	movs	r2, #4
 8002de4:	4013      	ands	r3, r2
 8002de6:	d138      	bne.n	8002e5a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2234      	movs	r2, #52	@ 0x34
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Start+0x2a>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e038      	b.n	8002e68 <HAL_ADC_Start+0x9c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2234      	movs	r2, #52	@ 0x34
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7e5b      	ldrb	r3, [r3, #25]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d007      	beq.n	8002e16 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e06:	230f      	movs	r3, #15
 8002e08:	18fc      	adds	r4, r7, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fa23 	bl	8003258 <ADC_Enable>
 8002e12:	0003      	movs	r3, r0
 8002e14:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d120      	bne.n	8002e62 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <HAL_ADC_Start+0xa4>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	0052      	lsls	r2, r2, #1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2234      	movs	r2, #52	@ 0x34
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	221c      	movs	r2, #28
 8002e46:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2104      	movs	r1, #4
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e003      	b.n	8002e62 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e5a:	230f      	movs	r3, #15
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2202      	movs	r2, #2
 8002e60:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e62:	230f      	movs	r3, #15
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	781b      	ldrb	r3, [r3, #0]
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b005      	add	sp, #20
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	fffff0fe 	.word	0xfffff0fe

08002e74 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2234      	movs	r2, #52	@ 0x34
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Stop+0x1e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e029      	b.n	8002ee6 <HAL_ADC_Stop+0x72>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2234      	movs	r2, #52	@ 0x34
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002e9a:	250f      	movs	r5, #15
 8002e9c:	197c      	adds	r4, r7, r5
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 face 	bl	8003442 <ADC_ConversionStop>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002eaa:	197b      	adds	r3, r7, r5
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d112      	bne.n	8002ed8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002eb2:	197c      	adds	r4, r7, r5
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fa52 	bl	8003360 <ADC_Disable>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ec0:	197b      	adds	r3, r7, r5
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_ADC_Stop+0x7c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2234      	movs	r2, #52	@ 0x34
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bdb0      	pop	{r4, r5, r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	fffffefe 	.word	0xfffffefe

08002ef4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d102      	bne.n	8002f0c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002f06:	2308      	movs	r3, #8
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e014      	b.n	8002f36 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	2220      	movs	r2, #32
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2234      	movs	r2, #52	@ 0x34
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e071      	b.n	8003016 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002f32:	230c      	movs	r3, #12
 8002f34:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f36:	f7ff fddb 	bl	8002af0 <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f3e:	e01f      	b.n	8002f80 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	d01c      	beq.n	8002f80 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_ADC_PollForConversion+0x68>
 8002f4c:	f7ff fdd0 	bl	8002af0 <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d211      	bcs.n	8002f80 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2234      	movs	r2, #52	@ 0x34
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e04a      	b.n	8003016 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d0d9      	beq.n	8002f40 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	23c0      	movs	r3, #192	@ 0xc0
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d12d      	bne.n	8003004 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d129      	bne.n	8003004 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d122      	bne.n	8003004 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d110      	bne.n	8002fec <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	210c      	movs	r1, #12
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <HAL_ADC_PollForConversion+0x12c>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fea:	e00b      	b.n	8003004 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e1b      	ldrb	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	220c      	movs	r2, #12
 8003012:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	fffffefe 	.word	0xfffffefe

08003024 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003046:	230f      	movs	r3, #15
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	429a      	cmp	r2, r3
 800305c:	d011      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x46>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d00d      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x46>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	2b02      	cmp	r3, #2
 800306c:	d009      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x46>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	2b03      	cmp	r3, #3
 8003074:	d005      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x46>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	2b04      	cmp	r3, #4
 800307c:	d001      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x46>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2234      	movs	r2, #52	@ 0x34
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x54>
 800308c:	2302      	movs	r3, #2
 800308e:	e0d0      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1f6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2234      	movs	r2, #52	@ 0x34
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d000      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x6a>
 80030a4:	e0b4      	b.n	8003210 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a64      	ldr	r2, [pc, #400]	@ (800323c <HAL_ADC_ConfigChannel+0x200>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d100      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x76>
 80030b0:	e082      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	055b      	lsls	r3, r3, #21
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d037      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d033      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d02f      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d02b      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d027      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d023      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	2b06      	cmp	r3, #6
 8003102:	d01f      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	2b07      	cmp	r3, #7
 800310a:	d01b      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2107      	movs	r1, #7
 8003118:	400b      	ands	r3, r1
 800311a:	429a      	cmp	r2, r3
 800311c:	d012      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2107      	movs	r1, #7
 800312a:	438a      	bics	r2, r1
 800312c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6959      	ldr	r1, [r3, #20]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2207      	movs	r2, #7
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d007      	beq.n	800315c <HAL_ADC_ConfigChannel+0x120>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b11      	cmp	r3, #17
 8003152:	d003      	beq.n	800315c <HAL_ADC_ConfigChannel+0x120>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b12      	cmp	r3, #18
 800315a:	d163      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800315c:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_ADC_ConfigChannel+0x204>)
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b10      	cmp	r3, #16
 8003166:	d009      	beq.n	800317c <HAL_ADC_ConfigChannel+0x140>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b11      	cmp	r3, #17
 800316e:	d102      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x13a>
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	03db      	lsls	r3, r3, #15
 8003174:	e004      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	045b      	lsls	r3, r3, #17
 800317a:	e001      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	4a2f      	ldr	r2, [pc, #188]	@ (8003240 <HAL_ADC_ConfigChannel+0x204>)
 8003182:	430b      	orrs	r3, r1
 8003184:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b10      	cmp	r3, #16
 800318c:	d14a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_ADC_ConfigChannel+0x208>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	492d      	ldr	r1, [pc, #180]	@ (8003248 <HAL_ADC_ConfigChannel+0x20c>)
 8003194:	0018      	movs	r0, r3
 8003196:	f7fc ffb7 	bl	8000108 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	001a      	movs	r2, r3
 800319e:	0013      	movs	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f9      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x16e>
 80031b6:	e035      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	4099      	lsls	r1, r3
 80031c6:	000b      	movs	r3, r1
 80031c8:	43d9      	mvns	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d007      	beq.n	80031ea <HAL_ADC_ConfigChannel+0x1ae>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b11      	cmp	r3, #17
 80031e0:	d003      	beq.n	80031ea <HAL_ADC_ConfigChannel+0x1ae>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b12      	cmp	r3, #18
 80031e8:	d11c      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_ADC_ConfigChannel+0x204>)
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d007      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x1ca>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b11      	cmp	r3, #17
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x1c6>
 80031fe:	4b13      	ldr	r3, [pc, #76]	@ (800324c <HAL_ADC_ConfigChannel+0x210>)
 8003200:	e002      	b.n	8003208 <HAL_ADC_ConfigChannel+0x1cc>
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_ADC_ConfigChannel+0x214>)
 8003204:	e000      	b.n	8003208 <HAL_ADC_ConfigChannel+0x1cc>
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_ADC_ConfigChannel+0x218>)
 8003208:	4a0d      	ldr	r2, [pc, #52]	@ (8003240 <HAL_ADC_ConfigChannel+0x204>)
 800320a:	400b      	ands	r3, r1
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e009      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	2220      	movs	r2, #32
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2234      	movs	r2, #52	@ 0x34
 8003228:	2100      	movs	r1, #0
 800322a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	00001001 	.word	0x00001001
 8003240:	40012708 	.word	0x40012708
 8003244:	20000000 	.word	0x20000000
 8003248:	000f4240 	.word	0x000f4240
 800324c:	ffbfffff 	.word	0xffbfffff
 8003250:	feffffff 	.word	0xfeffffff
 8003254:	ff7fffff 	.word	0xff7fffff

08003258 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2203      	movs	r2, #3
 8003270:	4013      	ands	r3, r2
 8003272:	2b01      	cmp	r3, #1
 8003274:	d112      	bne.n	800329c <ADC_Enable+0x44>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	2b01      	cmp	r3, #1
 8003282:	d009      	beq.n	8003298 <ADC_Enable+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	401a      	ands	r2, r3
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	429a      	cmp	r2, r3
 8003296:	d101      	bne.n	800329c <ADC_Enable+0x44>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <ADC_Enable+0x46>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d152      	bne.n	8003348 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <ADC_Enable+0xfc>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	d00d      	beq.n	80032ca <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	2210      	movs	r2, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	2201      	movs	r2, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e03f      	b.n	800334a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032da:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <ADC_Enable+0x100>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	491f      	ldr	r1, [pc, #124]	@ (800335c <ADC_Enable+0x104>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fc ff11 	bl	8000108 <__udivsi3>
 80032e6:	0003      	movs	r3, r0
 80032e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032ea:	e002      	b.n	80032f2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f9      	bne.n	80032ec <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80032f8:	f7ff fbfa 	bl	8002af0 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003300:	e01b      	b.n	800333a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003302:	f7ff fbf5 	bl	8002af0 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d914      	bls.n	800333a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	4013      	ands	r3, r2
 800331a:	2b01      	cmp	r3, #1
 800331c:	d00d      	beq.n	800333a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	2210      	movs	r2, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	2201      	movs	r2, #1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e007      	b.n	800334a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	2b01      	cmp	r3, #1
 8003346:	d1dc      	bne.n	8003302 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	80000017 	.word	0x80000017
 8003358:	20000000 	.word	0x20000000
 800335c:	000f4240 	.word	0x000f4240

08003360 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2203      	movs	r2, #3
 8003374:	4013      	ands	r3, r2
 8003376:	2b01      	cmp	r3, #1
 8003378:	d112      	bne.n	80033a0 <ADC_Disable+0x40>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	4013      	ands	r3, r2
 8003384:	2b01      	cmp	r3, #1
 8003386:	d009      	beq.n	800339c <ADC_Disable+0x3c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	401a      	ands	r2, r3
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	429a      	cmp	r2, r3
 800339a:	d101      	bne.n	80033a0 <ADC_Disable+0x40>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <ADC_Disable+0x42>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d048      	beq.n	8003438 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2205      	movs	r2, #5
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d110      	bne.n	80033d6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2102      	movs	r1, #2
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2203      	movs	r2, #3
 80033ca:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033cc:	f7ff fb90 	bl	8002af0 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033d4:	e029      	b.n	800342a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	2210      	movs	r2, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	2201      	movs	r2, #1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e023      	b.n	800343a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f2:	f7ff fb7d 	bl	8002af0 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d914      	bls.n	800342a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10d      	bne.n	800342a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	2210      	movs	r2, #16
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	2201      	movs	r2, #1
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	2b01      	cmp	r3, #1
 8003436:	d0dc      	beq.n	80033f2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bd80      	pop	{r7, pc}

08003442 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2204      	movs	r2, #4
 8003456:	4013      	ands	r3, r2
 8003458:	d03a      	beq.n	80034d0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2204      	movs	r2, #4
 8003462:	4013      	ands	r3, r2
 8003464:	2b04      	cmp	r3, #4
 8003466:	d10d      	bne.n	8003484 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003472:	d107      	bne.n	8003484 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2110      	movs	r1, #16
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003484:	f7ff fb34 	bl	8002af0 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800348c:	e01a      	b.n	80034c4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800348e:	f7ff fb2f 	bl	8002af0 <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d913      	bls.n	80034c4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00d      	beq.n	80034c4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	2210      	movs	r2, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	2201      	movs	r2, #1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e006      	b.n	80034d2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2204      	movs	r2, #4
 80034cc:	4013      	ands	r3, r2
 80034ce:	d1de      	bne.n	800348e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	0002      	movs	r2, r0
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80034ee:	d809      	bhi.n	8003504 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	001a      	movs	r2, r3
 80034f6:	231f      	movs	r3, #31
 80034f8:	401a      	ands	r2, r3
 80034fa:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__NVIC_EnableIRQ+0x30>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	4091      	lsls	r1, r2
 8003500:	000a      	movs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
  }
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	0002      	movs	r2, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b7f      	cmp	r3, #127	@ 0x7f
 8003524:	d828      	bhi.n	8003578 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003526:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <__NVIC_SetPriority+0xd4>)
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	33c0      	adds	r3, #192	@ 0xc0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	589b      	ldr	r3, [r3, r2]
 8003536:	1dfa      	adds	r2, r7, #7
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	0011      	movs	r1, r2
 800353c:	2203      	movs	r2, #3
 800353e:	400a      	ands	r2, r1
 8003540:	00d2      	lsls	r2, r2, #3
 8003542:	21ff      	movs	r1, #255	@ 0xff
 8003544:	4091      	lsls	r1, r2
 8003546:	000a      	movs	r2, r1
 8003548:	43d2      	mvns	r2, r2
 800354a:	401a      	ands	r2, r3
 800354c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	401a      	ands	r2, r3
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	0018      	movs	r0, r3
 800355c:	2303      	movs	r3, #3
 800355e:	4003      	ands	r3, r0
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003564:	481f      	ldr	r0, [pc, #124]	@ (80035e4 <__NVIC_SetPriority+0xd4>)
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b25b      	sxtb	r3, r3
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	430a      	orrs	r2, r1
 8003570:	33c0      	adds	r3, #192	@ 0xc0
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003576:	e031      	b.n	80035dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003578:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <__NVIC_SetPriority+0xd8>)
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	0019      	movs	r1, r3
 8003580:	230f      	movs	r3, #15
 8003582:	400b      	ands	r3, r1
 8003584:	3b08      	subs	r3, #8
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3306      	adds	r3, #6
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	18d3      	adds	r3, r2, r3
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1dfa      	adds	r2, r7, #7
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	0011      	movs	r1, r2
 8003598:	2203      	movs	r2, #3
 800359a:	400a      	ands	r2, r1
 800359c:	00d2      	lsls	r2, r2, #3
 800359e:	21ff      	movs	r1, #255	@ 0xff
 80035a0:	4091      	lsls	r1, r2
 80035a2:	000a      	movs	r2, r1
 80035a4:	43d2      	mvns	r2, r2
 80035a6:	401a      	ands	r2, r3
 80035a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	401a      	ands	r2, r3
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	0018      	movs	r0, r3
 80035b8:	2303      	movs	r3, #3
 80035ba:	4003      	ands	r3, r0
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035c0:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <__NVIC_SetPriority+0xd8>)
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	001c      	movs	r4, r3
 80035c8:	230f      	movs	r3, #15
 80035ca:	4023      	ands	r3, r4
 80035cc:	3b08      	subs	r3, #8
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	430a      	orrs	r2, r1
 80035d2:	3306      	adds	r3, #6
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	18c3      	adds	r3, r0, r3
 80035d8:	3304      	adds	r3, #4
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	46c0      	nop			@ (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b003      	add	sp, #12
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	210f      	movs	r1, #15
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	1c02      	adds	r2, r0, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	187b      	adds	r3, r7, r1
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b25b      	sxtb	r3, r3
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff ff81 	bl	8003510 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	0002      	movs	r2, r0
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003622:	1dfb      	adds	r3, r7, #7
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b25b      	sxtb	r3, r3
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff ff57 	bl	80034dc <__NVIC_EnableIRQ>
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003646:	e155      	b.n	80038f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4091      	lsls	r1, r2
 8003652:	000a      	movs	r2, r1
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d100      	bne.n	8003660 <HAL_GPIO_Init+0x28>
 800365e:	e146      	b.n	80038ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	2b01      	cmp	r3, #1
 800366a:	d005      	beq.n	8003678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003674:	2b02      	cmp	r3, #2
 8003676:	d130      	bne.n	80036da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	409a      	lsls	r2, r3
 8003686:	0013      	movs	r3, r2
 8003688:	43da      	mvns	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ae:	2201      	movs	r2, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	409a      	lsls	r2, r3
 80036b4:	0013      	movs	r3, r2
 80036b6:	43da      	mvns	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	2201      	movs	r2, #1
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d017      	beq.n	8003716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	409a      	lsls	r2, r3
 80036f4:	0013      	movs	r3, r2
 80036f6:	43da      	mvns	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	0013      	movs	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	4013      	ands	r3, r2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d123      	bne.n	800376a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	0092      	lsls	r2, r2, #2
 800372c:	58d3      	ldr	r3, [r2, r3]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2207      	movs	r2, #7
 8003734:	4013      	ands	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	409a      	lsls	r2, r3
 800373c:	0013      	movs	r3, r2
 800373e:	43da      	mvns	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2107      	movs	r1, #7
 800374e:	400b      	ands	r3, r1
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	6939      	ldr	r1, [r7, #16]
 8003768:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	409a      	lsls	r2, r3
 8003778:	0013      	movs	r3, r2
 800377a:	43da      	mvns	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2203      	movs	r2, #3
 8003788:	401a      	ands	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	23c0      	movs	r3, #192	@ 0xc0
 80037a4:	029b      	lsls	r3, r3, #10
 80037a6:	4013      	ands	r3, r2
 80037a8:	d100      	bne.n	80037ac <HAL_GPIO_Init+0x174>
 80037aa:	e0a0      	b.n	80038ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ac:	4b57      	ldr	r3, [pc, #348]	@ (800390c <HAL_GPIO_Init+0x2d4>)
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	4b56      	ldr	r3, [pc, #344]	@ (800390c <HAL_GPIO_Init+0x2d4>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	4b54      	ldr	r3, [pc, #336]	@ (800390c <HAL_GPIO_Init+0x2d4>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2201      	movs	r2, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037c4:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_GPIO_Init+0x2d8>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	589b      	ldr	r3, [r3, r2]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2203      	movs	r2, #3
 80037d6:	4013      	ands	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	409a      	lsls	r2, r3
 80037de:	0013      	movs	r3, r2
 80037e0:	43da      	mvns	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	2390      	movs	r3, #144	@ 0x90
 80037ec:	05db      	lsls	r3, r3, #23
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d019      	beq.n	8003826 <HAL_GPIO_Init+0x1ee>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a47      	ldr	r2, [pc, #284]	@ (8003914 <HAL_GPIO_Init+0x2dc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_GPIO_Init+0x1ea>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a46      	ldr	r2, [pc, #280]	@ (8003918 <HAL_GPIO_Init+0x2e0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00d      	beq.n	800381e <HAL_GPIO_Init+0x1e6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a45      	ldr	r2, [pc, #276]	@ (800391c <HAL_GPIO_Init+0x2e4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <HAL_GPIO_Init+0x1e2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a44      	ldr	r2, [pc, #272]	@ (8003920 <HAL_GPIO_Init+0x2e8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_GPIO_Init+0x1de>
 8003812:	2304      	movs	r3, #4
 8003814:	e008      	b.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003816:	2305      	movs	r3, #5
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x1f0>
 800381a:	2303      	movs	r3, #3
 800381c:	e004      	b.n	8003828 <HAL_GPIO_Init+0x1f0>
 800381e:	2302      	movs	r3, #2
 8003820:	e002      	b.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003826:	2300      	movs	r3, #0
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	2103      	movs	r1, #3
 800382c:	400a      	ands	r2, r1
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003838:	4935      	ldr	r1, [pc, #212]	@ (8003910 <HAL_GPIO_Init+0x2d8>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003846:	4b37      	ldr	r3, [pc, #220]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43da      	mvns	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	035b      	lsls	r3, r3, #13
 800385e:	4013      	ands	r3, r2
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800386a:	4b2e      	ldr	r3, [pc, #184]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003870:	4b2c      	ldr	r3, [pc, #176]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43da      	mvns	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	039b      	lsls	r3, r3, #14
 8003888:	4013      	ands	r3, r2
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800389a:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	4013      	ands	r3, r2
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038be:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80038c4:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	2380      	movs	r3, #128	@ 0x80
 80038da:	025b      	lsls	r3, r3, #9
 80038dc:	4013      	ands	r3, r2
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <HAL_GPIO_Init+0x2ec>)
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	40da      	lsrs	r2, r3
 80038fc:	1e13      	subs	r3, r2, #0
 80038fe:	d000      	beq.n	8003902 <HAL_GPIO_Init+0x2ca>
 8003900:	e6a2      	b.n	8003648 <HAL_GPIO_Init+0x10>
  } 
}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b006      	add	sp, #24
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	48000400 	.word	0x48000400
 8003918:	48000800 	.word	0x48000800
 800391c:	48000c00 	.word	0x48000c00
 8003920:	48001000 	.word	0x48001000
 8003924:	40010400 	.word	0x40010400

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	0008      	movs	r0, r1
 8003932:	0011      	movs	r1, r2
 8003934:	1cbb      	adds	r3, r7, #2
 8003936:	1c02      	adds	r2, r0, #0
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	1c7b      	adds	r3, r7, #1
 800393c:	1c0a      	adds	r2, r1, #0
 800393e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003940:	1c7b      	adds	r3, r7, #1
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003948:	1cbb      	adds	r3, r7, #2
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003952:	1cbb      	adds	r3, r7, #2
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f000 fb76 	bl	8004064 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d100      	bne.n	8003984 <HAL_RCC_OscConfig+0x20>
 8003982:	e08e      	b.n	8003aa2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003984:	4bc5      	ldr	r3, [pc, #788]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	220c      	movs	r2, #12
 800398a:	4013      	ands	r3, r2
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00e      	beq.n	80039ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4bc2      	ldr	r3, [pc, #776]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	220c      	movs	r2, #12
 8003996:	4013      	ands	r3, r2
 8003998:	2b08      	cmp	r3, #8
 800399a:	d117      	bne.n	80039cc <HAL_RCC_OscConfig+0x68>
 800399c:	4bbf      	ldr	r3, [pc, #764]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	23c0      	movs	r3, #192	@ 0xc0
 80039a2:	025b      	lsls	r3, r3, #9
 80039a4:	401a      	ands	r2, r3
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	025b      	lsls	r3, r3, #9
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d10e      	bne.n	80039cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ae:	4bbb      	ldr	r3, [pc, #748]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	029b      	lsls	r3, r3, #10
 80039b6:	4013      	ands	r3, r2
 80039b8:	d100      	bne.n	80039bc <HAL_RCC_OscConfig+0x58>
 80039ba:	e071      	b.n	8003aa0 <HAL_RCC_OscConfig+0x13c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d000      	beq.n	80039c6 <HAL_RCC_OscConfig+0x62>
 80039c4:	e06c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f000 fb4c 	bl	8004064 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x80>
 80039d4:	4bb1      	ldr	r3, [pc, #708]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4bb0      	ldr	r3, [pc, #704]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	0249      	lsls	r1, r1, #9
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e02f      	b.n	8003a44 <HAL_RCC_OscConfig+0xe0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0xa2>
 80039ec:	4bab      	ldr	r3, [pc, #684]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4baa      	ldr	r3, [pc, #680]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039f2:	49ab      	ldr	r1, [pc, #684]	@ (8003ca0 <HAL_RCC_OscConfig+0x33c>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	4ba8      	ldr	r3, [pc, #672]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4ba7      	ldr	r3, [pc, #668]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 80039fe:	49a9      	ldr	r1, [pc, #676]	@ (8003ca4 <HAL_RCC_OscConfig+0x340>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e01e      	b.n	8003a44 <HAL_RCC_OscConfig+0xe0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d10e      	bne.n	8003a2c <HAL_RCC_OscConfig+0xc8>
 8003a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4ba2      	ldr	r3, [pc, #648]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a14:	2180      	movs	r1, #128	@ 0x80
 8003a16:	02c9      	lsls	r1, r1, #11
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4b9f      	ldr	r3, [pc, #636]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b9e      	ldr	r3, [pc, #632]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a22:	2180      	movs	r1, #128	@ 0x80
 8003a24:	0249      	lsls	r1, r1, #9
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xe0>
 8003a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b9a      	ldr	r3, [pc, #616]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a32:	499b      	ldr	r1, [pc, #620]	@ (8003ca0 <HAL_RCC_OscConfig+0x33c>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	4b98      	ldr	r3, [pc, #608]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b97      	ldr	r3, [pc, #604]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a3e:	4999      	ldr	r1, [pc, #612]	@ (8003ca4 <HAL_RCC_OscConfig+0x340>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d014      	beq.n	8003a76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7ff f850 	bl	8002af0 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a56:	f7ff f84b 	bl	8002af0 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	@ 0x64
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e2fd      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a68:	4b8c      	ldr	r3, [pc, #560]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	4013      	ands	r3, r2
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0xf2>
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7ff f83b 	bl	8002af0 <HAL_GetTick>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7ff f836 	bl	8002af0 <HAL_GetTick>
 8003a84:	0002      	movs	r2, r0
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2e8      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	4b82      	ldr	r3, [pc, #520]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x11c>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <HAL_RCC_OscConfig+0x14a>
 8003aac:	e06c      	b.n	8003b88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aae:	4b7b      	ldr	r3, [pc, #492]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ab8:	4b78      	ldr	r3, [pc, #480]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	220c      	movs	r2, #12
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d11f      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1a0>
 8003ac4:	4b75      	ldr	r3, [pc, #468]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	23c0      	movs	r3, #192	@ 0xc0
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	401a      	ands	r2, r3
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b71      	ldr	r3, [pc, #452]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2202      	movs	r2, #2
 8003adc:	4013      	ands	r3, r2
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_OscConfig+0x188>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e2bb      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b6b      	ldr	r3, [pc, #428]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	22f8      	movs	r2, #248	@ 0xf8
 8003af2:	4393      	bics	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00da      	lsls	r2, r3, #3
 8003afc:	4b67      	ldr	r3, [pc, #412]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e041      	b.n	8003b88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d024      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b63      	ldr	r3, [pc, #396]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b62      	ldr	r3, [pc, #392]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b12:	2101      	movs	r1, #1
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe ffea 	bl	8002af0 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe ffe5 	bl	8002af0 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e297      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d0f1      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b57      	ldr	r3, [pc, #348]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	22f8      	movs	r2, #248	@ 0xf8
 8003b44:	4393      	bics	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	00da      	lsls	r2, r3, #3
 8003b4e:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e018      	b.n	8003b88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b51      	ldr	r3, [pc, #324]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b50      	ldr	r3, [pc, #320]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe ffc5 	bl	8002af0 <HAL_GetTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fe ffc0 	bl	8002af0 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e272      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d1f1      	bne.n	8003b6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d019      	beq.n	8003bce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b40      	ldr	r3, [pc, #256]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe ffa3 	bl	8002af0 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fe ff9e 	bl	8002af0 <HAL_GetTick>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e250      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d0f1      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x24c>
 8003bcc:	e018      	b.n	8003c00 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bce:	4b33      	ldr	r3, [pc, #204]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bd2:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	438a      	bics	r2, r1
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe ff89 	bl	8002af0 <HAL_GetTick>
 8003bde:	0003      	movs	r3, r0
 8003be0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe ff84 	bl	8002af0 <HAL_GetTick>
 8003be8:	0002      	movs	r2, r0
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e236      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf6:	4b29      	ldr	r3, [pc, #164]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d1f1      	bne.n	8003be4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2204      	movs	r2, #4
 8003c06:	4013      	ands	r3, r2
 8003c08:	d100      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2a8>
 8003c0a:	e0b5      	b.n	8003d78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0c:	201f      	movs	r0, #31
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c14:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	055b      	lsls	r3, r3, #21
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d110      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c26:	2180      	movs	r1, #128	@ 0x80
 8003c28:	0549      	lsls	r1, r1, #21
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	61da      	str	r2, [r3, #28]
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	055b      	lsls	r3, r3, #21
 8003c36:	4013      	ands	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c3c:	183b      	adds	r3, r7, r0
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_RCC_OscConfig+0x344>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <HAL_RCC_OscConfig+0x344>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_RCC_OscConfig+0x344>)
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	0049      	lsls	r1, r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe ff48 	bl	8002af0 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7fe ff43 	bl	8002af0 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b64      	cmp	r3, #100	@ 0x64
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1f5      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCC_OscConfig+0x344>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4013      	ands	r3, r2
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10f      	bne.n	8003cac <HAL_RCC_OscConfig+0x348>
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	4b02      	ldr	r3, [pc, #8]	@ (8003c9c <HAL_RCC_OscConfig+0x338>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	430a      	orrs	r2, r1
 8003c96:	621a      	str	r2, [r3, #32]
 8003c98:	e036      	b.n	8003d08 <HAL_RCC_OscConfig+0x3a4>
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	fffbffff 	.word	0xfffbffff
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_OscConfig+0x36a>
 8003cb4:	4bca      	ldr	r3, [pc, #808]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	4bc9      	ldr	r3, [pc, #804]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	621a      	str	r2, [r3, #32]
 8003cc0:	4bc7      	ldr	r3, [pc, #796]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	4bc6      	ldr	r3, [pc, #792]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	438a      	bics	r2, r1
 8003cca:	621a      	str	r2, [r3, #32]
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x3a4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x38c>
 8003cd6:	4bc2      	ldr	r3, [pc, #776]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	4bc1      	ldr	r3, [pc, #772]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cdc:	2104      	movs	r1, #4
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	4bbf      	ldr	r3, [pc, #764]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	4bbe      	ldr	r3, [pc, #760]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	621a      	str	r2, [r3, #32]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x3a4>
 8003cf0:	4bbb      	ldr	r3, [pc, #748]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	4bba      	ldr	r3, [pc, #744]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	4bb8      	ldr	r3, [pc, #736]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	4bb7      	ldr	r3, [pc, #732]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d02:	2104      	movs	r1, #4
 8003d04:	438a      	bics	r2, r1
 8003d06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d014      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fe feee 	bl	8002af0 <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e009      	b.n	8003d2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe fee9 	bl	8002af0 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	4aaf      	ldr	r2, [pc, #700]	@ (8003fe4 <HAL_RCC_OscConfig+0x680>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e19a      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4bac      	ldr	r3, [pc, #688]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x3b6>
 8003d38:	e013      	b.n	8003d62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fed9 	bl	8002af0 <HAL_GetTick>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e009      	b.n	8003d58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe fed4 	bl	8002af0 <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	4aa5      	ldr	r2, [pc, #660]	@ (8003fe4 <HAL_RCC_OscConfig+0x680>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e185      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	4ba1      	ldr	r3, [pc, #644]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d62:	231f      	movs	r3, #31
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	4b9b      	ldr	r3, [pc, #620]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d72:	499d      	ldr	r1, [pc, #628]	@ (8003fe8 <HAL_RCC_OscConfig+0x684>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d063      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d8a:	4b95      	ldr	r3, [pc, #596]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d8e:	4b94      	ldr	r3, [pc, #592]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d90:	2104      	movs	r1, #4
 8003d92:	430a      	orrs	r2, r1
 8003d94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d96:	4b92      	ldr	r3, [pc, #584]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d9a:	4b91      	ldr	r3, [pc, #580]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fe fea5 	bl	8002af0 <HAL_GetTick>
 8003da6:	0003      	movs	r3, r0
 8003da8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dac:	f7fe fea0 	bl	8002af0 <HAL_GetTick>
 8003db0:	0002      	movs	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e152      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0f1      	beq.n	8003dac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dc8:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	22f8      	movs	r2, #248	@ 0xf8
 8003dce:	4393      	bics	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	00da      	lsls	r2, r3, #3
 8003dd8:	4b81      	ldr	r3, [pc, #516]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dde:	e034      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	3305      	adds	r3, #5
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003de8:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dec:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003dee:	2104      	movs	r1, #4
 8003df0:	438a      	bics	r2, r1
 8003df2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003df4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	22f8      	movs	r2, #248	@ 0xf8
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	00da      	lsls	r2, r3, #3
 8003e04:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e0a:	e01e      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e0c:	4b74      	ldr	r3, [pc, #464]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e10:	4b73      	ldr	r3, [pc, #460]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e12:	2104      	movs	r1, #4
 8003e14:	430a      	orrs	r2, r1
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e18:	4b71      	ldr	r3, [pc, #452]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1c:	4b70      	ldr	r3, [pc, #448]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fe fe64 	bl	8002af0 <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e2e:	f7fe fe5f 	bl	8002af0 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e111      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e40:	4b67      	ldr	r3, [pc, #412]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e44:	2202      	movs	r2, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d1f1      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	4013      	ands	r3, r2
 8003e52:	d05c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e54:	4b62      	ldr	r3, [pc, #392]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	220c      	movs	r2, #12
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d00e      	beq.n	8003e7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e60:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	220c      	movs	r2, #12
 8003e66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d114      	bne.n	8003e96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	23c0      	movs	r3, #192	@ 0xc0
 8003e72:	025b      	lsls	r3, r3, #9
 8003e74:	401a      	ands	r2, r3
 8003e76:	23c0      	movs	r3, #192	@ 0xc0
 8003e78:	025b      	lsls	r3, r3, #9
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e7e:	4b58      	ldr	r3, [pc, #352]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	4013      	ands	r3, r2
 8003e88:	d040      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5a8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d03c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0e6      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003e9e:	4b50      	ldr	r3, [pc, #320]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003ea4:	2180      	movs	r1, #128	@ 0x80
 8003ea6:	0249      	lsls	r1, r1, #9
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe fe20 	bl	8002af0 <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb6:	f7fe fe1b 	bl	8002af0 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0cd      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ec8:	4b45      	ldr	r3, [pc, #276]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ecc:	2380      	movs	r3, #128	@ 0x80
 8003ece:	029b      	lsls	r3, r3, #10
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x552>
 8003ed4:	e01b      	b.n	8003f0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003ed6:	4b42      	ldr	r3, [pc, #264]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eda:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003edc:	4943      	ldr	r1, [pc, #268]	@ (8003fec <HAL_RCC_OscConfig+0x688>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fe05 	bl	8002af0 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eec:	f7fe fe00 	bl	8002af0 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0b2      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003efe:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	029b      	lsls	r3, r3, #10
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x588>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f0c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d100      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5b4>
 8003f16:	e0a4      	b.n	8004062 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f18:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d100      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5c2>
 8003f24:	e078      	b.n	8004018 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d14c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f34:	492e      	ldr	r1, [pc, #184]	@ (8003ff0 <HAL_RCC_OscConfig+0x68c>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fdd9 	bl	8002af0 <HAL_GetTick>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fe fdd4 	bl	8002af0 <HAL_GetTick>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e086      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f56:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	049b      	lsls	r3, r3, #18
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f62:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	220f      	movs	r2, #15
 8003f68:	4393      	bics	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f76:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_RCC_OscConfig+0x690>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b13      	ldr	r3, [pc, #76]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	0449      	lsls	r1, r1, #17
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fda7 	bl	8002af0 <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fe fda2 	bl	8002af0 <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e054      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	049b      	lsls	r3, r3, #18
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x644>
 8003fc6:	e04c      	b.n	8004062 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <HAL_RCC_OscConfig+0x67c>)
 8003fce:	4908      	ldr	r1, [pc, #32]	@ (8003ff0 <HAL_RCC_OscConfig+0x68c>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fd8c 	bl	8002af0 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x6a6>
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	00001388 	.word	0x00001388
 8003fe8:	efffffff 	.word	0xefffffff
 8003fec:	fffeffff 	.word	0xfffeffff
 8003ff0:	feffffff 	.word	0xfeffffff
 8003ff4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe fd7a 	bl	8002af0 <HAL_GetTick>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e02c      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400a:	4b18      	ldr	r3, [pc, #96]	@ (800406c <HAL_RCC_OscConfig+0x708>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	049b      	lsls	r3, r3, #18
 8004012:	4013      	ands	r3, r2
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x694>
 8004016:	e024      	b.n	8004062 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e01f      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <HAL_RCC_OscConfig+0x708>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_RCC_OscConfig+0x708>)
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	23c0      	movs	r3, #192	@ 0xc0
 8004034:	025b      	lsls	r3, r3, #9
 8004036:	401a      	ands	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	429a      	cmp	r2, r3
 800403e:	d10e      	bne.n	800405e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	220f      	movs	r2, #15
 8004044:	401a      	ands	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d107      	bne.n	800405e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	23f0      	movs	r3, #240	@ 0xf0
 8004052:	039b      	lsls	r3, r3, #14
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b008      	add	sp, #32
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0bf      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b61      	ldr	r3, [pc, #388]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	4013      	ands	r3, r2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d911      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b5e      	ldr	r3, [pc, #376]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	4393      	bics	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	4b5b      	ldr	r3, [pc, #364]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a4:	4b59      	ldr	r3, [pc, #356]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0a6      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d015      	beq.n	80040ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2204      	movs	r2, #4
 80040c6:	4013      	ands	r3, r2
 80040c8:	d006      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040ca:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80040d0:	21e0      	movs	r1, #224	@ 0xe0
 80040d2:	00c9      	lsls	r1, r1, #3
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	22f0      	movs	r2, #240	@ 0xf0
 80040de:	4393      	bics	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	4013      	ands	r3, r2
 80040f4:	d04c      	beq.n	8004190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b44      	ldr	r3, [pc, #272]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	4013      	ands	r3, r2
 8004108:	d120      	bne.n	800414c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07a      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004116:	4b3e      	ldr	r3, [pc, #248]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	049b      	lsls	r3, r3, #18
 800411e:	4013      	ands	r3, r2
 8004120:	d114      	bne.n	800414c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e06e      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800412e:	4b38      	ldr	r3, [pc, #224]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 8004130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	4013      	ands	r3, r2
 8004138:	d108      	bne.n	800414c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e062      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e05b      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414c:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2203      	movs	r2, #3
 8004152:	4393      	bics	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4b2d      	ldr	r3, [pc, #180]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004160:	f7fe fcc6 	bl	8002af0 <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004168:	e009      	b.n	800417e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7fe fcc1 	bl	8002af0 <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <HAL_RCC_ClockConfig+0x1a4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e042      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	220c      	movs	r2, #12
 8004184:	401a      	ands	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1ec      	bne.n	800416a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004190:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d211      	bcs.n	80041c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	4393      	bics	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	4b18      	ldr	r3, [pc, #96]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <HAL_RCC_ClockConfig+0x19c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e020      	b.n	8004204 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2204      	movs	r2, #4
 80041c8:	4013      	ands	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a11      	ldr	r2, [pc, #68]	@ (8004218 <HAL_RCC_ClockConfig+0x1a8>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041e0:	f000 f820 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e4:	0001      	movs	r1, r0
 80041e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <HAL_RCC_ClockConfig+0x1a0>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	220f      	movs	r2, #15
 80041ee:	4013      	ands	r3, r2
 80041f0:	4a0a      	ldr	r2, [pc, #40]	@ (800421c <HAL_RCC_ClockConfig+0x1ac>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	000a      	movs	r2, r1
 80041f6:	40da      	lsrs	r2, r3
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCC_ClockConfig+0x1b0>)
 80041fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f7fc fa2b 	bl	8000658 <HAL_InitTick>
  
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b004      	add	sp, #16
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40022000 	.word	0x40022000
 8004210:	40021000 	.word	0x40021000
 8004214:	00001388 	.word	0x00001388
 8004218:	fffff8ff 	.word	0xfffff8ff
 800421c:	08005fdc 	.word	0x08005fdc
 8004220:	20000000 	.word	0x20000000

08004224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800423e:	4b2d      	ldr	r3, [pc, #180]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	220c      	movs	r2, #12
 8004248:	4013      	ands	r3, r2
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d046      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0xb8>
 800424e:	d848      	bhi.n	80042e2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004250:	2b04      	cmp	r3, #4
 8004252:	d002      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x36>
 8004254:	2b08      	cmp	r3, #8
 8004256:	d003      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x3c>
 8004258:	e043      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800425a:	4b27      	ldr	r3, [pc, #156]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800425c:	613b      	str	r3, [r7, #16]
      break;
 800425e:	e043      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	0c9b      	lsrs	r3, r3, #18
 8004264:	220f      	movs	r2, #15
 8004266:	4013      	ands	r3, r2
 8004268:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <HAL_RCC_GetSysClockFreq+0xd8>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800426e:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	220f      	movs	r2, #15
 8004274:	4013      	ands	r3, r2
 8004276:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	23c0      	movs	r3, #192	@ 0xc0
 8004280:	025b      	lsls	r3, r3, #9
 8004282:	401a      	ands	r2, r3
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	025b      	lsls	r3, r3, #9
 8004288:	429a      	cmp	r2, r3
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	481a      	ldr	r0, [pc, #104]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004290:	f7fb ff3a 	bl	8000108 <__udivsi3>
 8004294:	0003      	movs	r3, r0
 8004296:	001a      	movs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4353      	muls	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e01a      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	23c0      	movs	r3, #192	@ 0xc0
 80042a4:	025b      	lsls	r3, r3, #9
 80042a6:	401a      	ands	r2, r3
 80042a8:	23c0      	movs	r3, #192	@ 0xc0
 80042aa:	025b      	lsls	r3, r3, #9
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d109      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4814      	ldr	r0, [pc, #80]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xe0>)
 80042b4:	f7fb ff28 	bl	8000108 <__udivsi3>
 80042b8:	0003      	movs	r3, r0
 80042ba:	001a      	movs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4353      	muls	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	480c      	ldr	r0, [pc, #48]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80042c8:	f7fb ff1e 	bl	8000108 <__udivsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	001a      	movs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4353      	muls	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	613b      	str	r3, [r7, #16]
      break;
 80042da:	e005      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xe0>)
 80042de:	613b      	str	r3, [r7, #16]
      break;
 80042e0:	e002      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e2:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80042e4:	613b      	str	r3, [r7, #16]
      break;
 80042e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042e8:	693b      	ldr	r3, [r7, #16]
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b006      	add	sp, #24
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	40021000 	.word	0x40021000
 80042f8:	007a1200 	.word	0x007a1200
 80042fc:	080069f8 	.word	0x080069f8
 8004300:	08006a08 	.word	0x08006a08
 8004304:	02dc6c00 	.word	0x02dc6c00

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b02      	ldr	r3, [pc, #8]	@ (8004318 <HAL_RCC_GetHCLKFreq+0x10>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	20000000 	.word	0x20000000

0800431c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004320:	f7ff fff2 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004324:	0001      	movs	r1, r0
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	2207      	movs	r2, #7
 800432e:	4013      	ands	r3, r2
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	40d9      	lsrs	r1, r3
 8004336:	000b      	movs	r3, r1
}    
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	40021000 	.word	0x40021000
 8004344:	08005fec 	.word	0x08005fec

08004348 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004358:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <HAL_RCC_GetClockConfig+0x4c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2203      	movs	r2, #3
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_GetClockConfig+0x4c>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	22f0      	movs	r2, #240	@ 0xf0
 800436a:	401a      	ands	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_RCC_GetClockConfig+0x4c>)
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	23e0      	movs	r3, #224	@ 0xe0
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	401a      	ands	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_RCC_GetClockConfig+0x50>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	401a      	ands	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	40021000 	.word	0x40021000
 8004398:	40022000 	.word	0x40022000

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	025b      	lsls	r3, r3, #9
 80043b4:	4013      	ands	r3, r2
 80043b6:	d100      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043b8:	e08e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043ba:	2017      	movs	r0, #23
 80043bc:	183b      	adds	r3, r7, r0
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b6e      	ldr	r3, [pc, #440]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	055b      	lsls	r3, r3, #21
 80043ca:	4013      	ands	r3, r2
 80043cc:	d110      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b6b      	ldr	r3, [pc, #428]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043d4:	2180      	movs	r1, #128	@ 0x80
 80043d6:	0549      	lsls	r1, r1, #21
 80043d8:	430a      	orrs	r2, r1
 80043da:	61da      	str	r2, [r3, #28]
 80043dc:	4b67      	ldr	r3, [pc, #412]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	055b      	lsls	r3, r3, #21
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	4b63      	ldr	r3, [pc, #396]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d11a      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fc:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b5f      	ldr	r3, [pc, #380]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004402:	2180      	movs	r1, #128	@ 0x80
 8004404:	0049      	lsls	r1, r1, #1
 8004406:	430a      	orrs	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe fb71 	bl	8002af0 <HAL_GetTick>
 800440e:	0003      	movs	r3, r0
 8004410:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	e008      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fe fb6c 	bl	8002af0 <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0a6      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b56      	ldr	r3, [pc, #344]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	@ 0x80
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4013      	ands	r3, r2
 8004430:	d0f0      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004432:	4b52      	ldr	r3, [pc, #328]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	23c0      	movs	r3, #192	@ 0xc0
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d034      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	23c0      	movs	r3, #192	@ 0xc0
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4013      	ands	r3, r2
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	429a      	cmp	r2, r3
 8004452:	d02c      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004454:	4b49      	ldr	r3, [pc, #292]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4a4a      	ldr	r2, [pc, #296]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	4b46      	ldr	r3, [pc, #280]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004464:	2180      	movs	r1, #128	@ 0x80
 8004466:	0249      	lsls	r1, r1, #9
 8004468:	430a      	orrs	r2, r1
 800446a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	4b43      	ldr	r3, [pc, #268]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800446e:	6a1a      	ldr	r2, [r3, #32]
 8004470:	4b42      	ldr	r3, [pc, #264]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004472:	4945      	ldr	r1, [pc, #276]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004474:	400a      	ands	r2, r1
 8004476:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004478:	4b40      	ldr	r3, [pc, #256]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fe fb33 	bl	8002af0 <HAL_GetTick>
 800448a:	0003      	movs	r3, r0
 800448c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fe fb2e 	bl	8002af0 <HAL_GetTick>
 8004494:	0002      	movs	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	4a3c      	ldr	r2, [pc, #240]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e067      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	4b35      	ldr	r3, [pc, #212]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	2202      	movs	r2, #2
 80044aa:	4013      	ands	r3, r2
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ae:	4b33      	ldr	r3, [pc, #204]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a34      	ldr	r2, [pc, #208]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4b2f      	ldr	r3, [pc, #188]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044be:	430a      	orrs	r2, r1
 80044c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044c2:	2317      	movs	r3, #23
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044d2:	492f      	ldr	r1, [pc, #188]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e2:	4b26      	ldr	r3, [pc, #152]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	2203      	movs	r2, #3
 80044e8:	4393      	bics	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	4b22      	ldr	r3, [pc, #136]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044f2:	430a      	orrs	r2, r1
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2202      	movs	r2, #2
 80044fc:	4013      	ands	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004500:	4b1e      	ldr	r3, [pc, #120]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004506:	4013      	ands	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004510:	430a      	orrs	r2, r1
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	02db      	lsls	r3, r3, #11
 800451c:	4013      	ands	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004520:	4b16      	ldr	r3, [pc, #88]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	4b13      	ldr	r3, [pc, #76]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004530:	430a      	orrs	r2, r1
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2220      	movs	r2, #32
 800453a:	4013      	ands	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800453e:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	2210      	movs	r2, #16
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800454e:	430a      	orrs	r2, r1
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4013      	ands	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	2240      	movs	r2, #64	@ 0x40
 8004564:	4393      	bics	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	4b03      	ldr	r3, [pc, #12]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800456e:	430a      	orrs	r2, r1
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
 8004584:	fffffcff 	.word	0xfffffcff
 8004588:	fffeffff 	.word	0xfffeffff
 800458c:	00001388 	.word	0x00001388
 8004590:	efffffff 	.word	0xefffffff
 8004594:	fffcffff 	.word	0xfffcffff
 8004598:	fff3ffff 	.word	0xfff3ffff

0800459c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0a8      	b.n	8004700 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	2382      	movs	r3, #130	@ 0x82
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	429a      	cmp	r2, r3
 80045c0:	d009      	beq.n	80045d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	61da      	str	r2, [r3, #28]
 80045c8:	e005      	b.n	80045d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	225d      	movs	r2, #93	@ 0x5d
 80045e0:	5c9b      	ldrb	r3, [r3, r2]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d107      	bne.n	80045f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	225c      	movs	r2, #92	@ 0x5c
 80045ec:	2100      	movs	r1, #0
 80045ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fb ff98 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	225d      	movs	r2, #93	@ 0x5d
 80045fc:	2102      	movs	r1, #2
 80045fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2140      	movs	r1, #64	@ 0x40
 800460c:	438a      	bics	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	23e0      	movs	r3, #224	@ 0xe0
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	429a      	cmp	r2, r3
 800461a:	d902      	bls.n	8004622 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e002      	b.n	8004628 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	23f0      	movs	r3, #240	@ 0xf0
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	429a      	cmp	r2, r3
 8004632:	d008      	beq.n	8004646 <HAL_SPI_Init+0xaa>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	23e0      	movs	r3, #224	@ 0xe0
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	429a      	cmp	r2, r3
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	2382      	movs	r3, #130	@ 0x82
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	2384      	movs	r3, #132	@ 0x84
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	400b      	ands	r3, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2102      	movs	r1, #2
 8004662:	400b      	ands	r3, r1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2101      	movs	r1, #1
 800466c:	400b      	ands	r3, r1
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6999      	ldr	r1, [r3, #24]
 8004674:	2380      	movs	r3, #128	@ 0x80
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	400b      	ands	r3, r1
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2138      	movs	r1, #56	@ 0x38
 8004682:	400b      	ands	r3, r1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	400b      	ands	r3, r1
 800468e:	431a      	orrs	r2, r3
 8004690:	0011      	movs	r1, r2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	2204      	movs	r2, #4
 80046ac:	401a      	ands	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	2110      	movs	r1, #16
 80046b4:	400b      	ands	r3, r1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	2108      	movs	r1, #8
 80046be:	400b      	ands	r3, r1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68d9      	ldr	r1, [r3, #12]
 80046c6:	23f0      	movs	r3, #240	@ 0xf0
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	400b      	ands	r3, r1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	0011      	movs	r1, r2
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	015b      	lsls	r3, r3, #5
 80046d6:	401a      	ands	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4907      	ldr	r1, [pc, #28]	@ (8004708 <HAL_SPI_Init+0x16c>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	225d      	movs	r2, #93	@ 0x5d
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b004      	add	sp, #16
 8004706:	bd80      	pop	{r7, pc}
 8004708:	fffff7ff 	.word	0xfffff7ff

0800470c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	1dbb      	adds	r3, r7, #6
 800471a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471c:	231f      	movs	r3, #31
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	225c      	movs	r2, #92	@ 0x5c
 8004728:	5c9b      	ldrb	r3, [r3, r2]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_SPI_Transmit+0x26>
 800472e:	2302      	movs	r3, #2
 8004730:	e147      	b.n	80049c2 <HAL_SPI_Transmit+0x2b6>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	225c      	movs	r2, #92	@ 0x5c
 8004736:	2101      	movs	r1, #1
 8004738:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800473a:	f7fe f9d9 	bl	8002af0 <HAL_GetTick>
 800473e:	0003      	movs	r3, r0
 8004740:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004742:	2316      	movs	r3, #22
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	1dba      	adds	r2, r7, #6
 8004748:	8812      	ldrh	r2, [r2, #0]
 800474a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	225d      	movs	r2, #93	@ 0x5d
 8004750:	5c9b      	ldrb	r3, [r3, r2]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d004      	beq.n	8004762 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004758:	231f      	movs	r3, #31
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	2202      	movs	r2, #2
 800475e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004760:	e128      	b.n	80049b4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_SPI_Transmit+0x64>
 8004768:	1dbb      	adds	r3, r7, #6
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
    goto error;
 8004778:	e11c      	b.n	80049b4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	225d      	movs	r2, #93	@ 0x5d
 800477e:	2103      	movs	r1, #3
 8004780:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1dba      	adds	r2, r7, #6
 8004792:	8812      	ldrh	r2, [r2, #0]
 8004794:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1dba      	adds	r2, r7, #6
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2244      	movs	r2, #68	@ 0x44
 80047a8:	2100      	movs	r1, #0
 80047aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2246      	movs	r2, #70	@ 0x46
 80047b0:	2100      	movs	r1, #0
 80047b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d110      	bne.n	80047ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2140      	movs	r1, #64	@ 0x40
 80047d8:	438a      	bics	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	01c9      	lsls	r1, r1, #7
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2240      	movs	r2, #64	@ 0x40
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2140      	movs	r1, #64	@ 0x40
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	23e0      	movs	r3, #224	@ 0xe0
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	429a      	cmp	r2, r3
 8004816:	d952      	bls.n	80048be <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_SPI_Transmit+0x11e>
 8004820:	2316      	movs	r3, #22
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d143      	bne.n	80048b2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800484e:	e030      	b.n	80048b2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2202      	movs	r2, #2
 8004858:	4013      	ands	r3, r2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d112      	bne.n	8004884 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	881a      	ldrh	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004882:	e016      	b.n	80048b2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004884:	f7fe f934 	bl	8002af0 <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d802      	bhi.n	800489a <HAL_SPI_Transmit+0x18e>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_Transmit+0x194>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80048a0:	231f      	movs	r3, #31
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	2203      	movs	r2, #3
 80048a6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	225d      	movs	r2, #93	@ 0x5d
 80048ac:	2101      	movs	r1, #1
 80048ae:	5499      	strb	r1, [r3, r2]
          goto error;
 80048b0:	e080      	b.n	80049b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1c9      	bne.n	8004850 <HAL_SPI_Transmit+0x144>
 80048bc:	e053      	b.n	8004966 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <HAL_SPI_Transmit+0x1c4>
 80048c6:	2316      	movs	r3, #22
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d145      	bne.n	800495c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80048f6:	e031      	b.n	800495c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d113      	bne.n	800492e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800492c:	e016      	b.n	800495c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492e:	f7fe f8df 	bl	8002af0 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d802      	bhi.n	8004944 <HAL_SPI_Transmit+0x238>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_SPI_Transmit+0x23e>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800494a:	231f      	movs	r3, #31
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	2203      	movs	r2, #3
 8004950:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	225d      	movs	r2, #93	@ 0x5d
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
          goto error;
 800495a:	e02b      	b.n	80049b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1c8      	bne.n	80048f8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f95d 	bl	8004c2c <SPI_EndRxTxTransaction>
 8004972:	1e03      	subs	r3, r0, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80049a2:	231f      	movs	r3, #31
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e003      	b.n	80049b4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	225d      	movs	r2, #93	@ 0x5d
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	225c      	movs	r2, #92	@ 0x5c
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049bc:	231f      	movs	r3, #31
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	781b      	ldrb	r3, [r3, #0]
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b008      	add	sp, #32
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fe f888 	bl	8002af0 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fe f880 	bl	8002af0 <HAL_GetTick>
 80049f0:	0003      	movs	r3, r0
 80049f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	015b      	lsls	r3, r3, #5
 80049fa:	0d1b      	lsrs	r3, r3, #20
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	4353      	muls	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e058      	b.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	d055      	beq.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0a:	f7fe f871 	bl	8002af0 <HAL_GetTick>
 8004a0e:	0002      	movs	r2, r0
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d902      	bls.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d142      	bne.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	21e0      	movs	r1, #224	@ 0xe0
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	2382      	movs	r3, #130	@ 0x82
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d113      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	2380      	movs	r3, #128	@ 0x80
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d005      	beq.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2140      	movs	r1, #64	@ 0x40
 8004a60:	438a      	bics	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	019b      	lsls	r3, r3, #6
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d110      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	491a      	ldr	r1, [pc, #104]	@ (8004ae4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2180      	movs	r1, #128	@ 0x80
 8004a8c:	0189      	lsls	r1, r1, #6
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	225d      	movs	r2, #93	@ 0x5d
 8004a96:	2101      	movs	r1, #1
 8004a98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	225c      	movs	r2, #92	@ 0x5c
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e017      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	425a      	negs	r2, r3
 8004ac6:	4153      	adcs	r3, r2
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	001a      	movs	r2, r3
 8004acc:	1dfb      	adds	r3, r7, #7
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d197      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b008      	add	sp, #32
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	ffffdfff 	.word	0xffffdfff

08004ae8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004af6:	2317      	movs	r3, #23
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004afe:	f7fd fff7 	bl	8002af0 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b0e:	f7fd ffef 	bl	8002af0 <HAL_GetTick>
 8004b12:	0003      	movs	r3, r0
 8004b14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b1e:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	0013      	movs	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	00da      	lsls	r2, r3, #3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	0d1b      	lsrs	r3, r3, #20
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b30:	4353      	muls	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b34:	e068      	b.n	8004c08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	23c0      	movs	r3, #192	@ 0xc0
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d10a      	bne.n	8004b56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	2117      	movs	r1, #23
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	d055      	beq.n	8004c08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b5c:	f7fd ffc8 	bl	8002af0 <HAL_GetTick>
 8004b60:	0002      	movs	r2, r0
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d902      	bls.n	8004b72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d142      	bne.n	8004bf8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	21e0      	movs	r1, #224	@ 0xe0
 8004b7e:	438a      	bics	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	2382      	movs	r3, #130	@ 0x82
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d113      	bne.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d005      	beq.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d107      	bne.n	8004bb6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2140      	movs	r1, #64	@ 0x40
 8004bb2:	438a      	bics	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d110      	bne.n	8004be4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4916      	ldr	r1, [pc, #88]	@ (8004c28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004bce:	400a      	ands	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2180      	movs	r1, #128	@ 0x80
 8004bde:	0189      	lsls	r1, r1, #6
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	225d      	movs	r2, #93	@ 0x5d
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	225c      	movs	r2, #92	@ 0x5c
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e010      	b.n	8004c1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d18e      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b00a      	add	sp, #40	@ 0x28
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	20000000 	.word	0x20000000
 8004c28:	ffffdfff 	.word	0xffffdfff

08004c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	23c0      	movs	r3, #192	@ 0xc0
 8004c3c:	0159      	lsls	r1, r3, #5
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	0013      	movs	r3, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	f7ff ff4e 	bl	8004ae8 <SPI_WaitFifoStateUntilTimeout>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d007      	beq.n	8004c60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c54:	2220      	movs	r2, #32
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e027      	b.n	8004cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	0013      	movs	r3, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	@ 0x80
 8004c6e:	f7ff fead 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d007      	beq.n	8004c86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e014      	b.n	8004cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	23c0      	movs	r3, #192	@ 0xc0
 8004c8a:	00d9      	lsls	r1, r3, #3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	0013      	movs	r3, r2
 8004c94:	2200      	movs	r2, #0
 8004c96:	f7ff ff27 	bl	8004ae8 <SPI_WaitFifoStateUntilTimeout>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d007      	beq.n	8004cae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e000      	b.n	8004cb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b004      	add	sp, #16
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e042      	b.n	8004d50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223d      	movs	r2, #61	@ 0x3d
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	223c      	movs	r2, #60	@ 0x3c
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f839 	bl	8004d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	223d      	movs	r2, #61	@ 0x3d
 8004cea:	2102      	movs	r1, #2
 8004cec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	0010      	movs	r0, r2
 8004cfa:	f000 f995 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2246      	movs	r2, #70	@ 0x46
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223e      	movs	r2, #62	@ 0x3e
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223f      	movs	r2, #63	@ 0x3f
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2240      	movs	r2, #64	@ 0x40
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2241      	movs	r2, #65	@ 0x41
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2242      	movs	r2, #66	@ 0x42
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2243      	movs	r2, #67	@ 0x43
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2244      	movs	r2, #68	@ 0x44
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2245      	movs	r2, #69	@ 0x45
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	223d      	movs	r2, #61	@ 0x3d
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223d      	movs	r2, #61	@ 0x3d
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e03b      	b.n	8004df8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	223d      	movs	r2, #61	@ 0x3d
 8004d84:	2102      	movs	r1, #2
 8004d86:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2101      	movs	r1, #1
 8004d94:	430a      	orrs	r2, r1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_TIM_Base_Start_IT+0x98>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	05db      	lsls	r3, r3, #23
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <HAL_TIM_Base_Start_IT+0x9c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a12      	ldr	r2, [pc, #72]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d111      	bne.n	8004de6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2207      	movs	r2, #7
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d010      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2101      	movs	r1, #1
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	e007      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b004      	add	sp, #16
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40014000 	.word	0x40014000

08004e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d021      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	4013      	ands	r3, r2
 8004e32:	d01d      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4252      	negs	r2, r2
 8004e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f8d0 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 f8c3 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 f8cf 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2204      	movs	r2, #4
 8004e74:	4013      	ands	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d01e      	beq.n	8004ebe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2205      	movs	r2, #5
 8004e86:	4252      	negs	r2, r2
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	23c0      	movs	r3, #192	@ 0xc0
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 f8a9 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004ea6:	e007      	b.n	8004eb8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 f89c 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f8a8 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d021      	beq.n	8004f0a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2209      	movs	r2, #9
 8004ed4:	4252      	negs	r2, r2
 8004ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 f883 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e007      	b.n	8004f04 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f876 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f882 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d022      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	d01e      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2211      	movs	r2, #17
 8004f20:	4252      	negs	r2, r2
 8004f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2208      	movs	r2, #8
 8004f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	23c0      	movs	r3, #192	@ 0xc0
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 f85c 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e007      	b.n	8004f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f84f 	bl	8004fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 f85b 	bl	8005008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00c      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	4013      	ands	r3, r2
 8004f66:	d008      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	4252      	negs	r2, r2
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fd fcc9 	bl	800290c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d00c      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	4013      	ands	r3, r2
 8004f88:	d008      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2281      	movs	r2, #129	@ 0x81
 8004f90:	4252      	negs	r2, r2
 8004f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 f8dc 	bl	8005154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d00c      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2240      	movs	r2, #64	@ 0x40
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d008      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2241      	movs	r2, #65	@ 0x41
 8004fb2:	4252      	negs	r2, r2
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 f82d 	bl	8005018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d008      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2221      	movs	r2, #33	@ 0x21
 8004fd4:	4252      	negs	r2, r2
 8004fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f8b2 	bl	8005144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b004      	add	sp, #16
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005010:	46c0      	nop			@ (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3b      	ldr	r2, [pc, #236]	@ (8005128 <TIM_Base_SetConfig+0x100>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d008      	beq.n	8005052 <TIM_Base_SetConfig+0x2a>
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	05db      	lsls	r3, r3, #23
 8005046:	429a      	cmp	r2, r3
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x2a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a37      	ldr	r2, [pc, #220]	@ (800512c <TIM_Base_SetConfig+0x104>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2270      	movs	r2, #112	@ 0x70
 8005056:	4393      	bics	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <TIM_Base_SetConfig+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	05db      	lsls	r3, r3, #23
 8005072:	429a      	cmp	r2, r3
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <TIM_Base_SetConfig+0x104>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_Base_SetConfig+0x108>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <TIM_Base_SetConfig+0x10c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	@ (8005138 <TIM_Base_SetConfig+0x110>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0x76>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a28      	ldr	r2, [pc, #160]	@ (800513c <TIM_Base_SetConfig+0x114>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <TIM_Base_SetConfig+0x118>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2280      	movs	r2, #128	@ 0x80
 80050b4:	4393      	bics	r3, r2
 80050b6:	001a      	movs	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a13      	ldr	r2, [pc, #76]	@ (8005128 <TIM_Base_SetConfig+0x100>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_Base_SetConfig+0xce>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a14      	ldr	r2, [pc, #80]	@ (8005134 <TIM_Base_SetConfig+0x10c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_Base_SetConfig+0xce>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a13      	ldr	r2, [pc, #76]	@ (8005138 <TIM_Base_SetConfig+0x110>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_Base_SetConfig+0xce>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a12      	ldr	r2, [pc, #72]	@ (800513c <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d103      	bne.n	80050fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	2b01      	cmp	r3, #1
 800510e:	d106      	bne.n	800511e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2201      	movs	r2, #1
 8005116:	4393      	bics	r3, r2
 8005118:	001a      	movs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]
  }
}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40000400 	.word	0x40000400
 8005130:	40002000 	.word	0x40002000
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800
 8005140:	fffffcff 	.word	0xfffffcff

08005144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800515c:	46c0      	nop			@ (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e044      	b.n	8005200 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2278      	movs	r2, #120	@ 0x78
 8005182:	2100      	movs	r1, #0
 8005184:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0018      	movs	r0, r3
 800518a:	f7fb fa19 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	@ 0x24
 8005192:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	438a      	bics	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 fa14 	bl	80055dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f828 	bl	800520c <UART_SetConfig>
 80051bc:	0003      	movs	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e01c      	b.n	8005200 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	490d      	ldr	r1, [pc, #52]	@ (8005208 <HAL_UART_Init+0xa4>)
 80051d2:	400a      	ands	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	212a      	movs	r1, #42	@ 0x2a
 80051e2:	438a      	bics	r2, r1
 80051e4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 faa3 	bl	8005744 <UART_CheckIdleState>
 80051fe:	0003      	movs	r3, r0
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b002      	add	sp, #8
 8005206:	bd80      	pop	{r7, pc}
 8005208:	ffffb7ff 	.word	0xffffb7ff

0800520c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005214:	231e      	movs	r3, #30
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4abe      	ldr	r2, [pc, #760]	@ (8005534 <UART_SetConfig+0x328>)
 800523c:	4013      	ands	r3, r2
 800523e:	0019      	movs	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4ab9      	ldr	r2, [pc, #740]	@ (8005538 <UART_SetConfig+0x32c>)
 8005252:	4013      	ands	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4ab0      	ldr	r2, [pc, #704]	@ (800553c <UART_SetConfig+0x330>)
 800527a:	4013      	ands	r3, r2
 800527c:	0019      	movs	r1, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4aac      	ldr	r2, [pc, #688]	@ (8005540 <UART_SetConfig+0x334>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d127      	bne.n	80052e2 <UART_SetConfig+0xd6>
 8005292:	4bac      	ldr	r3, [pc, #688]	@ (8005544 <UART_SetConfig+0x338>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	2203      	movs	r2, #3
 8005298:	4013      	ands	r3, r2
 800529a:	2b03      	cmp	r3, #3
 800529c:	d00d      	beq.n	80052ba <UART_SetConfig+0xae>
 800529e:	d81b      	bhi.n	80052d8 <UART_SetConfig+0xcc>
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d014      	beq.n	80052ce <UART_SetConfig+0xc2>
 80052a4:	d818      	bhi.n	80052d8 <UART_SetConfig+0xcc>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <UART_SetConfig+0xa4>
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d00a      	beq.n	80052c4 <UART_SetConfig+0xb8>
 80052ae:	e013      	b.n	80052d8 <UART_SetConfig+0xcc>
 80052b0:	231f      	movs	r3, #31
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e0bd      	b.n	8005436 <UART_SetConfig+0x22a>
 80052ba:	231f      	movs	r3, #31
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	2202      	movs	r2, #2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e0b8      	b.n	8005436 <UART_SetConfig+0x22a>
 80052c4:	231f      	movs	r3, #31
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	2204      	movs	r2, #4
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e0b3      	b.n	8005436 <UART_SetConfig+0x22a>
 80052ce:	231f      	movs	r3, #31
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2208      	movs	r2, #8
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e0ae      	b.n	8005436 <UART_SetConfig+0x22a>
 80052d8:	231f      	movs	r3, #31
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	2210      	movs	r2, #16
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e0a9      	b.n	8005436 <UART_SetConfig+0x22a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a98      	ldr	r2, [pc, #608]	@ (8005548 <UART_SetConfig+0x33c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d134      	bne.n	8005356 <UART_SetConfig+0x14a>
 80052ec:	4b95      	ldr	r3, [pc, #596]	@ (8005544 <UART_SetConfig+0x338>)
 80052ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052f0:	23c0      	movs	r3, #192	@ 0xc0
 80052f2:	029b      	lsls	r3, r3, #10
 80052f4:	4013      	ands	r3, r2
 80052f6:	22c0      	movs	r2, #192	@ 0xc0
 80052f8:	0292      	lsls	r2, r2, #10
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <UART_SetConfig+0x122>
 80052fe:	22c0      	movs	r2, #192	@ 0xc0
 8005300:	0292      	lsls	r2, r2, #10
 8005302:	4293      	cmp	r3, r2
 8005304:	d822      	bhi.n	800534c <UART_SetConfig+0x140>
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	0292      	lsls	r2, r2, #10
 800530a:	4293      	cmp	r3, r2
 800530c:	d019      	beq.n	8005342 <UART_SetConfig+0x136>
 800530e:	2280      	movs	r2, #128	@ 0x80
 8005310:	0292      	lsls	r2, r2, #10
 8005312:	4293      	cmp	r3, r2
 8005314:	d81a      	bhi.n	800534c <UART_SetConfig+0x140>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <UART_SetConfig+0x118>
 800531a:	2280      	movs	r2, #128	@ 0x80
 800531c:	0252      	lsls	r2, r2, #9
 800531e:	4293      	cmp	r3, r2
 8005320:	d00a      	beq.n	8005338 <UART_SetConfig+0x12c>
 8005322:	e013      	b.n	800534c <UART_SetConfig+0x140>
 8005324:	231f      	movs	r3, #31
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e083      	b.n	8005436 <UART_SetConfig+0x22a>
 800532e:	231f      	movs	r3, #31
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2202      	movs	r2, #2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e07e      	b.n	8005436 <UART_SetConfig+0x22a>
 8005338:	231f      	movs	r3, #31
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2204      	movs	r2, #4
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e079      	b.n	8005436 <UART_SetConfig+0x22a>
 8005342:	231f      	movs	r3, #31
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2208      	movs	r2, #8
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e074      	b.n	8005436 <UART_SetConfig+0x22a>
 800534c:	231f      	movs	r3, #31
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2210      	movs	r2, #16
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e06f      	b.n	8005436 <UART_SetConfig+0x22a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7c      	ldr	r2, [pc, #496]	@ (800554c <UART_SetConfig+0x340>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d134      	bne.n	80053ca <UART_SetConfig+0x1be>
 8005360:	4b78      	ldr	r3, [pc, #480]	@ (8005544 <UART_SetConfig+0x338>)
 8005362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005364:	23c0      	movs	r3, #192	@ 0xc0
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	4013      	ands	r3, r2
 800536a:	22c0      	movs	r2, #192	@ 0xc0
 800536c:	0312      	lsls	r2, r2, #12
 800536e:	4293      	cmp	r3, r2
 8005370:	d017      	beq.n	80053a2 <UART_SetConfig+0x196>
 8005372:	22c0      	movs	r2, #192	@ 0xc0
 8005374:	0312      	lsls	r2, r2, #12
 8005376:	4293      	cmp	r3, r2
 8005378:	d822      	bhi.n	80053c0 <UART_SetConfig+0x1b4>
 800537a:	2280      	movs	r2, #128	@ 0x80
 800537c:	0312      	lsls	r2, r2, #12
 800537e:	4293      	cmp	r3, r2
 8005380:	d019      	beq.n	80053b6 <UART_SetConfig+0x1aa>
 8005382:	2280      	movs	r2, #128	@ 0x80
 8005384:	0312      	lsls	r2, r2, #12
 8005386:	4293      	cmp	r3, r2
 8005388:	d81a      	bhi.n	80053c0 <UART_SetConfig+0x1b4>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <UART_SetConfig+0x18c>
 800538e:	2280      	movs	r2, #128	@ 0x80
 8005390:	02d2      	lsls	r2, r2, #11
 8005392:	4293      	cmp	r3, r2
 8005394:	d00a      	beq.n	80053ac <UART_SetConfig+0x1a0>
 8005396:	e013      	b.n	80053c0 <UART_SetConfig+0x1b4>
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e049      	b.n	8005436 <UART_SetConfig+0x22a>
 80053a2:	231f      	movs	r3, #31
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2202      	movs	r2, #2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e044      	b.n	8005436 <UART_SetConfig+0x22a>
 80053ac:	231f      	movs	r3, #31
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2204      	movs	r2, #4
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e03f      	b.n	8005436 <UART_SetConfig+0x22a>
 80053b6:	231f      	movs	r3, #31
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2208      	movs	r2, #8
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e03a      	b.n	8005436 <UART_SetConfig+0x22a>
 80053c0:	231f      	movs	r3, #31
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2210      	movs	r2, #16
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e035      	b.n	8005436 <UART_SetConfig+0x22a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a60      	ldr	r2, [pc, #384]	@ (8005550 <UART_SetConfig+0x344>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d104      	bne.n	80053de <UART_SetConfig+0x1d2>
 80053d4:	231f      	movs	r3, #31
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e02b      	b.n	8005436 <UART_SetConfig+0x22a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a5c      	ldr	r2, [pc, #368]	@ (8005554 <UART_SetConfig+0x348>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d104      	bne.n	80053f2 <UART_SetConfig+0x1e6>
 80053e8:	231f      	movs	r3, #31
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e021      	b.n	8005436 <UART_SetConfig+0x22a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a58      	ldr	r2, [pc, #352]	@ (8005558 <UART_SetConfig+0x34c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d104      	bne.n	8005406 <UART_SetConfig+0x1fa>
 80053fc:	231f      	movs	r3, #31
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e017      	b.n	8005436 <UART_SetConfig+0x22a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a54      	ldr	r2, [pc, #336]	@ (800555c <UART_SetConfig+0x350>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d104      	bne.n	800541a <UART_SetConfig+0x20e>
 8005410:	231f      	movs	r3, #31
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e00d      	b.n	8005436 <UART_SetConfig+0x22a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a50      	ldr	r2, [pc, #320]	@ (8005560 <UART_SetConfig+0x354>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d104      	bne.n	800542e <UART_SetConfig+0x222>
 8005424:	231f      	movs	r3, #31
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e003      	b.n	8005436 <UART_SetConfig+0x22a>
 800542e:	231f      	movs	r3, #31
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	2210      	movs	r2, #16
 8005434:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	429a      	cmp	r2, r3
 8005440:	d15c      	bne.n	80054fc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8005442:	231f      	movs	r3, #31
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d015      	beq.n	8005478 <UART_SetConfig+0x26c>
 800544c:	dc18      	bgt.n	8005480 <UART_SetConfig+0x274>
 800544e:	2b04      	cmp	r3, #4
 8005450:	d00d      	beq.n	800546e <UART_SetConfig+0x262>
 8005452:	dc15      	bgt.n	8005480 <UART_SetConfig+0x274>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <UART_SetConfig+0x252>
 8005458:	2b02      	cmp	r3, #2
 800545a:	d005      	beq.n	8005468 <UART_SetConfig+0x25c>
 800545c:	e010      	b.n	8005480 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800545e:	f7fe ff5d 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8005462:	0003      	movs	r3, r0
 8005464:	61bb      	str	r3, [r7, #24]
        break;
 8005466:	e012      	b.n	800548e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <UART_SetConfig+0x358>)
 800546a:	61bb      	str	r3, [r7, #24]
        break;
 800546c:	e00f      	b.n	800548e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546e:	f7fe fed9 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 8005472:	0003      	movs	r3, r0
 8005474:	61bb      	str	r3, [r7, #24]
        break;
 8005476:	e00a      	b.n	800548e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	61bb      	str	r3, [r7, #24]
        break;
 800547e:	e006      	b.n	800548e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005484:	231e      	movs	r3, #30
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
        break;
 800548c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d100      	bne.n	8005496 <UART_SetConfig+0x28a>
 8005494:	e095      	b.n	80055c2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	005a      	lsls	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	18d2      	adds	r2, r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0019      	movs	r1, r3
 80054a8:	0010      	movs	r0, r2
 80054aa:	f7fa fe2d 	bl	8000108 <__udivsi3>
 80054ae:	0003      	movs	r3, r0
 80054b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d91c      	bls.n	80054f2 <UART_SetConfig+0x2e6>
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	2380      	movs	r3, #128	@ 0x80
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	429a      	cmp	r2, r3
 80054c0:	d217      	bcs.n	80054f2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	200e      	movs	r0, #14
 80054c8:	183b      	adds	r3, r7, r0
 80054ca:	210f      	movs	r1, #15
 80054cc:	438a      	bics	r2, r1
 80054ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2207      	movs	r2, #7
 80054d8:	4013      	ands	r3, r2
 80054da:	b299      	uxth	r1, r3
 80054dc:	183b      	adds	r3, r7, r0
 80054de:	183a      	adds	r2, r7, r0
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	183a      	adds	r2, r7, r0
 80054ec:	8812      	ldrh	r2, [r2, #0]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	e067      	b.n	80055c2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80054f2:	231e      	movs	r3, #30
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e062      	b.n	80055c2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054fc:	231f      	movs	r3, #31
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b08      	cmp	r3, #8
 8005504:	d030      	beq.n	8005568 <UART_SetConfig+0x35c>
 8005506:	dc33      	bgt.n	8005570 <UART_SetConfig+0x364>
 8005508:	2b04      	cmp	r3, #4
 800550a:	d00d      	beq.n	8005528 <UART_SetConfig+0x31c>
 800550c:	dc30      	bgt.n	8005570 <UART_SetConfig+0x364>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <UART_SetConfig+0x30c>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d005      	beq.n	8005522 <UART_SetConfig+0x316>
 8005516:	e02b      	b.n	8005570 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fe ff00 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 800551c:	0003      	movs	r3, r0
 800551e:	61bb      	str	r3, [r7, #24]
        break;
 8005520:	e02d      	b.n	800557e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <UART_SetConfig+0x358>)
 8005524:	61bb      	str	r3, [r7, #24]
        break;
 8005526:	e02a      	b.n	800557e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005528:	f7fe fe7c 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 800552c:	0003      	movs	r3, r0
 800552e:	61bb      	str	r3, [r7, #24]
        break;
 8005530:	e025      	b.n	800557e <UART_SetConfig+0x372>
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	efff69f3 	.word	0xefff69f3
 8005538:	ffffcfff 	.word	0xffffcfff
 800553c:	fffff4ff 	.word	0xfffff4ff
 8005540:	40013800 	.word	0x40013800
 8005544:	40021000 	.word	0x40021000
 8005548:	40004400 	.word	0x40004400
 800554c:	40004800 	.word	0x40004800
 8005550:	40004c00 	.word	0x40004c00
 8005554:	40005000 	.word	0x40005000
 8005558:	40011400 	.word	0x40011400
 800555c:	40011800 	.word	0x40011800
 8005560:	40011c00 	.word	0x40011c00
 8005564:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	61bb      	str	r3, [r7, #24]
        break;
 800556e:	e006      	b.n	800557e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005574:	231e      	movs	r3, #30
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
        break;
 800557c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01e      	beq.n	80055c2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	085a      	lsrs	r2, r3, #1
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	18d2      	adds	r2, r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	0019      	movs	r1, r3
 8005594:	0010      	movs	r0, r2
 8005596:	f7fa fdb7 	bl	8000108 <__udivsi3>
 800559a:	0003      	movs	r3, r0
 800559c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b0f      	cmp	r3, #15
 80055a2:	d90a      	bls.n	80055ba <UART_SetConfig+0x3ae>
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	025b      	lsls	r3, r3, #9
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d205      	bcs.n	80055ba <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60da      	str	r2, [r3, #12]
 80055b8:	e003      	b.n	80055c2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80055ba:	231e      	movs	r3, #30
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055ce:	231e      	movs	r3, #30
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	781b      	ldrb	r3, [r3, #0]
}
 80055d4:	0018      	movs	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b008      	add	sp, #32
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	2208      	movs	r2, #8
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00b      	beq.n	8005606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005720 <UART_AdvFeatureConfig+0x144>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	2201      	movs	r2, #1
 800560c:	4013      	ands	r3, r2
 800560e:	d00b      	beq.n	8005628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a43      	ldr	r2, [pc, #268]	@ (8005724 <UART_AdvFeatureConfig+0x148>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	d00b      	beq.n	800564a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a3b      	ldr	r2, [pc, #236]	@ (8005728 <UART_AdvFeatureConfig+0x14c>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	2204      	movs	r2, #4
 8005650:	4013      	ands	r3, r2
 8005652:	d00b      	beq.n	800566c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4a34      	ldr	r2, [pc, #208]	@ (800572c <UART_AdvFeatureConfig+0x150>)
 800565c:	4013      	ands	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	2210      	movs	r2, #16
 8005672:	4013      	ands	r3, r2
 8005674:	d00b      	beq.n	800568e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <UART_AdvFeatureConfig+0x154>)
 800567e:	4013      	ands	r3, r2
 8005680:	0019      	movs	r1, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005692:	2220      	movs	r2, #32
 8005694:	4013      	ands	r3, r2
 8005696:	d00b      	beq.n	80056b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <UART_AdvFeatureConfig+0x158>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	2240      	movs	r2, #64	@ 0x40
 80056b6:	4013      	ands	r3, r2
 80056b8:	d01d      	beq.n	80056f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005738 <UART_AdvFeatureConfig+0x15c>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	035b      	lsls	r3, r3, #13
 80056da:	429a      	cmp	r2, r3
 80056dc:	d10b      	bne.n	80056f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a15      	ldr	r2, [pc, #84]	@ (800573c <UART_AdvFeatureConfig+0x160>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	2280      	movs	r2, #128	@ 0x80
 80056fc:	4013      	ands	r3, r2
 80056fe:	d00b      	beq.n	8005718 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4a0e      	ldr	r2, [pc, #56]	@ (8005740 <UART_AdvFeatureConfig+0x164>)
 8005708:	4013      	ands	r3, r2
 800570a:	0019      	movs	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffff7fff 	.word	0xffff7fff
 8005724:	fffdffff 	.word	0xfffdffff
 8005728:	fffeffff 	.word	0xfffeffff
 800572c:	fffbffff 	.word	0xfffbffff
 8005730:	ffffefff 	.word	0xffffefff
 8005734:	ffffdfff 	.word	0xffffdfff
 8005738:	ffefffff 	.word	0xffefffff
 800573c:	ff9fffff 	.word	0xff9fffff
 8005740:	fff7ffff 	.word	0xfff7ffff

08005744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b092      	sub	sp, #72	@ 0x48
 8005748:	af02      	add	r7, sp, #8
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2284      	movs	r2, #132	@ 0x84
 8005750:	2100      	movs	r1, #0
 8005752:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005754:	f7fd f9cc 	bl	8002af0 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2208      	movs	r2, #8
 8005764:	4013      	ands	r3, r2
 8005766:	2b08      	cmp	r3, #8
 8005768:	d12c      	bne.n	80057c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576c:	2280      	movs	r2, #128	@ 0x80
 800576e:	0391      	lsls	r1, r2, #14
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4a46      	ldr	r2, [pc, #280]	@ (800588c <UART_CheckIdleState+0x148>)
 8005774:	9200      	str	r2, [sp, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	f000 f88c 	bl	8005894 <UART_WaitOnFlagUntilTimeout>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d021      	beq.n	80057c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005788:	63bb      	str	r3, [r7, #56]	@ 0x38
 800578a:	2301      	movs	r3, #1
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2180      	movs	r1, #128	@ 0x80
 80057a2:	438a      	bics	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2278      	movs	r2, #120	@ 0x78
 80057bc:	2100      	movs	r1, #0
 80057be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e05f      	b.n	8005884 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2204      	movs	r2, #4
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d146      	bne.n	8005860 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d4:	2280      	movs	r2, #128	@ 0x80
 80057d6:	03d1      	lsls	r1, r2, #15
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4a2c      	ldr	r2, [pc, #176]	@ (800588c <UART_CheckIdleState+0x148>)
 80057dc:	9200      	str	r2, [sp, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 f858 	bl	8005894 <UART_WaitOnFlagUntilTimeout>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d03b      	beq.n	8005860 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f2:	2301      	movs	r3, #1
 80057f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f383 8810 	msr	PRIMASK, r3
}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4921      	ldr	r1, [pc, #132]	@ (8005890 <UART_CheckIdleState+0x14c>)
 800580a:	400a      	ands	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f383 8810 	msr	PRIMASK, r3
}
 8005818:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581a:	f3ef 8310 	mrs	r3, PRIMASK
 800581e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005820:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	633b      	str	r3, [r7, #48]	@ 0x30
 8005824:	2301      	movs	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2101      	movs	r1, #1
 800583c:	438a      	bics	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f383 8810 	msr	PRIMASK, r3
}
 800584a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2280      	movs	r2, #128	@ 0x80
 8005850:	2120      	movs	r1, #32
 8005852:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2278      	movs	r2, #120	@ 0x78
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e011      	b.n	8005884 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	2120      	movs	r1, #32
 800586c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2278      	movs	r2, #120	@ 0x78
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	0018      	movs	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	b010      	add	sp, #64	@ 0x40
 800588a:	bd80      	pop	{r7, pc}
 800588c:	01ffffff 	.word	0x01ffffff
 8005890:	fffffedf 	.word	0xfffffedf

08005894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a4:	e051      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	3301      	adds	r3, #1
 80058aa:	d04e      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fd f920 	bl	8002af0 <HAL_GetTick>
 80058b0:	0002      	movs	r2, r0
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e051      	b.n	800596a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2204      	movs	r2, #4
 80058ce:	4013      	ands	r3, r2
 80058d0:	d03b      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d038      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d035      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	2208      	movs	r2, #8
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d111      	bne.n	8005910 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f000 f83c 	bl	8005974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2284      	movs	r2, #132	@ 0x84
 8005900:	2108      	movs	r1, #8
 8005902:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2278      	movs	r2, #120	@ 0x78
 8005908:	2100      	movs	r1, #0
 800590a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e02c      	b.n	800596a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	401a      	ands	r2, r3
 800591c:	2380      	movs	r3, #128	@ 0x80
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	429a      	cmp	r2, r3
 8005922:	d112      	bne.n	800594a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	0112      	lsls	r2, r2, #4
 800592c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	0018      	movs	r0, r3
 8005932:	f000 f81f 	bl	8005974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2284      	movs	r2, #132	@ 0x84
 800593a:	2120      	movs	r1, #32
 800593c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2278      	movs	r2, #120	@ 0x78
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e00f      	b.n	800596a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	425a      	negs	r2, r3
 800595a:	4153      	adcs	r3, r2
 800595c:	b2db      	uxtb	r3, r3
 800595e:	001a      	movs	r2, r3
 8005960:	1dfb      	adds	r3, r7, #7
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d09e      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	@ 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597c:	f3ef 8310 	mrs	r3, PRIMASK
 8005980:	617b      	str	r3, [r7, #20]
  return(result);
 8005982:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4926      	ldr	r1, [pc, #152]	@ (8005a38 <UART_EndRxTransfer+0xc4>)
 800599e:	400a      	ands	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f383 8810 	msr	PRIMASK, r3
}
 80059ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	623b      	str	r3, [r7, #32]
  return(result);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	438a      	bics	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d118      	bne.n	8005a1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	2301      	movs	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2110      	movs	r1, #16
 8005a0a:	438a      	bics	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	2120      	movs	r1, #32
 8005a20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b00e      	add	sp, #56	@ 0x38
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	fffffedf 	.word	0xfffffedf

08005a3c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6892      	ldr	r2, [r2, #8]
 8005a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6852      	ldr	r2, [r2, #4]
 8005aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d103      	bne.n	8005ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b004      	add	sp, #16
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd4 <xTaskIncrementTick+0x104>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d000      	beq.n	8005ae4 <xTaskIncrementTick+0x14>
 8005ae2:	e06d      	b.n	8005bc0 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd8 <xTaskIncrementTick+0x108>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd8 <xTaskIncrementTick+0x108>)
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d118      	bne.n	8005b2a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b38      	ldr	r3, [pc, #224]	@ (8005bdc <xTaskIncrementTick+0x10c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <xTaskIncrementTick+0x38>
 8005b02:	b672      	cpsid	i
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	e7fd      	b.n	8005b04 <xTaskIncrementTick+0x34>
 8005b08:	4b34      	ldr	r3, [pc, #208]	@ (8005bdc <xTaskIncrementTick+0x10c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	4b34      	ldr	r3, [pc, #208]	@ (8005be0 <xTaskIncrementTick+0x110>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b32      	ldr	r3, [pc, #200]	@ (8005bdc <xTaskIncrementTick+0x10c>)
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	4b32      	ldr	r3, [pc, #200]	@ (8005be0 <xTaskIncrementTick+0x110>)
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4b31      	ldr	r3, [pc, #196]	@ (8005be4 <xTaskIncrementTick+0x114>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	4b30      	ldr	r3, [pc, #192]	@ (8005be4 <xTaskIncrementTick+0x114>)
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f000 f8b9 	bl	8005c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005be8 <xTaskIncrementTick+0x118>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d34a      	bcc.n	8005bca <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b34:	4b29      	ldr	r3, [pc, #164]	@ (8005bdc <xTaskIncrementTick+0x10c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <xTaskIncrementTick+0x72>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xTaskIncrementTick+0x74>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	4b27      	ldr	r3, [pc, #156]	@ (8005be8 <xTaskIncrementTick+0x118>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4252      	negs	r2, r2
 8005b4e:	601a      	str	r2, [r3, #0]
					break;
 8005b50:	e03b      	b.n	8005bca <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b52:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <xTaskIncrementTick+0x10c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d203      	bcs.n	8005b72 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005be8 <xTaskIncrementTick+0x118>)
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
						break;
 8005b70:	e02b      	b.n	8005bca <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff ff82 	bl	8005a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	3318      	adds	r3, #24
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff ff79 	bl	8005a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b92:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <xTaskIncrementTick+0x11c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <xTaskIncrementTick+0xd2>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <xTaskIncrementTick+0x11c>)
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	0013      	movs	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a10      	ldr	r2, [pc, #64]	@ (8005bf0 <xTaskIncrementTick+0x120>)
 8005bb0:	189a      	adds	r2, r3, r2
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	0010      	movs	r0, r2
 8005bba:	f7ff ff3f 	bl	8005a3c <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bbe:	e7b9      	b.n	8005b34 <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <xTaskIncrementTick+0x124>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <xTaskIncrementTick+0x124>)
 8005bc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b006      	add	sp, #24
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000eac 	.word	0x20000eac
 8005bd8:	20000e94 	.word	0x20000e94
 8005bdc:	20000e8c 	.word	0x20000e8c
 8005be0:	20000e90 	.word	0x20000e90
 8005be4:	20000ea4 	.word	0x20000ea4
 8005be8:	20000ea8 	.word	0x20000ea8
 8005bec:	20000e98 	.word	0x20000e98
 8005bf0:	20000a2c 	.word	0x20000a2c
 8005bf4:	20000e9c 	.word	0x20000e9c

08005bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bfe:	4b22      	ldr	r3, [pc, #136]	@ (8005c88 <vTaskSwitchContext+0x90>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c06:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <vTaskSwitchContext+0x94>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c0c:	e038      	b.n	8005c80 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8005c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c8c <vTaskSwitchContext+0x94>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c14:	4b1e      	ldr	r3, [pc, #120]	@ (8005c90 <vTaskSwitchContext+0x98>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	e008      	b.n	8005c2e <vTaskSwitchContext+0x36>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <vTaskSwitchContext+0x30>
 8005c22:	b672      	cpsid	i
 8005c24:	46c0      	nop			@ (mov r8, r8)
 8005c26:	e7fd      	b.n	8005c24 <vTaskSwitchContext+0x2c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	4919      	ldr	r1, [pc, #100]	@ (8005c94 <vTaskSwitchContext+0x9c>)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	0013      	movs	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	585b      	ldr	r3, [r3, r1]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ed      	beq.n	8005c1c <vTaskSwitchContext+0x24>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	0013      	movs	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a12      	ldr	r2, [pc, #72]	@ (8005c94 <vTaskSwitchContext+0x9c>)
 8005c4c:	189b      	adds	r3, r3, r2
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d104      	bne.n	8005c70 <vTaskSwitchContext+0x78>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <vTaskSwitchContext+0xa0>)
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <vTaskSwitchContext+0x98>)
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000eac 	.word	0x20000eac
 8005c8c:	20000ea0 	.word	0x20000ea0
 8005c90:	20000e98 	.word	0x20000e98
 8005c94:	20000a2c 	.word	0x20000a2c
 8005c98:	20000a28 	.word	0x20000a28

08005c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cdc <prvResetNextTaskUnblockTime+0x40>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <prvResetNextTaskUnblockTime+0x14>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <prvResetNextTaskUnblockTime+0x16>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x44>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4252      	negs	r2, r2
 8005cbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cbe:	e008      	b.n	8005cd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cc0:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <prvResetNextTaskUnblockTime+0x40>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x44>)
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b002      	add	sp, #8
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	20000e8c 	.word	0x20000e8c
 8005ce0:	20000ea8 	.word	0x20000ea8

08005ce4 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005cee:	f3ef 8010 	mrs	r0, PRIMASK
 8005cf2:	b672      	cpsid	i
 8005cf4:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	0018      	movs	r0, r3

08005cfa <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005cfa:	f380 8810 	msr	PRIMASK, r0
 8005cfe:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
	...

08005d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d10:	f3ef 8009 	mrs	r0, PSP
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <pxCurrentTCBConst>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	3820      	subs	r0, #32
 8005d1a:	6010      	str	r0, [r2, #0]
 8005d1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d1e:	4644      	mov	r4, r8
 8005d20:	464d      	mov	r5, r9
 8005d22:	4656      	mov	r6, sl
 8005d24:	465f      	mov	r7, fp
 8005d26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d28:	b508      	push	{r3, lr}
 8005d2a:	b672      	cpsid	i
 8005d2c:	f7ff ff64 	bl	8005bf8 <vTaskSwitchContext>
 8005d30:	b662      	cpsie	i
 8005d32:	bc0c      	pop	{r2, r3}
 8005d34:	6811      	ldr	r1, [r2, #0]
 8005d36:	6808      	ldr	r0, [r1, #0]
 8005d38:	3010      	adds	r0, #16
 8005d3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d3c:	46a0      	mov	r8, r4
 8005d3e:	46a9      	mov	r9, r5
 8005d40:	46b2      	mov	sl, r6
 8005d42:	46bb      	mov	fp, r7
 8005d44:	f380 8809 	msr	PSP, r0
 8005d48:	3820      	subs	r0, #32
 8005d4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d4c:	4718      	bx	r3
 8005d4e:	46c0      	nop			@ (mov r8, r8)

08005d50 <pxCurrentTCBConst>:
 8005d50:	20000a28 	.word	0x20000a28
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	46c0      	nop			@ (mov r8, r8)

08005d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d5e:	f7ff ffc6 	bl	8005cee <ulSetInterruptMaskFromISR>
 8005d62:	0003      	movs	r3, r0
 8005d64:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d66:	f7ff feb3 	bl	8005ad0 <xTaskIncrementTick>
 8005d6a:	1e03      	subs	r3, r0, #0
 8005d6c:	d003      	beq.n	8005d76 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <SysTick_Handler+0x30>)
 8005d70:	2280      	movs	r2, #128	@ 0x80
 8005d72:	0552      	lsls	r2, r2, #21
 8005d74:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff ffbe 	bl	8005cfa <vClearInterruptMaskFromISR>
}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b002      	add	sp, #8
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <__itoa>:
 8005d8c:	1e93      	subs	r3, r2, #2
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	000c      	movs	r4, r1
 8005d92:	2b22      	cmp	r3, #34	@ 0x22
 8005d94:	d904      	bls.n	8005da0 <__itoa+0x14>
 8005d96:	2300      	movs	r3, #0
 8005d98:	001c      	movs	r4, r3
 8005d9a:	700b      	strb	r3, [r1, #0]
 8005d9c:	0020      	movs	r0, r4
 8005d9e:	bd10      	pop	{r4, pc}
 8005da0:	2a0a      	cmp	r2, #10
 8005da2:	d109      	bne.n	8005db8 <__itoa+0x2c>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	da07      	bge.n	8005db8 <__itoa+0x2c>
 8005da8:	232d      	movs	r3, #45	@ 0x2d
 8005daa:	700b      	strb	r3, [r1, #0]
 8005dac:	2101      	movs	r1, #1
 8005dae:	4240      	negs	r0, r0
 8005db0:	1861      	adds	r1, r4, r1
 8005db2:	f000 f807 	bl	8005dc4 <__utoa>
 8005db6:	e7f1      	b.n	8005d9c <__itoa+0x10>
 8005db8:	2100      	movs	r1, #0
 8005dba:	e7f9      	b.n	8005db0 <__itoa+0x24>

08005dbc <itoa>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	f7ff ffe5 	bl	8005d8c <__itoa>
 8005dc2:	bd10      	pop	{r4, pc}

08005dc4 <__utoa>:
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	000c      	movs	r4, r1
 8005dc8:	0016      	movs	r6, r2
 8005dca:	b08d      	sub	sp, #52	@ 0x34
 8005dcc:	2225      	movs	r2, #37	@ 0x25
 8005dce:	0007      	movs	r7, r0
 8005dd0:	4915      	ldr	r1, [pc, #84]	@ (8005e28 <__utoa+0x64>)
 8005dd2:	a802      	add	r0, sp, #8
 8005dd4:	f000 f856 	bl	8005e84 <memcpy>
 8005dd8:	1e62      	subs	r2, r4, #1
 8005dda:	1eb3      	subs	r3, r6, #2
 8005ddc:	2500      	movs	r5, #0
 8005dde:	9201      	str	r2, [sp, #4]
 8005de0:	2b22      	cmp	r3, #34	@ 0x22
 8005de2:	d904      	bls.n	8005dee <__utoa+0x2a>
 8005de4:	7025      	strb	r5, [r4, #0]
 8005de6:	002c      	movs	r4, r5
 8005de8:	0020      	movs	r0, r4
 8005dea:	b00d      	add	sp, #52	@ 0x34
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dee:	0038      	movs	r0, r7
 8005df0:	0031      	movs	r1, r6
 8005df2:	f7fa fa0f 	bl	8000214 <__aeabi_uidivmod>
 8005df6:	000b      	movs	r3, r1
 8005df8:	aa02      	add	r2, sp, #8
 8005dfa:	5cd3      	ldrb	r3, [r2, r3]
 8005dfc:	9a01      	ldr	r2, [sp, #4]
 8005dfe:	0029      	movs	r1, r5
 8005e00:	3501      	adds	r5, #1
 8005e02:	5553      	strb	r3, [r2, r5]
 8005e04:	003b      	movs	r3, r7
 8005e06:	0007      	movs	r7, r0
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	d9f0      	bls.n	8005dee <__utoa+0x2a>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	0022      	movs	r2, r4
 8005e10:	5563      	strb	r3, [r4, r5]
 8005e12:	000b      	movs	r3, r1
 8005e14:	1ac8      	subs	r0, r1, r3
 8005e16:	4283      	cmp	r3, r0
 8005e18:	dde6      	ble.n	8005de8 <__utoa+0x24>
 8005e1a:	7810      	ldrb	r0, [r2, #0]
 8005e1c:	5ce5      	ldrb	r5, [r4, r3]
 8005e1e:	7015      	strb	r5, [r2, #0]
 8005e20:	54e0      	strb	r0, [r4, r3]
 8005e22:	3201      	adds	r2, #1
 8005e24:	3b01      	subs	r3, #1
 8005e26:	e7f5      	b.n	8005e14 <__utoa+0x50>
 8005e28:	08006a18 	.word	0x08006a18

08005e2c <memset>:
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	1882      	adds	r2, r0, r2
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <memset+0xa>
 8005e34:	4770      	bx	lr
 8005e36:	7019      	strb	r1, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	e7f9      	b.n	8005e30 <memset+0x4>

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	2600      	movs	r6, #0
 8005e40:	4c0c      	ldr	r4, [pc, #48]	@ (8005e74 <__libc_init_array+0x38>)
 8005e42:	4d0d      	ldr	r5, [pc, #52]	@ (8005e78 <__libc_init_array+0x3c>)
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	f000 f823 	bl	8005e98 <_init>
 8005e52:	4c0a      	ldr	r4, [pc, #40]	@ (8005e7c <__libc_init_array+0x40>)
 8005e54:	4d0a      	ldr	r5, [pc, #40]	@ (8005e80 <__libc_init_array+0x44>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	00b3      	lsls	r3, r6, #2
 8005e62:	58eb      	ldr	r3, [r5, r3]
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	00b3      	lsls	r3, r6, #2
 8005e6c:	58eb      	ldr	r3, [r5, r3]
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08006a40 	.word	0x08006a40
 8005e78:	08006a40 	.word	0x08006a40
 8005e7c:	08006a44 	.word	0x08006a44
 8005e80:	08006a40 	.word	0x08006a40

08005e84 <memcpy>:
 8005e84:	2300      	movs	r3, #0
 8005e86:	b510      	push	{r4, lr}
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d100      	bne.n	8005e8e <memcpy+0xa>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	5ccc      	ldrb	r4, [r1, r3]
 8005e90:	54c4      	strb	r4, [r0, r3]
 8005e92:	3301      	adds	r3, #1
 8005e94:	e7f8      	b.n	8005e88 <memcpy+0x4>
	...

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
