
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e30  08005e30  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005e30  08005e30  00007014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005e30  08005e30  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005e38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000014  08005e4c  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  08005e4c  00007af0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_line   000184c5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001f501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00016483  00000000  00000000  0001f56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003380  00000000  00000000  000359ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014c0  00000000  00000000  00038d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b4af3  00000000  00000000  0003a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000102f  00000000  00000000  000eed23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001bf73  00000000  00000000  000efd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010bcc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004adc  00000000  00000000  0010bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d00 	.word	0x08005d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08005d00 	.word	0x08005d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f000 f9c4 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f005 fc3f 	bl	8005ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 fa6b 	bl	8000900 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000438:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 800043c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000440:	20001af0 	.word	0x20001af0

08000444 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_COMP_IRQHandler>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_MspInit+0x50>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <HAL_MspInit+0x50>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x50>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x50>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <HAL_MspInit+0x50>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x50>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000482:	2302      	movs	r3, #2
 8000484:	425b      	negs	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	2103      	movs	r1, #3
 800048a:	0018      	movs	r0, r3
 800048c:	f001 f95a 	bl	8001744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	@ 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f005 fbf0 	bl	8005c94 <memset>
  if(hadc->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a35      	ldr	r2, [pc, #212]	@ (8000590 <HAL_ADC_MspInit+0xf4>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d163      	bne.n	8000586 <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004be:	4b35      	ldr	r3, [pc, #212]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b34      	ldr	r3, [pc, #208]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	4b31      	ldr	r3, [pc, #196]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b2e      	ldr	r3, [pc, #184]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b2d      	ldr	r3, [pc, #180]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000594 <HAL_ADC_MspInit+0xf8>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	193a      	adds	r2, r7, r4
 800050a:	2390      	movs	r3, #144	@ 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f001 faf3 	bl	8001afc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000518:	4a20      	ldr	r2, [pc, #128]	@ (800059c <HAL_ADC_MspInit+0x100>)
 800051a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800051c:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000522:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000528:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 800052a:	2280      	movs	r2, #128	@ 0x80
 800052c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800052e:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000538:	2280      	movs	r2, #128	@ 0x80
 800053a:	00d2      	lsls	r2, r2, #3
 800053c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800053e:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000540:	2220      	movs	r2, #32
 8000542:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000544:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 800054c:	0018      	movs	r0, r3
 800054e:	f001 f91f 	bl	8001790 <HAL_DMA_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000556:	f000 fc47 	bl	8000de8 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800055a:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <HAL_ADC_MspInit+0x104>)
 800055c:	23a8      	movs	r3, #168	@ 0xa8
 800055e:	58d3      	ldr	r3, [r2, r3]
 8000560:	490f      	ldr	r1, [pc, #60]	@ (80005a0 <HAL_ADC_MspInit+0x104>)
 8000562:	220f      	movs	r2, #15
 8000564:	4393      	bics	r3, r2
 8000566:	22a8      	movs	r2, #168	@ 0xa8
 8000568:	508b      	str	r3, [r1, r2]
 800056a:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <HAL_ADC_MspInit+0x104>)
 800056c:	23a8      	movs	r3, #168	@ 0xa8
 800056e:	58d3      	ldr	r3, [r2, r3]
 8000570:	490b      	ldr	r1, [pc, #44]	@ (80005a0 <HAL_ADC_MspInit+0x104>)
 8000572:	2201      	movs	r2, #1
 8000574:	4313      	orrs	r3, r2
 8000576:	22a8      	movs	r2, #168	@ 0xa8
 8000578:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 800057e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_ADC_MspInit+0xfc>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b00b      	add	sp, #44	@ 0x2c
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	40012400 	.word	0x40012400
 8000594:	40021000 	.word	0x40021000
 8000598:	200000d4 	.word	0x200000d4
 800059c:	40020008 	.word	0x40020008
 80005a0:	40020000 	.word	0x40020000

080005a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b08b      	sub	sp, #44	@ 0x2c
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	2414      	movs	r4, #20
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0018      	movs	r0, r3
 80005b2:	2314      	movs	r3, #20
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f005 fb6c 	bl	8005c94 <memset>
  if(huart->Instance==USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <HAL_UART_MspInit+0x90>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d132      	bne.n	800062c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	0289      	lsls	r1, r1, #10
 80005d0:	430a      	orrs	r2, r1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005d6:	69da      	ldr	r2, [r3, #28]
 80005d8:	2380      	movs	r3, #128	@ 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <HAL_UART_MspInit+0x94>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2202      	movs	r2, #2
 800060a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2201      	movs	r2, #1
 800061c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	187a      	adds	r2, r7, r1
 8000620:	2390      	movs	r3, #144	@ 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fa68 	bl	8001afc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00b      	add	sp, #44	@ 0x2c
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40004400 	.word	0x40004400
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800064c:	4b37      	ldr	r3, [pc, #220]	@ (800072c <HAL_InitTick+0xf0>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	4b36      	ldr	r3, [pc, #216]	@ (800072c <HAL_InitTick+0xf0>)
 8000652:	2102      	movs	r1, #2
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	4b34      	ldr	r3, [pc, #208]	@ (800072c <HAL_InitTick+0xf0>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	2202      	movs	r2, #2
 800065e:	4013      	ands	r3, r2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000664:	230c      	movs	r3, #12
 8000666:	18fa      	adds	r2, r7, r3
 8000668:	2410      	movs	r4, #16
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f002 f8cc 	bl	800280c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000680:	f002 f8ae 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8000684:	0003      	movs	r3, r0
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000688:	e004      	b.n	8000694 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800068a:	f002 f8a9 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 800068e:	0003      	movs	r3, r0
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000696:	4926      	ldr	r1, [pc, #152]	@ (8000730 <HAL_InitTick+0xf4>)
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff fd35 	bl	8000108 <__udivsi3>
 800069e:	0003      	movs	r3, r0
 80006a0:	3b01      	subs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <HAL_InitTick+0xf8>)
 80006a6:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <HAL_InitTick+0xfc>)
 80006a8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <HAL_InitTick+0xf8>)
 80006ac:	4a23      	ldr	r2, [pc, #140]	@ (800073c <HAL_InitTick+0x100>)
 80006ae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <HAL_InitTick+0xf8>)
 80006b2:	6a3a      	ldr	r2, [r7, #32]
 80006b4:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <HAL_InitTick+0xf8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <HAL_InitTick+0xf8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_InitTick+0xf8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006c8:	252b      	movs	r5, #43	@ 0x2b
 80006ca:	197c      	adds	r4, r7, r5
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <HAL_InitTick+0xf8>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 f9c6 	bl	8002a60 <HAL_TIM_Base_Init>
 80006d4:	0003      	movs	r3, r0
 80006d6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006d8:	197b      	adds	r3, r7, r5
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d11e      	bne.n	800071e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_InitTick+0xf8>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fa13 	bl	8002b10 <HAL_TIM_Base_Start_IT>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80006ee:	197b      	adds	r3, r7, r5
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d113      	bne.n	800071e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006f6:	2010      	movs	r0, #16
 80006f8:	f001 f839 	bl	800176e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d809      	bhi.n	8000716 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	2010      	movs	r0, #16
 800070a:	f001 f81b 	bl	8001744 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_InitTick+0x104>)
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e003      	b.n	800071e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000716:	232b      	movs	r3, #43	@ 0x2b
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800071e:	232b      	movs	r3, #43	@ 0x2b
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	781b      	ldrb	r3, [r3, #0]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b00c      	add	sp, #48	@ 0x30
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	000f4240 	.word	0x000f4240
 8000734:	20000030 	.word	0x20000030
 8000738:	40000400 	.word	0x40000400
 800073c:	000003e7 	.word	0x000003e7
 8000740:	20000008 	.word	0x20000008

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000758:	4b03      	ldr	r3, [pc, #12]	@ (8000768 <DMA1_Ch1_IRQHandler+0x14>)
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f8c6 	bl	80018ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	200000d4 	.word	0x200000d4

0800076c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <TIM3_IRQHandler+0x14>)
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fa1e 	bl	8002bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	20000030 	.word	0x20000030

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	801a      	strh	r2, [r3, #0]
        {2400, 200},
        {4000, 330}
    };

    //if (input <= pts[0].x) return pts[0].y;
    if (input >= pts[2].x) return pts[2].y;
 800079c:	4b33      	ldr	r3, [pc, #204]	@ (800086c <interpolation+0xdc>)
 800079e:	2208      	movs	r2, #8
 80007a0:	5e9b      	ldrsh	r3, [r3, r2]
 80007a2:	1dba      	adds	r2, r7, #6
 80007a4:	2100      	movs	r1, #0
 80007a6:	5e52      	ldrsh	r2, [r2, r1]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	db03      	blt.n	80007b4 <interpolation+0x24>
 80007ac:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <interpolation+0xdc>)
 80007ae:	220a      	movs	r2, #10
 80007b0:	5e9b      	ldrsh	r3, [r3, r2]
 80007b2:	e056      	b.n	8000862 <interpolation+0xd2>
    if (input <= pts[1].x) {
 80007b4:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <interpolation+0xdc>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ba:	1dba      	adds	r2, r7, #6
 80007bc:	2100      	movs	r1, #0
 80007be:	5e52      	ldrsh	r2, [r2, r1]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dc27      	bgt.n	8000814 <interpolation+0x84>
        return pts[0].y +
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <interpolation+0xdc>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ca:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x)+1;
 80007cc:	4b27      	ldr	r3, [pc, #156]	@ (800086c <interpolation+0xdc>)
 80007ce:	2206      	movs	r2, #6
 80007d0:	5e9b      	ldrsh	r3, [r3, r2]
 80007d2:	001a      	movs	r2, r3
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <interpolation+0xdc>)
 80007d6:	2102      	movs	r1, #2
 80007d8:	5e5b      	ldrsh	r3, [r3, r1]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	1dba      	adds	r2, r7, #6
 80007de:	2100      	movs	r1, #0
 80007e0:	5e52      	ldrsh	r2, [r2, r1]
 80007e2:	4922      	ldr	r1, [pc, #136]	@ (800086c <interpolation+0xdc>)
 80007e4:	2000      	movs	r0, #0
 80007e6:	5e09      	ldrsh	r1, [r1, r0]
 80007e8:	1a52      	subs	r2, r2, r1
 80007ea:	435a      	muls	r2, r3
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <interpolation+0xdc>)
 80007ee:	2104      	movs	r1, #4
 80007f0:	5e5b      	ldrsh	r3, [r3, r1]
 80007f2:	0019      	movs	r1, r3
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <interpolation+0xdc>)
 80007f6:	2000      	movs	r0, #0
 80007f8:	5e1b      	ldrsh	r3, [r3, r0]
 80007fa:	1acb      	subs	r3, r1, r3
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f7ff fd0c 	bl	800021c <__divsi3>
 8000804:	0003      	movs	r3, r0
        return pts[0].y +
 8000806:	b29b      	uxth	r3, r3
 8000808:	18e3      	adds	r3, r4, r3
 800080a:	b29b      	uxth	r3, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x)+1;
 800080c:	3301      	adds	r3, #1
 800080e:	b29b      	uxth	r3, r3
 8000810:	b21b      	sxth	r3, r3
 8000812:	e026      	b.n	8000862 <interpolation+0xd2>
    } else {

        return pts[1].y +
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <interpolation+0xdc>)
 8000816:	2206      	movs	r2, #6
 8000818:	5e9b      	ldrsh	r3, [r3, r2]
 800081a:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x)+1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <interpolation+0xdc>)
 800081e:	220a      	movs	r2, #10
 8000820:	5e9b      	ldrsh	r3, [r3, r2]
 8000822:	001a      	movs	r2, r3
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <interpolation+0xdc>)
 8000826:	2106      	movs	r1, #6
 8000828:	5e5b      	ldrsh	r3, [r3, r1]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	1dba      	adds	r2, r7, #6
 800082e:	2100      	movs	r1, #0
 8000830:	5e52      	ldrsh	r2, [r2, r1]
 8000832:	490e      	ldr	r1, [pc, #56]	@ (800086c <interpolation+0xdc>)
 8000834:	2004      	movs	r0, #4
 8000836:	5e09      	ldrsh	r1, [r1, r0]
 8000838:	1a52      	subs	r2, r2, r1
 800083a:	435a      	muls	r2, r3
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <interpolation+0xdc>)
 800083e:	2108      	movs	r1, #8
 8000840:	5e5b      	ldrsh	r3, [r3, r1]
 8000842:	0019      	movs	r1, r3
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <interpolation+0xdc>)
 8000846:	2004      	movs	r0, #4
 8000848:	5e1b      	ldrsh	r3, [r3, r0]
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f7ff fce4 	bl	800021c <__divsi3>
 8000854:	0003      	movs	r3, r0
        return pts[1].y +
 8000856:	b29b      	uxth	r3, r3
 8000858:	18e3      	adds	r3, r4, r3
 800085a:	b29b      	uxth	r3, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x)+1;
 800085c:	3301      	adds	r3, #1
 800085e:	b29b      	uxth	r3, r3
 8000860:	b21b      	sxth	r3, r3
    }
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b003      	add	sp, #12
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	08005ddc 	.word	0x08005ddc

08000870 <filter>:
 */
#include <stdint.h>

static uint16_t MAVector[10];

static uint16_t filter(uint16_t voltIn){
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 800087c:	230e      	movs	r3, #14
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	1dba      	adds	r2, r7, #6
 8000882:	8812      	ldrh	r2, [r2, #0]
 8000884:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=2;i<9;i++){
 8000886:	230d      	movs	r3, #13
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e01c      	b.n	80008ca <filter+0x5a>
		media+=MAVector[i-1];
 8000890:	200d      	movs	r0, #13
 8000892:	183b      	adds	r3, r7, r0
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <filter+0x8c>)
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	5ad1      	ldrh	r1, [r2, r3]
 800089e:	220e      	movs	r2, #14
 80008a0:	18bb      	adds	r3, r7, r2
 80008a2:	18ba      	adds	r2, r7, r2
 80008a4:	8812      	ldrh	r2, [r2, #0]
 80008a6:	188a      	adds	r2, r1, r2
 80008a8:	801a      	strh	r2, [r3, #0]
		MAVector[i]=MAVector[i-1];
 80008aa:	183b      	adds	r3, r7, r0
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	1e59      	subs	r1, r3, #1
 80008b0:	183b      	adds	r3, r7, r0
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <filter+0x8c>)
 80008b6:	0049      	lsls	r1, r1, #1
 80008b8:	5ac9      	ldrh	r1, [r1, r3]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <filter+0x8c>)
 80008bc:	0052      	lsls	r2, r2, #1
 80008be:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=2;i<9;i++){
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	3201      	adds	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	230d      	movs	r3, #13
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d9dd      	bls.n	8000890 <filter+0x20>
	}
	MAVector[9]=voltIn;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <filter+0x8c>)
 80008d6:	1dba      	adds	r2, r7, #6
 80008d8:	8812      	ldrh	r2, [r2, #0]
 80008da:	825a      	strh	r2, [r3, #18]
	media/=10;
 80008dc:	250e      	movs	r5, #14
 80008de:	197c      	adds	r4, r7, r5
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	210a      	movs	r1, #10
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc0e 	bl	8000108 <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	8023      	strh	r3, [r4, #0]
	return media;
 80008f0:	197b      	adds	r3, r7, r5
 80008f2:	881b      	ldrh	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b004      	add	sp, #16
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	20000080 	.word	0x20000080

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fa76 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f846 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f962 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000910:	f000 f942 	bl	8000b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000914:	f000 f910 	bl	8000b38 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000918:	f000 f8a6 	bl	8000a68 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, 2);
 800091c:	4913      	ldr	r1, [pc, #76]	@ (800096c <main+0x6c>)
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <main+0x70>)
 8000920:	2202      	movs	r2, #2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fbd6 	bl	80010d4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000928:	f002 ff5c 	bl	80037e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readAdcVolt */
  readAdcVoltHandle = osThreadNew(readAdcVoltFunction, NULL, &readAdcVolt_attributes);
 800092c:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <main+0x74>)
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <main+0x78>)
 8000930:	2100      	movs	r1, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f002 ffb0 	bl	8003898 <osThreadNew>
 8000938:	0002      	movs	r2, r0
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <main+0x7c>)
 800093c:	601a      	str	r2, [r3, #0]

  /* creation of displayVoltRead */
  displayVoltReadHandle = osThreadNew(displayVoltReadFunction, NULL, &displayVoltRead_attributes);
 800093e:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <main+0x80>)
 8000940:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <main+0x84>)
 8000942:	2100      	movs	r1, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f002 ffa7 	bl	8003898 <osThreadNew>
 800094a:	0002      	movs	r2, r0
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <main+0x88>)
 800094e:	601a      	str	r2, [r3, #0]

  /* creation of readButton */
  readButtonHandle = osThreadNew(readButtonFunction, NULL, &readButton_attributes);
 8000950:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <main+0x8c>)
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <main+0x90>)
 8000954:	2100      	movs	r1, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f002 ff9e 	bl	8003898 <osThreadNew>
 800095c:	0002      	movs	r2, r0
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <main+0x94>)
 8000960:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000962:	f002 ff6b 	bl	800383c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	e7fd      	b.n	8000966 <main+0x66>
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	2000007c 	.word	0x2000007c
 8000970:	20000094 	.word	0x20000094
 8000974:	08005d70 	.word	0x08005d70
 8000978:	08000d5d 	.word	0x08000d5d
 800097c:	200001a0 	.word	0x200001a0
 8000980:	08005d94 	.word	0x08005d94
 8000984:	08000da5 	.word	0x08000da5
 8000988:	200001a4 	.word	0x200001a4
 800098c:	08005db8 	.word	0x08005db8
 8000990:	08000db5 	.word	0x08000db5
 8000994:	200001a8 	.word	0x200001a8

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b099      	sub	sp, #100	@ 0x64
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	242c      	movs	r4, #44	@ 0x2c
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	0018      	movs	r0, r3
 80009a4:	2334      	movs	r3, #52	@ 0x34
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f005 f973 	bl	8005c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ae:	231c      	movs	r3, #28
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	0018      	movs	r0, r3
 80009b4:	2310      	movs	r3, #16
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f005 f96b 	bl	8005c94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009be:	003b      	movs	r3, r7
 80009c0:	0018      	movs	r0, r3
 80009c2:	231c      	movs	r3, #28
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 f964 	bl	8005c94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2212      	movs	r2, #18
 80009d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2210      	movs	r2, #16
 80009e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2210      	movs	r2, #16
 80009ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2202      	movs	r2, #2
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0212      	lsls	r2, r2, #8
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	22a0      	movs	r2, #160	@ 0xa0
 80009fe:	0392      	lsls	r2, r2, #14
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2201      	movs	r2, #1
 8000a06:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 fa0c 	bl	8001e28 <HAL_RCC_OscConfig>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a14:	f000 f9e8 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	211c      	movs	r1, #28
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2202      	movs	r2, #2
 8000a24:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2101      	movs	r1, #1
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fd7c 	bl	8002534 <HAL_RCC_ClockConfig>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a40:	f000 f9d2 	bl	8000de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a44:	003b      	movs	r3, r7
 8000a46:	2202      	movs	r2, #2
 8000a48:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	003b      	movs	r3, r7
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 ff04 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a5c:	f000 f9c4 	bl	8000de8 <Error_Handler>
  }
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b019      	add	sp, #100	@ 0x64
 8000a66:	bd90      	pop	{r4, r7, pc}

08000a68 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	0018      	movs	r0, r3
 8000a72:	230c      	movs	r3, #12
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f005 f90c 	bl	8005c94 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b34 <MX_ADC_Init+0xcc>)
 8000a80:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000aac:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000aba:	22c2      	movs	r2, #194	@ 0xc2
 8000abc:	32ff      	adds	r2, #255	@ 0xff
 8000abe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000ac8:	2224      	movs	r2, #36	@ 0x24
 8000aca:	2101      	movs	r1, #1
 8000acc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f9bc 	bl	8000e54 <HAL_ADC_Init>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f982 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	0152      	lsls	r2, r2, #5
 8000af0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	0552      	lsls	r2, r2, #21
 8000af8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000afa:	1d3a      	adds	r2, r7, #4
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fb81 	bl	8001208 <HAL_ADC_ConfigChannel>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000b0a:	f000 f96d 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b14:	1d3a      	adds	r2, r7, #4
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_ADC_Init+0xc8>)
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fb74 	bl	8001208 <HAL_ADC_ConfigChannel>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000b24:	f000 f960 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000094 	.word	0x20000094
 8000b34:	40012400 	.word	0x40012400

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	@ (8000b94 <MX_USART2_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b44:	22e1      	movs	r2, #225	@ 0xe1
 8000b46:	0252      	lsls	r2, r2, #9
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <MX_USART2_UART_Init+0x58>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 f9c5 	bl	8002f0c <HAL_UART_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f92f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000118 	.word	0x20000118
 8000b94:	40004400 	.word	0x40004400

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2103      	movs	r1, #3
 8000bba:	2009      	movs	r0, #9
 8000bbc:	f000 fdc2 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000bc0:	2009      	movs	r0, #9
 8000bc2:	f000 fdd4 	bl	800176e <HAL_NVIC_EnableIRQ>

}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	@ 0x2c
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	2414      	movs	r4, #20
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	0018      	movs	r0, r3
 8000be0:	2314      	movs	r3, #20
 8000be2:	001a      	movs	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	f005 f855 	bl	8005c94 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b59      	ldr	r3, [pc, #356]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	4b58      	ldr	r3, [pc, #352]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	0309      	lsls	r1, r1, #12
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	4b55      	ldr	r3, [pc, #340]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	031b      	lsls	r3, r3, #12
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b52      	ldr	r3, [pc, #328]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b51      	ldr	r3, [pc, #324]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c0c:	2180      	movs	r1, #128	@ 0x80
 8000c0e:	03c9      	lsls	r1, r1, #15
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	4b4e      	ldr	r3, [pc, #312]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	03db      	lsls	r3, r3, #15
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b4b      	ldr	r3, [pc, #300]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4b4a      	ldr	r3, [pc, #296]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	0289      	lsls	r1, r1, #10
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	4b47      	ldr	r3, [pc, #284]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b44      	ldr	r3, [pc, #272]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	4b43      	ldr	r3, [pc, #268]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	02c9      	lsls	r1, r1, #11
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	4b40      	ldr	r3, [pc, #256]	@ (8000d50 <MX_GPIO_Init+0x17c>)
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	02db      	lsls	r3, r3, #11
 8000c54:	4013      	ands	r3, r2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	@ 0x80
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f8c3 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8000c66:	23c0      	movs	r3, #192	@ 0xc0
 8000c68:	0099      	lsls	r1, r3, #2
 8000c6a:	2390      	movs	r3, #144	@ 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 f8bb 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000c76:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2140      	movs	r1, #64	@ 0x40
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f8b5 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	0192      	lsls	r2, r2, #6
 8000c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2284      	movs	r2, #132	@ 0x84
 8000c8e:	0392      	lsls	r2, r2, #14
 8000c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	f000 ff2c 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	22a0      	movs	r2, #160	@ 0xa0
 8000ca8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2202      	movs	r2, #2
 8000cae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2203      	movs	r2, #3
 8000cba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	193a      	adds	r2, r7, r4
 8000cc4:	2390      	movs	r3, #144	@ 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 ff16 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	4a1a      	ldr	r2, [pc, #104]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f000 ff04 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000cf4:	0021      	movs	r1, r4
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	22c0      	movs	r2, #192	@ 0xc0
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	000c      	movs	r4, r1
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2201      	movs	r2, #1
 8000d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	193a      	adds	r2, r7, r4
 8000d14:	2390      	movs	r3, #144	@ 0x90
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 feee 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8000d20:	0021      	movs	r1, r4
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2240      	movs	r2, #64	@ 0x40
 8000d26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	0010      	movs	r0, r2
 8000d42:	f000 fedb 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b00b      	add	sp, #44	@ 0x2c
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400

08000d5c <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void *argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint16_t ulAdcRead_Value=0xFFFF;
		//HAL_StatusTypeDef ConversionStatus=HAL_ERROR;
		voltReadRaw = 1234;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <readAdcVoltFunction+0x3c>)
 8000d66:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <readAdcVoltFunction+0x40>)
 8000d68:	801a      	strh	r2, [r3, #0]
			    			ulAdcRead_Value = HAL_ADC_GetValue(&hadc);
			    			ulAdcRead_Value &= 0x0FFF; //masca blocheaza primii 4 biti, pt ca suntem pe adc de 12 biti si nu ne intereseaza ceilalti din stanga
			    		}*/
			  //Scriem in RTE
			  //voltReadRaw=adc_buffer[1];
			  voltReadRaw = 1234;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <readAdcVoltFunction+0x3c>)
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <readAdcVoltFunction+0x40>)
 8000d6e:	801a      	strh	r2, [r3, #0]
			  //Apelam applications
			  voltRead=filter(interpolation(voltReadRaw));
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <readAdcVoltFunction+0x3c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fd0a 	bl	8000790 <interpolation>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fd75 	bl	8000870 <filter>
 8000d86:	0003      	movs	r3, r0
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <readAdcVoltFunction+0x44>)
 8000d8c:	801a      	strh	r2, [r3, #0]

			  osDelay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f002 fe2a 	bl	80039e8 <osDelay>
			  voltReadRaw = 1234;
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	e7e8      	b.n	8000d6a <readAdcVoltFunction+0xe>
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	000004d2 	.word	0x000004d2
 8000da0:	20000078 	.word	0x20000078

08000da4 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void *argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayVoltReadFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f002 fe1b 	bl	80039e8 <osDelay>
 8000db2:	e7fb      	b.n	8000dac <displayVoltReadFunction+0x8>

08000db4 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void *argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f002 fe13 	bl	80039e8 <osDelay>
 8000dc2:	e7fb      	b.n	8000dbc <readButtonFunction+0x8>

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dd6:	f000 f821 	bl	8000e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40000400 	.word	0x40000400

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_Init+0x24>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_Init+0x24>)
 8000dfe:	2110      	movs	r1, #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f7ff fc19 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0a:	f7ff fb1d 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	40022000 	.word	0x40022000

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	18d2      	adds	r2, r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	200001ac 	.word	0x200001ac

08000e40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	@ (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	200001ac 	.word	0x200001ac

08000e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e125      	b.n	80010be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10a      	bne.n	8000e90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2234      	movs	r2, #52	@ 0x34
 8000e84:	2100      	movs	r1, #0
 8000e86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fb06 	bl	800049c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e94:	2210      	movs	r2, #16
 8000e96:	4013      	ands	r3, r2
 8000e98:	d000      	beq.n	8000e9c <HAL_ADC_Init+0x48>
 8000e9a:	e103      	b.n	80010a4 <HAL_ADC_Init+0x250>
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d000      	beq.n	8000ea8 <HAL_ADC_Init+0x54>
 8000ea6:	e0fd      	b.n	80010a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000eb2:	d000      	beq.n	8000eb6 <HAL_ADC_Init+0x62>
 8000eb4:	e0f6      	b.n	80010a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eba:	4a83      	ldr	r2, [pc, #524]	@ (80010c8 <HAL_ADC_Init+0x274>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d112      	bne.n	8000efa <HAL_ADC_Init+0xa6>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d009      	beq.n	8000ef6 <HAL_ADC_Init+0xa2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	401a      	ands	r2, r3
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0xa6>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_ADC_Init+0xa8>
 8000efa:	2300      	movs	r3, #0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d116      	bne.n	8000f2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2218      	movs	r2, #24
 8000f08:	4393      	bics	r3, r2
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	0899      	lsrs	r1, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4964      	ldr	r1, [pc, #400]	@ (80010cc <HAL_ADC_Init+0x278>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e1b      	ldrb	r3, [r3, #24]
 8000f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e5b      	ldrb	r3, [r3, #25]
 8000f48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7e9b      	ldrb	r3, [r3, #26]
 8000f50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d002      	beq.n	8000f62 <HAL_ADC_Init+0x10e>
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	e000      	b.n	8000f64 <HAL_ADC_Init+0x110>
 8000f62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d101      	bne.n	8000f78 <HAL_ADC_Init+0x124>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e000      	b.n	8000f7a <HAL_ADC_Init+0x126>
 8000f78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2124      	movs	r1, #36	@ 0x24
 8000f80:	5c5b      	ldrb	r3, [r3, r1]
 8000f82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7edb      	ldrb	r3, [r3, #27]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d115      	bne.n	8000fc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7e9b      	ldrb	r3, [r3, #26]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	0252      	lsls	r2, r2, #9
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fac:	2220      	movs	r2, #32
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb8:	2201      	movs	r2, #1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69da      	ldr	r2, [r3, #28]
 8000fc4:	23c2      	movs	r3, #194	@ 0xc2
 8000fc6:	33ff      	adds	r3, #255	@ 0xff
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d007      	beq.n	8000fdc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d01b      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d017      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001004:	2b02      	cmp	r3, #2
 8001006:	d013      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	2b03      	cmp	r3, #3
 800100e:	d00f      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001014:	2b04      	cmp	r3, #4
 8001016:	d00b      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101c:	2b05      	cmp	r3, #5
 800101e:	d007      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	2b06      	cmp	r3, #6
 8001026:	d003      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102c:	2b07      	cmp	r3, #7
 800102e:	d112      	bne.n	8001056 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2107      	movs	r1, #7
 800103c:	438a      	bics	r2, r1
 800103e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6959      	ldr	r1, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104a:	2207      	movs	r2, #7
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_ADC_Init+0x27c>)
 800105e:	4013      	ands	r3, r2
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d10b      	bne.n	800107e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001070:	2203      	movs	r2, #3
 8001072:	4393      	bics	r3, r2
 8001074:	2201      	movs	r2, #1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800107c:	e01c      	b.n	80010b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001082:	2212      	movs	r2, #18
 8001084:	4393      	bics	r3, r2
 8001086:	2210      	movs	r2, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001092:	2201      	movs	r2, #1
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800109a:	230f      	movs	r3, #15
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010a2:	e009      	b.n	80010b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a8:	2210      	movs	r2, #16
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	fffffefd 	.word	0xfffffefd
 80010cc:	fffe0219 	.word	0xfffe0219
 80010d0:	833fffe7 	.word	0x833fffe7

080010d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2317      	movs	r3, #23
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	d15e      	bne.n	80011b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2234      	movs	r2, #52	@ 0x34
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start_DMA+0x2e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e05e      	b.n	80011c0 <HAL_ADC_Start_DMA+0xec>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2234      	movs	r2, #52	@ 0x34
 8001106:	2101      	movs	r1, #1
 8001108:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	7e5b      	ldrb	r3, [r3, #25]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d007      	beq.n	8001122 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001112:	2317      	movs	r3, #23
 8001114:	18fc      	adds	r4, r7, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	0018      	movs	r0, r3
 800111a:	f000 f983 	bl	8001424 <ADC_Enable>
 800111e:	0003      	movs	r3, r0
 8001120:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001122:	2317      	movs	r3, #23
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d146      	bne.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001130:	4a25      	ldr	r2, [pc, #148]	@ (80011c8 <HAL_ADC_Start_DMA+0xf4>)
 8001132:	4013      	ands	r3, r2
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2234      	movs	r2, #52	@ 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <HAL_ADC_Start_DMA+0xf8>)
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	4a1d      	ldr	r2, [pc, #116]	@ (80011d0 <HAL_ADC_Start_DMA+0xfc>)
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <HAL_ADC_Start_DMA+0x100>)
 8001162:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	221c      	movs	r2, #28
 800116a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2110      	movs	r1, #16
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3340      	adds	r3, #64	@ 0x40
 8001196:	0019      	movs	r1, r3
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f000 fb40 	bl	8001820 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2104      	movs	r1, #4
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e003      	b.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b2:	2317      	movs	r3, #23
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011ba:	2317      	movs	r3, #23
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b007      	add	sp, #28
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	fffff0fe 	.word	0xfffff0fe
 80011cc:	0800152d 	.word	0x0800152d
 80011d0:	080015e1 	.word	0x080015e1
 80011d4:	080015ff 	.word	0x080015ff

080011d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001212:	230f      	movs	r3, #15
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	055b      	lsls	r3, r3, #21
 8001226:	429a      	cmp	r2, r3
 8001228:	d011      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00d      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001236:	2b02      	cmp	r3, #2
 8001238:	d009      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123e:	2b03      	cmp	r3, #3
 8001240:	d005      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	2b04      	cmp	r3, #4
 8001248:	d001      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2234      	movs	r2, #52	@ 0x34
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_ConfigChannel+0x54>
 8001258:	2302      	movs	r3, #2
 800125a:	e0d0      	b.n	80013fe <HAL_ADC_ConfigChannel+0x1f6>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2234      	movs	r2, #52	@ 0x34
 8001260:	2101      	movs	r1, #1
 8001262:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2204      	movs	r2, #4
 800126c:	4013      	ands	r3, r2
 800126e:	d000      	beq.n	8001272 <HAL_ADC_ConfigChannel+0x6a>
 8001270:	e0b4      	b.n	80013dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a64      	ldr	r2, [pc, #400]	@ (8001408 <HAL_ADC_ConfigChannel+0x200>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_ADC_ConfigChannel+0x76>
 800127c:	e082      	b.n	8001384 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	429a      	cmp	r2, r3
 800129e:	d037      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d033      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d02f      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d02b      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d027      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d023      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d01f      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	d01b      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2107      	movs	r1, #7
 80012e4:	400b      	ands	r3, r1
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d012      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2107      	movs	r1, #7
 80012f6:	438a      	bics	r2, r1
 80012f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6959      	ldr	r1, [r3, #20]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2207      	movs	r2, #7
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d007      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x120>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x120>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d163      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_ADC_ConfigChannel+0x204>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b10      	cmp	r3, #16
 8001332:	d009      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x140>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b11      	cmp	r3, #17
 800133a:	d102      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x13a>
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	03db      	lsls	r3, r3, #15
 8001340:	e004      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	045b      	lsls	r3, r3, #17
 8001346:	e001      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4a2f      	ldr	r2, [pc, #188]	@ (800140c <HAL_ADC_ConfigChannel+0x204>)
 800134e:	430b      	orrs	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d14a      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135a:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <HAL_ADC_ConfigChannel+0x208>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	492d      	ldr	r1, [pc, #180]	@ (8001414 <HAL_ADC_ConfigChannel+0x20c>)
 8001360:	0018      	movs	r0, r3
 8001362:	f7fe fed1 	bl	8000108 <__udivsi3>
 8001366:	0003      	movs	r3, r0
 8001368:	001a      	movs	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	189b      	adds	r3, r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001374:	e002      	b.n	800137c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x16e>
 8001382:	e035      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	4099      	lsls	r1, r3
 8001392:	000b      	movs	r3, r1
 8001394:	43d9      	mvns	r1, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d007      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x1ae>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x1ae>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d11c      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_ADC_ConfigChannel+0x204>)
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d007      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x1ca>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b11      	cmp	r3, #17
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x1c6>
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_ADC_ConfigChannel+0x210>)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_ADC_ConfigChannel+0x214>)
 80013d0:	e000      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_ADC_ConfigChannel+0x218>)
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_ADC_ConfigChannel+0x204>)
 80013d6:	400b      	ands	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e009      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2234      	movs	r2, #52	@ 0x34
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	00001001 	.word	0x00001001
 800140c:	40012708 	.word	0x40012708
 8001410:	20000000 	.word	0x20000000
 8001414:	000f4240 	.word	0x000f4240
 8001418:	ffbfffff 	.word	0xffbfffff
 800141c:	feffffff 	.word	0xfeffffff
 8001420:	ff7fffff 	.word	0xff7fffff

08001424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b01      	cmp	r3, #1
 8001440:	d112      	bne.n	8001468 <ADC_Enable+0x44>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	2b01      	cmp	r3, #1
 800144e:	d009      	beq.n	8001464 <ADC_Enable+0x40>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	401a      	ands	r2, r3
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	429a      	cmp	r2, r3
 8001462:	d101      	bne.n	8001468 <ADC_Enable+0x44>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <ADC_Enable+0x46>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d152      	bne.n	8001514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <ADC_Enable+0xfc>)
 8001476:	4013      	ands	r3, r2
 8001478:	d00d      	beq.n	8001496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147e:	2210      	movs	r2, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148a:	2201      	movs	r2, #1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e03f      	b.n	8001516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <ADC_Enable+0x100>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	491f      	ldr	r1, [pc, #124]	@ (8001528 <ADC_Enable+0x104>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7fe fe2b 	bl	8000108 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b6:	e002      	b.n	80014be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fcbc 	bl	8000e40 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014cc:	e01b      	b.n	8001506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ce:	f7ff fcb7 	bl	8000e40 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d914      	bls.n	8001506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00d      	beq.n	8001506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ee:	2210      	movs	r2, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014fa:	2201      	movs	r2, #1
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e007      	b.n	8001516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	2b01      	cmp	r3, #1
 8001512:	d1dc      	bne.n	80014ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	80000017 	.word	0x80000017
 8001524:	20000000 	.word	0x20000000
 8001528:	000f4240 	.word	0x000f4240

0800152c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153e:	2250      	movs	r2, #80	@ 0x50
 8001540:	4013      	ands	r3, r2
 8001542:	d140      	bne.n	80015c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d12d      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2208      	movs	r2, #8
 8001570:	4013      	ands	r3, r2
 8001572:	2b08      	cmp	r3, #8
 8001574:	d122      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d110      	bne.n	80015a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	210c      	movs	r1, #12
 800158e:	438a      	bics	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <ADC_DMAConvCplt+0xb0>)
 8001598:	4013      	ands	r3, r2
 800159a:	2201      	movs	r2, #1
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80015a2:	e00b      	b.n	80015bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a8:	2220      	movs	r2, #32
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b4:	2201      	movs	r2, #1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fe0a 	bl	80011d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80015c4:	e005      	b.n	80015d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	0010      	movs	r0, r2
 80015d0:	4798      	blx	r3
}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	fffffefe 	.word	0xfffffefe

080015e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fdf9 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}

080015fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001610:	2240      	movs	r2, #64	@ 0x40
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800161c:	2204      	movs	r2, #4
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff fde6 	bl	80011f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800162c:	46c0      	nop			@ (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	0002      	movs	r2, r0
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b7f      	cmp	r3, #127	@ 0x7f
 8001646:	d809      	bhi.n	800165c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	001a      	movs	r2, r3
 800164e:	231f      	movs	r3, #31
 8001650:	401a      	ands	r2, r3
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_EnableIRQ+0x30>)
 8001654:	2101      	movs	r1, #1
 8001656:	4091      	lsls	r1, r2
 8001658:	000a      	movs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
  }
}
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b7f      	cmp	r3, #127	@ 0x7f
 800167c:	d828      	bhi.n	80016d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167e:	4a2f      	ldr	r2, [pc, #188]	@ (800173c <__NVIC_SetPriority+0xd4>)
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	33c0      	adds	r3, #192	@ 0xc0
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	589b      	ldr	r3, [r3, r2]
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	0011      	movs	r1, r2
 8001694:	2203      	movs	r2, #3
 8001696:	400a      	ands	r2, r1
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	21ff      	movs	r1, #255	@ 0xff
 800169c:	4091      	lsls	r1, r2
 800169e:	000a      	movs	r2, r1
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	401a      	ands	r2, r3
 80016a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	22ff      	movs	r2, #255	@ 0xff
 80016ac:	401a      	ands	r2, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	2303      	movs	r3, #3
 80016b6:	4003      	ands	r3, r0
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	481f      	ldr	r0, [pc, #124]	@ (800173c <__NVIC_SetPriority+0xd4>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	430a      	orrs	r2, r1
 80016c8:	33c0      	adds	r3, #192	@ 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ce:	e031      	b.n	8001734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <__NVIC_SetPriority+0xd8>)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0019      	movs	r1, r3
 80016d8:	230f      	movs	r3, #15
 80016da:	400b      	ands	r3, r1
 80016dc:	3b08      	subs	r3, #8
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3306      	adds	r3, #6
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	0011      	movs	r1, r2
 80016f0:	2203      	movs	r2, #3
 80016f2:	400a      	ands	r2, r1
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	21ff      	movs	r1, #255	@ 0xff
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	401a      	ands	r2, r3
 8001700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	22ff      	movs	r2, #255	@ 0xff
 8001708:	401a      	ands	r2, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	2303      	movs	r3, #3
 8001712:	4003      	ands	r3, r0
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <__NVIC_SetPriority+0xd8>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	001c      	movs	r4, r3
 8001720:	230f      	movs	r3, #15
 8001722:	4023      	ands	r3, r4
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	430a      	orrs	r2, r1
 800172a:	3306      	adds	r3, #6
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	18c3      	adds	r3, r0, r3
 8001730:	3304      	adds	r3, #4
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b003      	add	sp, #12
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	210f      	movs	r1, #15
 8001750:	187b      	adds	r3, r7, r1
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	187b      	adds	r3, r7, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff81 	bl	8001668 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	0002      	movs	r2, r0
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff57 	bl	8001634 <__NVIC_EnableIRQ>
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e036      	b.n	8001814 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2221      	movs	r2, #33	@ 0x21
 80017aa:	2102      	movs	r1, #2
 80017ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_DMA_Init+0x8c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f946 	bl	8001a88 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2221      	movs	r2, #33	@ 0x21
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	ffffc00f 	.word	0xffffc00f

08001820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2317      	movs	r3, #23
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_DMA_Start_IT+0x24>
 8001840:	2302      	movs	r3, #2
 8001842:	e04f      	b.n	80018e4 <HAL_DMA_Start_IT+0xc4>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2220      	movs	r2, #32
 8001848:	2101      	movs	r1, #1
 800184a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2221      	movs	r2, #33	@ 0x21
 8001850:	5c9b      	ldrb	r3, [r3, r2]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d13a      	bne.n	80018ce <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2221      	movs	r2, #33	@ 0x21
 800185c:	2102      	movs	r1, #2
 800185e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	438a      	bics	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f8d7 	bl	8001a30 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	210e      	movs	r1, #14
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e00f      	b.n	80018bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	210a      	movs	r1, #10
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2104      	movs	r1, #4
 80018b8:	438a      	bics	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e007      	b.n	80018de <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018d6:	2317      	movs	r3, #23
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80018de:	2317      	movs	r3, #23
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b006      	add	sp, #24
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	2204      	movs	r2, #4
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	d024      	beq.n	800195e <HAL_DMA_IRQHandler+0x72>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d020      	beq.n	800195e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2220      	movs	r2, #32
 8001924:	4013      	ands	r3, r2
 8001926:	d107      	bne.n	8001938 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2104      	movs	r1, #4
 8001934:	438a      	bics	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001940:	2104      	movs	r1, #4
 8001942:	4091      	lsls	r1, r2
 8001944:	000a      	movs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <HAL_DMA_IRQHandler+0x66>
 8001950:	e06a      	b.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	0010      	movs	r0, r2
 800195a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800195c:	e064      	b.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	2202      	movs	r2, #2
 8001964:	409a      	lsls	r2, r3
 8001966:	0013      	movs	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xda>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d027      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2220      	movs	r2, #32
 800197e:	4013      	ands	r3, r2
 8001980:	d10b      	bne.n	800199a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	210a      	movs	r1, #10
 800198e:	438a      	bics	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2221      	movs	r2, #33	@ 0x21
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a2:	2102      	movs	r1, #2
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d036      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	0010      	movs	r0, r2
 80019c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019c4:	e030      	b.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	d028      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2208      	movs	r2, #8
 80019da:	4013      	ands	r3, r2
 80019dc:	d024      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	210e      	movs	r1, #14
 80019ea:	438a      	bics	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f6:	2101      	movs	r1, #1
 80019f8:	4091      	lsls	r1, r2
 80019fa:	000a      	movs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2221      	movs	r2, #33	@ 0x21
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	0010      	movs	r0, r2
 8001a24:	4798      	blx	r3
    }
  }
}
 8001a26:	e7ff      	b.n	8001a28 <HAL_DMA_IRQHandler+0x13c>
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a46:	2101      	movs	r1, #1
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d108      	bne.n	8001a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a6e:	e007      	b.n	8001a80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]
}
 8001a80:	46c0      	nop			@ (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	001a      	movs	r2, r3
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <DMA_CalcBaseAndBitshift+0x60>)
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d810      	bhi.n	8001abe <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <DMA_CalcBaseAndBitshift+0x64>)
 8001aa2:	4694      	mov	ip, r2
 8001aa4:	4463      	add	r3, ip
 8001aa6:	2114      	movs	r1, #20
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7fe fb2d 	bl	8000108 <__udivsi3>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <DMA_CalcBaseAndBitshift+0x68>)
 8001aba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001abc:	e00f      	b.n	8001ade <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <DMA_CalcBaseAndBitshift+0x6c>)
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4463      	add	r3, ip
 8001ac8:	2114      	movs	r1, #20
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7fe fb1c 	bl	8000108 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	009a      	lsls	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <DMA_CalcBaseAndBitshift+0x70>)
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	40020407 	.word	0x40020407
 8001aec:	bffdfff8 	.word	0xbffdfff8
 8001af0:	40020000 	.word	0x40020000
 8001af4:	bffdfbf8 	.word	0xbffdfbf8
 8001af8:	40020400 	.word	0x40020400

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	e155      	b.n	8001db8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4091      	lsls	r1, r2
 8001b16:	000a      	movs	r2, r1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d100      	bne.n	8001b24 <HAL_GPIO_Init+0x28>
 8001b22:	e146      	b.n	8001db2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d130      	bne.n	8001b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	0013      	movs	r3, r2
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b72:	2201      	movs	r2, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	2201      	movs	r2, #1
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d017      	beq.n	8001bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d123      	bne.n	8001c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	58d3      	ldr	r3, [r2, r3]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2107      	movs	r1, #7
 8001c12:	400b      	ands	r3, r1
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	6939      	ldr	r1, [r7, #16]
 8001c2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	0013      	movs	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	23c0      	movs	r3, #192	@ 0xc0
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <HAL_GPIO_Init+0x174>
 8001c6e:	e0a0      	b.n	8001db2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c70:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b56      	ldr	r3, [pc, #344]	@ (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	619a      	str	r2, [r3, #24]
 8001c7c:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <HAL_GPIO_Init+0x2d4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c88:	4a52      	ldr	r2, [pc, #328]	@ (8001dd4 <HAL_GPIO_Init+0x2d8>)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	589b      	ldr	r3, [r3, r2]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	2390      	movs	r3, #144	@ 0x90
 8001cb0:	05db      	lsls	r3, r3, #23
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a47      	ldr	r2, [pc, #284]	@ (8001dd8 <HAL_GPIO_Init+0x2dc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x1ea>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a46      	ldr	r2, [pc, #280]	@ (8001ddc <HAL_GPIO_Init+0x2e0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x1e6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a45      	ldr	r2, [pc, #276]	@ (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x1e2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a44      	ldr	r2, [pc, #272]	@ (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x1de>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x1f0>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x1f0>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x1f0>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x1f0>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x1f0>
 8001cea:	2300      	movs	r3, #0
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	2103      	movs	r1, #3
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfc:	4935      	ldr	r1, [pc, #212]	@ (8001dd4 <HAL_GPIO_Init+0x2d8>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	035b      	lsls	r3, r3, #13
 8001d22:	4013      	ands	r3, r2
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d34:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	039b      	lsls	r3, r3, #14
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d58:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d5e:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43da      	mvns	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	025b      	lsls	r3, r3, #9
 8001da0:	4013      	ands	r3, r2
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	40da      	lsrs	r2, r3
 8001dc0:	1e13      	subs	r3, r2, #0
 8001dc2:	d000      	beq.n	8001dc6 <HAL_GPIO_Init+0x2ca>
 8001dc4:	e6a2      	b.n	8001b0c <HAL_GPIO_Init+0x10>
  } 
}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b006      	add	sp, #24
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	0008      	movs	r0, r1
 8001df6:	0011      	movs	r1, r2
 8001df8:	1cbb      	adds	r3, r7, #2
 8001dfa:	1c02      	adds	r2, r0, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	1c7b      	adds	r3, r7, #1
 8001e00:	1c0a      	adds	r2, r1, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e04:	1c7b      	adds	r3, r7, #1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0c:	1cbb      	adds	r3, r7, #2
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	1cbb      	adds	r3, r7, #2
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 fb76 	bl	8002528 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d100      	bne.n	8001e48 <HAL_RCC_OscConfig+0x20>
 8001e46:	e08e      	b.n	8001f66 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e48:	4bc5      	ldr	r3, [pc, #788]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	220c      	movs	r2, #12
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d00e      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e54:	4bc2      	ldr	r3, [pc, #776]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d117      	bne.n	8001e90 <HAL_RCC_OscConfig+0x68>
 8001e60:	4bbf      	ldr	r3, [pc, #764]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	23c0      	movs	r3, #192	@ 0xc0
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	401a      	ands	r2, r3
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d10e      	bne.n	8001e90 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4bbb      	ldr	r3, [pc, #748]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCC_OscConfig+0x58>
 8001e7e:	e071      	b.n	8001f64 <HAL_RCC_OscConfig+0x13c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d000      	beq.n	8001e8a <HAL_RCC_OscConfig+0x62>
 8001e88:	e06c      	b.n	8001f64 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 fb4c 	bl	8002528 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x80>
 8001e98:	4bb1      	ldr	r3, [pc, #708]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4bb0      	ldr	r3, [pc, #704]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0249      	lsls	r1, r1, #9
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e02f      	b.n	8001f08 <HAL_RCC_OscConfig+0xe0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0xa2>
 8001eb0:	4bab      	ldr	r3, [pc, #684]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4baa      	ldr	r3, [pc, #680]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	49ab      	ldr	r1, [pc, #684]	@ (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	49a9      	ldr	r1, [pc, #676]	@ (8002168 <HAL_RCC_OscConfig+0x340>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e01e      	b.n	8001f08 <HAL_RCC_OscConfig+0xe0>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xc8>
 8001ed2:	4ba3      	ldr	r3, [pc, #652]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4ba2      	ldr	r3, [pc, #648]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	02c9      	lsls	r1, r1, #11
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	4b9f      	ldr	r3, [pc, #636]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	0249      	lsls	r1, r1, #9
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xe0>
 8001ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	499b      	ldr	r1, [pc, #620]	@ (8002164 <HAL_RCC_OscConfig+0x33c>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b98      	ldr	r3, [pc, #608]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b97      	ldr	r3, [pc, #604]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f02:	4999      	ldr	r1, [pc, #612]	@ (8002168 <HAL_RCC_OscConfig+0x340>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d014      	beq.n	8001f3a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe ff96 	bl	8000e40 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ff91 	bl	8000e40 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	@ 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e2fd      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	029b      	lsls	r3, r3, #10
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0xf2>
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff81 	bl	8000e40 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe ff7c 	bl	8000e40 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e2e8      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b82      	ldr	r3, [pc, #520]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x11c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <HAL_RCC_OscConfig+0x14a>
 8001f70:	e06c      	b.n	800204c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f72:	4b7b      	ldr	r3, [pc, #492]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	220c      	movs	r2, #12
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f7c:	4b78      	ldr	r3, [pc, #480]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	220c      	movs	r2, #12
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d11f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1a0>
 8001f88:	4b75      	ldr	r3, [pc, #468]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	23c0      	movs	r3, #192	@ 0xc0
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	401a      	ands	r2, r3
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b71      	ldr	r3, [pc, #452]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x188>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e2bb      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	22f8      	movs	r2, #248	@ 0xf8
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00da      	lsls	r2, r3, #3
 8001fc0:	4b67      	ldr	r3, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e041      	b.n	800204c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d024      	beq.n	800201a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b63      	ldr	r3, [pc, #396]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b62      	ldr	r3, [pc, #392]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff30 	bl	8000e40 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ff2b 	bl	8000e40 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e297      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b59      	ldr	r3, [pc, #356]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d0f1      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b57      	ldr	r3, [pc, #348]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	22f8      	movs	r2, #248	@ 0xf8
 8002008:	4393      	bics	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00da      	lsls	r2, r3, #3
 8002012:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b51      	ldr	r3, [pc, #324]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b50      	ldr	r3, [pc, #320]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002020:	2101      	movs	r1, #1
 8002022:	438a      	bics	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe ff0b 	bl	8000e40 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe ff06 	bl	8000e40 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e272      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d1f1      	bne.n	8002030 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	4013      	ands	r3, r2
 8002054:	d036      	beq.n	80020c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d019      	beq.n	8002092 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205e:	4b40      	ldr	r3, [pc, #256]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002062:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fee9 	bl	8000e40 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fee4 	bl	8000e40 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e250      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d0f1      	beq.n	8002074 <HAL_RCC_OscConfig+0x24c>
 8002090:	e018      	b.n	80020c4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002096:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002098:	2101      	movs	r1, #1
 800209a:	438a      	bics	r2, r1
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7fe fecf 	bl	8000e40 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe feca 	bl	8000e40 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e236      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ba:	4b29      	ldr	r3, [pc, #164]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d1f1      	bne.n	80020a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2204      	movs	r2, #4
 80020ca:	4013      	ands	r3, r2
 80020cc:	d100      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2a8>
 80020ce:	e0b5      	b.n	800223c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d0:	201f      	movs	r0, #31
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d8:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	055b      	lsls	r3, r3, #21
 80020e0:	4013      	ands	r3, r2
 80020e2:	d110      	bne.n	8002106 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	0549      	lsls	r1, r1, #21
 80020ee:	430a      	orrs	r2, r1
 80020f0:	61da      	str	r2, [r3, #28]
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	055b      	lsls	r3, r3, #21
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002100:	183b      	adds	r3, r7, r0
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_OscConfig+0x344>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d11a      	bne.n	8002148 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_RCC_OscConfig+0x344>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_RCC_OscConfig+0x344>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	0049      	lsls	r1, r1, #1
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002120:	f7fe fe8e 	bl	8000e40 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe fe89 	bl	8000e40 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	@ 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1f5      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x344>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10f      	bne.n	8002170 <HAL_RCC_OscConfig+0x348>
 8002150:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4b02      	ldr	r3, [pc, #8]	@ (8002160 <HAL_RCC_OscConfig+0x338>)
 8002156:	2101      	movs	r1, #1
 8002158:	430a      	orrs	r2, r1
 800215a:	621a      	str	r2, [r3, #32]
 800215c:	e036      	b.n	80021cc <HAL_RCC_OscConfig+0x3a4>
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	40021000 	.word	0x40021000
 8002164:	fffeffff 	.word	0xfffeffff
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	40007000 	.word	0x40007000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x36a>
 8002178:	4bca      	ldr	r3, [pc, #808]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4bc9      	ldr	r3, [pc, #804]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800217e:	2101      	movs	r1, #1
 8002180:	438a      	bics	r2, r1
 8002182:	621a      	str	r2, [r3, #32]
 8002184:	4bc7      	ldr	r3, [pc, #796]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	4bc6      	ldr	r3, [pc, #792]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800218a:	2104      	movs	r1, #4
 800218c:	438a      	bics	r2, r1
 800218e:	621a      	str	r2, [r3, #32]
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x3a4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x38c>
 800219a:	4bc2      	ldr	r3, [pc, #776]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	4bc1      	ldr	r3, [pc, #772]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	2104      	movs	r1, #4
 80021a2:	430a      	orrs	r2, r1
 80021a4:	621a      	str	r2, [r3, #32]
 80021a6:	4bbf      	ldr	r3, [pc, #764]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4bbe      	ldr	r3, [pc, #760]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	621a      	str	r2, [r3, #32]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x3a4>
 80021b4:	4bbb      	ldr	r3, [pc, #748]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	4bba      	ldr	r3, [pc, #744]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	438a      	bics	r2, r1
 80021be:	621a      	str	r2, [r3, #32]
 80021c0:	4bb8      	ldr	r3, [pc, #736]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	4bb7      	ldr	r3, [pc, #732]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021c6:	2104      	movs	r1, #4
 80021c8:	438a      	bics	r2, r1
 80021ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d014      	beq.n	80021fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7fe fe34 	bl	8000e40 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e009      	b.n	80021f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fe2f 	bl	8000e40 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	4aaf      	ldr	r2, [pc, #700]	@ (80024a8 <HAL_RCC_OscConfig+0x680>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e19a      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4bac      	ldr	r3, [pc, #688]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x3b6>
 80021fc:	e013      	b.n	8002226 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7fe fe1f 	bl	8000e40 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e009      	b.n	800221c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe fe1a 	bl	8000e40 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	4aa5      	ldr	r2, [pc, #660]	@ (80024a8 <HAL_RCC_OscConfig+0x680>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e185      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	4ba1      	ldr	r3, [pc, #644]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002226:	231f      	movs	r3, #31
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b9c      	ldr	r3, [pc, #624]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	4b9b      	ldr	r3, [pc, #620]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002236:	499d      	ldr	r1, [pc, #628]	@ (80024ac <HAL_RCC_OscConfig+0x684>)
 8002238:	400a      	ands	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	4013      	ands	r3, r2
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d12a      	bne.n	80022a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800224e:	4b95      	ldr	r3, [pc, #596]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002252:	4b94      	ldr	r3, [pc, #592]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002254:	2104      	movs	r1, #4
 8002256:	430a      	orrs	r2, r1
 8002258:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800225a:	4b92      	ldr	r3, [pc, #584]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800225c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800225e:	4b91      	ldr	r3, [pc, #580]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7fe fdeb 	bl	8000e40 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002270:	f7fe fde6 	bl	8000e40 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e152      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	d0f1      	beq.n	8002270 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800228c:	4b85      	ldr	r3, [pc, #532]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800228e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002290:	22f8      	movs	r2, #248	@ 0xf8
 8002292:	4393      	bics	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	00da      	lsls	r2, r3, #3
 800229c:	4b81      	ldr	r3, [pc, #516]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022a2:	e034      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	3305      	adds	r3, #5
 80022aa:	d111      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022ac:	4b7d      	ldr	r3, [pc, #500]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b0:	4b7c      	ldr	r3, [pc, #496]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	2104      	movs	r1, #4
 80022b4:	438a      	bics	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022b8:	4b7a      	ldr	r3, [pc, #488]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022bc:	22f8      	movs	r2, #248	@ 0xf8
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	00da      	lsls	r2, r3, #3
 80022c8:	4b76      	ldr	r3, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ce:	e01e      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022d0:	4b74      	ldr	r3, [pc, #464]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d4:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	2104      	movs	r1, #4
 80022d8:	430a      	orrs	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022dc:	4b71      	ldr	r3, [pc, #452]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022e0:	4b70      	ldr	r3, [pc, #448]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7fe fdaa 	bl	8000e40 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022f2:	f7fe fda5 	bl	8000e40 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e111      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002304:	4b67      	ldr	r3, [pc, #412]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d1f1      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2220      	movs	r2, #32
 8002314:	4013      	ands	r3, r2
 8002316:	d05c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002318:	4b62      	ldr	r3, [pc, #392]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	220c      	movs	r2, #12
 800231e:	4013      	ands	r3, r2
 8002320:	2b0c      	cmp	r3, #12
 8002322:	d00e      	beq.n	8002342 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002324:	4b5f      	ldr	r3, [pc, #380]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	220c      	movs	r2, #12
 800232a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800232c:	2b08      	cmp	r3, #8
 800232e:	d114      	bne.n	800235a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002330:	4b5c      	ldr	r3, [pc, #368]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	23c0      	movs	r3, #192	@ 0xc0
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	401a      	ands	r2, r3
 800233a:	23c0      	movs	r3, #192	@ 0xc0
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	429a      	cmp	r2, r3
 8002340:	d10b      	bne.n	800235a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002342:	4b58      	ldr	r3, [pc, #352]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d040      	beq.n	80023d0 <HAL_RCC_OscConfig+0x5a8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d03c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0e6      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01b      	beq.n	800239a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002362:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002366:	4b4f      	ldr	r3, [pc, #316]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	430a      	orrs	r2, r1
 800236e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fd66 	bl	8000e40 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237a:	f7fe fd61 	bl	8000e40 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0cd      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800238c:	4b45      	ldr	r3, [pc, #276]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800238e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x552>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800239a:	4b42      	ldr	r3, [pc, #264]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800239c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	4943      	ldr	r1, [pc, #268]	@ (80024b0 <HAL_RCC_OscConfig+0x688>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe fd4b 	bl	8000e40 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b0:	f7fe fd46 	bl	8000e40 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0b2      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023c2:	4b38      	ldr	r3, [pc, #224]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80023c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x588>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023d0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x5b4>
 80023da:	e0a4      	b.n	8002526 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	220c      	movs	r2, #12
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d100      	bne.n	80023ea <HAL_RCC_OscConfig+0x5c2>
 80023e8:	e078      	b.n	80024dc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d14c      	bne.n	800248c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 80023f8:	492e      	ldr	r1, [pc, #184]	@ (80024b4 <HAL_RCC_OscConfig+0x68c>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fd1f 	bl	8000e40 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fd1a 	bl	8000e40 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e086      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	4013      	ands	r3, r2
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	220f      	movs	r2, #15
 800242c:	4393      	bics	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <HAL_RCC_OscConfig+0x690>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	431a      	orrs	r2, r3
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	0449      	lsls	r1, r1, #17
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7fe fced 	bl	8000e40 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fce8 	bl	8000e40 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e054      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	4013      	ands	r3, r2
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x644>
 800248a:	e04c      	b.n	8002526 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <HAL_RCC_OscConfig+0x67c>)
 8002492:	4908      	ldr	r1, [pc, #32]	@ (80024b4 <HAL_RCC_OscConfig+0x68c>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fcd2 	bl	8000e40 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x6a6>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	40021000 	.word	0x40021000
 80024a8:	00001388 	.word	0x00001388
 80024ac:	efffffff 	.word	0xefffffff
 80024b0:	fffeffff 	.word	0xfffeffff
 80024b4:	feffffff 	.word	0xfeffffff
 80024b8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fcc0 	bl	8000e40 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e02c      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <HAL_RCC_OscConfig+0x708>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	049b      	lsls	r3, r3, #18
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x694>
 80024da:	e024      	b.n	8002526 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e01f      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_RCC_OscConfig+0x708>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_RCC_OscConfig+0x708>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	23c0      	movs	r3, #192	@ 0xc0
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	429a      	cmp	r2, r3
 8002502:	d10e      	bne.n	8002522 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	220f      	movs	r2, #15
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	23f0      	movs	r3, #240	@ 0xf0
 8002516:	039b      	lsls	r3, r3, #14
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b008      	add	sp, #32
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0bf      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b61      	ldr	r3, [pc, #388]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d911      	bls.n	800257a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b5e      	ldr	r3, [pc, #376]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	4b5b      	ldr	r3, [pc, #364]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0a6      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2204      	movs	r2, #4
 800258a:	4013      	ands	r3, r2
 800258c:	d006      	beq.n	800259c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800258e:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002594:	21e0      	movs	r1, #224	@ 0xe0
 8002596:	00c9      	lsls	r1, r1, #3
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	22f0      	movs	r2, #240	@ 0xf0
 80025a2:	4393      	bics	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	d04c      	beq.n	8002654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b44      	ldr	r3, [pc, #272]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d120      	bne.n	8002610 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07a      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b3e      	ldr	r3, [pc, #248]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	@ 0x80
 80025e0:	049b      	lsls	r3, r3, #18
 80025e2:	4013      	ands	r3, r2
 80025e4:	d114      	bne.n	8002610 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06e      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025f2:	4b38      	ldr	r3, [pc, #224]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e062      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b34      	ldr	r3, [pc, #208]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e05b      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002610:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	4393      	bics	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe fc0c 	bl	8000e40 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	e009      	b.n	8002642 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262e:	f7fe fc07 	bl	8000e40 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	4a27      	ldr	r2, [pc, #156]	@ (80026d8 <HAL_RCC_ClockConfig+0x1a4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e042      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	220c      	movs	r2, #12
 8002648:	401a      	ands	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ec      	bne.n	800262e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d211      	bcs.n	8002686 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4393      	bics	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x19c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e020      	b.n	80026c8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a11      	ldr	r2, [pc, #68]	@ (80026dc <HAL_RCC_ClockConfig+0x1a8>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026a4:	f000 f820 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80026a8:	0001      	movs	r1, r0
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_RCC_ClockConfig+0x1a0>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	220f      	movs	r2, #15
 80026b2:	4013      	ands	r3, r2
 80026b4:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <HAL_RCC_ClockConfig+0x1ac>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	000a      	movs	r2, r1
 80026ba:	40da      	lsrs	r2, r3
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 80026be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f7fd ffbb 	bl	800063c <HAL_InitTick>
  
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	00001388 	.word	0x00001388
 80026dc:	fffff8ff 	.word	0xfffff8ff
 80026e0:	08005d58 	.word	0x08005d58
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002702:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	220c      	movs	r2, #12
 800270c:	4013      	ands	r3, r2
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d046      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002712:	d848      	bhi.n	80027a6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002714:	2b04      	cmp	r3, #4
 8002716:	d002      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x36>
 8002718:	2b08      	cmp	r3, #8
 800271a:	d003      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x3c>
 800271c:	e043      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002720:	613b      	str	r3, [r7, #16]
      break;
 8002722:	e043      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	0c9b      	lsrs	r3, r3, #18
 8002728:	220f      	movs	r2, #15
 800272a:	4013      	ands	r3, r2
 800272c:	4a24      	ldr	r2, [pc, #144]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	220f      	movs	r2, #15
 8002738:	4013      	ands	r3, r2
 800273a:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	23c0      	movs	r3, #192	@ 0xc0
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	401a      	ands	r2, r3
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	429a      	cmp	r2, r3
 800274e:	d109      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	481a      	ldr	r0, [pc, #104]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002754:	f7fd fcd8 	bl	8000108 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	001a      	movs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4353      	muls	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e01a      	b.n	800279a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	23c0      	movs	r3, #192	@ 0xc0
 8002768:	025b      	lsls	r3, r3, #9
 800276a:	401a      	ands	r2, r3
 800276c:	23c0      	movs	r3, #192	@ 0xc0
 800276e:	025b      	lsls	r3, r3, #9
 8002770:	429a      	cmp	r2, r3
 8002772:	d109      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4814      	ldr	r0, [pc, #80]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002778:	f7fd fcc6 	bl	8000108 <__udivsi3>
 800277c:	0003      	movs	r3, r0
 800277e:	001a      	movs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4353      	muls	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e008      	b.n	800279a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	480c      	ldr	r0, [pc, #48]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xd4>)
 800278c:	f7fd fcbc 	bl	8000108 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	001a      	movs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4353      	muls	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	613b      	str	r3, [r7, #16]
      break;
 800279e:	e005      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80027a2:	613b      	str	r3, [r7, #16]
      break;
 80027a4:	e002      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xd4>)
 80027a8:	613b      	str	r3, [r7, #16]
      break;
 80027aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027ac:	693b      	ldr	r3, [r7, #16]
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b006      	add	sp, #24
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	08005de8 	.word	0x08005de8
 80027c4:	08005df8 	.word	0x08005df8
 80027c8:	02dc6c00 	.word	0x02dc6c00

080027cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d0:	4b02      	ldr	r3, [pc, #8]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x10>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027e4:	f7ff fff2 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 80027e8:	0001      	movs	r1, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	2207      	movs	r2, #7
 80027f2:	4013      	ands	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	40d9      	lsrs	r1, r3
 80027fa:	000b      	movs	r3, r1
}    
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	40021000 	.word	0x40021000
 8002808:	08005d68 	.word	0x08005d68

0800280c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800281c:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_RCC_GetClockConfig+0x4c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	401a      	ands	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_GetClockConfig+0x4c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	22f0      	movs	r2, #240	@ 0xf0
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCC_GetClockConfig+0x4c>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	23e0      	movs	r3, #224	@ 0xe0
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_GetClockConfig+0x50>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	401a      	ands	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800287c:	e08e      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2017      	movs	r0, #23
 8002880:	183b      	adds	r3, r7, r0
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b6e      	ldr	r3, [pc, #440]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	4013      	ands	r3, r2
 8002890:	d110      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b6b      	ldr	r3, [pc, #428]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	4b6a      	ldr	r3, [pc, #424]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	0549      	lsls	r1, r1, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	61da      	str	r2, [r3, #28]
 80028a0:	4b67      	ldr	r3, [pc, #412]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	055b      	lsls	r3, r3, #21
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d11a      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c0:	4b60      	ldr	r3, [pc, #384]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	0049      	lsls	r1, r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fab7 	bl	8000e40 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	e008      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7fe fab2 	bl	8000e40 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0a6      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b56      	ldr	r3, [pc, #344]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028f6:	4b52      	ldr	r3, [pc, #328]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	23c0      	movs	r3, #192	@ 0xc0
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d034      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	23c0      	movs	r3, #192	@ 0xc0
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4013      	ands	r3, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d02c      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002918:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002924:	6a1a      	ldr	r2, [r3, #32]
 8002926:	4b46      	ldr	r3, [pc, #280]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	0249      	lsls	r1, r1, #9
 800292c:	430a      	orrs	r2, r1
 800292e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002930:	4b43      	ldr	r3, [pc, #268]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	4b42      	ldr	r3, [pc, #264]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002936:	4945      	ldr	r1, [pc, #276]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002938:	400a      	ands	r2, r1
 800293a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800293c:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fa79 	bl	8000e40 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fa74 	bl	8000e40 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e067      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b35      	ldr	r3, [pc, #212]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002972:	4b33      	ldr	r3, [pc, #204]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a34      	ldr	r2, [pc, #208]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002982:	430a      	orrs	r2, r1
 8002984:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002986:	2317      	movs	r3, #23
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002996:	492f      	ldr	r1, [pc, #188]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002998:	400a      	ands	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a6:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	2203      	movs	r2, #3
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2202      	movs	r2, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	02db      	lsls	r3, r3, #11
 80029e0:	4013      	ands	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e4:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4013      	ands	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	2210      	movs	r2, #16
 8002a08:	4393      	bics	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	4393      	bics	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	4b03      	ldr	r3, [pc, #12]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a32:	430a      	orrs	r2, r1
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b006      	add	sp, #24
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
 8002a48:	fffffcff 	.word	0xfffffcff
 8002a4c:	fffeffff 	.word	0xfffeffff
 8002a50:	00001388 	.word	0x00001388
 8002a54:	efffffff 	.word	0xefffffff
 8002a58:	fffcffff 	.word	0xfffcffff
 8002a5c:	fff3ffff 	.word	0xfff3ffff

08002a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e042      	b.n	8002af8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	223d      	movs	r2, #61	@ 0x3d
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223c      	movs	r2, #60	@ 0x3c
 8002a82:	2100      	movs	r1, #0
 8002a84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f839 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223d      	movs	r2, #61	@ 0x3d
 8002a92:	2102      	movs	r1, #2
 8002a94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f000 f995 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2246      	movs	r2, #70	@ 0x46
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223e      	movs	r2, #62	@ 0x3e
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223f      	movs	r2, #63	@ 0x3f
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2240      	movs	r2, #64	@ 0x40
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2241      	movs	r2, #65	@ 0x41
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2242      	movs	r2, #66	@ 0x42
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2243      	movs	r2, #67	@ 0x43
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2244      	movs	r2, #68	@ 0x44
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2245      	movs	r2, #69	@ 0x45
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223d      	movs	r2, #61	@ 0x3d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	223d      	movs	r2, #61	@ 0x3d
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e03b      	b.n	8002ba0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	223d      	movs	r2, #61	@ 0x3d
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_TIM_Base_Start_IT+0x98>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00f      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x5a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	05db      	lsls	r3, r3, #23
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d009      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x5a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <HAL_TIM_Base_Start_IT+0x9c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x5a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a12      	ldr	r2, [pc, #72]	@ (8002bb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d111      	bne.n	8002b8e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2207      	movs	r2, #7
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d010      	beq.n	8002b9e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	e007      	b.n	8002b9e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40014000 	.word	0x40014000

08002bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d021      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d01d      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2203      	movs	r2, #3
 8002be2:	4252      	negs	r2, r2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f8d0 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e007      	b.n	8002c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f8c3 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f8cf 	bl	8002db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	d01e      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	4252      	negs	r2, r2
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	23c0      	movs	r3, #192	@ 0xc0
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f8a9 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 8002c4e:	e007      	b.n	8002c60 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f89c 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f8a8 	bl	8002db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d021      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4013      	ands	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2209      	movs	r2, #9
 8002c7c:	4252      	negs	r2, r2
 8002c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2204      	movs	r2, #4
 8002c84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f883 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 8002c9a:	e007      	b.n	8002cac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f876 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f882 	bl	8002db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d01e      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2211      	movs	r2, #17
 8002cc8:	4252      	negs	r2, r2
 8002cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2208      	movs	r2, #8
 8002cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	23c0      	movs	r3, #192	@ 0xc0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f85c 	bl	8002da0 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e007      	b.n	8002cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 f84f 	bl	8002d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f85b 	bl	8002db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00c      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d008      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	4252      	negs	r2, r2
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fe f851 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00c      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d008      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2281      	movs	r2, #129	@ 0x81
 8002d38:	4252      	negs	r2, r2
 8002d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f8dc 	bl	8002efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00c      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2240      	movs	r2, #64	@ 0x40
 8002d50:	4013      	ands	r3, r2
 8002d52:	d008      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2241      	movs	r2, #65	@ 0x41
 8002d5a:	4252      	negs	r2, r2
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f82d 	bl	8002dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d00c      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	4013      	ands	r3, r2
 8002d74:	d008      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2221      	movs	r2, #33	@ 0x21
 8002d7c:	4252      	negs	r2, r2
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 f8b2 	bl	8002eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed0 <TIM_Base_SetConfig+0x100>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d008      	beq.n	8002dfa <TIM_Base_SetConfig+0x2a>
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x2a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <TIM_Base_SetConfig+0x104>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2270      	movs	r2, #112	@ 0x70
 8002dfe:	4393      	bics	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <TIM_Base_SetConfig+0x100>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	05db      	lsls	r3, r3, #23
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d013      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <TIM_Base_SetConfig+0x104>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <TIM_Base_SetConfig+0x108>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	@ (8002edc <TIM_Base_SetConfig+0x10c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a29      	ldr	r2, [pc, #164]	@ (8002ee0 <TIM_Base_SetConfig+0x110>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	001a      	movs	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <TIM_Base_SetConfig+0x100>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_Base_SetConfig+0xce>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <TIM_Base_SetConfig+0x10c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_Base_SetConfig+0xce>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <TIM_Base_SetConfig+0x110>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_Base_SetConfig+0xce>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d103      	bne.n	8002ea6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]
  }
}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b004      	add	sp, #16
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40002000 	.word	0x40002000
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	fffffcff 	.word	0xfffffcff

08002eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e044      	b.n	8002fa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2278      	movs	r2, #120	@ 0x78
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd fb37 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2224      	movs	r2, #36	@ 0x24
 8002f3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 fa14 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f828 	bl	8002fb4 <UART_SetConfig>
 8002f64:	0003      	movs	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01c      	b.n	8002fa8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	490d      	ldr	r1, [pc, #52]	@ (8002fb0 <HAL_UART_Init+0xa4>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	212a      	movs	r1, #42	@ 0x2a
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 faa3 	bl	80034ec <UART_CheckIdleState>
 8002fa6:	0003      	movs	r3, r0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	ffffb7ff 	.word	0xffffb7ff

08002fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fbc:	231e      	movs	r3, #30
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4abe      	ldr	r2, [pc, #760]	@ (80032dc <UART_SetConfig+0x328>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4ab9      	ldr	r2, [pc, #740]	@ (80032e0 <UART_SetConfig+0x32c>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4ab0      	ldr	r2, [pc, #704]	@ (80032e4 <UART_SetConfig+0x330>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4aac      	ldr	r2, [pc, #688]	@ (80032e8 <UART_SetConfig+0x334>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d127      	bne.n	800308a <UART_SetConfig+0xd6>
 800303a:	4bac      	ldr	r3, [pc, #688]	@ (80032ec <UART_SetConfig+0x338>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	2203      	movs	r2, #3
 8003040:	4013      	ands	r3, r2
 8003042:	2b03      	cmp	r3, #3
 8003044:	d00d      	beq.n	8003062 <UART_SetConfig+0xae>
 8003046:	d81b      	bhi.n	8003080 <UART_SetConfig+0xcc>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d014      	beq.n	8003076 <UART_SetConfig+0xc2>
 800304c:	d818      	bhi.n	8003080 <UART_SetConfig+0xcc>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <UART_SetConfig+0xa4>
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00a      	beq.n	800306c <UART_SetConfig+0xb8>
 8003056:	e013      	b.n	8003080 <UART_SetConfig+0xcc>
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e0bd      	b.n	80031de <UART_SetConfig+0x22a>
 8003062:	231f      	movs	r3, #31
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e0b8      	b.n	80031de <UART_SetConfig+0x22a>
 800306c:	231f      	movs	r3, #31
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2204      	movs	r2, #4
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e0b3      	b.n	80031de <UART_SetConfig+0x22a>
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2208      	movs	r2, #8
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e0ae      	b.n	80031de <UART_SetConfig+0x22a>
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2210      	movs	r2, #16
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e0a9      	b.n	80031de <UART_SetConfig+0x22a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a98      	ldr	r2, [pc, #608]	@ (80032f0 <UART_SetConfig+0x33c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d134      	bne.n	80030fe <UART_SetConfig+0x14a>
 8003094:	4b95      	ldr	r3, [pc, #596]	@ (80032ec <UART_SetConfig+0x338>)
 8003096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003098:	23c0      	movs	r3, #192	@ 0xc0
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	22c0      	movs	r2, #192	@ 0xc0
 80030a0:	0292      	lsls	r2, r2, #10
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <UART_SetConfig+0x122>
 80030a6:	22c0      	movs	r2, #192	@ 0xc0
 80030a8:	0292      	lsls	r2, r2, #10
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d822      	bhi.n	80030f4 <UART_SetConfig+0x140>
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	0292      	lsls	r2, r2, #10
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <UART_SetConfig+0x136>
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	0292      	lsls	r2, r2, #10
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d81a      	bhi.n	80030f4 <UART_SetConfig+0x140>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <UART_SetConfig+0x118>
 80030c2:	2280      	movs	r2, #128	@ 0x80
 80030c4:	0252      	lsls	r2, r2, #9
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00a      	beq.n	80030e0 <UART_SetConfig+0x12c>
 80030ca:	e013      	b.n	80030f4 <UART_SetConfig+0x140>
 80030cc:	231f      	movs	r3, #31
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e083      	b.n	80031de <UART_SetConfig+0x22a>
 80030d6:	231f      	movs	r3, #31
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e07e      	b.n	80031de <UART_SetConfig+0x22a>
 80030e0:	231f      	movs	r3, #31
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2204      	movs	r2, #4
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e079      	b.n	80031de <UART_SetConfig+0x22a>
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e074      	b.n	80031de <UART_SetConfig+0x22a>
 80030f4:	231f      	movs	r3, #31
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2210      	movs	r2, #16
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e06f      	b.n	80031de <UART_SetConfig+0x22a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7c      	ldr	r2, [pc, #496]	@ (80032f4 <UART_SetConfig+0x340>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d134      	bne.n	8003172 <UART_SetConfig+0x1be>
 8003108:	4b78      	ldr	r3, [pc, #480]	@ (80032ec <UART_SetConfig+0x338>)
 800310a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800310c:	23c0      	movs	r3, #192	@ 0xc0
 800310e:	031b      	lsls	r3, r3, #12
 8003110:	4013      	ands	r3, r2
 8003112:	22c0      	movs	r2, #192	@ 0xc0
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	4293      	cmp	r3, r2
 8003118:	d017      	beq.n	800314a <UART_SetConfig+0x196>
 800311a:	22c0      	movs	r2, #192	@ 0xc0
 800311c:	0312      	lsls	r2, r2, #12
 800311e:	4293      	cmp	r3, r2
 8003120:	d822      	bhi.n	8003168 <UART_SetConfig+0x1b4>
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <UART_SetConfig+0x1aa>
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	0312      	lsls	r2, r2, #12
 800312e:	4293      	cmp	r3, r2
 8003130:	d81a      	bhi.n	8003168 <UART_SetConfig+0x1b4>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <UART_SetConfig+0x18c>
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	02d2      	lsls	r2, r2, #11
 800313a:	4293      	cmp	r3, r2
 800313c:	d00a      	beq.n	8003154 <UART_SetConfig+0x1a0>
 800313e:	e013      	b.n	8003168 <UART_SetConfig+0x1b4>
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e049      	b.n	80031de <UART_SetConfig+0x22a>
 800314a:	231f      	movs	r3, #31
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e044      	b.n	80031de <UART_SetConfig+0x22a>
 8003154:	231f      	movs	r3, #31
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2204      	movs	r2, #4
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e03f      	b.n	80031de <UART_SetConfig+0x22a>
 800315e:	231f      	movs	r3, #31
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2208      	movs	r2, #8
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e03a      	b.n	80031de <UART_SetConfig+0x22a>
 8003168:	231f      	movs	r3, #31
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2210      	movs	r2, #16
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e035      	b.n	80031de <UART_SetConfig+0x22a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a60      	ldr	r2, [pc, #384]	@ (80032f8 <UART_SetConfig+0x344>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d104      	bne.n	8003186 <UART_SetConfig+0x1d2>
 800317c:	231f      	movs	r3, #31
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e02b      	b.n	80031de <UART_SetConfig+0x22a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5c      	ldr	r2, [pc, #368]	@ (80032fc <UART_SetConfig+0x348>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d104      	bne.n	800319a <UART_SetConfig+0x1e6>
 8003190:	231f      	movs	r3, #31
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e021      	b.n	80031de <UART_SetConfig+0x22a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a58      	ldr	r2, [pc, #352]	@ (8003300 <UART_SetConfig+0x34c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0x1fa>
 80031a4:	231f      	movs	r3, #31
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e017      	b.n	80031de <UART_SetConfig+0x22a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a54      	ldr	r2, [pc, #336]	@ (8003304 <UART_SetConfig+0x350>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d104      	bne.n	80031c2 <UART_SetConfig+0x20e>
 80031b8:	231f      	movs	r3, #31
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e00d      	b.n	80031de <UART_SetConfig+0x22a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a50      	ldr	r2, [pc, #320]	@ (8003308 <UART_SetConfig+0x354>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d104      	bne.n	80031d6 <UART_SetConfig+0x222>
 80031cc:	231f      	movs	r3, #31
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e003      	b.n	80031de <UART_SetConfig+0x22a>
 80031d6:	231f      	movs	r3, #31
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2210      	movs	r2, #16
 80031dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d15c      	bne.n	80032a4 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80031ea:	231f      	movs	r3, #31
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d015      	beq.n	8003220 <UART_SetConfig+0x26c>
 80031f4:	dc18      	bgt.n	8003228 <UART_SetConfig+0x274>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00d      	beq.n	8003216 <UART_SetConfig+0x262>
 80031fa:	dc15      	bgt.n	8003228 <UART_SetConfig+0x274>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <UART_SetConfig+0x252>
 8003200:	2b02      	cmp	r3, #2
 8003202:	d005      	beq.n	8003210 <UART_SetConfig+0x25c>
 8003204:	e010      	b.n	8003228 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003206:	f7ff faeb 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 800320a:	0003      	movs	r3, r0
 800320c:	61bb      	str	r3, [r7, #24]
        break;
 800320e:	e012      	b.n	8003236 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <UART_SetConfig+0x358>)
 8003212:	61bb      	str	r3, [r7, #24]
        break;
 8003214:	e00f      	b.n	8003236 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff fa67 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]
        break;
 800321e:	e00a      	b.n	8003236 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	61bb      	str	r3, [r7, #24]
        break;
 8003226:	e006      	b.n	8003236 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800322c:	231e      	movs	r3, #30
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
        break;
 8003234:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d100      	bne.n	800323e <UART_SetConfig+0x28a>
 800323c:	e095      	b.n	800336a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	18d2      	adds	r2, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f7fc ff59 	bl	8000108 <__udivsi3>
 8003256:	0003      	movs	r3, r0
 8003258:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d91c      	bls.n	800329a <UART_SetConfig+0x2e6>
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	025b      	lsls	r3, r3, #9
 8003266:	429a      	cmp	r2, r3
 8003268:	d217      	bcs.n	800329a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b29a      	uxth	r2, r3
 800326e:	200e      	movs	r0, #14
 8003270:	183b      	adds	r3, r7, r0
 8003272:	210f      	movs	r1, #15
 8003274:	438a      	bics	r2, r1
 8003276:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	2207      	movs	r2, #7
 8003280:	4013      	ands	r3, r2
 8003282:	b299      	uxth	r1, r3
 8003284:	183b      	adds	r3, r7, r0
 8003286:	183a      	adds	r2, r7, r0
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	183a      	adds	r2, r7, r0
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e067      	b.n	800336a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800329a:	231e      	movs	r3, #30
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e062      	b.n	800336a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a4:	231f      	movs	r3, #31
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d030      	beq.n	8003310 <UART_SetConfig+0x35c>
 80032ae:	dc33      	bgt.n	8003318 <UART_SetConfig+0x364>
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00d      	beq.n	80032d0 <UART_SetConfig+0x31c>
 80032b4:	dc30      	bgt.n	8003318 <UART_SetConfig+0x364>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <UART_SetConfig+0x30c>
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d005      	beq.n	80032ca <UART_SetConfig+0x316>
 80032be:	e02b      	b.n	8003318 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7ff fa8e 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 80032c4:	0003      	movs	r3, r0
 80032c6:	61bb      	str	r3, [r7, #24]
        break;
 80032c8:	e02d      	b.n	8003326 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ca:	4b10      	ldr	r3, [pc, #64]	@ (800330c <UART_SetConfig+0x358>)
 80032cc:	61bb      	str	r3, [r7, #24]
        break;
 80032ce:	e02a      	b.n	8003326 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d0:	f7ff fa0a 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80032d4:	0003      	movs	r3, r0
 80032d6:	61bb      	str	r3, [r7, #24]
        break;
 80032d8:	e025      	b.n	8003326 <UART_SetConfig+0x372>
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	efff69f3 	.word	0xefff69f3
 80032e0:	ffffcfff 	.word	0xffffcfff
 80032e4:	fffff4ff 	.word	0xfffff4ff
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40004400 	.word	0x40004400
 80032f4:	40004800 	.word	0x40004800
 80032f8:	40004c00 	.word	0x40004c00
 80032fc:	40005000 	.word	0x40005000
 8003300:	40011400 	.word	0x40011400
 8003304:	40011800 	.word	0x40011800
 8003308:	40011c00 	.word	0x40011c00
 800330c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e006      	b.n	8003326 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331c:	231e      	movs	r3, #30
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
        break;
 8003324:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01e      	beq.n	800336a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085a      	lsrs	r2, r3, #1
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f7fc fee3 	bl	8000108 <__udivsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b0f      	cmp	r3, #15
 800334a:	d90a      	bls.n	8003362 <UART_SetConfig+0x3ae>
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	025b      	lsls	r3, r3, #9
 8003352:	429a      	cmp	r2, r3
 8003354:	d205      	bcs.n	8003362 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e003      	b.n	800336a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	231e      	movs	r3, #30
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003376:	231e      	movs	r3, #30
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b008      	add	sp, #32
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	2208      	movs	r2, #8
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <UART_AdvFeatureConfig+0x144>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	2201      	movs	r2, #1
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a43      	ldr	r2, [pc, #268]	@ (80034cc <UART_AdvFeatureConfig+0x148>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	@ (80034d0 <UART_AdvFeatureConfig+0x14c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a34      	ldr	r2, [pc, #208]	@ (80034d4 <UART_AdvFeatureConfig+0x150>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <UART_AdvFeatureConfig+0x154>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a25      	ldr	r2, [pc, #148]	@ (80034dc <UART_AdvFeatureConfig+0x158>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	2240      	movs	r2, #64	@ 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	d01d      	beq.n	800349e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <UART_AdvFeatureConfig+0x15c>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	429a      	cmp	r2, r3
 8003484:	d10b      	bne.n	800349e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <UART_AdvFeatureConfig+0x160>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	@ (80034e8 <UART_AdvFeatureConfig+0x164>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	ffff7fff 	.word	0xffff7fff
 80034cc:	fffdffff 	.word	0xfffdffff
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	fffbffff 	.word	0xfffbffff
 80034d8:	ffffefff 	.word	0xffffefff
 80034dc:	ffffdfff 	.word	0xffffdfff
 80034e0:	ffefffff 	.word	0xffefffff
 80034e4:	ff9fffff 	.word	0xff9fffff
 80034e8:	fff7ffff 	.word	0xfff7ffff

080034ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b092      	sub	sp, #72	@ 0x48
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2284      	movs	r2, #132	@ 0x84
 80034f8:	2100      	movs	r1, #0
 80034fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fc:	f7fd fca0 	bl	8000e40 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	2b08      	cmp	r3, #8
 8003510:	d12c      	bne.n	800356c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003514:	2280      	movs	r2, #128	@ 0x80
 8003516:	0391      	lsls	r1, r2, #14
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4a46      	ldr	r2, [pc, #280]	@ (8003634 <UART_CheckIdleState+0x148>)
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	f000 f88c 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d021      	beq.n	800356c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2180      	movs	r1, #128	@ 0x80
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2278      	movs	r2, #120	@ 0x78
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e05f      	b.n	800362c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	2b04      	cmp	r3, #4
 8003578:	d146      	bne.n	8003608 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	03d1      	lsls	r1, r2, #15
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4a2c      	ldr	r2, [pc, #176]	@ (8003634 <UART_CheckIdleState+0x148>)
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	f000 f858 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d03b      	beq.n	8003608 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	60fb      	str	r3, [r7, #12]
  return(result);
 8003596:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	2301      	movs	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4921      	ldr	r1, [pc, #132]	@ (8003638 <UART_CheckIdleState+0x14c>)
 80035b2:	400a      	ands	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c2:	f3ef 8310 	mrs	r3, PRIMASK
 80035c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80035c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80035cc:	2301      	movs	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	@ 0x80
 80035f8:	2120      	movs	r1, #32
 80035fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2278      	movs	r2, #120	@ 0x78
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e011      	b.n	800362c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	2120      	movs	r1, #32
 8003614:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2278      	movs	r2, #120	@ 0x78
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b010      	add	sp, #64	@ 0x40
 8003632:	bd80      	pop	{r7, pc}
 8003634:	01ffffff 	.word	0x01ffffff
 8003638:	fffffedf 	.word	0xfffffedf

0800363c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	e051      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3301      	adds	r3, #1
 8003652:	d04e      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003654:	f7fd fbf4 	bl	8000e40 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e051      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d03b      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b80      	cmp	r3, #128	@ 0x80
 800367e:	d038      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d035      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2208      	movs	r2, #8
 800368e:	4013      	ands	r3, r2
 8003690:	2b08      	cmp	r3, #8
 8003692:	d111      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f83c 	bl	800371c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2284      	movs	r2, #132	@ 0x84
 80036a8:	2108      	movs	r1, #8
 80036aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2278      	movs	r2, #120	@ 0x78
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e02c      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	401a      	ands	r2, r3
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d112      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f81f 	bl	800371c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2284      	movs	r2, #132	@ 0x84
 80036e2:	2120      	movs	r1, #32
 80036e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2278      	movs	r2, #120	@ 0x78
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e00f      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	425a      	negs	r2, r3
 8003702:	4153      	adcs	r3, r2
 8003704:	b2db      	uxtb	r3, r3
 8003706:	001a      	movs	r2, r3
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d09e      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b004      	add	sp, #16
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	@ 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	617b      	str	r3, [r7, #20]
  return(result);
 800372a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4926      	ldr	r1, [pc, #152]	@ (80037e0 <UART_EndRxTransfer+0xc4>)
 8003746:	400a      	ands	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	623b      	str	r3, [r7, #32]
  return(result);
 800375c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003760:	2301      	movs	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	2b01      	cmp	r3, #1
 800378e:	d118      	bne.n	80037c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	60bb      	str	r3, [r7, #8]
  return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379a:	2301      	movs	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			@ (mov r8, r8)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2110      	movs	r1, #16
 80037b2:	438a      	bics	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	2120      	movs	r1, #32
 80037c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b00e      	add	sp, #56	@ 0x38
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	fffffedf 	.word	0xfffffedf

080037e4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ea:	f3ef 8305 	mrs	r3, IPSR
 80037ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f6:	f3ef 8310 	mrs	r3, PRIMASK
 80037fa:	607b      	str	r3, [r7, #4]
  return(result);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <osKernelInitialize+0x2e>
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <osKernelInitialize+0x54>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d103      	bne.n	8003812 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800380a:	2306      	movs	r3, #6
 800380c:	425b      	negs	r3, r3
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <osKernelInitialize+0x54>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800381a:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <osKernelInitialize+0x54>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e002      	b.n	800382c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003826:	2301      	movs	r3, #1
 8003828:	425b      	negs	r3, r3
 800382a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	200001b0 	.word	0x200001b0

0800383c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003842:	f3ef 8305 	mrs	r3, IPSR
 8003846:	60bb      	str	r3, [r7, #8]
  return(result);
 8003848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	607b      	str	r3, [r7, #4]
  return(result);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <osKernelStart+0x2e>
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <osKernelStart+0x58>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d103      	bne.n	800386a <osKernelStart+0x2e>
    stat = osErrorISR;
 8003862:	2306      	movs	r3, #6
 8003864:	425b      	negs	r3, r3
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e00e      	b.n	8003888 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800386a:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <osKernelStart+0x58>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8003872:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <osKernelStart+0x58>)
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003878:	f000 ff92 	bl	80047a0 <vTaskStartScheduler>
      stat = osOK;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e002      	b.n	8003888 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8003882:	2301      	movs	r3, #1
 8003884:	425b      	negs	r3, r3
 8003886:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	200001b0 	.word	0x200001b0

08003898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b090      	sub	sp, #64	@ 0x40
 800389c:	af04      	add	r7, sp, #16
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a8:	f3ef 8305 	mrs	r3, IPSR
 80038ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80038ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d000      	beq.n	80038b6 <osThreadNew+0x1e>
 80038b4:	e090      	b.n	80039d8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <osThreadNew+0x34>
 80038c2:	4b48      	ldr	r3, [pc, #288]	@ (80039e4 <osThreadNew+0x14c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d100      	bne.n	80038cc <osThreadNew+0x34>
 80038ca:	e085      	b.n	80039d8 <osThreadNew+0x140>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d100      	bne.n	80038d4 <osThreadNew+0x3c>
 80038d2:	e081      	b.n	80039d8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80038d4:	2380      	movs	r3, #128	@ 0x80
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80038d8:	2318      	movs	r3, #24
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24

    empty = '\0';
 80038dc:	2117      	movs	r1, #23
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem   = -1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	425b      	negs	r3, r3
 80038ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d044      	beq.n	800397e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <osThreadNew+0x6a>
        name = attr->name;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <osThreadNew+0x8e>
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	2b38      	cmp	r3, #56	@ 0x38
 800391a:	d804      	bhi.n	8003926 <osThreadNew+0x8e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	d001      	beq.n	800392a <osThreadNew+0x92>
        return (NULL);
 8003926:	2300      	movs	r3, #0
 8003928:	e057      	b.n	80039da <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <osThreadNew+0xc8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b5b      	cmp	r3, #91	@ 0x5b
 8003948:	d90a      	bls.n	8003960 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <osThreadNew+0xc8>
        mem = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	e010      	b.n	8003982 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <osThreadNew+0xea>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <osThreadNew+0xea>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <osThreadNew+0xea>
          mem = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	e001      	b.n	8003982 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d112      	bne.n	80039ae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003990:	68bd      	ldr	r5, [r7, #8]
 8003992:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	9201      	str	r2, [sp, #4]
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	002b      	movs	r3, r5
 80039a2:	0022      	movs	r2, r4
 80039a4:	f000 fd59 	bl	800445a <xTaskCreateStatic>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e014      	b.n	80039d8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d111      	bne.n	80039d8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68bc      	ldr	r4, [r7, #8]
 80039ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	2310      	movs	r3, #16
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	0023      	movs	r3, r4
 80039ca:	f000 fd8c 	bl	80044e6 <xTaskCreate>
 80039ce:	0003      	movs	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <osThreadNew+0x140>
          hTask = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039d8:	693b      	ldr	r3, [r7, #16]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b00c      	add	sp, #48	@ 0x30
 80039e0:	bdb0      	pop	{r4, r5, r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	200001b0 	.word	0x200001b0

080039e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f0:	f3ef 8305 	mrs	r3, IPSR
 80039f4:	613b      	str	r3, [r7, #16]
  return(result);
 80039f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <osDelay+0x30>
 8003a08:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <osDelay+0x4c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d103      	bne.n	8003a18 <osDelay+0x30>
    stat = osErrorISR;
 8003a10:	2306      	movs	r3, #6
 8003a12:	425b      	negs	r3, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e008      	b.n	8003a2a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <osDelay+0x42>
      vTaskDelay(ticks);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 fe95 	bl	8004754 <vTaskDelay>
    }
  }

  return (stat);
 8003a2a:	697b      	ldr	r3, [r7, #20]
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b006      	add	sp, #24
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200001b0 	.word	0x200001b0

08003a38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <vApplicationGetIdleTaskMemory+0x28>)
 8003a48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	@ 0x80
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	200001b4 	.word	0x200001b4
 8003a64:	20000210 	.word	0x20000210

08003a68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a06      	ldr	r2, [pc, #24]	@ (8003a90 <vApplicationGetTimerTaskMemory+0x28>)
 8003a78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2280      	movs	r2, #128	@ 0x80
 8003a84:	0052      	lsls	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000410 	.word	0x20000410
 8003a94:	2000046c 	.word	0x2000046c

08003a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4252      	negs	r2, r2
 8003ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b004      	add	sp, #16
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3301      	adds	r3, #1
 8003b42:	d103      	bne.n	8003b4c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e00c      	b.n	8003b66 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <vListInsert+0x2c>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d2f6      	bcs.n	8003b54 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6852      	ldr	r2, [r2, #4]
 8003bba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d103      	bne.n	8003bce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}

08003bea <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <xQueueGenericReset+0x1a>
 8003bfe:	b672      	cpsid	i
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	e7fd      	b.n	8003c00 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003c04:	f001 fe04 	bl	8005810 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	434b      	muls	r3, r1
 8003c16:	18d2      	adds	r2, r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	1e59      	subs	r1, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	434b      	muls	r3, r1
 8003c3a:	18d2      	adds	r2, r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2244      	movs	r2, #68	@ 0x44
 8003c44:	21ff      	movs	r1, #255	@ 0xff
 8003c46:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2245      	movs	r2, #69	@ 0x45
 8003c4c:	21ff      	movs	r1, #255	@ 0xff
 8003c4e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d013      	beq.n	8003c86 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3310      	adds	r3, #16
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 ffe8 	bl	8004c38 <xTaskRemoveFromEventList>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d00c      	beq.n	8003c86 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c6c:	f001 fdc0 	bl	80057f0 <vPortYield>
 8003c70:	e009      	b.n	8003c86 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3310      	adds	r3, #16
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff ff0e 	bl	8003a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3324      	adds	r3, #36	@ 0x24
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7ff ff09 	bl	8003a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c86:	f001 fdd5 	bl	8005834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c8a:	2301      	movs	r3, #1
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b004      	add	sp, #16
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <xQueueGenericCreateStatic+0x1a>
 8003ca8:	b672      	cpsid	i
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	e7fd      	b.n	8003caa <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <xQueueGenericCreateStatic+0x26>
 8003cb4:	b672      	cpsid	i
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	e7fd      	b.n	8003cb6 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <xQueueGenericCreateStatic+0x32>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <xQueueGenericCreateStatic+0x36>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueGenericCreateStatic+0x38>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <xQueueGenericCreateStatic+0x42>
 8003cd0:	b672      	cpsid	i
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	e7fd      	b.n	8003cd2 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueGenericCreateStatic+0x4e>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueGenericCreateStatic+0x52>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueGenericCreateStatic+0x54>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <xQueueGenericCreateStatic+0x5e>
 8003cec:	b672      	cpsid	i
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	e7fd      	b.n	8003cee <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cf2:	2350      	movs	r3, #80	@ 0x50
 8003cf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b50      	cmp	r3, #80	@ 0x50
 8003cfa:	d002      	beq.n	8003d02 <xQueueGenericCreateStatic+0x6e>
 8003cfc:	b672      	cpsid	i
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	e7fd      	b.n	8003cfe <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2246      	movs	r2, #70	@ 0x46
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d14:	2328      	movs	r3, #40	@ 0x28
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781c      	ldrb	r4, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0023      	movs	r3, r4
 8003d26:	f000 f805 	bl	8003d34 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d2a:	697b      	ldr	r3, [r7, #20]
	}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b007      	add	sp, #28
 8003d32:	bd90      	pop	{r4, r7, pc}

08003d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	001a      	movs	r2, r3
 8003d42:	1cfb      	adds	r3, r7, #3
 8003d44:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff ff3d 	bl	8003bea <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1cfa      	adds	r2, r7, #3
 8003d74:	214c      	movs	r1, #76	@ 0x4c
 8003d76:	7812      	ldrb	r2, [r2, #0]
 8003d78:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	@ 0x28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <xQueueGenericSend+0x22>
 8003d9e:	b672      	cpsid	i
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	e7fd      	b.n	8003da0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <xQueueGenericSend+0x30>
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <xQueueGenericSend+0x34>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <xQueueGenericSend+0x36>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueGenericSend+0x40>
 8003dbc:	b672      	cpsid	i
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	e7fd      	b.n	8003dbe <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d103      	bne.n	8003dd0 <xQueueGenericSend+0x4e>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <xQueueGenericSend+0x52>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <xQueueGenericSend+0x54>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <xQueueGenericSend+0x5e>
 8003dda:	b672      	cpsid	i
 8003ddc:	46c0      	nop			@ (mov r8, r8)
 8003dde:	e7fd      	b.n	8003ddc <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de0:	f001 f8c8 	bl	8004f74 <xTaskGetSchedulerState>
 8003de4:	1e03      	subs	r3, r0, #0
 8003de6:	d102      	bne.n	8003dee <xQueueGenericSend+0x6c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <xQueueGenericSend+0x70>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <xQueueGenericSend+0x72>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <xQueueGenericSend+0x7c>
 8003df8:	b672      	cpsid	i
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	e7fd      	b.n	8003dfa <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dfe:	f001 fd07 	bl	8005810 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <xQueueGenericSend+0x92>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11e      	bne.n	8003e52 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f9a5 	bl	800416a <prvCopyDataToQueue>
 8003e20:	0003      	movs	r3, r0
 8003e22:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	3324      	adds	r3, #36	@ 0x24
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 ff01 	bl	8004c38 <xTaskRemoveFromEventList>
 8003e36:	1e03      	subs	r3, r0, #0
 8003e38:	d007      	beq.n	8003e4a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e3a:	f001 fcd9 	bl	80057f0 <vPortYield>
 8003e3e:	e004      	b.n	8003e4a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e46:	f001 fcd3 	bl	80057f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e4a:	f001 fcf3 	bl	8005834 <vPortExitCritical>
				return pdPASS;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e05b      	b.n	8003f0a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e58:	f001 fcec 	bl	8005834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e054      	b.n	8003f0a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e66:	2314      	movs	r3, #20
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 ff42 	bl	8004cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e74:	f001 fcde 	bl	8005834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e78:	f000 fce8 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e7c:	f001 fcc8 	bl	8005810 <vPortEnterCritical>
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2244      	movs	r2, #68	@ 0x44
 8003e84:	5c9b      	ldrb	r3, [r3, r2]
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d103      	bne.n	8003e94 <xQueueGenericSend+0x112>
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2244      	movs	r2, #68	@ 0x44
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2245      	movs	r2, #69	@ 0x45
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	d103      	bne.n	8003ea8 <xQueueGenericSend+0x126>
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2245      	movs	r2, #69	@ 0x45
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]
 8003ea8:	f001 fcc4 	bl	8005834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eac:	1d3a      	adds	r2, r7, #4
 8003eae:	2314      	movs	r3, #20
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 ff31 	bl	8004d1c <xTaskCheckForTimeOut>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d11e      	bne.n	8003efc <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fa57 	bl	8004374 <prvIsQueueFull>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d011      	beq.n	8003eee <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	3310      	adds	r3, #16
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fe68 	bl	8004ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 f9d6 	bl	800428c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ee0:	f000 fcc0 	bl	8004864 <xTaskResumeAll>
 8003ee4:	1e03      	subs	r3, r0, #0
 8003ee6:	d18a      	bne.n	8003dfe <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8003ee8:	f001 fc82 	bl	80057f0 <vPortYield>
 8003eec:	e787      	b.n	8003dfe <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 f9cb 	bl	800428c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef6:	f000 fcb5 	bl	8004864 <xTaskResumeAll>
 8003efa:	e780      	b.n	8003dfe <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f9c4 	bl	800428c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f04:	f000 fcae 	bl	8004864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f08:	2300      	movs	r3, #0
		}
	}
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b00a      	add	sp, #40	@ 0x28
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f12:	b590      	push	{r4, r7, lr}
 8003f14:	b089      	sub	sp, #36	@ 0x24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <xQueueGenericSendFromISR+0x1e>
 8003f2a:	b672      	cpsid	i
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSendFromISR+0x2c>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <xQueueGenericSendFromISR+0x30>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericSendFromISR+0x32>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <xQueueGenericSendFromISR+0x3c>
 8003f48:	b672      	cpsid	i
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	e7fd      	b.n	8003f4a <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d103      	bne.n	8003f5c <xQueueGenericSendFromISR+0x4a>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <xQueueGenericSendFromISR+0x4e>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <xQueueGenericSendFromISR+0x50>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <xQueueGenericSendFromISR+0x5a>
 8003f66:	b672      	cpsid	i
 8003f68:	46c0      	nop			@ (mov r8, r8)
 8003f6a:	e7fd      	b.n	8003f68 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f6c:	f001 fc7a 	bl	8005864 <ulSetInterruptMaskFromISR>
 8003f70:	0003      	movs	r3, r0
 8003f72:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <xQueueGenericSendFromISR+0x74>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d12e      	bne.n	8003fe4 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f86:	2413      	movs	r4, #19
 8003f88:	193b      	adds	r3, r7, r4
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	2145      	movs	r1, #69	@ 0x45
 8003f8e:	5c52      	ldrb	r2, [r2, r1]
 8003f90:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f8e6 	bl	800416a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f9e:	193b      	adds	r3, r7, r4
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	d111      	bne.n	8003fcc <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d016      	beq.n	8003fde <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	3324      	adds	r3, #36	@ 0x24
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 fe3f 	bl	8004c38 <xTaskRemoveFromEventList>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d00f      	beq.n	8003fde <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00c      	beq.n	8003fde <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e008      	b.n	8003fde <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fcc:	2313      	movs	r3, #19
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	b259      	sxtb	r1, r3
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2245      	movs	r2, #69	@ 0x45
 8003fdc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
		{
 8003fe2:	e001      	b.n	8003fe8 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f001 fc40 	bl	8005870 <vClearInterruptMaskFromISR>

	return xReturn;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b009      	add	sp, #36	@ 0x24
 8003ff8:	bd90      	pop	{r4, r7, pc}

08003ffa <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b08a      	sub	sp, #40	@ 0x28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <xQueueReceive+0x20>
 8004014:	b672      	cpsid	i
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	e7fd      	b.n	8004016 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <xQueueReceive+0x2e>
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <xQueueReceive+0x32>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <xQueueReceive+0x34>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <xQueueReceive+0x3e>
 8004032:	b672      	cpsid	i
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e7fd      	b.n	8004034 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004038:	f000 ff9c 	bl	8004f74 <xTaskGetSchedulerState>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d102      	bne.n	8004046 <xQueueReceive+0x4c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <xQueueReceive+0x50>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <xQueueReceive+0x52>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <xQueueReceive+0x5c>
 8004050:	b672      	cpsid	i
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	e7fd      	b.n	8004052 <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004056:	f001 fbdb 	bl	8005810 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01a      	beq.n	800409c <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	0011      	movs	r1, r2
 800406c:	0018      	movs	r0, r3
 800406e:	f000 f8e7 	bl	8004240 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	3310      	adds	r3, #16
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fdd6 	bl	8004c38 <xTaskRemoveFromEventList>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004090:	f001 fbae 	bl	80057f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004094:	f001 fbce 	bl	8005834 <vPortExitCritical>
				return pdPASS;
 8004098:	2301      	movs	r3, #1
 800409a:	e062      	b.n	8004162 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040a2:	f001 fbc7 	bl	8005834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e05b      	b.n	8004162 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040b0:	2314      	movs	r3, #20
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fe1d 	bl	8004cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040be:	f001 fbb9 	bl	8005834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040c2:	f000 fbc3 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040c6:	f001 fba3 	bl	8005810 <vPortEnterCritical>
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2244      	movs	r2, #68	@ 0x44
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	d103      	bne.n	80040de <xQueueReceive+0xe4>
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2244      	movs	r2, #68	@ 0x44
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2245      	movs	r2, #69	@ 0x45
 80040e2:	5c9b      	ldrb	r3, [r3, r2]
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	d103      	bne.n	80040f2 <xQueueReceive+0xf8>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2245      	movs	r2, #69	@ 0x45
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	f001 fb9f 	bl	8005834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040f6:	1d3a      	adds	r2, r7, #4
 80040f8:	2314      	movs	r3, #20
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fe0c 	bl	8004d1c <xTaskCheckForTimeOut>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d11e      	bne.n	8004146 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f91c 	bl	8004348 <prvIsQueueEmpty>
 8004110:	1e03      	subs	r3, r0, #0
 8004112:	d011      	beq.n	8004138 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	3324      	adds	r3, #36	@ 0x24
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	0011      	movs	r1, r2
 800411c:	0018      	movs	r0, r3
 800411e:	f000 fd43 	bl	8004ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	0018      	movs	r0, r3
 8004126:	f000 f8b1 	bl	800428c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800412a:	f000 fb9b 	bl	8004864 <xTaskResumeAll>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d191      	bne.n	8004056 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8004132:	f001 fb5d 	bl	80057f0 <vPortYield>
 8004136:	e78e      	b.n	8004056 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f8a6 	bl	800428c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004140:	f000 fb90 	bl	8004864 <xTaskResumeAll>
 8004144:	e787      	b.n	8004056 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f89f 	bl	800428c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800414e:	f000 fb89 	bl	8004864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8f7 	bl	8004348 <prvIsQueueEmpty>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d100      	bne.n	8004160 <xQueueReceive+0x166>
 800415e:	e77a      	b.n	8004056 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b00a      	add	sp, #40	@ 0x28
 8004168:	bd80      	pop	{r7, pc}

0800416a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10e      	bne.n	80041a6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d14e      	bne.n	800422e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f000 ff09 	bl	8004fac <xTaskPriorityDisinherit>
 800419a:	0003      	movs	r3, r0
 800419c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	e043      	b.n	800422e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d119      	bne.n	80041e0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6898      	ldr	r0, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0019      	movs	r1, r3
 80041b8:	f001 fd98 	bl	8005cec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	18d2      	adds	r2, r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d32b      	bcc.n	800422e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e026      	b.n	800422e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68d8      	ldr	r0, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	0019      	movs	r1, r3
 80041ec:	f001 fd7e 	bl	8005cec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	425b      	negs	r3, r3
 80041fa:	18d2      	adds	r2, r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d207      	bcs.n	800421c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	425b      	negs	r3, r3
 8004216:	18d2      	adds	r2, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d105      	bne.n	800422e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3b01      	subs	r3, #1
 800422c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004236:	697b      	ldr	r3, [r7, #20]
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b006      	add	sp, #24
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d018      	beq.n	8004284 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	18d2      	adds	r2, r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d303      	bcc.n	8004274 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68d9      	ldr	r1, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	0018      	movs	r0, r3
 8004280:	f001 fd34 	bl	8005cec <memcpy>
	}
}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004294:	f001 fabc 	bl	8005810 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004298:	230f      	movs	r3, #15
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	2145      	movs	r1, #69	@ 0x45
 80042a0:	5c52      	ldrb	r2, [r2, r1]
 80042a2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a4:	e013      	b.n	80042ce <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3324      	adds	r3, #36	@ 0x24
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 fcc0 	bl	8004c38 <xTaskRemoveFromEventList>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d001      	beq.n	80042c0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042bc:	f000 fd80 	bl	8004dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042c0:	210f      	movs	r1, #15
 80042c2:	187b      	adds	r3, r7, r1
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dce5      	bgt.n	80042a6 <prvUnlockQueue+0x1a>
 80042da:	e000      	b.n	80042de <prvUnlockQueue+0x52>
					break;
 80042dc:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2245      	movs	r2, #69	@ 0x45
 80042e2:	21ff      	movs	r1, #255	@ 0xff
 80042e4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80042e6:	f001 faa5 	bl	8005834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ea:	f001 fa91 	bl	8005810 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042ee:	230e      	movs	r3, #14
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	2144      	movs	r1, #68	@ 0x44
 80042f6:	5c52      	ldrb	r2, [r2, r1]
 80042f8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042fa:	e013      	b.n	8004324 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3310      	adds	r3, #16
 8004308:	0018      	movs	r0, r3
 800430a:	f000 fc95 	bl	8004c38 <xTaskRemoveFromEventList>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d001      	beq.n	8004316 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004312:	f000 fd55 	bl	8004dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004316:	210e      	movs	r1, #14
 8004318:	187b      	adds	r3, r7, r1
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	187b      	adds	r3, r7, r1
 8004322:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004324:	230e      	movs	r3, #14
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b25b      	sxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	dce5      	bgt.n	80042fc <prvUnlockQueue+0x70>
 8004330:	e000      	b.n	8004334 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004332:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2244      	movs	r2, #68	@ 0x44
 8004338:	21ff      	movs	r1, #255	@ 0xff
 800433a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800433c:	f001 fa7a 	bl	8005834 <vPortExitCritical>
}
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004350:	f001 fa5e 	bl	8005810 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e001      	b.n	8004366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004366:	f001 fa65 	bl	8005834 <vPortExitCritical>

	return xReturn;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}

08004374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800437c:	f001 fa48 	bl	8005810 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	429a      	cmp	r2, r3
 800438a:	d102      	bne.n	8004392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004396:	f001 fa4d 	bl	8005834 <vPortExitCritical>

	return xReturn;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e015      	b.n	80043e0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043b4:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <vQueueAddToRegistry+0x4c>)
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	00d2      	lsls	r2, r2, #3
 80043ba:	58d3      	ldr	r3, [r2, r3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <vQueueAddToRegistry+0x4c>)
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	00d2      	lsls	r2, r2, #3
 80043c6:	6839      	ldr	r1, [r7, #0]
 80043c8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043ca:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <vQueueAddToRegistry+0x4c>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	3304      	adds	r3, #4
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043d8:	e006      	b.n	80043e8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d9e6      	bls.n	80043b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	46c0      	nop			@ (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	2000086c 	.word	0x2000086c

080043f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004404:	f001 fa04 	bl	8005810 <vPortEnterCritical>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2244      	movs	r2, #68	@ 0x44
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b25b      	sxtb	r3, r3
 8004410:	3301      	adds	r3, #1
 8004412:	d103      	bne.n	800441c <vQueueWaitForMessageRestricted+0x28>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2244      	movs	r2, #68	@ 0x44
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2245      	movs	r2, #69	@ 0x45
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	b25b      	sxtb	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	d103      	bne.n	8004430 <vQueueWaitForMessageRestricted+0x3c>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2245      	movs	r2, #69	@ 0x45
 800442c:	2100      	movs	r1, #0
 800442e:	5499      	strb	r1, [r3, r2]
 8004430:	f001 fa00 	bl	8005834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3324      	adds	r3, #36	@ 0x24
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 fbcf 	bl	8004be8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff ff1d 	bl	800428c <prvUnlockQueue>
	}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b006      	add	sp, #24
 8004458:	bd80      	pop	{r7, pc}

0800445a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800445a:	b590      	push	{r4, r7, lr}
 800445c:	b08d      	sub	sp, #52	@ 0x34
 800445e:	af04      	add	r7, sp, #16
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <xTaskCreateStatic+0x1a>
 800446e:	b672      	cpsid	i
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e7fd      	b.n	8004470 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <xTaskCreateStatic+0x26>
 800447a:	b672      	cpsid	i
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e7fd      	b.n	800447c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004480:	235c      	movs	r3, #92	@ 0x5c
 8004482:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b5c      	cmp	r3, #92	@ 0x5c
 8004488:	d002      	beq.n	8004490 <xTaskCreateStatic+0x36>
 800448a:	b672      	cpsid	i
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	e7fd      	b.n	800448c <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <xTaskCreateStatic+0x7e>
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01d      	beq.n	80044d8 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2259      	movs	r2, #89	@ 0x59
 80044aa:	2102      	movs	r1, #2
 80044ac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044ae:	683c      	ldr	r4, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	2318      	movs	r3, #24
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	0023      	movs	r3, r4
 80044ca:	f000 f859 	bl	8004580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f8d7 	bl	8004684 <prvAddNewTaskToReadyList>
 80044d6:	e001      	b.n	80044dc <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044dc:	69bb      	ldr	r3, [r7, #24]
	}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b009      	add	sp, #36	@ 0x24
 80044e4:	bd90      	pop	{r4, r7, pc}

080044e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044e6:	b590      	push	{r4, r7, lr}
 80044e8:	b08d      	sub	sp, #52	@ 0x34
 80044ea:	af04      	add	r7, sp, #16
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	1dbb      	adds	r3, r7, #6
 80044f4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f6:	1dbb      	adds	r3, r7, #6
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f001 fa1f 	bl	8005940 <pvPortMalloc>
 8004502:	0003      	movs	r3, r0
 8004504:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800450c:	205c      	movs	r0, #92	@ 0x5c
 800450e:	f001 fa17 	bl	8005940 <pvPortMalloc>
 8004512:	0003      	movs	r3, r0
 8004514:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
 8004522:	e006      	b.n	8004532 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0018      	movs	r0, r3
 8004528:	f001 fab2 	bl	8005a90 <vPortFree>
 800452c:	e001      	b.n	8004532 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01a      	beq.n	800456e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2259      	movs	r2, #89	@ 0x59
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004540:	1dbb      	adds	r3, r7, #6
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	683c      	ldr	r4, [r7, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	2300      	movs	r3, #0
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	0023      	movs	r3, r4
 800455c:	f000 f810 	bl	8004580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f88e 	bl	8004684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004568:	2301      	movs	r3, #1
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e002      	b.n	8004574 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800456e:	2301      	movs	r3, #1
 8004570:	425b      	negs	r3, r3
 8004572:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004574:	69bb      	ldr	r3, [r7, #24]
	}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b009      	add	sp, #36	@ 0x24
 800457c:	bd90      	pop	{r4, r7, pc}
	...

08004580 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	001a      	movs	r2, r3
 8004598:	21a5      	movs	r1, #165	@ 0xa5
 800459a:	f001 fb7b 	bl	8005c94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4936      	ldr	r1, [pc, #216]	@ (8004680 <prvInitialiseNewTask+0x100>)
 80045a6:	468c      	mov	ip, r1
 80045a8:	4463      	add	r3, ip
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	18d3      	adds	r3, r2, r3
 80045ae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2207      	movs	r2, #7
 80045b4:	4393      	bics	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2207      	movs	r2, #7
 80045bc:	4013      	ands	r3, r2
 80045be:	d002      	beq.n	80045c6 <prvInitialiseNewTask+0x46>
 80045c0:	b672      	cpsid	i
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	e7fd      	b.n	80045c2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e013      	b.n	80045f4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	18d3      	adds	r3, r2, r3
 80045d2:	7818      	ldrb	r0, [r3, #0]
 80045d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045d6:	2134      	movs	r1, #52	@ 0x34
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	185b      	adds	r3, r3, r1
 80045de:	1c02      	adds	r2, r0, #0
 80045e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d006      	beq.n	80045fc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3301      	adds	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d9e8      	bls.n	80045cc <prvInitialiseNewTask+0x4c>
 80045fa:	e000      	b.n	80045fe <prvInitialiseNewTask+0x7e>
		{
			break;
 80045fc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	2243      	movs	r2, #67	@ 0x43
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2b37      	cmp	r3, #55	@ 0x37
 800460a:	d901      	bls.n	8004610 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800460c:	2337      	movs	r3, #55	@ 0x37
 800460e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	2200      	movs	r2, #0
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	3304      	adds	r3, #4
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff fa54 	bl	8003ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	3318      	adds	r3, #24
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff fa4f 	bl	8003ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2238      	movs	r2, #56	@ 0x38
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	2200      	movs	r2, #0
 8004650:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	2258      	movs	r2, #88	@ 0x58
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	0018      	movs	r0, r3
 8004662:	f001 f839 	bl	80056d8 <pxPortInitialiseStack>
 8004666:	0002      	movs	r2, r0
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004676:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	3fffffff 	.word	0x3fffffff

08004684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800468c:	f001 f8c0 	bl	8005810 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004690:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <prvAddNewTaskToReadyList+0xb8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	4b29      	ldr	r3, [pc, #164]	@ (800473c <prvAddNewTaskToReadyList+0xb8>)
 8004698:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800469a:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <prvAddNewTaskToReadyList+0xbc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046a2:	4b27      	ldr	r3, [pc, #156]	@ (8004740 <prvAddNewTaskToReadyList+0xbc>)
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046a8:	4b24      	ldr	r3, [pc, #144]	@ (800473c <prvAddNewTaskToReadyList+0xb8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d110      	bne.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046b0:	f000 fba0 	bl	8004df4 <prvInitialiseTaskLists>
 80046b4:	e00d      	b.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046b6:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <prvAddNewTaskToReadyList+0xc0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046be:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <prvAddNewTaskToReadyList+0xbc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d802      	bhi.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004740 <prvAddNewTaskToReadyList+0xbc>)
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046da:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e8:	4b18      	ldr	r3, [pc, #96]	@ (800474c <prvAddNewTaskToReadyList+0xc8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d903      	bls.n	80046f8 <prvAddNewTaskToReadyList+0x74>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f4:	4b15      	ldr	r3, [pc, #84]	@ (800474c <prvAddNewTaskToReadyList+0xc8>)
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fc:	0013      	movs	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	189b      	adds	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4a12      	ldr	r2, [pc, #72]	@ (8004750 <prvAddNewTaskToReadyList+0xcc>)
 8004706:	189a      	adds	r2, r3, r2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	0019      	movs	r1, r3
 800470e:	0010      	movs	r0, r2
 8004710:	f7ff f9eb 	bl	8003aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004714:	f001 f88e 	bl	8005834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004718:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <prvAddNewTaskToReadyList+0xc0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <prvAddNewTaskToReadyList+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	429a      	cmp	r2, r3
 800472c:	d201      	bcs.n	8004732 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800472e:	f001 f85f 	bl	80057f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	20000d80 	.word	0x20000d80
 8004740:	200008ac 	.word	0x200008ac
 8004744:	20000d8c 	.word	0x20000d8c
 8004748:	20000d9c 	.word	0x20000d9c
 800474c:	20000d88 	.word	0x20000d88
 8004750:	200008b0 	.word	0x200008b0

08004754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <vTaskDelay+0x48>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <vTaskDelay+0x20>
 800476e:	b672      	cpsid	i
 8004770:	46c0      	nop			@ (mov r8, r8)
 8004772:	e7fd      	b.n	8004770 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004774:	f000 f86a 	bl	800484c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2100      	movs	r1, #0
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fc73 	bl	8005068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004782:	f000 f86f 	bl	8004864 <xTaskResumeAll>
 8004786:	0003      	movs	r3, r0
 8004788:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8004790:	f001 f82e 	bl	80057f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000da8 	.word	0x20000da8

080047a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b089      	sub	sp, #36	@ 0x24
 80047a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047ae:	003a      	movs	r2, r7
 80047b0:	1d39      	adds	r1, r7, #4
 80047b2:	2308      	movs	r3, #8
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff f93e 	bl	8003a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047bc:	683c      	ldr	r4, [r7, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	491c      	ldr	r1, [pc, #112]	@ (8004834 <vTaskStartScheduler+0x94>)
 80047c4:	481c      	ldr	r0, [pc, #112]	@ (8004838 <vTaskStartScheduler+0x98>)
 80047c6:	9202      	str	r2, [sp, #8]
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	0022      	movs	r2, r4
 80047d2:	f7ff fe42 	bl	800445a <xTaskCreateStatic>
 80047d6:	0002      	movs	r2, r0
 80047d8:	4b18      	ldr	r3, [pc, #96]	@ (800483c <vTaskStartScheduler+0x9c>)
 80047da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047dc:	4b17      	ldr	r3, [pc, #92]	@ (800483c <vTaskStartScheduler+0x9c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047e4:	2301      	movs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e001      	b.n	80047ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d103      	bne.n	80047fc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80047f4:	f000 fc8c 	bl	8005110 <xTimerCreateTimerTask>
 80047f8:	0003      	movs	r3, r0
 80047fa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10d      	bne.n	800481e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004802:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <vTaskStartScheduler+0xa0>)
 8004806:	2201      	movs	r2, #1
 8004808:	4252      	negs	r2, r2
 800480a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800480c:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <vTaskStartScheduler+0xa4>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <vTaskStartScheduler+0xa8>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004818:	f000 ffc6 	bl	80057a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800481c:	e005      	b.n	800482a <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	d102      	bne.n	800482a <vTaskStartScheduler+0x8a>
 8004824:	b672      	cpsid	i
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	e7fd      	b.n	8004826 <vTaskStartScheduler+0x86>
}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b005      	add	sp, #20
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	08005d40 	.word	0x08005d40
 8004838:	08004dd5 	.word	0x08004dd5
 800483c:	20000da4 	.word	0x20000da4
 8004840:	20000da0 	.word	0x20000da0
 8004844:	20000d8c 	.word	0x20000d8c
 8004848:	20000d84 	.word	0x20000d84

0800484c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004850:	4b03      	ldr	r3, [pc, #12]	@ (8004860 <vTaskSuspendAll+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	4b02      	ldr	r3, [pc, #8]	@ (8004860 <vTaskSuspendAll+0x14>)
 8004858:	601a      	str	r2, [r3, #0]
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000da8 	.word	0x20000da8

08004864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004872:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <xTaskResumeAll+0xf8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <xTaskResumeAll+0x1c>
 800487a:	b672      	cpsid	i
 800487c:	46c0      	nop			@ (mov r8, r8)
 800487e:	e7fd      	b.n	800487c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004880:	f000 ffc6 	bl	8005810 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004884:	4b35      	ldr	r3, [pc, #212]	@ (800495c <xTaskResumeAll+0xf8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1e5a      	subs	r2, r3, #1
 800488a:	4b34      	ldr	r3, [pc, #208]	@ (800495c <xTaskResumeAll+0xf8>)
 800488c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488e:	4b33      	ldr	r3, [pc, #204]	@ (800495c <xTaskResumeAll+0xf8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d15b      	bne.n	800494e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004896:	4b32      	ldr	r3, [pc, #200]	@ (8004960 <xTaskResumeAll+0xfc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d057      	beq.n	800494e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800489e:	e02f      	b.n	8004900 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048a0:	4b30      	ldr	r3, [pc, #192]	@ (8004964 <xTaskResumeAll+0x100>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3318      	adds	r3, #24
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff f974 	bl	8003b9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3304      	adds	r3, #4
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7ff f96f 	bl	8003b9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c0:	4b29      	ldr	r3, [pc, #164]	@ (8004968 <xTaskResumeAll+0x104>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <xTaskResumeAll+0x6c>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048cc:	4b26      	ldr	r3, [pc, #152]	@ (8004968 <xTaskResumeAll+0x104>)
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	0013      	movs	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a23      	ldr	r2, [pc, #140]	@ (800496c <xTaskResumeAll+0x108>)
 80048de:	189a      	adds	r2, r3, r2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3304      	adds	r3, #4
 80048e4:	0019      	movs	r1, r3
 80048e6:	0010      	movs	r0, r2
 80048e8:	f7ff f8ff 	bl	8003aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <xTaskResumeAll+0x10c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80048fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004974 <xTaskResumeAll+0x110>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004900:	4b18      	ldr	r3, [pc, #96]	@ (8004964 <xTaskResumeAll+0x100>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1cb      	bne.n	80048a0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800490e:	f000 fb0d 	bl	8004f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004912:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <xTaskResumeAll+0x114>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800491e:	f000 f83b 	bl	8004998 <xTaskIncrementTick>
 8004922:	1e03      	subs	r3, r0, #0
 8004924:	d002      	beq.n	800492c <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8004926:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <xTaskResumeAll+0x110>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f2      	bne.n	800491e <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8004938:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <xTaskResumeAll+0x114>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800493e:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <xTaskResumeAll+0x110>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800494a:	f000 ff51 	bl	80057f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800494e:	f000 ff71 	bl	8005834 <vPortExitCritical>

	return xAlreadyYielded;
 8004952:	68bb      	ldr	r3, [r7, #8]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b004      	add	sp, #16
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000da8 	.word	0x20000da8
 8004960:	20000d80 	.word	0x20000d80
 8004964:	20000d40 	.word	0x20000d40
 8004968:	20000d88 	.word	0x20000d88
 800496c:	200008b0 	.word	0x200008b0
 8004970:	200008ac 	.word	0x200008ac
 8004974:	20000d94 	.word	0x20000d94
 8004978:	20000d90 	.word	0x20000d90

0800497c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004982:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <xTaskGetTickCount+0x18>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004988:	687b      	ldr	r3, [r7, #4]
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	20000d84 	.word	0x20000d84

08004998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <xTaskIncrementTick+0x140>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d000      	beq.n	80049ac <xTaskIncrementTick+0x14>
 80049aa:	e084      	b.n	8004ab6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049ac:	4b4b      	ldr	r3, [pc, #300]	@ (8004adc <xTaskIncrementTick+0x144>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049b4:	4b49      	ldr	r3, [pc, #292]	@ (8004adc <xTaskIncrementTick+0x144>)
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d118      	bne.n	80049f2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049c0:	4b47      	ldr	r3, [pc, #284]	@ (8004ae0 <xTaskIncrementTick+0x148>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <xTaskIncrementTick+0x38>
 80049ca:	b672      	cpsid	i
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	e7fd      	b.n	80049cc <xTaskIncrementTick+0x34>
 80049d0:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <xTaskIncrementTick+0x148>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	4b43      	ldr	r3, [pc, #268]	@ (8004ae4 <xTaskIncrementTick+0x14c>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b41      	ldr	r3, [pc, #260]	@ (8004ae0 <xTaskIncrementTick+0x148>)
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	4b41      	ldr	r3, [pc, #260]	@ (8004ae4 <xTaskIncrementTick+0x14c>)
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	4b40      	ldr	r3, [pc, #256]	@ (8004ae8 <xTaskIncrementTick+0x150>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae8 <xTaskIncrementTick+0x150>)
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f000 fa9d 	bl	8004f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f2:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <xTaskIncrementTick+0x154>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d34e      	bcc.n	8004a9a <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fc:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <xTaskIncrementTick+0x148>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xTaskIncrementTick+0x72>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xTaskIncrementTick+0x74>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a10:	4b36      	ldr	r3, [pc, #216]	@ (8004aec <xTaskIncrementTick+0x154>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	4252      	negs	r2, r2
 8004a16:	601a      	str	r2, [r3, #0]
					break;
 8004a18:	e03f      	b.n	8004a9a <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <xTaskIncrementTick+0x148>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a32:	4b2e      	ldr	r3, [pc, #184]	@ (8004aec <xTaskIncrementTick+0x154>)
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
						break;
 8004a38:	e02f      	b.n	8004a9a <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff f8ab 	bl	8003b9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7ff f8a2 	bl	8003b9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5a:	4b25      	ldr	r3, [pc, #148]	@ (8004af0 <xTaskIncrementTick+0x158>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d903      	bls.n	8004a6a <xTaskIncrementTick+0xd2>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <xTaskIncrementTick+0x158>)
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6e:	0013      	movs	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <xTaskIncrementTick+0x15c>)
 8004a78:	189a      	adds	r2, r3, r2
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f7ff f832 	bl	8003aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <xTaskIncrementTick+0x160>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d3b3      	bcc.n	80049fc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a98:	e7b0      	b.n	80049fc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a9a:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <xTaskIncrementTick+0x160>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4914      	ldr	r1, [pc, #80]	@ (8004af4 <xTaskIncrementTick+0x15c>)
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	585b      	ldr	r3, [r3, r1]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d907      	bls.n	8004ac0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e004      	b.n	8004ac0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ab6:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <xTaskIncrementTick+0x164>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <xTaskIncrementTick+0x164>)
 8004abe:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b00 <xTaskIncrementTick+0x168>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b006      	add	sp, #24
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	20000da8 	.word	0x20000da8
 8004adc:	20000d84 	.word	0x20000d84
 8004ae0:	20000d38 	.word	0x20000d38
 8004ae4:	20000d3c 	.word	0x20000d3c
 8004ae8:	20000d98 	.word	0x20000d98
 8004aec:	20000da0 	.word	0x20000da0
 8004af0:	20000d88 	.word	0x20000d88
 8004af4:	200008b0 	.word	0x200008b0
 8004af8:	200008ac 	.word	0x200008ac
 8004afc:	20000d90 	.word	0x20000d90
 8004b00:	20000d94 	.word	0x20000d94

08004b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b0a:	4b22      	ldr	r3, [pc, #136]	@ (8004b94 <vTaskSwitchContext+0x90>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b12:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <vTaskSwitchContext+0x94>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b18:	e038      	b.n	8004b8c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <vTaskSwitchContext+0x94>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b20:	4b1e      	ldr	r3, [pc, #120]	@ (8004b9c <vTaskSwitchContext+0x98>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e008      	b.n	8004b3a <vTaskSwitchContext+0x36>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <vTaskSwitchContext+0x30>
 8004b2e:	b672      	cpsid	i
 8004b30:	46c0      	nop			@ (mov r8, r8)
 8004b32:	e7fd      	b.n	8004b30 <vTaskSwitchContext+0x2c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	4919      	ldr	r1, [pc, #100]	@ (8004ba0 <vTaskSwitchContext+0x9c>)
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	0013      	movs	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	585b      	ldr	r3, [r3, r1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ed      	beq.n	8004b28 <vTaskSwitchContext+0x24>
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	0013      	movs	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <vTaskSwitchContext+0x9c>)
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d104      	bne.n	8004b7c <vTaskSwitchContext+0x78>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <vTaskSwitchContext+0xa0>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <vTaskSwitchContext+0x98>)
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	601a      	str	r2, [r3, #0]
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000da8 	.word	0x20000da8
 8004b98:	20000d94 	.word	0x20000d94
 8004b9c:	20000d88 	.word	0x20000d88
 8004ba0:	200008b0 	.word	0x200008b0
 8004ba4:	200008ac 	.word	0x200008ac

08004ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <vTaskPlaceOnEventList+0x16>
 8004bb8:	b672      	cpsid	i
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	e7fd      	b.n	8004bba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <vTaskPlaceOnEventList+0x3c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7fe ffaf 	bl	8003b2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fa47 	bl	8005068 <prvAddCurrentTaskToDelayedList>
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	200008ac 	.word	0x200008ac

08004be8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <vTaskPlaceOnEventListRestricted+0x18>
 8004bfa:	b672      	cpsid	i
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	e7fd      	b.n	8004bfc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <vTaskPlaceOnEventListRestricted+0x4c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3318      	adds	r3, #24
 8004c06:	001a      	movs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fe ff6c 	bl	8003aea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	425b      	negs	r3, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	0011      	movs	r1, r2
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 fa1f 	bl	8005068 <prvAddCurrentTaskToDelayedList>
	}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	200008ac 	.word	0x200008ac

08004c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <xTaskRemoveFromEventList+0x1c>
 8004c4e:	b672      	cpsid	i
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	e7fd      	b.n	8004c50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3318      	adds	r3, #24
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fe ff9e 	bl	8003b9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cdc <xTaskRemoveFromEventList+0xa4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fe ff95 	bl	8003b9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <xTaskRemoveFromEventList+0xa8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <xTaskRemoveFromEventList+0x4c>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <xTaskRemoveFromEventList+0xa8>)
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c88:	0013      	movs	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <xTaskRemoveFromEventList+0xac>)
 8004c92:	189a      	adds	r2, r3, r2
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	0019      	movs	r1, r3
 8004c9a:	0010      	movs	r0, r2
 8004c9c:	f7fe ff25 	bl	8003aea <vListInsertEnd>
 8004ca0:	e007      	b.n	8004cb2 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3318      	adds	r3, #24
 8004ca6:	001a      	movs	r2, r3
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <xTaskRemoveFromEventList+0xb0>)
 8004caa:	0011      	movs	r1, r2
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fe ff1c 	bl	8003aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <xTaskRemoveFromEventList+0xb4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d905      	bls.n	8004ccc <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <xTaskRemoveFromEventList+0xb8>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e001      	b.n	8004cd0 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b004      	add	sp, #16
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	20000da8 	.word	0x20000da8
 8004ce0:	20000d88 	.word	0x20000d88
 8004ce4:	200008b0 	.word	0x200008b0
 8004ce8:	20000d40 	.word	0x20000d40
 8004cec:	200008ac 	.word	0x200008ac
 8004cf0:	20000d94 	.word	0x20000d94

08004cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <vTaskInternalSetTimeOutState+0x20>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d04:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <vTaskInternalSetTimeOutState+0x24>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	605a      	str	r2, [r3, #4]
}
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b002      	add	sp, #8
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000d98 	.word	0x20000d98
 8004d18:	20000d84 	.word	0x20000d84

08004d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <xTaskCheckForTimeOut+0x16>
 8004d2c:	b672      	cpsid	i
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	e7fd      	b.n	8004d2e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <xTaskCheckForTimeOut+0x22>
 8004d38:	b672      	cpsid	i
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	e7fd      	b.n	8004d3a <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8004d3e:	f000 fd67 	bl	8005810 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d42:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <xTaskCheckForTimeOut+0x9c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	d102      	bne.n	8004d60 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e024      	b.n	8004daa <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <xTaskCheckForTimeOut+0xa0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d007      	beq.n	8004d7c <xTaskCheckForTimeOut+0x60>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d302      	bcc.n	8004d7c <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e016      	b.n	8004daa <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d20c      	bcs.n	8004da0 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7ff ffad 	bl	8004cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e004      	b.n	8004daa <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f000 fd43 	bl	8005834 <vPortExitCritical>

	return xReturn;
 8004dae:	697b      	ldr	r3, [r7, #20]
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b006      	add	sp, #24
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000d84 	.word	0x20000d84
 8004dbc:	20000d98 	.word	0x20000d98

08004dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dc4:	4b02      	ldr	r3, [pc, #8]	@ (8004dd0 <vTaskMissedYield+0x10>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000d94 	.word	0x20000d94

08004dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ddc:	f000 f84e 	bl	8004e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004de0:	4b03      	ldr	r3, [pc, #12]	@ (8004df0 <prvIdleTask+0x1c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d9f9      	bls.n	8004ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004de8:	f000 fd02 	bl	80057f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004dec:	e7f6      	b.n	8004ddc <prvIdleTask+0x8>
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	200008b0 	.word	0x200008b0

08004df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	e00c      	b.n	8004e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	0013      	movs	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <prvInitialiseTaskLists+0x68>)
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7fe fe42 	bl	8003a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3301      	adds	r3, #1
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b37      	cmp	r3, #55	@ 0x37
 8004e1e:	d9ef      	bls.n	8004e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e20:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <prvInitialiseTaskLists+0x6c>)
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fe fe38 	bl	8003a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e28:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <prvInitialiseTaskLists+0x70>)
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fe fe34 	bl	8003a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e30:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <prvInitialiseTaskLists+0x74>)
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fe fe30 	bl	8003a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e38:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <prvInitialiseTaskLists+0x78>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fe fe2c 	bl	8003a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <prvInitialiseTaskLists+0x7c>)
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fe fe28 	bl	8003a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <prvInitialiseTaskLists+0x80>)
 8004e4a:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <prvInitialiseTaskLists+0x6c>)
 8004e4c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <prvInitialiseTaskLists+0x84>)
 8004e50:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <prvInitialiseTaskLists+0x70>)
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200008b0 	.word	0x200008b0
 8004e60:	20000d10 	.word	0x20000d10
 8004e64:	20000d24 	.word	0x20000d24
 8004e68:	20000d40 	.word	0x20000d40
 8004e6c:	20000d54 	.word	0x20000d54
 8004e70:	20000d6c 	.word	0x20000d6c
 8004e74:	20000d38 	.word	0x20000d38
 8004e78:	20000d3c 	.word	0x20000d3c

08004e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e82:	e01a      	b.n	8004eba <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004e84:	f000 fcc4 	bl	8005810 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e88:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <prvCheckTasksWaitingTermination+0x50>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fe fe80 	bl	8003b9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	1e5a      	subs	r2, r3, #1
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004ea2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004eac:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004eae:	f000 fcc1 	bl	8005834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 f80f 	bl	8004ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e0      	bne.n	8004e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000d54 	.word	0x20000d54
 8004ed0:	20000d80 	.word	0x20000d80
 8004ed4:	20000d68 	.word	0x20000d68

08004ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2259      	movs	r2, #89	@ 0x59
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 fdce 	bl	8005a90 <vPortFree>
				vPortFree( pxTCB );
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 fdca 	bl	8005a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004efc:	e011      	b.n	8004f22 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2259      	movs	r2, #89	@ 0x59
 8004f02:	5c9b      	ldrb	r3, [r3, r2]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d104      	bne.n	8004f12 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f000 fdc0 	bl	8005a90 <vPortFree>
	}
 8004f10:	e007      	b.n	8004f22 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2259      	movs	r2, #89	@ 0x59
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d002      	beq.n	8004f22 <prvDeleteTCB+0x4a>
 8004f1c:	b672      	cpsid	i
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	e7fd      	b.n	8004f1e <prvDeleteTCB+0x46>
	}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b002      	add	sp, #8
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f32:	4b0e      	ldr	r3, [pc, #56]	@ (8004f6c <prvResetNextTaskUnblockTime+0x40>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <prvResetNextTaskUnblockTime+0x14>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <prvResetNextTaskUnblockTime+0x16>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f46:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <prvResetNextTaskUnblockTime+0x44>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4252      	negs	r2, r2
 8004f4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f4e:	e008      	b.n	8004f62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f50:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <prvResetNextTaskUnblockTime+0x40>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <prvResetNextTaskUnblockTime+0x44>)
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b002      	add	sp, #8
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	20000d38 	.word	0x20000d38
 8004f70:	20000da0 	.word	0x20000da0

08004f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <xTaskGetSchedulerState+0x30>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f82:	2301      	movs	r3, #1
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	e008      	b.n	8004f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f88:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <xTaskGetSchedulerState+0x34>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f90:	2302      	movs	r3, #2
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	e001      	b.n	8004f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f9a:	687b      	ldr	r3, [r7, #4]
	}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000d8c 	.word	0x20000d8c
 8004fa8:	20000da8 	.word	0x20000da8

08004fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d046      	beq.n	8005050 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <xTaskPriorityDisinherit+0xb0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d002      	beq.n	8004fd2 <xTaskPriorityDisinherit+0x26>
 8004fcc:	b672      	cpsid	i
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	e7fd      	b.n	8004fce <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <xTaskPriorityDisinherit+0x34>
 8004fda:	b672      	cpsid	i
 8004fdc:	46c0      	nop			@ (mov r8, r8)
 8004fde:	e7fd      	b.n	8004fdc <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	1e5a      	subs	r2, r3, #1
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d02c      	beq.n	8005050 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d128      	bne.n	8005050 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3304      	adds	r3, #4
 8005002:	0018      	movs	r0, r3
 8005004:	f7fe fdc9 	bl	8003b9a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	2238      	movs	r2, #56	@ 0x38
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <xTaskPriorityDisinherit+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <xTaskPriorityDisinherit+0x84>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502c:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <xTaskPriorityDisinherit+0xb4>)
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005034:	0013      	movs	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	189b      	adds	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a09      	ldr	r2, [pc, #36]	@ (8005064 <xTaskPriorityDisinherit+0xb8>)
 800503e:	189a      	adds	r2, r3, r2
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3304      	adds	r3, #4
 8005044:	0019      	movs	r1, r3
 8005046:	0010      	movs	r0, r2
 8005048:	f7fe fd4f 	bl	8003aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005050:	68fb      	ldr	r3, [r7, #12]
	}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	200008ac 	.word	0x200008ac
 8005060:	20000d88 	.word	0x20000d88
 8005064:	200008b0 	.word	0x200008b0

08005068 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005072:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005078:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3304      	adds	r3, #4
 800507e:	0018      	movs	r0, r3
 8005080:	f7fe fd8b 	bl	8003b9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3301      	adds	r3, #1
 8005088:	d10b      	bne.n	80050a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005090:	4b1a      	ldr	r3, [pc, #104]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1d1a      	adds	r2, r3, #4
 8005096:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <prvAddCurrentTaskToDelayedList+0x98>)
 8005098:	0011      	movs	r1, r2
 800509a:	0018      	movs	r0, r3
 800509c:	f7fe fd25 	bl	8003aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050a0:	e026      	b.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	18d3      	adds	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050aa:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d209      	bcs.n	80050ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ba:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	0019      	movs	r1, r3
 80050c6:	0010      	movs	r0, r2
 80050c8:	f7fe fd31 	bl	8003b2e <vListInsert>
}
 80050cc:	e010      	b.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3304      	adds	r3, #4
 80050d8:	0019      	movs	r1, r3
 80050da:	0010      	movs	r0, r2
 80050dc:	f7fe fd27 	bl	8003b2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050e0:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d202      	bcs.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ea:	4b08      	ldr	r3, [pc, #32]	@ (800510c <prvAddCurrentTaskToDelayedList+0xa4>)
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	46c0      	nop			@ (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b004      	add	sp, #16
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000d84 	.word	0x20000d84
 80050fc:	200008ac 	.word	0x200008ac
 8005100:	20000d6c 	.word	0x20000d6c
 8005104:	20000d3c 	.word	0x20000d3c
 8005108:	20000d38 	.word	0x20000d38
 800510c:	20000da0 	.word	0x20000da0

08005110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b089      	sub	sp, #36	@ 0x24
 8005114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800511a:	f000 fa9b 	bl	8005654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800511e:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <xTimerCreateTimerTask+0x70>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800512e:	003a      	movs	r2, r7
 8005130:	1d39      	adds	r1, r7, #4
 8005132:	2308      	movs	r3, #8
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	0018      	movs	r0, r3
 8005138:	f7fe fc96 	bl	8003a68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800513c:	683c      	ldr	r4, [r7, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4910      	ldr	r1, [pc, #64]	@ (8005184 <xTimerCreateTimerTask+0x74>)
 8005144:	4810      	ldr	r0, [pc, #64]	@ (8005188 <xTimerCreateTimerTask+0x78>)
 8005146:	9202      	str	r2, [sp, #8]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	2302      	movs	r3, #2
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	0022      	movs	r2, r4
 8005152:	f7ff f982 	bl	800445a <xTaskCreateStatic>
 8005156:	0002      	movs	r2, r0
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <xTimerCreateTimerTask+0x7c>)
 800515a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <xTimerCreateTimerTask+0x7c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005164:	2301      	movs	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <xTimerCreateTimerTask+0x64>
 800516e:	b672      	cpsid	i
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	e7fd      	b.n	8005170 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b005      	add	sp, #20
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	20000ddc 	.word	0x20000ddc
 8005184:	08005d48 	.word	0x08005d48
 8005188:	0800529d 	.word	0x0800529d
 800518c:	20000de0 	.word	0x20000de0

08005190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b08b      	sub	sp, #44	@ 0x2c
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <xTimerGenericCommand+0x1e>
 80051a8:	b672      	cpsid	i
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	e7fd      	b.n	80051aa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <xTimerGenericCommand+0x94>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d030      	beq.n	8005218 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051b6:	2414      	movs	r4, #20
 80051b8:	193b      	adds	r3, r7, r4
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051be:	193b      	adds	r3, r7, r4
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051c4:	193b      	adds	r3, r7, r4
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	dc19      	bgt.n	8005204 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d0:	f7ff fed0 	bl	8004f74 <xTaskGetSchedulerState>
 80051d4:	0003      	movs	r3, r0
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d109      	bne.n	80051ee <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051da:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <xTimerGenericCommand+0x94>)
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051e0:	1939      	adds	r1, r7, r4
 80051e2:	2300      	movs	r3, #0
 80051e4:	f7fe fdcd 	bl	8003d82 <xQueueGenericSend>
 80051e8:	0003      	movs	r3, r0
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	e014      	b.n	8005218 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <xTimerGenericCommand+0x94>)
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	2314      	movs	r3, #20
 80051f4:	18f9      	adds	r1, r7, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	2200      	movs	r2, #0
 80051fa:	f7fe fdc2 	bl	8003d82 <xQueueGenericSend>
 80051fe:	0003      	movs	r3, r0
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
 8005202:	e009      	b.n	8005218 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <xTimerGenericCommand+0x94>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	2314      	movs	r3, #20
 800520c:	18f9      	adds	r1, r7, r3
 800520e:	2300      	movs	r3, #0
 8005210:	f7fe fe7f 	bl	8003f12 <xQueueGenericSendFromISR>
 8005214:	0003      	movs	r3, r0
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b00b      	add	sp, #44	@ 0x2c
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	20000ddc 	.word	0x20000ddc

08005228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005232:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <prvProcessExpiredTimer+0x70>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	0018      	movs	r0, r3
 8005242:	f7fe fcaa 	bl	8003b9a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d11a      	bne.n	8005284 <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	18d1      	adds	r1, r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f8ba 	bl	80053d4 <prvInsertTimerInActiveList>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d00f      	beq.n	8005284 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	2100      	movs	r1, #0
 8005270:	f7ff ff8e 	bl	8005190 <xTimerGenericCommand>
 8005274:	0003      	movs	r3, r0
 8005276:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <prvProcessExpiredTimer+0x5c>
 800527e:	b672      	cpsid	i
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	e7fd      	b.n	8005280 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	0010      	movs	r0, r2
 800528c:	4798      	blx	r3
}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	20000dd4 	.word	0x20000dd4

0800529c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052a4:	2308      	movs	r3, #8
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	0018      	movs	r0, r3
 80052aa:	f000 f853 	bl	8005354 <prvGetNextExpireTime>
 80052ae:	0003      	movs	r3, r0
 80052b0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	0011      	movs	r1, r2
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 f805 	bl	80052c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052be:	f000 f8cb 	bl	8005458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	e7ee      	b.n	80052a4 <prvTimerTask+0x8>
	...

080052c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052d2:	f7ff fabb 	bl	800484c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d6:	2308      	movs	r3, #8
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f85a 	bl	8005394 <prvSampleTimeNow>
 80052e0:	0003      	movs	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d129      	bne.n	800533e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <prvProcessTimerOrBlockTask+0x42>
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d808      	bhi.n	800530a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80052f8:	f7ff fab4 	bl	8004864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0011      	movs	r1, r2
 8005302:	0018      	movs	r0, r3
 8005304:	f7ff ff90 	bl	8005228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005308:	e01b      	b.n	8005342 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005310:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <prvProcessTimerOrBlockTask+0x84>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	425a      	negs	r2, r3
 8005318:	4153      	adcs	r3, r2
 800531a:	b2db      	uxtb	r3, r3
 800531c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800531e:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <prvProcessTimerOrBlockTask+0x88>)
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	0019      	movs	r1, r3
 800532c:	f7ff f862 	bl	80043f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005330:	f7ff fa98 	bl	8004864 <xTaskResumeAll>
 8005334:	1e03      	subs	r3, r0, #0
 8005336:	d104      	bne.n	8005342 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005338:	f000 fa5a 	bl	80057f0 <vPortYield>
}
 800533c:	e001      	b.n	8005342 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800533e:	f7ff fa91 	bl	8004864 <xTaskResumeAll>
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	20000dd8 	.word	0x20000dd8
 8005350:	20000ddc 	.word	0x20000ddc

08005354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <prvGetNextExpireTime+0x3c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	425a      	negs	r2, r3
 8005364:	4153      	adcs	r3, r2
 8005366:	b2db      	uxtb	r3, r3
 8005368:	001a      	movs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d105      	bne.n	8005382 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <prvGetNextExpireTime+0x3c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e001      	b.n	8005386 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005386:	68fb      	ldr	r3, [r7, #12]
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b004      	add	sp, #16
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000dd4 	.word	0x20000dd4

08005394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800539c:	f7ff faee 	bl	800497c <xTaskGetTickCount>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80053a4:	4b0a      	ldr	r3, [pc, #40]	@ (80053d0 <prvSampleTimeNow+0x3c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d205      	bcs.n	80053ba <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80053ae:	f000 f8f5 	bl	800559c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e002      	b.n	80053c0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <prvSampleTimeNow+0x3c>)
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000de4 	.word	0x20000de4

080053d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d812      	bhi.n	8005420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d302      	bcc.n	800540e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e01b      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <prvInsertTimerInActiveList+0x7c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3304      	adds	r3, #4
 8005416:	0019      	movs	r1, r3
 8005418:	0010      	movs	r0, r2
 800541a:	f7fe fb88 	bl	8003b2e <vListInsert>
 800541e:	e012      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d206      	bcs.n	8005436 <prvInsertTimerInActiveList+0x62>
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e007      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <prvInsertTimerInActiveList+0x80>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3304      	adds	r3, #4
 800543e:	0019      	movs	r1, r3
 8005440:	0010      	movs	r0, r2
 8005442:	f7fe fb74 	bl	8003b2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005446:	697b      	ldr	r3, [r7, #20]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b006      	add	sp, #24
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000dd8 	.word	0x20000dd8
 8005454:	20000dd4 	.word	0x20000dd4

08005458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b08d      	sub	sp, #52	@ 0x34
 800545c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800545e:	e089      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005460:	2208      	movs	r2, #8
 8005462:	18bb      	adds	r3, r7, r2
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da10      	bge.n	800548c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800546a:	18bb      	adds	r3, r7, r2
 800546c:	3304      	adds	r3, #4
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <prvProcessReceivedCommands+0x24>
 8005476:	b672      	cpsid	i
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	e7fd      	b.n	8005478 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0019      	movs	r1, r3
 800548a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800548c:	2208      	movs	r2, #8
 800548e:	18bb      	adds	r3, r7, r2
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da00      	bge.n	8005498 <prvProcessReceivedCommands+0x40>
 8005496:	e06d      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005498:	18bb      	adds	r3, r7, r2
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	3304      	adds	r3, #4
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fe fb75 	bl	8003b9a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7ff ff6e 	bl	8005394 <prvSampleTimeNow>
 80054b8:	0003      	movs	r3, r0
 80054ba:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80054bc:	2308      	movs	r3, #8
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	d84f      	bhi.n	8005566 <prvProcessReceivedCommands+0x10e>
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	4b32      	ldr	r3, [pc, #200]	@ (8005594 <prvProcessReceivedCommands+0x13c>)
 80054ca:	18d3      	adds	r3, r2, r3
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054d0:	2408      	movs	r4, #8
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	18d1      	adds	r1, r2, r3
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	6a38      	ldr	r0, [r7, #32]
 80054e4:	f7ff ff76 	bl	80053d4 <prvInsertTimerInActiveList>
 80054e8:	1e03      	subs	r3, r0, #0
 80054ea:	d040      	beq.n	800556e <prvProcessReceivedCommands+0x116>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	0010      	movs	r0, r2
 80054f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d137      	bne.n	800556e <prvProcessReceivedCommands+0x116>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054fe:	193b      	adds	r3, r7, r4
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	18d2      	adds	r2, r2, r3
 8005508:	6a38      	ldr	r0, [r7, #32]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2100      	movs	r1, #0
 8005512:	f7ff fe3d 	bl	8005190 <xTimerGenericCommand>
 8005516:	0003      	movs	r3, r0
 8005518:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d126      	bne.n	800556e <prvProcessReceivedCommands+0x116>
 8005520:	b672      	cpsid	i
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	e7fd      	b.n	8005522 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005526:	2308      	movs	r3, #8
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <prvProcessReceivedCommands+0xe6>
 8005538:	b672      	cpsid	i
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	e7fd      	b.n	800553a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	18d1      	adds	r1, r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	6a38      	ldr	r0, [r7, #32]
 800554c:	f7ff ff42 	bl	80053d4 <prvInsertTimerInActiveList>
					break;
 8005550:	e010      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	222c      	movs	r2, #44	@ 0x2c
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <prvProcessReceivedCommands+0x11a>
						{
							vPortFree( pxTimer );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fa96 	bl	8005a90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005564:	e005      	b.n	8005572 <prvProcessReceivedCommands+0x11a>

				default	:
					/* Don't expect to get here. */
					break;
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	e004      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
					break;
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	e002      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
					break;
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	e000      	b.n	8005574 <prvProcessReceivedCommands+0x11c>
					break;
 8005572:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005574:	4b08      	ldr	r3, [pc, #32]	@ (8005598 <prvProcessReceivedCommands+0x140>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2208      	movs	r2, #8
 800557a:	18b9      	adds	r1, r7, r2
 800557c:	2200      	movs	r2, #0
 800557e:	0018      	movs	r0, r3
 8005580:	f7fe fd3b 	bl	8003ffa <xQueueReceive>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d000      	beq.n	800558a <prvProcessReceivedCommands+0x132>
 8005588:	e76a      	b.n	8005460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b00b      	add	sp, #44	@ 0x2c
 8005592:	bd90      	pop	{r4, r7, pc}
 8005594:	08005e08 	.word	0x08005e08
 8005598:	20000ddc 	.word	0x20000ddc

0800559c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a2:	e03f      	b.n	8005624 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055a4:	4b29      	ldr	r3, [pc, #164]	@ (800564c <prvSwitchTimerLists+0xb0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ae:	4b27      	ldr	r3, [pc, #156]	@ (800564c <prvSwitchTimerLists+0xb0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3304      	adds	r3, #4
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fe faec 	bl	8003b9a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	0010      	movs	r0, r2
 80055ca:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d127      	bne.n	8005624 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	18d3      	adds	r3, r2, r3
 80055dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d90e      	bls.n	8005604 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055f2:	4b16      	ldr	r3, [pc, #88]	@ (800564c <prvSwitchTimerLists+0xb0>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3304      	adds	r3, #4
 80055fa:	0019      	movs	r1, r3
 80055fc:	0010      	movs	r0, r2
 80055fe:	f7fe fa96 	bl	8003b2e <vListInsert>
 8005602:	e00f      	b.n	8005624 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	2300      	movs	r3, #0
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	2100      	movs	r1, #0
 8005610:	f7ff fdbe 	bl	8005190 <xTimerGenericCommand>
 8005614:	0003      	movs	r3, r0
 8005616:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <prvSwitchTimerLists+0x88>
 800561e:	b672      	cpsid	i
 8005620:	46c0      	nop			@ (mov r8, r8)
 8005622:	e7fd      	b.n	8005620 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005624:	4b09      	ldr	r3, [pc, #36]	@ (800564c <prvSwitchTimerLists+0xb0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ba      	bne.n	80055a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800562e:	4b07      	ldr	r3, [pc, #28]	@ (800564c <prvSwitchTimerLists+0xb0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <prvSwitchTimerLists+0xb4>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b04      	ldr	r3, [pc, #16]	@ (800564c <prvSwitchTimerLists+0xb0>)
 800563a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800563c:	4b04      	ldr	r3, [pc, #16]	@ (8005650 <prvSwitchTimerLists+0xb4>)
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	46bd      	mov	sp, r7
 8005646:	b006      	add	sp, #24
 8005648:	bd80      	pop	{r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	20000dd4 	.word	0x20000dd4
 8005650:	20000dd8 	.word	0x20000dd8

08005654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800565a:	f000 f8d9 	bl	8005810 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800565e:	4b16      	ldr	r3, [pc, #88]	@ (80056b8 <prvCheckForValidListAndQueue+0x64>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d123      	bne.n	80056ae <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005666:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <prvCheckForValidListAndQueue+0x68>)
 8005668:	0018      	movs	r0, r3
 800566a:	f7fe fa15 	bl	8003a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800566e:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <prvCheckForValidListAndQueue+0x6c>)
 8005670:	0018      	movs	r0, r3
 8005672:	f7fe fa11 	bl	8003a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005676:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <prvCheckForValidListAndQueue+0x70>)
 8005678:	4a10      	ldr	r2, [pc, #64]	@ (80056bc <prvCheckForValidListAndQueue+0x68>)
 800567a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800567c:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <prvCheckForValidListAndQueue+0x74>)
 800567e:	4a10      	ldr	r2, [pc, #64]	@ (80056c0 <prvCheckForValidListAndQueue+0x6c>)
 8005680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <prvCheckForValidListAndQueue+0x78>)
 8005684:	4a12      	ldr	r2, [pc, #72]	@ (80056d0 <prvCheckForValidListAndQueue+0x7c>)
 8005686:	2100      	movs	r1, #0
 8005688:	9100      	str	r1, [sp, #0]
 800568a:	2110      	movs	r1, #16
 800568c:	200a      	movs	r0, #10
 800568e:	f7fe fb01 	bl	8003c94 <xQueueGenericCreateStatic>
 8005692:	0002      	movs	r2, r0
 8005694:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <prvCheckForValidListAndQueue+0x64>)
 8005696:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005698:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <prvCheckForValidListAndQueue+0x64>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <prvCheckForValidListAndQueue+0x64>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0b      	ldr	r2, [pc, #44]	@ (80056d4 <prvCheckForValidListAndQueue+0x80>)
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fe fe7b 	bl	80043a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ae:	f000 f8c1 	bl	8005834 <vPortExitCritical>
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000ddc 	.word	0x20000ddc
 80056bc:	20000dac 	.word	0x20000dac
 80056c0:	20000dc0 	.word	0x20000dc0
 80056c4:	20000dd4 	.word	0x20000dd4
 80056c8:	20000dd8 	.word	0x20000dd8
 80056cc:	20000e88 	.word	0x20000e88
 80056d0:	20000de8 	.word	0x20000de8
 80056d4:	08005d50 	.word	0x08005d50

080056d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b04      	subs	r3, #4
 80056e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2280      	movs	r2, #128	@ 0x80
 80056ee:	0452      	lsls	r2, r2, #17
 80056f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b04      	subs	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b04      	subs	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005704:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <pxPortInitialiseStack+0x50>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b14      	subs	r3, #20
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b20      	subs	r3, #32
 800571a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b004      	add	sp, #16
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	0800572d 	.word	0x0800572d

0800572c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005736:	4b08      	ldr	r3, [pc, #32]	@ (8005758 <prvTaskExitError+0x2c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	d002      	beq.n	8005744 <prvTaskExitError+0x18>
 800573e:	b672      	cpsid	i
 8005740:	46c0      	nop			@ (mov r8, r8)
 8005742:	e7fd      	b.n	8005740 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005744:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0fc      	beq.n	8005748 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46c0      	nop			@ (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000010 	.word	0x20000010

0800575c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005760:	46c0      	nop			@ (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005770 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005770:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <pxCurrentTCBConst2>)
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	3020      	adds	r0, #32
 8005778:	f380 8809 	msr	PSP, r0
 800577c:	2002      	movs	r0, #2
 800577e:	f380 8814 	msr	CONTROL, r0
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005788:	46ae      	mov	lr, r5
 800578a:	bc08      	pop	{r3}
 800578c:	bc04      	pop	{r2}
 800578e:	b662      	cpsie	i
 8005790:	4718      	bx	r3
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	46c0      	nop			@ (mov r8, r8)
 800579a:	46c0      	nop			@ (mov r8, r8)
 800579c:	46c0      	nop			@ (mov r8, r8)
 800579e:	46c0      	nop			@ (mov r8, r8)

080057a0 <pxCurrentTCBConst2>:
 80057a0:	200008ac 	.word	0x200008ac
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80057a4:	46c0      	nop			@ (mov r8, r8)
 80057a6:	46c0      	nop			@ (mov r8, r8)

080057a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <xPortStartScheduler+0x40>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <xPortStartScheduler+0x40>)
 80057b2:	21ff      	movs	r1, #255	@ 0xff
 80057b4:	0409      	lsls	r1, r1, #16
 80057b6:	430a      	orrs	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <xPortStartScheduler+0x40>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <xPortStartScheduler+0x40>)
 80057c0:	21ff      	movs	r1, #255	@ 0xff
 80057c2:	0609      	lsls	r1, r1, #24
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80057c8:	f000 f898 	bl	80058fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <xPortStartScheduler+0x44>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80057d2:	f7ff ffcd 	bl	8005770 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057d6:	f7ff f995 	bl	8004b04 <vTaskSwitchContext>
	prvTaskExitError();
 80057da:	f7ff ffa7 	bl	800572c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	e000ed20 	.word	0xe000ed20
 80057ec:	20000010 	.word	0x20000010

080057f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <vPortYield+0x1c>)
 80057f6:	2280      	movs	r2, #128	@ 0x80
 80057f8:	0552      	lsls	r2, r2, #21
 80057fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80057fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005800:	f3bf 8f6f 	isb	sy
}
 8005804:	46c0      	nop			@ (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005814:	b672      	cpsid	i
    uxCriticalNesting++;
 8005816:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <vPortEnterCritical+0x20>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <vPortEnterCritical+0x20>)
 800581e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005820:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005824:	f3bf 8f6f 	isb	sy
}
 8005828:	46c0      	nop			@ (mov r8, r8)
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	20000010 	.word	0x20000010

08005834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <vPortExitCritical+0x2c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <vPortExitCritical+0x12>
 8005840:	b672      	cpsid	i
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	e7fd      	b.n	8005842 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <vPortExitCritical+0x2c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <vPortExitCritical+0x2c>)
 800584e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005850:	4b03      	ldr	r3, [pc, #12]	@ (8005860 <vPortExitCritical+0x2c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d100      	bne.n	800585a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8005858:	b662      	cpsie	i
    }
}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000010 	.word	0x20000010

08005864 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005864:	f3ef 8010 	mrs	r0, PRIMASK
 8005868:	b672      	cpsid	i
 800586a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	0018      	movs	r0, r3

08005870 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005870:	f380 8810 	msr	PRIMASK, r0
 8005874:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005876:	46c0      	nop			@ (mov r8, r8)
	...

08005880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005880:	f3ef 8009 	mrs	r0, PSP
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <pxCurrentTCBConst>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	3820      	subs	r0, #32
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800588e:	4644      	mov	r4, r8
 8005890:	464d      	mov	r5, r9
 8005892:	4656      	mov	r6, sl
 8005894:	465f      	mov	r7, fp
 8005896:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005898:	b508      	push	{r3, lr}
 800589a:	b672      	cpsid	i
 800589c:	f7ff f932 	bl	8004b04 <vTaskSwitchContext>
 80058a0:	b662      	cpsie	i
 80058a2:	bc0c      	pop	{r2, r3}
 80058a4:	6811      	ldr	r1, [r2, #0]
 80058a6:	6808      	ldr	r0, [r1, #0]
 80058a8:	3010      	adds	r0, #16
 80058aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80058ac:	46a0      	mov	r8, r4
 80058ae:	46a9      	mov	r9, r5
 80058b0:	46b2      	mov	sl, r6
 80058b2:	46bb      	mov	fp, r7
 80058b4:	f380 8809 	msr	PSP, r0
 80058b8:	3820      	subs	r0, #32
 80058ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80058bc:	4718      	bx	r3
 80058be:	46c0      	nop			@ (mov r8, r8)

080058c0 <pxCurrentTCBConst>:
 80058c0:	200008ac 	.word	0x200008ac
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46c0      	nop			@ (mov r8, r8)

080058c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ce:	f7ff ffc9 	bl	8005864 <ulSetInterruptMaskFromISR>
 80058d2:	0003      	movs	r3, r0
 80058d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058d6:	f7ff f85f 	bl	8004998 <xTaskIncrementTick>
 80058da:	1e03      	subs	r3, r0, #0
 80058dc:	d003      	beq.n	80058e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <SysTick_Handler+0x30>)
 80058e0:	2280      	movs	r2, #128	@ 0x80
 80058e2:	0552      	lsls	r2, r2, #21
 80058e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff ffc1 	bl	8005870 <vClearInterruptMaskFromISR>
}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b002      	add	sp, #8
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <prvSetupTimerInterrupt+0x34>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005906:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <prvSetupTimerInterrupt+0x38>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <prvSetupTimerInterrupt+0x3c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	22fa      	movs	r2, #250	@ 0xfa
 8005912:	0091      	lsls	r1, r2, #2
 8005914:	0018      	movs	r0, r3
 8005916:	f7fa fbf7 	bl	8000108 <__udivsi3>
 800591a:	0003      	movs	r3, r0
 800591c:	001a      	movs	r2, r3
 800591e:	4b07      	ldr	r3, [pc, #28]	@ (800593c <prvSetupTimerInterrupt+0x40>)
 8005920:	3a01      	subs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005924:	4b02      	ldr	r3, [pc, #8]	@ (8005930 <prvSetupTimerInterrupt+0x34>)
 8005926:	2207      	movs	r2, #7
 8005928:	601a      	str	r2, [r3, #0]
}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000e010 	.word	0xe000e010
 8005934:	e000e018 	.word	0xe000e018
 8005938:	20000000 	.word	0x20000000
 800593c:	e000e014 	.word	0xe000e014

08005940 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800594c:	f7fe ff7e 	bl	800484c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005950:	4b4a      	ldr	r3, [pc, #296]	@ (8005a7c <pvPortMalloc+0x13c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005958:	f000 f8e4 	bl	8005b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800595c:	4b48      	ldr	r3, [pc, #288]	@ (8005a80 <pvPortMalloc+0x140>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4013      	ands	r3, r2
 8005964:	d000      	beq.n	8005968 <pvPortMalloc+0x28>
 8005966:	e07b      	b.n	8005a60 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d013      	beq.n	8005996 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800596e:	2208      	movs	r2, #8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	189b      	adds	r3, r3, r2
 8005974:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2207      	movs	r2, #7
 800597a:	4013      	ands	r3, r2
 800597c:	d00b      	beq.n	8005996 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2207      	movs	r2, #7
 8005982:	4393      	bics	r3, r2
 8005984:	3308      	adds	r3, #8
 8005986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2207      	movs	r2, #7
 800598c:	4013      	ands	r3, r2
 800598e:	d002      	beq.n	8005996 <pvPortMalloc+0x56>
 8005990:	b672      	cpsid	i
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	e7fd      	b.n	8005992 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d061      	beq.n	8005a60 <pvPortMalloc+0x120>
 800599c:	4b39      	ldr	r3, [pc, #228]	@ (8005a84 <pvPortMalloc+0x144>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d85c      	bhi.n	8005a60 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059a6:	4b38      	ldr	r3, [pc, #224]	@ (8005a88 <pvPortMalloc+0x148>)
 80059a8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80059aa:	4b37      	ldr	r3, [pc, #220]	@ (8005a88 <pvPortMalloc+0x148>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059b0:	e004      	b.n	80059bc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d903      	bls.n	80059ce <pvPortMalloc+0x8e>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f1      	bne.n	80059b2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059ce:	4b2b      	ldr	r3, [pc, #172]	@ (8005a7c <pvPortMalloc+0x13c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d043      	beq.n	8005a60 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2208      	movs	r2, #8
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	1ad2      	subs	r2, r2, r3
 80059f2:	2308      	movs	r3, #8
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d917      	bls.n	8005a2a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2207      	movs	r2, #7
 8005a06:	4013      	ands	r3, r2
 8005a08:	d002      	beq.n	8005a10 <pvPortMalloc+0xd0>
 8005a0a:	b672      	cpsid	i
 8005a0c:	46c0      	nop			@ (mov r8, r8)
 8005a0e:	e7fd      	b.n	8005a0c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f8dd 	bl	8005be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <pvPortMalloc+0x144>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <pvPortMalloc+0x144>)
 8005a36:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a38:	4b12      	ldr	r3, [pc, #72]	@ (8005a84 <pvPortMalloc+0x144>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <pvPortMalloc+0x14c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d203      	bcs.n	8005a4c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <pvPortMalloc+0x144>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b10      	ldr	r3, [pc, #64]	@ (8005a8c <pvPortMalloc+0x14c>)
 8005a4a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <pvPortMalloc+0x140>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a60:	f7fe ff00 	bl	8004864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2207      	movs	r2, #7
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d002      	beq.n	8005a72 <pvPortMalloc+0x132>
 8005a6c:	b672      	cpsid	i
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	e7fd      	b.n	8005a6e <pvPortMalloc+0x12e>
	return pvReturn;
 8005a72:	68fb      	ldr	r3, [r7, #12]
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b006      	add	sp, #24
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20001ae0 	.word	0x20001ae0
 8005a80:	20001aec 	.word	0x20001aec
 8005a84:	20001ae4 	.word	0x20001ae4
 8005a88:	20001ad8 	.word	0x20001ad8
 8005a8c:	20001ae8 	.word	0x20001ae8

08005a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d037      	beq.n	8005b12 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	425b      	negs	r3, r3
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4b19      	ldr	r3, [pc, #100]	@ (8005b1c <vPortFree+0x8c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d102      	bne.n	8005ac2 <vPortFree+0x32>
 8005abc:	b672      	cpsid	i
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	e7fd      	b.n	8005abe <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <vPortFree+0x40>
 8005aca:	b672      	cpsid	i
 8005acc:	46c0      	nop			@ (mov r8, r8)
 8005ace:	e7fd      	b.n	8005acc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <vPortFree+0x8c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d01a      	beq.n	8005b12 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d116      	bne.n	8005b12 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <vPortFree+0x8c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005af4:	f7fe feaa 	bl	800484c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <vPortFree+0x90>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	18d2      	adds	r2, r2, r3
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <vPortFree+0x90>)
 8005b04:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f86b 	bl	8005be4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b0e:	f7fe fea9 	bl	8004864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b004      	add	sp, #16
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	20001aec 	.word	0x20001aec
 8005b20:	20001ae4 	.word	0x20001ae4

08005b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b2a:	23c0      	movs	r3, #192	@ 0xc0
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b30:	4b26      	ldr	r3, [pc, #152]	@ (8005bcc <prvHeapInit+0xa8>)
 8005b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2207      	movs	r2, #7
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d00c      	beq.n	8005b56 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3307      	adds	r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2207      	movs	r2, #7
 8005b46:	4393      	bics	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	4b1e      	ldr	r3, [pc, #120]	@ (8005bcc <prvHeapInit+0xa8>)
 8005b52:	18d3      	adds	r3, r2, r3
 8005b54:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <prvHeapInit+0xac>)
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b60:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <prvHeapInit+0xac>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	18d3      	adds	r3, r2, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b6e:	2208      	movs	r2, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2207      	movs	r2, #7
 8005b7a:	4393      	bics	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <prvHeapInit+0xb0>)
 8005b82:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <prvHeapInit+0xb0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <prvHeapInit+0xb0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <prvHeapInit+0xb0>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <prvHeapInit+0xb4>)
 8005bb0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <prvHeapInit+0xb8>)
 8005bb8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bba:	4b09      	ldr	r3, [pc, #36]	@ (8005be0 <prvHeapInit+0xbc>)
 8005bbc:	2280      	movs	r2, #128	@ 0x80
 8005bbe:	0612      	lsls	r2, r2, #24
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b004      	add	sp, #16
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	20000ed8 	.word	0x20000ed8
 8005bd0:	20001ad8 	.word	0x20001ad8
 8005bd4:	20001ae0 	.word	0x20001ae0
 8005bd8:	20001ae8 	.word	0x20001ae8
 8005bdc:	20001ae4 	.word	0x20001ae4
 8005be0:	20001aec 	.word	0x20001aec

08005be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bec:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <prvInsertBlockIntoFreeList+0xa8>)
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e002      	b.n	8005bf8 <prvInsertBlockIntoFreeList+0x14>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d8f7      	bhi.n	8005bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d108      	bne.n	8005c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	18d2      	adds	r2, r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	18d2      	adds	r2, r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d118      	bne.n	8005c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b14      	ldr	r3, [pc, #80]	@ (8005c90 <prvInsertBlockIntoFreeList+0xac>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d00d      	beq.n	8005c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	18d2      	adds	r2, r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e008      	b.n	8005c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <prvInsertBlockIntoFreeList+0xac>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e003      	b.n	8005c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d002      	beq.n	8005c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b004      	add	sp, #16
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	20001ad8 	.word	0x20001ad8
 8005c90:	20001ae0 	.word	0x20001ae0

08005c94 <memset>:
 8005c94:	0003      	movs	r3, r0
 8005c96:	1882      	adds	r2, r0, r2
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d100      	bne.n	8005c9e <memset+0xa>
 8005c9c:	4770      	bx	lr
 8005c9e:	7019      	strb	r1, [r3, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	e7f9      	b.n	8005c98 <memset+0x4>

08005ca4 <__libc_init_array>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	4c0c      	ldr	r4, [pc, #48]	@ (8005cdc <__libc_init_array+0x38>)
 8005caa:	4d0d      	ldr	r5, [pc, #52]	@ (8005ce0 <__libc_init_array+0x3c>)
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	42a6      	cmp	r6, r4
 8005cb2:	d109      	bne.n	8005cc8 <__libc_init_array+0x24>
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	f000 f823 	bl	8005d00 <_init>
 8005cba:	4c0a      	ldr	r4, [pc, #40]	@ (8005ce4 <__libc_init_array+0x40>)
 8005cbc:	4d0a      	ldr	r5, [pc, #40]	@ (8005ce8 <__libc_init_array+0x44>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	42a6      	cmp	r6, r4
 8005cc4:	d105      	bne.n	8005cd2 <__libc_init_array+0x2e>
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	00b3      	lsls	r3, r6, #2
 8005cca:	58eb      	ldr	r3, [r5, r3]
 8005ccc:	4798      	blx	r3
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7ee      	b.n	8005cb0 <__libc_init_array+0xc>
 8005cd2:	00b3      	lsls	r3, r6, #2
 8005cd4:	58eb      	ldr	r3, [r5, r3]
 8005cd6:	4798      	blx	r3
 8005cd8:	3601      	adds	r6, #1
 8005cda:	e7f2      	b.n	8005cc2 <__libc_init_array+0x1e>
 8005cdc:	08005e30 	.word	0x08005e30
 8005ce0:	08005e30 	.word	0x08005e30
 8005ce4:	08005e34 	.word	0x08005e34
 8005ce8:	08005e30 	.word	0x08005e30

08005cec <memcpy>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d100      	bne.n	8005cf6 <memcpy+0xa>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	5ccc      	ldrb	r4, [r1, r3]
 8005cf8:	54c4      	strb	r4, [r0, r3]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	e7f8      	b.n	8005cf0 <memcpy+0x4>
	...

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
