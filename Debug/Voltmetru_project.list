
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005624  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  0000841c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006240  08006240  0000841c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006240  08006240  0000841c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  08006248  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  2000041c  08006664  0000841c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08006664  0000882c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00014c04  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000e3c2  00000000  00000000  0001d0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cb9  00000000  00000000  0002b473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb8  00000000  00000000  0002e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a9bfc  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b57  00000000  00000000  000d8be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001c243  00000000  00000000  000d973b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f597e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003380  00000000  00000000  000f59c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000041c 	.word	0x2000041c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080056c8 	.word	0x080056c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000420 	.word	0x20000420
 8000100:	080056c8 	.word	0x080056c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	@ (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f000 fac8 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	@ (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	@ (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	@ (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f005 f925 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f001 fb99 	bl	8001b58 <main>

08000426 <LoopForever>:

LoopForever:
    b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 8000434:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8000438:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 800043c:	2000082c 	.word	0x2000082c

08000440 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_COMP_IRQHandler>
	...

08000444 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	230c      	movs	r3, #12
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f005 f902 	bl	800565c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000458:	4b2c      	ldr	r3, [pc, #176]	@ (800050c <MX_ADC_Init+0xc8>)
 800045a:	4a2d      	ldr	r2, [pc, #180]	@ (8000510 <MX_ADC_Init+0xcc>)
 800045c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800045e:	4b2b      	ldr	r3, [pc, #172]	@ (800050c <MX_ADC_Init+0xc8>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000464:	4b29      	ldr	r3, [pc, #164]	@ (800050c <MX_ADC_Init+0xc8>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046a:	4b28      	ldr	r3, [pc, #160]	@ (800050c <MX_ADC_Init+0xc8>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000470:	4b26      	ldr	r3, [pc, #152]	@ (800050c <MX_ADC_Init+0xc8>)
 8000472:	2201      	movs	r2, #1
 8000474:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000476:	4b25      	ldr	r3, [pc, #148]	@ (800050c <MX_ADC_Init+0xc8>)
 8000478:	2204      	movs	r2, #4
 800047a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <MX_ADC_Init+0xc8>)
 800047e:	2200      	movs	r2, #0
 8000480:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MX_ADC_Init+0xc8>)
 8000484:	2200      	movs	r2, #0
 8000486:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000488:	4b20      	ldr	r3, [pc, #128]	@ (800050c <MX_ADC_Init+0xc8>)
 800048a:	2200      	movs	r2, #0
 800048c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_ADC_Init+0xc8>)
 8000490:	2200      	movs	r2, #0
 8000492:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000494:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <MX_ADC_Init+0xc8>)
 8000496:	22c0      	movs	r2, #192	@ 0xc0
 8000498:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800049a:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <MX_ADC_Init+0xc8>)
 800049c:	22c0      	movs	r2, #192	@ 0xc0
 800049e:	0112      	lsls	r2, r2, #4
 80004a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_ADC_Init+0xc8>)
 80004a4:	2224      	movs	r2, #36	@ 0x24
 80004a6:	2101      	movs	r1, #1
 80004a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_ADC_Init+0xc8>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_ADC_Init+0xc8>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fc14 	bl	8002ce0 <HAL_ADC_Init>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004bc:	f002 faca 	bl	8002a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0152      	lsls	r2, r2, #5
 80004cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	0552      	lsls	r2, r2, #21
 80004d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004d6:	1d3a      	adds	r2, r7, #4
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_ADC_Init+0xc8>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fdd9 	bl	8003094 <HAL_ADC_ConfigChannel>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80004e6:	f002 fab5 	bl	8002a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2201      	movs	r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f0:	1d3a      	adds	r2, r7, #4
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_ADC_Init+0xc8>)
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 fdcc 	bl	8003094 <HAL_ADC_ConfigChannel>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000500:	f002 faa8 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000438 	.word	0x20000438
 8000510:	40012400 	.word	0x40012400

08000514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	@ 0x2c
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	2414      	movs	r4, #20
 800051e:	193b      	adds	r3, r7, r4
 8000520:	0018      	movs	r0, r3
 8000522:	2314      	movs	r3, #20
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f005 f898 	bl	800565c <memset>
  if(adcHandle->Instance==ADC1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a35      	ldr	r2, [pc, #212]	@ (8000608 <HAL_ADC_MspInit+0xf4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d164      	bne.n	8000600 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 800053c:	2180      	movs	r1, #128	@ 0x80
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	430a      	orrs	r2, r1
 8000542:	619a      	str	r2, [r3, #24]
 8000544:	4b31      	ldr	r3, [pc, #196]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0289      	lsls	r1, r1, #10
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	029b      	lsls	r3, r3, #10
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2203      	movs	r2, #3
 8000578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	193a      	adds	r2, r7, r4
 8000582:	2390      	movs	r3, #144	@ 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f003 fa2d 	bl	80039e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel2;
 800058e:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <HAL_ADC_MspInit+0x100>)
 8000592:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	00d2      	lsls	r2, r2, #3
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005b8:	2220      	movs	r2, #32
 80005ba:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	0152      	lsls	r2, r2, #5
 80005c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 f858 	bl	800367c <HAL_DMA_Init>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80005d0:	f002 fa40 	bl	8002a54 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_ADC);
 80005d4:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005d6:	23a8      	movs	r3, #168	@ 0xa8
 80005d8:	58d3      	ldr	r3, [r2, r3]
 80005da:	490f      	ldr	r1, [pc, #60]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	4393      	bics	r3, r2
 80005e0:	22a8      	movs	r2, #168	@ 0xa8
 80005e2:	508b      	str	r3, [r1, r2]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005e6:	23a8      	movs	r3, #168	@ 0xa8
 80005e8:	58d3      	ldr	r3, [r2, r3]
 80005ea:	490b      	ldr	r1, [pc, #44]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005ec:	2210      	movs	r2, #16
 80005ee:	4313      	orrs	r3, r2
 80005f0:	22a8      	movs	r2, #168	@ 0xa8
 80005f2:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	@ 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40012400 	.word	0x40012400
 800060c:	40021000 	.word	0x40021000
 8000610:	20000478 	.word	0x20000478
 8000614:	4002001c 	.word	0x4002001c
 8000618:	40020000 	.word	0x40020000

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_DMA_Init+0x38>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_DMA_Init+0x38>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_DMA_Init+0x38>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	200a      	movs	r0, #10
 8000640:	f002 ffea 	bl	8003618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000644:	200a      	movs	r0, #10
 8000646:	f002 fffc 	bl	8003642 <HAL_NVIC_EnableIRQ>

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08b      	sub	sp, #44	@ 0x2c
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2414      	movs	r4, #20
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f004 fff7 	bl	800565c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b59      	ldr	r3, [pc, #356]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b58      	ldr	r3, [pc, #352]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	0309      	lsls	r1, r1, #12
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b55      	ldr	r3, [pc, #340]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	031b      	lsls	r3, r3, #12
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068a:	4b52      	ldr	r3, [pc, #328]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b51      	ldr	r3, [pc, #324]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	03c9      	lsls	r1, r1, #15
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b4e      	ldr	r3, [pc, #312]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	03db      	lsls	r3, r3, #15
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b4b      	ldr	r3, [pc, #300]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0289      	lsls	r1, r1, #10
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	02c9      	lsls	r1, r1, #11
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b40      	ldr	r3, [pc, #256]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	02db      	lsls	r3, r3, #11
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 80006de:	4b3e      	ldr	r3, [pc, #248]	@ (80007d8 <MX_GPIO_Init+0x180>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2180      	movs	r1, #128	@ 0x80
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 faf7 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 80006ea:	23c0      	movs	r3, #192	@ 0xc0
 80006ec:	0099      	lsls	r1, r3, #2
 80006ee:	2390      	movs	r3, #144	@ 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f003 faef 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 80006fa:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	0018      	movs	r0, r3
 8000702:	f003 fae9 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	0192      	lsls	r2, r2, #6
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2284      	movs	r2, #132	@ 0x84
 8000712:	0392      	lsls	r2, r2, #14
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a2e      	ldr	r2, [pc, #184]	@ (80007d8 <MX_GPIO_Init+0x180>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f003 f960 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	193a      	adds	r2, r7, r4
 8000748:	2390      	movs	r3, #144	@ 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f94a 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0x180>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f003 f938 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	22c0      	movs	r2, #192	@ 0xc0
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	000c      	movs	r4, r1
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	193a      	adds	r2, r7, r4
 8000798:	2390      	movs	r3, #144	@ 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 f922 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	4a06      	ldr	r2, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x184>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f003 f90f 	bl	80039e8 <HAL_GPIO_Init>

}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b00b      	add	sp, #44	@ 0x2c
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800
 80007dc:	48000400 	.word	0x48000400

080007e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <MX_SPI1_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007ec:	2282      	movs	r2, #130	@ 0x82
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007fa:	22e0      	movs	r2, #224	@ 0xe0
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI1_Init+0x74>)
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000816:	2218      	movs	r2, #24
 8000818:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI1_Init+0x74>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI1_Init+0x74>)
 800083a:	2208      	movs	r2, #8
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000840:	0018      	movs	r0, r3
 8000842:	f004 f839 	bl	80048b8 <HAL_SPI_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084a:	f002 f903 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200004bc 	.word	0x200004bc
 8000858:	40013000 	.word	0x40013000

0800085c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b08b      	sub	sp, #44	@ 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	2414      	movs	r4, #20
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f004 fef4 	bl	800565c <memset>
  if(spiHandle->Instance==SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <HAL_SPI_MspInit+0x90>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d132      	bne.n	80008e4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 8000880:	699a      	ldr	r2, [r3, #24]
 8000882:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	0149      	lsls	r1, r1, #5
 8000888:	430a      	orrs	r2, r1
 800088a:	619a      	str	r2, [r3, #24]
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 800088e:	699a      	ldr	r2, [r3, #24]
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	015b      	lsls	r3, r3, #5
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0289      	lsls	r1, r1, #10
 80008a4:	430a      	orrs	r2, r1
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b6:	0021      	movs	r1, r4
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	22a0      	movs	r2, #160	@ 0xa0
 80008bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2202      	movs	r2, #2
 80008c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2203      	movs	r2, #3
 80008ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	187a      	adds	r2, r7, r1
 80008d8:	2390      	movs	r3, #144	@ 0x90
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f003 f882 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b00b      	add	sp, #44	@ 0x2c
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	2101      	movs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	619a      	str	r2, [r3, #24]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	0549      	lsls	r1, r1, #21
 800091c:	430a      	orrs	r2, r1
 800091e:	61da      	str	r2, [r3, #28]
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_MspInit+0x44>)
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	055b      	lsls	r3, r3, #21
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f002 f97c 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 ff2e 	bl	80037d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	20000478 	.word	0x20000478

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	2308      	movs	r3, #8
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	0018      	movs	r0, r3
 80009a0:	2310      	movs	r3, #16
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f004 fe59 	bl	800565c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	003b      	movs	r3, r7
 80009ac:	0018      	movs	r0, r3
 80009ae:	2308      	movs	r3, #8
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f004 fe52 	bl	800565c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	05d2      	lsls	r2, r2, #23
 80009be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009c2:	222f      	movs	r2, #47	@ 0x2f
 80009c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	4252      	negs	r2, r2
 80009d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 faf6 	bl	8004fd4 <HAL_TIM_Base_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f002 f832 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	2108      	movs	r1, #8
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0152      	lsls	r2, r2, #5
 80009f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f004 fb81 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a0a:	f002 f823 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f004 fd6d 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a2a:	f002 f813 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b006      	add	sp, #24
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000520 	.word	0x20000520

08000a3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	2308      	movs	r3, #8
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f004 fe05 	bl	800565c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	003b      	movs	r3, r7
 8000a54:	0018      	movs	r0, r3
 8000a56:	2308      	movs	r3, #8
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f004 fdfe 	bl	800565c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <MX_TIM3_Init+0xa4>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a68:	220e      	movs	r2, #14
 8000a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <MX_TIM3_Init+0xa8>)
 8000a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f004 faa4 	bl	8004fd4 <HAL_TIM_Base_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a90:	f001 ffe0 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	2108      	movs	r1, #8
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f004 fb2f 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000aae:	f001 ffd1 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abe:	003a      	movs	r2, r7
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f004 fd1b 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ace:	f001 ffc1 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b006      	add	sp, #24
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	20000568 	.word	0x20000568
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	000003e7 	.word	0x000003e7

08000ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d10c      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000afe:	69da      	ldr	r2, [r3, #28]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b14:	e010      	b.n	8000b38 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d10b      	bne.n	8000b38 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b22:	69da      	ldr	r2, [r3, #28]
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b26:	2102      	movs	r1, #2
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	61da      	str	r2, [r3, #28]
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	2202      	movs	r2, #2
 8000b32:	4013      	ands	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40000400 	.word	0x40000400

08000b48 <HAL_GetTick_us>:
    TIM2->ARR = 0xFFFFFFFF;                          // free-run
    TIM2->CR1 = TIM_CR1_CEN;
}*/

uint32_t HAL_GetTick_us(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    return TIM2->CNT;          // 1-µs resolution
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    uint8_t p;
    for (p = 0; p < 8; p++) {
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e042      	b.n	8000bf0 <st7565_write_buffer+0x98>
        CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <st7565_write_buffer+0xac>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2180      	movs	r1, #128	@ 0x80
 8000b70:	0018      	movs	r0, r3
 8000b72:	f003 f8b1 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000b76:	240f      	movs	r4, #15
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <st7565_write_buffer+0xb0>)
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	2250      	movs	r2, #80	@ 0x50
 8000b82:	4252      	negs	r2, r2
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f841 	bl	8000c10 <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <st7565_write_buffer+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	2180      	movs	r1, #128	@ 0x80
 8000b94:	0018      	movs	r0, r3
 8000b96:	f003 f89f 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f838 	bl	8000c10 <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <st7565_write_buffer+0xac>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f003 f896 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 f82f 	bl	8000c10 <st7565_sendbyte>
        CMD(ST7565_CMD_RMW);
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <st7565_write_buffer+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f003 f88d 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000bbe:	20e0      	movs	r0, #224	@ 0xe0
 8000bc0:	f000 f826 	bl	8000c10 <st7565_sendbyte>
        HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <st7565_write_buffer+0xac>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f003 f884 	bl	8003cd8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, &buffer[128 * p], 128, 6);
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	01db      	lsls	r3, r3, #7
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	1899      	adds	r1, r3, r2
 8000bdc:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <st7565_write_buffer+0xb4>)
 8000bde:	2306      	movs	r3, #6
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	f003 ff21 	bl	8004a28 <HAL_SPI_Transmit>
    for (p = 0; p < 8; p++) {
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	3201      	adds	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d9b7      	bls.n	8000b6a <st7565_write_buffer+0x12>
    }
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b005      	add	sp, #20
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	48000800 	.word	0x48000800
 8000c08:	2000040c 	.word	0x2000040c
 8000c0c:	200004bc 	.word	0x200004bc

08000c10 <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000c1c:	1df9      	adds	r1, r7, #7
 8000c1e:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <st7565_sendbyte+0x20>)
 8000c20:	2364      	movs	r3, #100	@ 0x64
 8000c22:	2201      	movs	r2, #1
 8000c24:	f003 ff00 	bl	8004a28 <HAL_SPI_Transmit>
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200004bc 	.word	0x200004bc

08000c34 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	0059      	lsls	r1, r3, #1
 8000c3c:	2390      	movs	r3, #144	@ 0x90
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2201      	movs	r2, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 f848 	bl	8003cd8 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000c48:	4b4e      	ldr	r3, [pc, #312]	@ (8000d84 <st7565_init+0x150>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 f842 	bl	8003cd8 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	0099      	lsls	r1, r3, #2
 8000c58:	2390      	movs	r3, #144	@ 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f003 f83a 	bl	8003cd8 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000c64:	4b48      	ldr	r3, [pc, #288]	@ (8000d88 <st7565_init+0x154>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 f834 	bl	8003cd8 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000c70:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <st7565_init+0x154>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	@ 0x40
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 f82e 	bl	8003cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	0099      	lsls	r1, r3, #2
 8000c80:	2390      	movs	r3, #144	@ 0x90
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 f826 	bl	8003cd8 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000c8c:	23fa      	movs	r3, #250	@ 0xfa
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	0018      	movs	r0, r3
 8000c92:	f002 f801 	bl	8002c98 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	0099      	lsls	r1, r3, #2
 8000c9a:	2390      	movs	r3, #144	@ 0x90
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 f819 	bl	8003cd8 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8000ca6:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <st7565_init+0x150>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	0018      	movs	r0, r3
 8000cae:	f003 f813 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000cb2:	20a3      	movs	r0, #163	@ 0xa3
 8000cb4:	f7ff ffac 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <st7565_init+0x150>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f003 f80a 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000cc4:	20a0      	movs	r0, #160	@ 0xa0
 8000cc6:	f7ff ffa3 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000cca:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <st7565_init+0x150>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2180      	movs	r1, #128	@ 0x80
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f003 f801 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000cd6:	20c0      	movs	r0, #192	@ 0xc0
 8000cd8:	f7ff ff9a 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <st7565_init+0x150>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2180      	movs	r1, #128	@ 0x80
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fff8 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000ce8:	2040      	movs	r0, #64	@ 0x40
 8000cea:	f7ff ff91 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000cee:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <st7565_init+0x150>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2180      	movs	r1, #128	@ 0x80
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 ffef 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000cfa:	202c      	movs	r0, #44	@ 0x2c
 8000cfc:	f7ff ff88 	bl	8000c10 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000d00:	2032      	movs	r0, #50	@ 0x32
 8000d02:	f001 ffc9 	bl	8002c98 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <st7565_init+0x150>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2180      	movs	r1, #128	@ 0x80
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 ffe3 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000d12:	202e      	movs	r0, #46	@ 0x2e
 8000d14:	f7ff ff7c 	bl	8000c10 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000d18:	2032      	movs	r0, #50	@ 0x32
 8000d1a:	f001 ffbd 	bl	8002c98 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <st7565_init+0x150>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 ffd7 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000d2a:	202f      	movs	r0, #47	@ 0x2f
 8000d2c:	f7ff ff70 	bl	8000c10 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000d30:	200a      	movs	r0, #10
 8000d32:	f001 ffb1 	bl	8002c98 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <st7565_init+0x150>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 ffcb 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000d42:	2026      	movs	r0, #38	@ 0x26
 8000d44:	f7ff ff64 	bl	8000c10 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <st7565_init+0x150>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 ffc2 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000d54:	20af      	movs	r0, #175	@ 0xaf
 8000d56:	f7ff ff5b 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <st7565_init+0x150>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 ffb9 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000d66:	20a4      	movs	r0, #164	@ 0xa4
 8000d68:	f7ff ff52 	bl	8000c10 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f81d 	bl	8000dac <st7565_set_brightness>
 	st7565_clear_screen();
 8000d72:	f000 f83f 	bl	8000df4 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <st7565_init+0x158>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f897 	bl	8000eac <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	2000000c 	.word	0x2000000c

08000d90 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	0059      	lsls	r1, r3, #1
 8000d98:	2390      	movs	r3, #144	@ 0x90
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 ff9a 	bl	8003cd8 <HAL_GPIO_WritePin>
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <st7565_set_brightness+0x44>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	@ 0x80
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f002 ff8a 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000dc4:	2081      	movs	r0, #129	@ 0x81
 8000dc6:	f7ff ff23 	bl	8000c10 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <st7565_set_brightness+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 ff81 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	223f      	movs	r2, #63	@ 0x3f
 8000ddc:	4013      	ands	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ff15 	bl	8000c10 <st7565_sendbyte>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	48000800 	.word	0x48000800

08000df4 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e049      	b.n	8000e96 <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000e02:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <st7565_clear_screen+0xb4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f002 ff65 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2250      	movs	r2, #80	@ 0x50
 8000e14:	4252      	negs	r2, r2
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fef8 	bl	8000c10 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e02d      	b.n	8000e84 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <st7565_clear_screen+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2180      	movs	r1, #128	@ 0x80
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 ff52 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	220f      	movs	r2, #15
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fee6 	bl	8000c10 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <st7565_clear_screen+0xb4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 ff44 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fed4 	bl	8000c10 <st7565_sendbyte>
			DATA(0x0);
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <st7565_clear_screen+0xb4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2180      	movs	r1, #128	@ 0x80
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 ff32 	bl	8003cd8 <HAL_GPIO_WritePin>
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fecb 	bl	8000c10 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000e7a:	1dbb      	adds	r3, r7, #6
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	1dbb      	adds	r3, r7, #6
 8000e80:	3201      	adds	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b80      	cmp	r3, #128	@ 0x80
 8000e8a:	d9cd      	bls.n	8000e28 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	3201      	adds	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	d9b1      	bls.n	8000e02 <st7565_clear_screen+0xe>
		}
	}
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	48000800 	.word	0x48000800

08000eac <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f004 fbcd 	bl	800565c <memset>
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000eca:	b590      	push	{r4, r7, lr}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	000c      	movs	r4, r1
 8000ed4:	0010      	movs	r0, r2
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	1cfb      	adds	r3, r7, #3
 8000eda:	1c22      	adds	r2, r4, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	1cbb      	adds	r3, r7, #2
 8000ee0:	1c02      	adds	r2, r0, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	1c7b      	adds	r3, r7, #1
 8000ee6:	1c0a      	adds	r2, r1, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000eea:	1cfb      	adds	r3, r7, #3
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db51      	blt.n	8000f98 <st7565_setpixel+0xce>
 8000ef4:	1cbb      	adds	r3, r7, #2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000efa:	d84d      	bhi.n	8000f98 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000efc:	1c7b      	adds	r3, r7, #1
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d023      	beq.n	8000f4c <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000f04:	1cfb      	adds	r3, r7, #3
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	1cbb      	adds	r3, r7, #2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	b2d8      	uxtb	r0, r3
 8000f10:	0003      	movs	r3, r0
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	001a      	movs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	2107      	movs	r1, #7
 8000f28:	400b      	ands	r3, r1
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4099      	lsls	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b259      	sxtb	r1, r3
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	01db      	lsls	r3, r3, #7
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	001a      	movs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	189b      	adds	r3, r3, r2
 8000f46:	b2ca      	uxtb	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e026      	b.n	8000f9a <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000f4c:	1cfb      	adds	r3, r7, #3
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	1cbb      	adds	r3, r7, #2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	b2d8      	uxtb	r0, r3
 8000f58:	0003      	movs	r3, r0
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	001a      	movs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	1cba      	adds	r2, r7, #2
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	2107      	movs	r1, #7
 8000f70:	400a      	ands	r2, r1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	b252      	sxtb	r2, r2
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	b252      	sxtb	r2, r2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	b259      	sxtb	r1, r3
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	0003      	movs	r3, r0
 8000f88:	01db      	lsls	r3, r3, #7
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	189b      	adds	r3, r3, r2
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e000      	b.n	8000f9a <st7565_setpixel+0xd0>
		return;
 8000f98:	46c0      	nop			@ (mov r8, r8)
}
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c,uint8_t fontSelect) {
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	0008      	movs	r0, r1
 8000faa:	0011      	movs	r1, r2
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	230b      	movs	r3, #11
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	1c02      	adds	r2, r0, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	1c0a      	adds	r2, r1, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8000fbe:	e02c      	b.n	800101a <st7565_drawstring+0x7a>
		st7565_drawchar(buff, x, line, c[0], fontSelect);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781c      	ldrb	r4, [r3, #0]
 8000fc4:	260a      	movs	r6, #10
 8000fc6:	19bb      	adds	r3, r7, r6
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	469c      	mov	ip, r3
 8000fcc:	250b      	movs	r5, #11
 8000fce:	197b      	adds	r3, r7, r5
 8000fd0:	7819      	ldrb	r1, [r3, #0]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	19db      	adds	r3, r3, r7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	0023      	movs	r3, r4
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	f000 f822 	bl	800102c <st7565_drawchar>
		c++;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8000fee:	197b      	adds	r3, r7, r5
 8000ff0:	197a      	adds	r2, r7, r5
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	3206      	adds	r2, #6
 8000ff6:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8000ff8:	197b      	adds	r3, r7, r5
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b79      	cmp	r3, #121	@ 0x79
 8000ffe:	d907      	bls.n	8001010 <st7565_drawstring+0x70>
			x = 0; // ran out of this line
 8001000:	197b      	adds	r3, r7, r5
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
			line++;
 8001006:	19bb      	adds	r3, r7, r6
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	19bb      	adds	r3, r7, r6
 800100c:	3201      	adds	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8001010:	230a      	movs	r3, #10
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d804      	bhi.n	8001024 <st7565_drawstring+0x84>
	while (c[0] != 0) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ce      	bne.n	8000fc0 <st7565_drawstring+0x20>
 8001022:	e000      	b.n	8001026 <st7565_drawstring+0x86>
			return; // ran out of space :(
 8001024:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001026:	46bd      	mov	sp, r7
 8001028:	b005      	add	sp, #20
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800102c <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c, uint8_t fontSelect) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	000c      	movs	r4, r1
 8001036:	0010      	movs	r0, r2
 8001038:	0019      	movs	r1, r3
 800103a:	1cfb      	adds	r3, r7, #3
 800103c:	1c22      	adds	r2, r4, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	1c02      	adds	r2, r0, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	1c7b      	adds	r3, r7, #1
 8001048:	1c0a      	adds	r2, r1, #0
 800104a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e043      	b.n	80010de <st7565_drawchar+0xb2>
		if(fontSelect==0)
 8001056:	2320      	movs	r3, #32
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d117      	bne.n	8001090 <st7565_drawchar+0x64>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8001060:	1c7b      	adds	r3, r7, #1
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	0013      	movs	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	189b      	adds	r3, r3, r2
 800106a:	001a      	movs	r2, r3
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	18d2      	adds	r2, r2, r3
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <st7565_drawchar+0xc8>)
 8001076:	18d2      	adds	r2, r2, r3
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	7819      	ldrb	r1, [r3, #0]
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	01db      	lsls	r3, r3, #7
 8001082:	18cb      	adds	r3, r1, r3
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	185b      	adds	r3, r3, r1
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e01b      	b.n	80010c8 <st7565_drawchar+0x9c>
		else if(fontSelect==1)
 8001090:	2320      	movs	r3, #32
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d116      	bne.n	80010c8 <st7565_drawchar+0x9c>
		buff[x + (line * 128)] = *(ultraFont + (c * 5) + i);
 800109a:	1c7b      	adds	r3, r7, #1
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	0013      	movs	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	001a      	movs	r2, r3
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	18d2      	adds	r2, r2, r3
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <st7565_drawchar+0xcc>)
 80010b0:	18d2      	adds	r2, r2, r3
 80010b2:	1cfb      	adds	r3, r7, #3
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	01db      	lsls	r3, r3, #7
 80010bc:	18cb      	adds	r3, r1, r3
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	185b      	adds	r3, r3, r1
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
		x++;
 80010c8:	1cfb      	adds	r3, r7, #3
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	1cfb      	adds	r3, r7, #3
 80010ce:	3201      	adds	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 80010d2:	210f      	movs	r1, #15
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	3201      	adds	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d9b6      	bls.n	8001056 <st7565_drawchar+0x2a>
	}
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b005      	add	sp, #20
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	08005cf0 	.word	0x08005cf0
 80010f8:	080057f4 	.word	0x080057f4

080010fc <st7565_drawline_complex>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline_complex(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000c      	movs	r4, r1
 8001106:	0010      	movs	r0, r2
 8001108:	0019      	movs	r1, r3
 800110a:	1cfb      	adds	r3, r7, #3
 800110c:	1c22      	adds	r2, r4, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	1cbb      	adds	r3, r7, #2
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	1c7b      	adds	r3, r7, #1
 8001118:	1c0a      	adds	r2, r1, #0
 800111a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8001124:	1cfa      	adds	r2, r7, #3
 8001126:	1c7b      	adds	r3, r7, #1
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d908      	bls.n	8001142 <st7565_drawline_complex+0x46>
		dx = x0 - x1;
 8001130:	230c      	movs	r3, #12
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	1cf9      	adds	r1, r7, #3
 8001136:	1c7a      	adds	r2, r7, #1
 8001138:	7809      	ldrb	r1, [r1, #0]
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	1a8a      	subs	r2, r1, r2
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e007      	b.n	8001152 <st7565_drawline_complex+0x56>
	else
		dx = x1 - x0;
 8001142:	230c      	movs	r3, #12
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	1c79      	adds	r1, r7, #1
 8001148:	1cfa      	adds	r2, r7, #3
 800114a:	7809      	ldrb	r1, [r1, #0]
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	1a8a      	subs	r2, r1, r2
 8001150:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8001152:	1cba      	adds	r2, r7, #2
 8001154:	2020      	movs	r0, #32
 8001156:	183b      	adds	r3, r7, r0
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d908      	bls.n	8001172 <st7565_drawline_complex+0x76>
		dy = y0 - y1;
 8001160:	230b      	movs	r3, #11
 8001162:	18fa      	adds	r2, r7, r3
 8001164:	1cb9      	adds	r1, r7, #2
 8001166:	183b      	adds	r3, r7, r0
 8001168:	7809      	ldrb	r1, [r1, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	1acb      	subs	r3, r1, r3
 800116e:	7013      	strb	r3, [r2, #0]
 8001170:	e008      	b.n	8001184 <st7565_drawline_complex+0x88>
	else
		dy = y1 - y0;
 8001172:	230b      	movs	r3, #11
 8001174:	18fa      	adds	r2, r7, r3
 8001176:	2320      	movs	r3, #32
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	1cb8      	adds	r0, r7, #2
 800117c:	7819      	ldrb	r1, [r3, #0]
 800117e:	7803      	ldrb	r3, [r0, #0]
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8001184:	200b      	movs	r0, #11
 8001186:	183a      	adds	r2, r7, r0
 8001188:	240c      	movs	r4, #12
 800118a:	193b      	adds	r3, r7, r4
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d929      	bls.n	80011e8 <st7565_drawline_complex+0xec>
		swap = 1;
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 800119c:	2108      	movs	r1, #8
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	193a      	adds	r2, r7, r4
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	701a      	strb	r2, [r3, #0]
		dx = dy;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	183a      	adds	r2, r7, r0
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	187a      	adds	r2, r7, r1
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	1cfa      	adds	r2, r7, #3
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 80011be:	1cfb      	adds	r3, r7, #3
 80011c0:	1cba      	adds	r2, r7, #2
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	187a      	adds	r2, r7, r1
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	1c7a      	adds	r2, r7, #1
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 80011d6:	1c7a      	adds	r2, r7, #1
 80011d8:	2020      	movs	r0, #32
 80011da:	183b      	adds	r3, r7, r0
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	187a      	adds	r2, r7, r1
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 80011e8:	1cfa      	adds	r2, r7, #3
 80011ea:	1c7b      	adds	r3, r7, #1
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d919      	bls.n	8001228 <st7565_drawline_complex+0x12c>
		tmp = x0;
 80011f4:	2108      	movs	r1, #8
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	1cfa      	adds	r2, r7, #3
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 80011fe:	1cfb      	adds	r3, r7, #3
 8001200:	1c7a      	adds	r2, r7, #1
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8001206:	1c7b      	adds	r3, r7, #1
 8001208:	187a      	adds	r2, r7, r1
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	1cba      	adds	r2, r7, #2
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8001216:	1cba      	adds	r2, r7, #2
 8001218:	2020      	movs	r0, #32
 800121a:	183b      	adds	r3, r7, r0
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8001220:	183b      	adds	r3, r7, r0
 8001222:	187a      	adds	r2, r7, r1
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8001228:	230c      	movs	r3, #12
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	2309      	movs	r3, #9
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8001238:	2320      	movs	r3, #32
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	1cb9      	adds	r1, r7, #2
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	780b      	ldrb	r3, [r1, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d904      	bls.n	8001250 <st7565_drawline_complex+0x154>
		ystep = 1;
 8001246:	230a      	movs	r3, #10
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e003      	b.n	8001258 <st7565_drawline_complex+0x15c>
	else
		ystep = -1;
 8001250:	230a      	movs	r3, #10
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	22ff      	movs	r2, #255	@ 0xff
 8001256:	701a      	strb	r2, [r3, #0]
	y = y0;
 8001258:	230d      	movs	r3, #13
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	1cba      	adds	r2, r7, #2
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8001262:	230e      	movs	r3, #14
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	1cfa      	adds	r2, r7, #3
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e045      	b.n	80012fa <st7565_drawline_complex+0x1fe>
		if (swap == 0)
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <st7565_drawline_complex+0x198>
			st7565_setpixel(buff, x, y, color);
 8001278:	2324      	movs	r3, #36	@ 0x24
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	781c      	ldrb	r4, [r3, #0]
 800127e:	230d      	movs	r3, #13
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	230e      	movs	r3, #14
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	0023      	movs	r3, r4
 800128e:	f7ff fe1c 	bl	8000eca <st7565_setpixel>
 8001292:	e00c      	b.n	80012ae <st7565_drawline_complex+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8001294:	2324      	movs	r3, #36	@ 0x24
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781c      	ldrb	r4, [r3, #0]
 800129a:	230e      	movs	r3, #14
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	230d      	movs	r3, #13
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	7819      	ldrb	r1, [r3, #0]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	0023      	movs	r3, r4
 80012aa:	f7ff fe0e 	bl	8000eca <st7565_setpixel>
		err -= (uint8_t) dy;
 80012ae:	2009      	movs	r0, #9
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	230b      	movs	r3, #11
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	183b      	adds	r3, r7, r0
 80012c0:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80012c8:	d911      	bls.n	80012ee <st7565_drawline_complex+0x1f2>
			y += (uint8_t) ystep;
 80012ca:	230a      	movs	r3, #10
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	7819      	ldrb	r1, [r3, #0]
 80012d0:	220d      	movs	r2, #13
 80012d2:	18bb      	adds	r3, r7, r2
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	188a      	adds	r2, r1, r2
 80012da:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 80012dc:	183b      	adds	r3, r7, r0
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	230c      	movs	r3, #12
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	183b      	adds	r3, r7, r0
 80012ec:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 80012ee:	210e      	movs	r1, #14
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	3201      	adds	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	230e      	movs	r3, #14
 80012fc:	18fa      	adds	r2, r7, r3
 80012fe:	1c7b      	adds	r3, r7, #1
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d9b2      	bls.n	800126e <st7565_drawline_complex+0x172>
		}
	}
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b005      	add	sp, #20
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
 8001312:	b590      	push	{r4, r7, lr}
 8001314:	b087      	sub	sp, #28
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	000c      	movs	r4, r1
 800131c:	0010      	movs	r0, r2
 800131e:	0019      	movs	r1, r3
 8001320:	1cfb      	adds	r3, r7, #3
 8001322:	1c22      	adds	r2, r4, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	1c02      	adds	r2, r0, #0
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	1c7b      	adds	r3, r7, #1
 800132e:	1c0a      	adds	r2, r1, #0
 8001330:	701a      	strb	r2, [r3, #0]
    if (x >= LCDWIDTH || y >= LCDHEIGHT)
 8001332:	1cfb      	adds	r3, r7, #3
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	da00      	bge.n	800133e <st7565_fillrect+0x2c>
 800133c:	e0e2      	b.n	8001504 <st7565_fillrect+0x1f2>
 800133e:	1cbb      	adds	r3, r7, #2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b3f      	cmp	r3, #63	@ 0x3f
 8001344:	d900      	bls.n	8001348 <st7565_fillrect+0x36>
 8001346:	e0dd      	b.n	8001504 <st7565_fillrect+0x1f2>
        return;
    if (x + w > LCDWIDTH)
 8001348:	1cfb      	adds	r3, r7, #3
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	1c7b      	adds	r3, r7, #1
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	2b80      	cmp	r3, #128	@ 0x80
 8001354:	dd06      	ble.n	8001364 <st7565_fillrect+0x52>
        w = LCDWIDTH - x;
 8001356:	1c7b      	adds	r3, r7, #1
 8001358:	1cfa      	adds	r2, r7, #3
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	2180      	movs	r1, #128	@ 0x80
 800135e:	4249      	negs	r1, r1
 8001360:	1a8a      	subs	r2, r1, r2
 8001362:	701a      	strb	r2, [r3, #0]
    if (y + h > LCDHEIGHT)
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	2128      	movs	r1, #40	@ 0x28
 800136a:	187b      	adds	r3, r7, r1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	2b40      	cmp	r3, #64	@ 0x40
 8001372:	dd05      	ble.n	8001380 <st7565_fillrect+0x6e>
        h = LCDHEIGHT - y;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	1cba      	adds	r2, r7, #2
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	2140      	movs	r1, #64	@ 0x40
 800137c:	1a8a      	subs	r2, r1, r2
 800137e:	701a      	strb	r2, [r3, #0]
    uint8_t y_start = y;
 8001380:	2114      	movs	r1, #20
 8001382:	187b      	adds	r3, r7, r1
 8001384:	1cba      	adds	r2, r7, #2
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	701a      	strb	r2, [r3, #0]
    uint8_t y_end = y + h - 1;
 800138a:	1cba      	adds	r2, r7, #2
 800138c:	2328      	movs	r3, #40	@ 0x28
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	18d3      	adds	r3, r2, r3
 8001396:	b2da      	uxtb	r2, r3
 8001398:	2013      	movs	r0, #19
 800139a:	183b      	adds	r3, r7, r0
 800139c:	3a01      	subs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    uint8_t page_start = y_start / 8;
 80013a0:	2312      	movs	r3, #18
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	187a      	adds	r2, r7, r1
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	08d2      	lsrs	r2, r2, #3
 80013aa:	701a      	strb	r2, [r3, #0]
    uint8_t page_end = y_end / 8;
 80013ac:	2311      	movs	r3, #17
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	183a      	adds	r2, r7, r0
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	08d2      	lsrs	r2, r2, #3
 80013b6:	701a      	strb	r2, [r3, #0]
    uint8_t bit_start = y_start % 8;
 80013b8:	2310      	movs	r3, #16
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	187a      	adds	r2, r7, r1
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	2107      	movs	r1, #7
 80013c2:	400a      	ands	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
    uint8_t bit_end = y_end % 8;
 80013c6:	230f      	movs	r3, #15
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	183a      	adds	r2, r7, r0
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	2107      	movs	r1, #7
 80013d0:	400a      	ands	r2, r1
 80013d2:	701a      	strb	r2, [r3, #0]
    for (uint8_t px = x; px < x + w; px++) {
 80013d4:	2317      	movs	r3, #23
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	1cfa      	adds	r2, r7, #3
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e085      	b.n	80014ec <st7565_fillrect+0x1da>
        for (uint8_t page = page_start; page <= page_end; page++) {
 80013e0:	2316      	movs	r3, #22
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2212      	movs	r2, #18
 80013e6:	18ba      	adds	r2, r7, r2
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e070      	b.n	80014d0 <st7565_fillrect+0x1be>
            uint8_t mask = 0xFF;
 80013ee:	2115      	movs	r1, #21
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	22ff      	movs	r2, #255	@ 0xff
 80013f4:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 80013f6:	2316      	movs	r3, #22
 80013f8:	18fa      	adds	r2, r7, r3
 80013fa:	2312      	movs	r3, #18
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d10d      	bne.n	8001422 <st7565_fillrect+0x110>
                mask &= (0xFF >> bit_start);
 8001406:	2310      	movs	r3, #16
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	22ff      	movs	r2, #255	@ 0xff
 800140e:	411a      	asrs	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	b25b      	sxtb	r3, r3
 8001414:	187a      	adds	r2, r7, r1
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	b252      	sxtb	r2, r2
 800141a:	4013      	ands	r3, r2
 800141c:	b25a      	sxtb	r2, r3
 800141e:	187b      	adds	r3, r7, r1
 8001420:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 8001422:	2316      	movs	r3, #22
 8001424:	18fa      	adds	r2, r7, r3
 8001426:	2311      	movs	r3, #17
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d110      	bne.n	8001454 <st7565_fillrect+0x142>
                mask &= (0xFF << (7 - bit_end));
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2207      	movs	r2, #7
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	22ff      	movs	r2, #255	@ 0xff
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	2115      	movs	r1, #21
 8001446:	187a      	adds	r2, r7, r1
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	b252      	sxtb	r2, r2
 800144c:	4013      	ands	r3, r2
 800144e:	b25a      	sxtb	r2, r3
 8001450:	187b      	adds	r3, r7, r1
 8001452:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = px + page * 128;
 8001454:	2317      	movs	r3, #23
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b299      	uxth	r1, r3
 800145c:	2316      	movs	r3, #22
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	01db      	lsls	r3, r3, #7
 8001466:	b29a      	uxth	r2, r3
 8001468:	200c      	movs	r0, #12
 800146a:	183b      	adds	r3, r7, r0
 800146c:	188a      	adds	r2, r1, r2
 800146e:	801a      	strh	r2, [r3, #0]
            if (color)
 8001470:	232c      	movs	r3, #44	@ 0x2c
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00f      	beq.n	800149a <st7565_fillrect+0x188>
                buff[idx] |= mask;
 800147a:	183b      	adds	r3, r7, r0
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	7819      	ldrb	r1, [r3, #0]
 8001484:	183b      	adds	r3, r7, r0
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	18d3      	adds	r3, r2, r3
 800148c:	2215      	movs	r2, #21
 800148e:	18ba      	adds	r2, r7, r2
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e014      	b.n	80014c4 <st7565_fillrect+0x1b2>
            else
                buff[idx] &= ~mask;
 800149a:	200c      	movs	r0, #12
 800149c:	183b      	adds	r3, r7, r0
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	18d3      	adds	r3, r2, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	2215      	movs	r2, #21
 80014aa:	18ba      	adds	r2, r7, r2
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	b252      	sxtb	r2, r2
 80014b0:	43d2      	mvns	r2, r2
 80014b2:	b252      	sxtb	r2, r2
 80014b4:	4013      	ands	r3, r2
 80014b6:	b259      	sxtb	r1, r3
 80014b8:	183b      	adds	r3, r7, r0
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 80014c4:	2116      	movs	r1, #22
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	3201      	adds	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	2316      	movs	r3, #22
 80014d2:	18fa      	adds	r2, r7, r3
 80014d4:	2311      	movs	r3, #17
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d986      	bls.n	80013ee <st7565_fillrect+0xdc>
    for (uint8_t px = x; px < x + w; px++) {
 80014e0:	2117      	movs	r1, #23
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	3201      	adds	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	2317      	movs	r3, #23
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	1cfb      	adds	r3, r7, #3
 80014f4:	7819      	ldrb	r1, [r3, #0]
 80014f6:	1c7b      	adds	r3, r7, #1
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	18cb      	adds	r3, r1, r3
 80014fc:	429a      	cmp	r2, r3
 80014fe:	da00      	bge.n	8001502 <st7565_fillrect+0x1f0>
 8001500:	e76e      	b.n	80013e0 <st7565_fillrect+0xce>
 8001502:	e000      	b.n	8001506 <st7565_fillrect+0x1f4>
        return;
 8001504:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8001506:	46bd      	mov	sp, r7
 8001508:	b007      	add	sp, #28
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <st7565_drawline>:
			st7565_setpixel(buff, x0 - y, i, color);
		}
	}
}

void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b08b      	sub	sp, #44	@ 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	000c      	movs	r4, r1
 8001516:	0010      	movs	r0, r2
 8001518:	0019      	movs	r1, r3
 800151a:	1cfb      	adds	r3, r7, #3
 800151c:	1c22      	adds	r2, r4, #0
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	1c7b      	adds	r3, r7, #1
 8001528:	1c0a      	adds	r2, r1, #0
 800152a:	701a      	strb	r2, [r3, #0]
    if (x0 == x1) {
 800152c:	1cfa      	adds	r2, r7, #3
 800152e:	1c7b      	adds	r3, r7, #1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d000      	beq.n	800153a <st7565_drawline+0x2e>
 8001538:	e0c8      	b.n	80016cc <st7565_drawline+0x1c0>
        if (x0 >= LCDWIDTH)
 800153a:	1cfb      	adds	r3, r7, #3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	da00      	bge.n	8001546 <st7565_drawline+0x3a>
 8001544:	e1f0      	b.n	8001928 <st7565_drawline+0x41c>
            return;
        uint8_t y_start = y0 < y1 ? y0 : y1;
 8001546:	2313      	movs	r3, #19
 8001548:	18fa      	adds	r2, r7, r3
 800154a:	2338      	movs	r3, #56	@ 0x38
 800154c:	2108      	movs	r1, #8
 800154e:	185b      	adds	r3, r3, r1
 8001550:	19db      	adds	r3, r3, r7
 8001552:	1cb9      	adds	r1, r7, #2
 8001554:	780c      	ldrb	r4, [r1, #0]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2d8      	uxtb	r0, r3
 800155a:	b2e1      	uxtb	r1, r4
 800155c:	4288      	cmp	r0, r1
 800155e:	d900      	bls.n	8001562 <st7565_drawline+0x56>
 8001560:	1c23      	adds	r3, r4, #0
 8001562:	7013      	strb	r3, [r2, #0]
        uint8_t y_end = y0 > y1 ? y0 : y1;
 8001564:	2327      	movs	r3, #39	@ 0x27
 8001566:	18fa      	adds	r2, r7, r3
 8001568:	2338      	movs	r3, #56	@ 0x38
 800156a:	2108      	movs	r1, #8
 800156c:	185b      	adds	r3, r3, r1
 800156e:	19db      	adds	r3, r3, r7
 8001570:	1cb9      	adds	r1, r7, #2
 8001572:	780c      	ldrb	r4, [r1, #0]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2d8      	uxtb	r0, r3
 8001578:	b2e1      	uxtb	r1, r4
 800157a:	4288      	cmp	r0, r1
 800157c:	d200      	bcs.n	8001580 <st7565_drawline+0x74>
 800157e:	1c23      	adds	r3, r4, #0
 8001580:	7013      	strb	r3, [r2, #0]
        if (y_end >= LCDHEIGHT)
 8001582:	2227      	movs	r2, #39	@ 0x27
 8001584:	18bb      	adds	r3, r7, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b3f      	cmp	r3, #63	@ 0x3f
 800158a:	d902      	bls.n	8001592 <st7565_drawline+0x86>
            y_end = LCDHEIGHT - 1;
 800158c:	18bb      	adds	r3, r7, r2
 800158e:	223f      	movs	r2, #63	@ 0x3f
 8001590:	701a      	strb	r2, [r3, #0]
        uint8_t page_start = y_start / 8;
 8001592:	2012      	movs	r0, #18
 8001594:	183b      	adds	r3, r7, r0
 8001596:	2113      	movs	r1, #19
 8001598:	187a      	adds	r2, r7, r1
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	08d2      	lsrs	r2, r2, #3
 800159e:	701a      	strb	r2, [r3, #0]
        uint8_t page_end = y_end / 8;
 80015a0:	2311      	movs	r3, #17
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2427      	movs	r4, #39	@ 0x27
 80015a6:	193a      	adds	r2, r7, r4
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	08d2      	lsrs	r2, r2, #3
 80015ac:	701a      	strb	r2, [r3, #0]
        uint8_t bit_start = y_start % 8;
 80015ae:	2310      	movs	r3, #16
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	187a      	adds	r2, r7, r1
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	2107      	movs	r1, #7
 80015b8:	400a      	ands	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
        uint8_t bit_end = y_end % 8;
 80015bc:	230f      	movs	r3, #15
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	193a      	adds	r2, r7, r4
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	2107      	movs	r1, #7
 80015c6:	400a      	ands	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 80015ca:	2326      	movs	r3, #38	@ 0x26
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	183a      	adds	r2, r7, r0
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e071      	b.n	80016ba <st7565_drawline+0x1ae>
            uint8_t mask = 0xFF;
 80015d6:	2125      	movs	r1, #37	@ 0x25
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	22ff      	movs	r2, #255	@ 0xff
 80015dc:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 80015de:	2326      	movs	r3, #38	@ 0x26
 80015e0:	18fa      	adds	r2, r7, r3
 80015e2:	2312      	movs	r3, #18
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10d      	bne.n	800160a <st7565_drawline+0xfe>
                mask &= (0xFF >> bit_start);
 80015ee:	2310      	movs	r3, #16
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	411a      	asrs	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	187a      	adds	r2, r7, r1
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	b252      	sxtb	r2, r2
 8001602:	4013      	ands	r3, r2
 8001604:	b25a      	sxtb	r2, r3
 8001606:	187b      	adds	r3, r7, r1
 8001608:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 800160a:	2326      	movs	r3, #38	@ 0x26
 800160c:	18fa      	adds	r2, r7, r3
 800160e:	2311      	movs	r3, #17
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d110      	bne.n	800163c <st7565_drawline+0x130>
                mask &= (0xFF << (7 - bit_end));
 800161a:	230f      	movs	r3, #15
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2207      	movs	r2, #7
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	22ff      	movs	r2, #255	@ 0xff
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	b25b      	sxtb	r3, r3
 800162c:	2125      	movs	r1, #37	@ 0x25
 800162e:	187a      	adds	r2, r7, r1
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	b252      	sxtb	r2, r2
 8001634:	4013      	ands	r3, r2
 8001636:	b25a      	sxtb	r2, r3
 8001638:	187b      	adds	r3, r7, r1
 800163a:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = x0 + page * 128;
 800163c:	1cfb      	adds	r3, r7, #3
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b299      	uxth	r1, r3
 8001642:	2326      	movs	r3, #38	@ 0x26
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	01db      	lsls	r3, r3, #7
 800164c:	b29a      	uxth	r2, r3
 800164e:	200c      	movs	r0, #12
 8001650:	183b      	adds	r3, r7, r0
 8001652:	188a      	adds	r2, r1, r2
 8001654:	801a      	strh	r2, [r3, #0]
            if (color)
 8001656:	233c      	movs	r3, #60	@ 0x3c
 8001658:	2208      	movs	r2, #8
 800165a:	189b      	adds	r3, r3, r2
 800165c:	19db      	adds	r3, r3, r7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00f      	beq.n	8001684 <st7565_drawline+0x178>
                buff[idx] |= mask;
 8001664:	183b      	adds	r3, r7, r0
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	7819      	ldrb	r1, [r3, #0]
 800166e:	183b      	adds	r3, r7, r0
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	2225      	movs	r2, #37	@ 0x25
 8001678:	18ba      	adds	r2, r7, r2
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e014      	b.n	80016ae <st7565_drawline+0x1a2>
            else
                buff[idx] &= ~mask;
 8001684:	200c      	movs	r0, #12
 8001686:	183b      	adds	r3, r7, r0
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	18d3      	adds	r3, r2, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
 8001692:	2225      	movs	r2, #37	@ 0x25
 8001694:	18ba      	adds	r2, r7, r2
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	b252      	sxtb	r2, r2
 800169a:	43d2      	mvns	r2, r2
 800169c:	b252      	sxtb	r2, r2
 800169e:	4013      	ands	r3, r2
 80016a0:	b259      	sxtb	r1, r3
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 80016ae:	2126      	movs	r1, #38	@ 0x26
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	3201      	adds	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	2326      	movs	r3, #38	@ 0x26
 80016bc:	18fa      	adds	r2, r7, r3
 80016be:	2311      	movs	r3, #17
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d985      	bls.n	80015d6 <st7565_drawline+0xca>
 80016ca:	e130      	b.n	800192e <st7565_drawline+0x422>
        }
    } else if (y0 == y1) {
 80016cc:	1cba      	adds	r2, r7, #2
 80016ce:	2338      	movs	r3, #56	@ 0x38
 80016d0:	2108      	movs	r1, #8
 80016d2:	185b      	adds	r3, r3, r1
 80016d4:	19db      	adds	r3, r3, r7
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d000      	beq.n	80016e0 <st7565_drawline+0x1d4>
 80016de:	e126      	b.n	800192e <st7565_drawline+0x422>
        if (y0 >= LCDHEIGHT)
 80016e0:	1cbb      	adds	r3, r7, #2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016e6:	d900      	bls.n	80016ea <st7565_drawline+0x1de>
 80016e8:	e120      	b.n	800192c <st7565_drawline+0x420>
            return;
        uint8_t x_start = x0 < x1 ? x0 : x1;
 80016ea:	231d      	movs	r3, #29
 80016ec:	18fa      	adds	r2, r7, r3
 80016ee:	1c7b      	adds	r3, r7, #1
 80016f0:	1cf9      	adds	r1, r7, #3
 80016f2:	780c      	ldrb	r4, [r1, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	b2e1      	uxtb	r1, r4
 80016fa:	4288      	cmp	r0, r1
 80016fc:	d900      	bls.n	8001700 <st7565_drawline+0x1f4>
 80016fe:	1c23      	adds	r3, r4, #0
 8001700:	7013      	strb	r3, [r2, #0]
        uint8_t x_end = x0 > x1 ? x0 : x1;
 8001702:	2324      	movs	r3, #36	@ 0x24
 8001704:	18fa      	adds	r2, r7, r3
 8001706:	1c7b      	adds	r3, r7, #1
 8001708:	1cf9      	adds	r1, r7, #3
 800170a:	780c      	ldrb	r4, [r1, #0]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2d8      	uxtb	r0, r3
 8001710:	b2e1      	uxtb	r1, r4
 8001712:	4288      	cmp	r0, r1
 8001714:	d200      	bcs.n	8001718 <st7565_drawline+0x20c>
 8001716:	1c23      	adds	r3, r4, #0
 8001718:	7013      	strb	r3, [r2, #0]
        if (x_end >= LCDWIDTH)
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	18bb      	adds	r3, r7, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	da02      	bge.n	800172c <st7565_drawline+0x220>
            x_end = LCDWIDTH - 1;
 8001726:	18bb      	adds	r3, r7, r2
 8001728:	227f      	movs	r2, #127	@ 0x7f
 800172a:	701a      	strb	r2, [r3, #0]
        uint8_t page = y0 / 8;
 800172c:	201c      	movs	r0, #28
 800172e:	183b      	adds	r3, r7, r0
 8001730:	1cba      	adds	r2, r7, #2
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	08d2      	lsrs	r2, r2, #3
 8001736:	701a      	strb	r2, [r3, #0]
        uint8_t bit = 7 - (y0 % 8);
 8001738:	1cbb      	adds	r3, r7, #2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	43db      	mvns	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	241b      	movs	r4, #27
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2107      	movs	r1, #7
 8001746:	400a      	ands	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
        uint8_t mask = 1 << bit;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	409a      	lsls	r2, r3
 8001752:	231a      	movs	r3, #26
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	701a      	strb	r2, [r3, #0]
        uint16_t idx = x_start + page * 128;
 8001758:	231d      	movs	r3, #29
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b299      	uxth	r1, r3
 8001760:	183b      	adds	r3, r7, r0
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	b29a      	uxth	r2, r3
 800176a:	2018      	movs	r0, #24
 800176c:	183b      	adds	r3, r7, r0
 800176e:	188a      	adds	r2, r1, r2
 8001770:	801a      	strh	r2, [r3, #0]
        // 32-bit write optimization
        uint32_t *p32 = (uint32_t *)&buff[idx];
 8001772:	183b      	adds	r3, r7, r0
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	623b      	str	r3, [r7, #32]
        uint32_t val = color ? 0xFFFFFFFF : 0x00000000;
 800177c:	233c      	movs	r3, #60	@ 0x3c
 800177e:	2208      	movs	r2, #8
 8001780:	189b      	adds	r3, r3, r2
 8001782:	19db      	adds	r3, r3, r7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <st7565_drawline+0x284>
 800178a:	2301      	movs	r3, #1
 800178c:	425b      	negs	r3, r3
 800178e:	e000      	b.n	8001792 <st7565_drawline+0x286>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
        uint8_t rem = (x_end - x_start + 1);
 8001794:	2324      	movs	r3, #36	@ 0x24
 8001796:	18fa      	adds	r2, r7, r3
 8001798:	231d      	movs	r3, #29
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	231f      	movs	r3, #31
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	3201      	adds	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 80017ac:	e030      	b.n	8001810 <st7565_drawline+0x304>
            if (color) *p32 |= (val & (mask * 0x01010101));
 80017ae:	233c      	movs	r3, #60	@ 0x3c
 80017b0:	2208      	movs	r2, #8
 80017b2:	189b      	adds	r3, r3, r2
 80017b4:	19db      	adds	r3, r3, r7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d011      	beq.n	80017e0 <st7565_drawline+0x2d4>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	231a      	movs	r3, #26
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	0013      	movs	r3, r2
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	189b      	adds	r3, r3, r2
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	001a      	movs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	431a      	orrs	r2, r3
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e00e      	b.n	80017fe <st7565_drawline+0x2f2>
            else *p32 &= ~(mask * 0x01010101);
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	231a      	movs	r3, #26
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	0013      	movs	r3, r2
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	189b      	adds	r3, r3, r2
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	189b      	adds	r3, r3, r2
 80017f4:	43db      	mvns	r3, r3
 80017f6:	400b      	ands	r3, r1
 80017f8:	001a      	movs	r2, r3
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	601a      	str	r2, [r3, #0]
            p32++;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	3304      	adds	r3, #4
 8001802:	623b      	str	r3, [r7, #32]
            rem -= 4;
 8001804:	221f      	movs	r2, #31
 8001806:	18bb      	adds	r3, r7, r2
 8001808:	18ba      	adds	r2, r7, r2
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	3a04      	subs	r2, #4
 800180e:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 8001810:	231f      	movs	r3, #31
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d903      	bls.n	8001822 <st7565_drawline+0x316>
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	2203      	movs	r2, #3
 800181e:	4013      	ands	r3, r2
 8001820:	d0c5      	beq.n	80017ae <st7565_drawline+0x2a2>
        }
        idx = (uint8_t *)p32 - &buff[x_start + page * 128];
 8001822:	231d      	movs	r3, #29
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	231c      	movs	r3, #28
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	01db      	lsls	r3, r3, #7
 8001830:	18d3      	adds	r3, r2, r3
 8001832:	001a      	movs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	189b      	adds	r3, r3, r2
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	2318      	movs	r3, #24
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 8001842:	231e      	movs	r3, #30
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e064      	b.n	8001916 <st7565_drawline+0x40a>
            if (color) buff[x_start + page * 128 + idx + i] |= mask;
 800184c:	233c      	movs	r3, #60	@ 0x3c
 800184e:	2208      	movs	r2, #8
 8001850:	189b      	adds	r3, r3, r2
 8001852:	19db      	adds	r3, r3, r7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d029      	beq.n	80018ae <st7565_drawline+0x3a2>
 800185a:	201d      	movs	r0, #29
 800185c:	183b      	adds	r3, r7, r0
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	241c      	movs	r4, #28
 8001862:	193b      	adds	r3, r7, r4
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	18d2      	adds	r2, r2, r3
 800186a:	2518      	movs	r5, #24
 800186c:	197b      	adds	r3, r7, r5
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	18d2      	adds	r2, r2, r3
 8001872:	261e      	movs	r6, #30
 8001874:	19bb      	adds	r3, r7, r6
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	001a      	movs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	189b      	adds	r3, r3, r2
 8001880:	7819      	ldrb	r1, [r3, #0]
 8001882:	183b      	adds	r3, r7, r0
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	193b      	adds	r3, r7, r4
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	01db      	lsls	r3, r3, #7
 800188c:	18d2      	adds	r2, r2, r3
 800188e:	197b      	adds	r3, r7, r5
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	18d2      	adds	r2, r2, r3
 8001894:	19bb      	adds	r3, r7, r6
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	001a      	movs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	189b      	adds	r3, r3, r2
 80018a0:	221a      	movs	r2, #26
 80018a2:	18ba      	adds	r2, r7, r2
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e02d      	b.n	800190a <st7565_drawline+0x3fe>
            else buff[x_start + page * 128 + idx + i] &= ~mask;
 80018ae:	201d      	movs	r0, #29
 80018b0:	183b      	adds	r3, r7, r0
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	241c      	movs	r4, #28
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	2518      	movs	r5, #24
 80018c0:	197b      	adds	r3, r7, r5
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	18d2      	adds	r2, r2, r3
 80018c6:	261e      	movs	r6, #30
 80018c8:	19bb      	adds	r3, r7, r6
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	001a      	movs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	189b      	adds	r3, r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	221a      	movs	r2, #26
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	b252      	sxtb	r2, r2
 80018e0:	43d2      	mvns	r2, r2
 80018e2:	b252      	sxtb	r2, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	b259      	sxtb	r1, r3
 80018e8:	183b      	adds	r3, r7, r0
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	18d2      	adds	r2, r2, r3
 80018f4:	197b      	adds	r3, r7, r5
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	18d2      	adds	r2, r2, r3
 80018fa:	19bb      	adds	r3, r7, r6
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	18d3      	adds	r3, r2, r3
 8001900:	001a      	movs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	189b      	adds	r3, r3, r2
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 800190a:	211e      	movs	r1, #30
 800190c:	187b      	adds	r3, r7, r1
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	187b      	adds	r3, r7, r1
 8001912:	3201      	adds	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	231e      	movs	r3, #30
 8001918:	18fa      	adds	r2, r7, r3
 800191a:	231f      	movs	r3, #31
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d392      	bcc.n	800184c <st7565_drawline+0x340>
 8001926:	e002      	b.n	800192e <st7565_drawline+0x422>
            return;
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	e000      	b.n	800192e <st7565_drawline+0x422>
            return;
 800192c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800192e:	46bd      	mov	sp, r7
 8001930:	b00b      	add	sp, #44	@ 0x2c
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001934 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	0002      	movs	r2, r0
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 8001940:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <interpolation+0x108>)
 8001942:	2200      	movs	r2, #0
 8001944:	5e9b      	ldrsh	r3, [r3, r2]
 8001946:	1dba      	adds	r2, r7, #6
 8001948:	2100      	movs	r1, #0
 800194a:	5e52      	ldrsh	r2, [r2, r1]
 800194c:	429a      	cmp	r2, r3
 800194e:	dc11      	bgt.n	8001974 <interpolation+0x40>
 8001950:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <interpolation+0x108>)
 8001952:	2202      	movs	r2, #2
 8001954:	5e9b      	ldrsh	r3, [r3, r2]
 8001956:	001a      	movs	r2, r3
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	2100      	movs	r1, #0
 800195c:	5e5b      	ldrsh	r3, [r3, r1]
 800195e:	435a      	muls	r2, r3
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <interpolation+0x108>)
 8001962:	2100      	movs	r1, #0
 8001964:	5e5b      	ldrsh	r3, [r3, r1]
 8001966:	0019      	movs	r1, r3
 8001968:	0010      	movs	r0, r2
 800196a:	f7fe fc55 	bl	8000218 <__divsi3>
 800196e:	0003      	movs	r3, r0
 8001970:	b21b      	sxth	r3, r3
 8001972:	e05e      	b.n	8001a32 <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <interpolation+0x108>)
 8001976:	2208      	movs	r2, #8
 8001978:	5e9b      	ldrsh	r3, [r3, r2]
 800197a:	1dba      	adds	r2, r7, #6
 800197c:	2100      	movs	r1, #0
 800197e:	5e52      	ldrsh	r2, [r2, r1]
 8001980:	429a      	cmp	r2, r3
 8001982:	db03      	blt.n	800198c <interpolation+0x58>
 8001984:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <interpolation+0x108>)
 8001986:	220a      	movs	r2, #10
 8001988:	5e9b      	ldrsh	r3, [r3, r2]
 800198a:	e052      	b.n	8001a32 <interpolation+0xfe>
    if (input <= pts[1].x) {
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <interpolation+0x108>)
 800198e:	2204      	movs	r2, #4
 8001990:	5e9b      	ldrsh	r3, [r3, r2]
 8001992:	1dba      	adds	r2, r7, #6
 8001994:	2100      	movs	r1, #0
 8001996:	5e52      	ldrsh	r2, [r2, r1]
 8001998:	429a      	cmp	r2, r3
 800199a:	dc25      	bgt.n	80019e8 <interpolation+0xb4>
        return pts[0].y +
 800199c:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <interpolation+0x108>)
 800199e:	2202      	movs	r2, #2
 80019a0:	5e9b      	ldrsh	r3, [r3, r2]
 80019a2:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <interpolation+0x108>)
 80019a6:	2206      	movs	r2, #6
 80019a8:	5e9b      	ldrsh	r3, [r3, r2]
 80019aa:	001a      	movs	r2, r3
 80019ac:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <interpolation+0x108>)
 80019ae:	2102      	movs	r1, #2
 80019b0:	5e5b      	ldrsh	r3, [r3, r1]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	1dba      	adds	r2, r7, #6
 80019b6:	2100      	movs	r1, #0
 80019b8:	5e52      	ldrsh	r2, [r2, r1]
 80019ba:	4920      	ldr	r1, [pc, #128]	@ (8001a3c <interpolation+0x108>)
 80019bc:	2000      	movs	r0, #0
 80019be:	5e09      	ldrsh	r1, [r1, r0]
 80019c0:	1a52      	subs	r2, r2, r1
 80019c2:	435a      	muls	r2, r3
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <interpolation+0x108>)
 80019c6:	2104      	movs	r1, #4
 80019c8:	5e5b      	ldrsh	r3, [r3, r1]
 80019ca:	0019      	movs	r1, r3
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <interpolation+0x108>)
 80019ce:	2000      	movs	r0, #0
 80019d0:	5e1b      	ldrsh	r3, [r3, r0]
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	0019      	movs	r1, r3
 80019d6:	0010      	movs	r0, r2
 80019d8:	f7fe fc1e 	bl	8000218 <__divsi3>
 80019dc:	0003      	movs	r3, r0
        return pts[0].y +
 80019de:	b29b      	uxth	r3, r3
 80019e0:	18e3      	adds	r3, r4, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	e024      	b.n	8001a32 <interpolation+0xfe>
    } else {

        return pts[1].y +
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <interpolation+0x108>)
 80019ea:	2206      	movs	r2, #6
 80019ec:	5e9b      	ldrsh	r3, [r3, r2]
 80019ee:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <interpolation+0x108>)
 80019f2:	220a      	movs	r2, #10
 80019f4:	5e9b      	ldrsh	r3, [r3, r2]
 80019f6:	001a      	movs	r2, r3
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <interpolation+0x108>)
 80019fa:	2106      	movs	r1, #6
 80019fc:	5e5b      	ldrsh	r3, [r3, r1]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	1dba      	adds	r2, r7, #6
 8001a02:	2100      	movs	r1, #0
 8001a04:	5e52      	ldrsh	r2, [r2, r1]
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <interpolation+0x108>)
 8001a08:	2004      	movs	r0, #4
 8001a0a:	5e09      	ldrsh	r1, [r1, r0]
 8001a0c:	1a52      	subs	r2, r2, r1
 8001a0e:	435a      	muls	r2, r3
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <interpolation+0x108>)
 8001a12:	2108      	movs	r1, #8
 8001a14:	5e5b      	ldrsh	r3, [r3, r1]
 8001a16:	0019      	movs	r1, r3
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <interpolation+0x108>)
 8001a1a:	2004      	movs	r0, #4
 8001a1c:	5e1b      	ldrsh	r3, [r3, r0]
 8001a1e:	1acb      	subs	r3, r1, r3
 8001a20:	0019      	movs	r1, r3
 8001a22:	0010      	movs	r0, r2
 8001a24:	f7fe fbf8 	bl	8000218 <__divsi3>
 8001a28:	0003      	movs	r3, r0
        return pts[1].y +
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	18e3      	adds	r3, r4, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21b      	sxth	r3, r3
    }
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b003      	add	sp, #12
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	080061ec 	.word	0x080061ec

08001a40 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[4];

static uint16_t filterButton(uint16_t voltIn){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0002      	movs	r2, r0
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	1dba      	adds	r2, r7, #6
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<3;i++){
 8001a56:	230d      	movs	r3, #13
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e01c      	b.n	8001a9a <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 8001a60:	200d      	movs	r0, #13
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <filterButton+0x84>)
 8001a6a:	0052      	lsls	r2, r2, #1
 8001a6c:	5ad1      	ldrh	r1, [r2, r3]
 8001a6e:	220e      	movs	r2, #14
 8001a70:	18bb      	adds	r3, r7, r2
 8001a72:	18ba      	adds	r2, r7, r2
 8001a74:	8812      	ldrh	r2, [r2, #0]
 8001a76:	188a      	adds	r2, r1, r2
 8001a78:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <filterButton+0x84>)
 8001a86:	0049      	lsls	r1, r1, #1
 8001a88:	5ac9      	ldrh	r1, [r1, r3]
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <filterButton+0x84>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<3;i++){
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	3201      	adds	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	230d      	movs	r3, #13
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d9dd      	bls.n	8001a60 <filterButton+0x20>
	}
	MAVectorButton[3]=voltIn;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <filterButton+0x84>)
 8001aa6:	1dba      	adds	r2, r7, #6
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	80da      	strh	r2, [r3, #6]
	media/=4;
 8001aac:	210e      	movs	r1, #14
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	187a      	adds	r2, r7, r1
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	0892      	lsrs	r2, r2, #2
 8001ab6:	801a      	strh	r2, [r3, #0]

	//if(media>)
	return media;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	881b      	ldrh	r3, [r3, #0]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200007f4 	.word	0x200007f4

08001ac8 <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	1dbb      	adds	r3, r7, #6
 8001ad2:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001ad4:	230e      	movs	r3, #14
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	1dba      	adds	r2, r7, #6
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 8001ade:	230d      	movs	r3, #13
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e01c      	b.n	8001b22 <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 8001ae8:	200d      	movs	r0, #13
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <filterVolt+0x8c>)
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	5ad1      	ldrh	r1, [r2, r3]
 8001af6:	220e      	movs	r2, #14
 8001af8:	18bb      	adds	r3, r7, r2
 8001afa:	18ba      	adds	r2, r7, r2
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	188a      	adds	r2, r1, r2
 8001b00:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	1c59      	adds	r1, r3, #1
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <filterVolt+0x8c>)
 8001b0e:	0049      	lsls	r1, r1, #1
 8001b10:	5ac9      	ldrh	r1, [r1, r3]
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <filterVolt+0x8c>)
 8001b14:	0052      	lsls	r2, r2, #1
 8001b16:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	3201      	adds	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	230d      	movs	r3, #13
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d9dd      	bls.n	8001ae8 <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <filterVolt+0x8c>)
 8001b2e:	1dba      	adds	r2, r7, #6
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001b34:	250e      	movs	r5, #14
 8001b36:	197c      	adds	r4, r7, r5
 8001b38:	197b      	adds	r3, r7, r5
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	210a      	movs	r1, #10
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7fe fae0 	bl	8000104 <__udivsi3>
 8001b44:	0003      	movs	r3, r0
 8001b46:	8023      	strh	r3, [r4, #0]
	return media;
 8001b48:	197b      	adds	r3, r7, r5
 8001b4a:	881b      	ldrh	r3, [r3, #0]
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	200007fc 	.word	0x200007fc

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b08c      	sub	sp, #48	@ 0x30
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f001 f837 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f843 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f7fe fd77 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b6a:	f7fe fd57 	bl	800061c <MX_DMA_Init>
  MX_ADC_Init();
 8001b6e:	f7fe fc69 	bl	8000444 <MX_ADC_Init>
  MX_SPI1_Init();
 8001b72:	f7fe fe35 	bl	80007e0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b76:	f7fe ff0d 	bl	8000994 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b7a:	f7fe ff5f 	bl	8000a3c <MX_TIM3_Init>
  
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <main+0x78>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f003 fa77 	bl	8005074 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <main+0x7c>)
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f003 fa73 	bl	8005074 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	005a      	lsls	r2, r3, #1
 8001b92:	4911      	ldr	r1, [pc, #68]	@ (8001bd8 <main+0x80>)
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <main+0x84>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f001 f9e2 	bl	8002f60 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  uint8_t nrTasks=3; //Numar taskuri
 8001b9c:	252f      	movs	r5, #47	@ 0x2f
 8001b9e:	197b      	adds	r3, r7, r5
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	701a      	strb	r2, [r3, #0]
  SimpleTask tasks[] = {
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <main+0x88>)
 8001ba8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001baa:	c313      	stmia	r3!, {r0, r1, r4}
 8001bac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bae:	c313      	stmia	r3!, {r0, r1, r4}
 8001bb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bb2:	c313      	stmia	r3!, {r0, r1, r4}
    {"readAdcVoltFunction", readAdcVoltFunction, 100},
	{"displayVoltReadFunction", displayVoltReadFunction, 1570},
    {"readButtonFunction",readButtonFunction,100}
  };//timpul total pana vom intra din nou intr-o functie, ex readAdcVoltFunction, e suma tuturor us a tuturor taskurilor.

  uint32_t initTaskMaxTime=1570*1000; //timp alocat task-ului de init OS(dupa initializarea OS-ului in sine). In us.
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <main+0x8c>)
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  OS_Init(tasks, nrTasks, init_task,initTaskMaxTime);
 8001bb8:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <main+0x90>)
 8001bbc:	197b      	adds	r3, r7, r5
 8001bbe:	7819      	ldrb	r1, [r3, #0]
 8001bc0:	1d38      	adds	r0, r7, #4
 8001bc2:	0023      	movs	r3, r4
 8001bc4:	f000 ff4c 	bl	8002a60 <OS_Init>
  OS_Run();
 8001bc8:	f000 ff6e 	bl	8002aa8 <OS_Run>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	e7fd      	b.n	8001bcc <main+0x74>
 8001bd0:	20000520 	.word	0x20000520
 8001bd4:	20000568 	.word	0x20000568
 8001bd8:	200005f4 	.word	0x200005f4
 8001bdc:	20000438 	.word	0x20000438
 8001be0:	08005720 	.word	0x08005720
 8001be4:	0017f4d0 	.word	0x0017f4d0
 8001be8:	08001cbd 	.word	0x08001cbd

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b099      	sub	sp, #100	@ 0x64
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	242c      	movs	r4, #44	@ 0x2c
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	2334      	movs	r3, #52	@ 0x34
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f003 fd2d 	bl	800565c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c02:	231c      	movs	r3, #28
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	0018      	movs	r0, r3
 8001c08:	2310      	movs	r3, #16
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f003 fd25 	bl	800565c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c12:	003b      	movs	r3, r7
 8001c14:	0018      	movs	r0, r3
 8001c16:	231c      	movs	r3, #28
 8001c18:	001a      	movs	r2, r3
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f003 fd1e 	bl	800565c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c20:	0021      	movs	r1, r4
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2212      	movs	r2, #18
 8001c26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2201      	movs	r2, #1
 8001c32:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2210      	movs	r2, #16
 8001c38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2202      	movs	r2, #2
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	0212      	lsls	r2, r2, #8
 8001c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	22a0      	movs	r2, #160	@ 0xa0
 8001c52:	0392      	lsls	r2, r2, #14
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2201      	movs	r2, #1
 8001c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f002 f858 	bl	8003d14 <HAL_RCC_OscConfig>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c68:	f000 fef4 	bl	8002a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	211c      	movs	r1, #28
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2202      	movs	r2, #2
 8001c78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2101      	movs	r1, #1
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f002 fbc8 	bl	8004420 <HAL_RCC_ClockConfig>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001c94:	f000 fede 	bl	8002a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c98:	003b      	movs	r3, r7
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c9e:	003b      	movs	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca4:	003b      	movs	r3, r7
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f002 fd06 	bl	80046b8 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001cb0:	f000 fed0 	bl	8002a54 <Error_Handler>
  }
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b019      	add	sp, #100	@ 0x64
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <init_task>:

/* USER CODE BEGIN 4 */
// Facem OS custom aici, avem un init task dupa care vin celalalte.
void init_task(void) {
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af02      	add	r7, sp, #8
    test = 42;
 8001cc2:	4bb0      	ldr	r3, [pc, #704]	@ (8001f84 <init_task+0x2c8>)
 8001cc4:	222a      	movs	r2, #42	@ 0x2a
 8001cc6:	701a      	strb	r2, [r3, #0]
    st7565_init();
 8001cc8:	f7fe ffb4 	bl	8000c34 <st7565_init>
      			  st7565_backlight_enable();
 8001ccc:	f7ff f860 	bl	8000d90 <st7565_backlight_enable>
      			  st7565_clear_screen();
 8001cd0:	f7ff f890 	bl	8000df4 <st7565_clear_screen>
      			st7565_set_brightness(0);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff f869 	bl	8000dac <st7565_set_brightness>
      			//osDelay(1000);

      			//st7565_fade_in(10);


      			  st7565_clear_buffer(buffer);
 8001cda:	4bab      	ldr	r3, [pc, #684]	@ (8001f88 <init_task+0x2cc>)
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff f8e5 	bl	8000eac <st7565_clear_buffer>

      			    			  //Animatie jmekera de startup

      			  uint8_t spacingx=126/10; //Cat de distantate sunt liniile in animatie x
 8001ce2:	230b      	movs	r3, #11
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	701a      	strb	r2, [r3, #0]
      			  uint8_t spacingy=63/6;
 8001cea:	230a      	movs	r3, #10
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	220a      	movs	r2, #10
 8001cf0:	701a      	strb	r2, [r3, #0]
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001cf2:	231e      	movs	r3, #30
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
 8001cfa:	e0ab      	b.n	8001e54 <init_task+0x198>
      				  //spacing=5+i/10;
      				  if(i%4==0)st7565_set_brightness(i/4);
 8001cfc:	211e      	movs	r1, #30
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <init_task+0x60>
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff f848 	bl	8000dac <st7565_set_brightness>
      				  uint16_t j=i/2;
 8001d1c:	1dbb      	adds	r3, r7, #6
 8001d1e:	221e      	movs	r2, #30
 8001d20:	18ba      	adds	r2, r7, r2
 8001d22:	8812      	ldrh	r2, [r2, #0]
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	801a      	strh	r2, [r3, #0]
      				  st7565_clear_buffer(buffer);
 8001d28:	4b97      	ldr	r3, [pc, #604]	@ (8001f88 <init_task+0x2cc>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff f8be 	bl	8000eac <st7565_clear_buffer>
      				  //Linie de la i,j la marginea dreapta
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001d30:	231c      	movs	r3, #28
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e017      	b.n	8001d6a <init_task+0xae>
      					st7565_drawline_complex(buffer,i,j,126,j2,1);
 8001d3a:	231e      	movs	r3, #30
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	8819      	ldrh	r1, [r3, #0]
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	251c      	movs	r5, #28
 8001d46:	197b      	adds	r3, r7, r5
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	488f      	ldr	r0, [pc, #572]	@ (8001f88 <init_task+0x2cc>)
 8001d4c:	2401      	movs	r4, #1
 8001d4e:	9401      	str	r4, [sp, #4]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	237e      	movs	r3, #126	@ 0x7e
 8001d54:	f7ff f9d2 	bl	80010fc <st7565_drawline_complex>
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001d58:	230a      	movs	r3, #10
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	197b      	adds	r3, r7, r5
 8001d62:	197a      	adds	r2, r7, r5
 8001d64:	8812      	ldrh	r2, [r2, #0]
 8001d66:	188a      	adds	r2, r1, r2
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	231c      	movs	r3, #28
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d72:	d9e2      	bls.n	8001d3a <init_task+0x7e>
      				  }
      				//Linie de la i,j la marginea stanga
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001d74:	231a      	movs	r3, #26
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e017      	b.n	8001dae <init_task+0xf2>
      				  					st7565_drawline_complex(buffer,i,j,0,j2,1);
 8001d7e:	231e      	movs	r3, #30
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	8819      	ldrh	r1, [r3, #0]
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	251a      	movs	r5, #26
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	487e      	ldr	r0, [pc, #504]	@ (8001f88 <init_task+0x2cc>)
 8001d90:	2401      	movs	r4, #1
 8001d92:	9401      	str	r4, [sp, #4]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	f7ff f9b0 	bl	80010fc <st7565_drawline_complex>
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b299      	uxth	r1, r3
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	197a      	adds	r2, r7, r5
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	188a      	adds	r2, r1, r2
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	231a      	movs	r3, #26
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db6:	d9e2      	bls.n	8001d7e <init_task+0xc2>
      				  				  }

      				  //Linie de la i,j la margine jos
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001db8:	2318      	movs	r3, #24
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	e017      	b.n	8001df2 <init_task+0x136>
      				  		st7565_drawline_complex(buffer,i,j,i2,63,1);
 8001dc2:	231e      	movs	r3, #30
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	8819      	ldrh	r1, [r3, #0]
 8001dc8:	1dbb      	adds	r3, r7, #6
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	2518      	movs	r5, #24
 8001dce:	197b      	adds	r3, r7, r5
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	486d      	ldr	r0, [pc, #436]	@ (8001f88 <init_task+0x2cc>)
 8001dd4:	2401      	movs	r4, #1
 8001dd6:	9401      	str	r4, [sp, #4]
 8001dd8:	243f      	movs	r4, #63	@ 0x3f
 8001dda:	9400      	str	r4, [sp, #0]
 8001ddc:	f7ff f98e 	bl	80010fc <st7565_drawline_complex>
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001de0:	230b      	movs	r3, #11
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b299      	uxth	r1, r3
 8001de8:	197b      	adds	r3, r7, r5
 8001dea:	197a      	adds	r2, r7, r5
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	188a      	adds	r2, r1, r2
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	2318      	movs	r3, #24
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001dfa:	d9e2      	bls.n	8001dc2 <init_task+0x106>
      				  				  }
      				//Linie de la i,j la margine sus
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001dfc:	2316      	movs	r3, #22
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e017      	b.n	8001e36 <init_task+0x17a>
      				  				  		st7565_drawline_complex(buffer,i,j,i2,0,1);
 8001e06:	231e      	movs	r3, #30
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	8819      	ldrh	r1, [r3, #0]
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	2516      	movs	r5, #22
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	485c      	ldr	r0, [pc, #368]	@ (8001f88 <init_task+0x2cc>)
 8001e18:	2401      	movs	r4, #1
 8001e1a:	9401      	str	r4, [sp, #4]
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	9400      	str	r4, [sp, #0]
 8001e20:	f7ff f96c 	bl	80010fc <st7565_drawline_complex>
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001e24:	230b      	movs	r3, #11
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	197b      	adds	r3, r7, r5
 8001e2e:	197a      	adds	r2, r7, r5
 8001e30:	8812      	ldrh	r2, [r2, #0]
 8001e32:	188a      	adds	r2, r1, r2
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	2316      	movs	r3, #22
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e3e:	d9e2      	bls.n	8001e06 <init_task+0x14a>
      				  				  }

      				//deseneaza frame
      				st7565_write_buffer(buffer);
 8001e40:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <init_task+0x2cc>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7fe fe88 	bl	8000b58 <st7565_write_buffer>
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001e48:	221e      	movs	r2, #30
 8001e4a:	18bb      	adds	r3, r7, r2
 8001e4c:	18ba      	adds	r2, r7, r2
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	3202      	adds	r2, #2
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	231e      	movs	r3, #30
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e5c:	d800      	bhi.n	8001e60 <init_task+0x1a4>
 8001e5e:	e74d      	b.n	8001cfc <init_task+0x40>
    				//HAL_Delay(50);

      				//osDelay(2);

      			  }
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001e60:	2314      	movs	r3, #20
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e0b8      	b.n	8001fdc <init_task+0x320>
      				//spacing=11-(i-64)/10;
      				if(i%4==0)st7565_set_brightness((126-i)/4);
 8001e6a:	2114      	movs	r1, #20
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <init_task+0x1d4>
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	227e      	movs	r2, #126	@ 0x7e
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	d500      	bpl.n	8001e86 <init_task+0x1ca>
 8001e84:	3303      	adds	r3, #3
 8001e86:	109b      	asrs	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7fe ff8e 	bl	8000dac <st7565_set_brightness>
      			  				  uint16_t j=i/2;
 8001e90:	2308      	movs	r3, #8
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2214      	movs	r2, #20
 8001e96:	18ba      	adds	r2, r7, r2
 8001e98:	8812      	ldrh	r2, [r2, #0]
 8001e9a:	0852      	lsrs	r2, r2, #1
 8001e9c:	801a      	strh	r2, [r3, #0]
      			  				  st7565_clear_buffer(buffer);
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <init_task+0x2cc>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff f803 	bl	8000eac <st7565_clear_buffer>
      			  				//Linie de la i,j la marginea dreapta
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	e018      	b.n	8001ee2 <init_task+0x226>
      			  				  					st7565_drawline_complex(buffer,i,j,126,j2,1);
 8001eb0:	2314      	movs	r3, #20
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	8819      	ldrh	r1, [r3, #0]
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	2512      	movs	r5, #18
 8001ebe:	197b      	adds	r3, r7, r5
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4831      	ldr	r0, [pc, #196]	@ (8001f88 <init_task+0x2cc>)
 8001ec4:	2401      	movs	r4, #1
 8001ec6:	9401      	str	r4, [sp, #4]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	237e      	movs	r3, #126	@ 0x7e
 8001ecc:	f7ff f916 	bl	80010fc <st7565_drawline_complex>
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	197b      	adds	r3, r7, r5
 8001eda:	197a      	adds	r2, r7, r5
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	188a      	adds	r2, r1, r2
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eea:	d9e1      	bls.n	8001eb0 <init_task+0x1f4>
      			  				  				  }
      			  				  				//Linie de la i,j la marginea stanga
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001eec:	2310      	movs	r3, #16
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	e018      	b.n	8001f28 <init_task+0x26c>
      			  				  				  					st7565_drawline_complex(buffer,i,j,0,j2,1);
 8001ef6:	2314      	movs	r3, #20
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	8819      	ldrh	r1, [r3, #0]
 8001efc:	2308      	movs	r3, #8
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	2510      	movs	r5, #16
 8001f04:	197b      	adds	r3, r7, r5
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	481f      	ldr	r0, [pc, #124]	@ (8001f88 <init_task+0x2cc>)
 8001f0a:	2401      	movs	r4, #1
 8001f0c:	9401      	str	r4, [sp, #4]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2300      	movs	r3, #0
 8001f12:	f7ff f8f3 	bl	80010fc <st7565_drawline_complex>
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001f16:	230a      	movs	r3, #10
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	197b      	adds	r3, r7, r5
 8001f20:	197a      	adds	r2, r7, r5
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	188a      	adds	r2, r1, r2
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	2310      	movs	r3, #16
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f30:	d9e1      	bls.n	8001ef6 <init_task+0x23a>
      			  				  				  				  }

      			  				  				  //Linie de la i,j la margine jos
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001f32:	230e      	movs	r3, #14
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	2200      	movs	r2, #0
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	e018      	b.n	8001f6e <init_task+0x2b2>
      			  				  				  		st7565_drawline_complex(buffer,i,j,i2,63,1);
 8001f3c:	2314      	movs	r3, #20
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	8819      	ldrh	r1, [r3, #0]
 8001f42:	2308      	movs	r3, #8
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	250e      	movs	r5, #14
 8001f4a:	197b      	adds	r3, r7, r5
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	480e      	ldr	r0, [pc, #56]	@ (8001f88 <init_task+0x2cc>)
 8001f50:	2401      	movs	r4, #1
 8001f52:	9401      	str	r4, [sp, #4]
 8001f54:	243f      	movs	r4, #63	@ 0x3f
 8001f56:	9400      	str	r4, [sp, #0]
 8001f58:	f7ff f8d0 	bl	80010fc <st7565_drawline_complex>
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001f5c:	230b      	movs	r3, #11
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b299      	uxth	r1, r3
 8001f64:	197b      	adds	r3, r7, r5
 8001f66:	197a      	adds	r2, r7, r5
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	188a      	adds	r2, r1, r2
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	230e      	movs	r3, #14
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f76:	d9e1      	bls.n	8001f3c <init_task+0x280>
      			  				  				  }
      			  				  				//Linie de la i,j la margine sus
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001f78:	230c      	movs	r3, #12
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e01d      	b.n	8001fbe <init_task+0x302>
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	20000810 	.word	0x20000810
 8001f88:	2000000c 	.word	0x2000000c
      			  				  				  				  		st7565_drawline_complex(buffer,i,j,i2,0,1);
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	8819      	ldrh	r1, [r3, #0]
 8001f92:	2308      	movs	r3, #8
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	250c      	movs	r5, #12
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4816      	ldr	r0, [pc, #88]	@ (8001ff8 <init_task+0x33c>)
 8001fa0:	2401      	movs	r4, #1
 8001fa2:	9401      	str	r4, [sp, #4]
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	9400      	str	r4, [sp, #0]
 8001fa8:	f7ff f8a8 	bl	80010fc <st7565_drawline_complex>
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001fac:	230b      	movs	r3, #11
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	197b      	adds	r3, r7, r5
 8001fb6:	197a      	adds	r2, r7, r5
 8001fb8:	8812      	ldrh	r2, [r2, #0]
 8001fba:	188a      	adds	r2, r1, r2
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fc6:	d9e1      	bls.n	8001f8c <init_task+0x2d0>
      			  				  				  				  }

      			  				//deseneaza frame
      			  				st7565_write_buffer(buffer);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <init_task+0x33c>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe fdc4 	bl	8000b58 <st7565_write_buffer>
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001fd0:	2214      	movs	r2, #20
 8001fd2:	18bb      	adds	r3, r7, r2
 8001fd4:	18ba      	adds	r2, r7, r2
 8001fd6:	8812      	ldrh	r2, [r2, #0]
 8001fd8:	3202      	adds	r2, #2
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	2314      	movs	r3, #20
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fe4:	d800      	bhi.n	8001fe8 <init_task+0x32c>
 8001fe6:	e740      	b.n	8001e6a <init_task+0x1ae>


      			  //HAL_ReadPin
      			  //Trimitem comanda sa desenam

      			st7565_set_brightness(0);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7fe fedf 	bl	8000dac <st7565_set_brightness>


    
}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b008      	add	sp, #32
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
	      else voltReadRaw=0;

	      HAL_ADC_Stop(&hadc);*/

			voltReadRaw=adc_buffer[255];
 8002000:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <readAdcVoltFunction+0x38>)
 8002002:	23ff      	movs	r3, #255	@ 0xff
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	5ad3      	ldrh	r3, [r2, r3]
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <readAdcVoltFunction+0x3c>)
 800200c:	801a      	strh	r2, [r3, #0]
	      voltRead = filterVolt(interpolation(voltReadRaw));
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <readAdcVoltFunction+0x3c>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b21b      	sxth	r3, r3
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fc8d 	bl	8001934 <interpolation>
 800201a:	0003      	movs	r3, r0
 800201c:	b29b      	uxth	r3, r3
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fd52 	bl	8001ac8 <filterVolt>
 8002024:	0003      	movs	r3, r0
 8002026:	001a      	movs	r2, r3
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <readAdcVoltFunction+0x40>)
 800202a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 5 */
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	200005f4 	.word	0x200005f4
 8002038:	20000004 	.word	0x20000004
 800203c:	200005b0 	.word	0x200005b0

08002040 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void)
{
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b0b7      	sub	sp, #220	@ 0xdc
 8002044:	af02      	add	r7, sp, #8
    enum { DRAWING, DRAWING_POPUP, SENDING_PAGE, WAITING };
    static uint8_t state = DRAWING;
    static uint8_t current_page = 0;
    static uint32_t last_frame_time = 0;
    uint32_t now = HAL_GetTick_us();
 8002046:	f7fe fd7f 	bl	8000b48 <HAL_GetTick_us>
 800204a:	0003      	movs	r3, r0
 800204c:	22bc      	movs	r2, #188	@ 0xbc
 800204e:	18ba      	adds	r2, r7, r2
 8002050:	6013      	str	r3, [r2, #0]
    switch(state) {
 8002052:	4b72      	ldr	r3, [pc, #456]	@ (800221c <displayVoltReadFunction+0x1dc>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d100      	bne.n	800205c <displayVoltReadFunction+0x1c>
 800205a:	e3ae      	b.n	80027ba <displayVoltReadFunction+0x77a>
 800205c:	dd01      	ble.n	8002062 <displayVoltReadFunction+0x22>
 800205e:	f000 fbc0 	bl	80027e2 <displayVoltReadFunction+0x7a2>
 8002062:	2b02      	cmp	r3, #2
 8002064:	d100      	bne.n	8002068 <displayVoltReadFunction+0x28>
 8002066:	e355      	b.n	8002714 <displayVoltReadFunction+0x6d4>
 8002068:	dd00      	ble.n	800206c <displayVoltReadFunction+0x2c>
 800206a:	e3ba      	b.n	80027e2 <displayVoltReadFunction+0x7a2>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <displayVoltReadFunction+0x38>
 8002070:	2b01      	cmp	r3, #1
 8002072:	d100      	bne.n	8002076 <displayVoltReadFunction+0x36>
 8002074:	e280      	b.n	8002578 <displayVoltReadFunction+0x538>
                state = DRAWING;
                last_frame_time = now;
            }
            break;
    }
}
 8002076:	e3b4      	b.n	80027e2 <displayVoltReadFunction+0x7a2>
            st7565_clear_buffer(buffer);
 8002078:	4b69      	ldr	r3, [pc, #420]	@ (8002220 <displayVoltReadFunction+0x1e0>)
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe ff16 	bl	8000eac <st7565_clear_buffer>
            if(displayMode==0){
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <displayVoltReadFunction+0x1e4>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d159      	bne.n	800213c <displayVoltReadFunction+0xfc>
                st7565_drawstring(buffer,0,0,"Volt:",fontMode);
 8002088:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <displayVoltReadFunction+0x1e8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4a67      	ldr	r2, [pc, #412]	@ (800222c <displayVoltReadFunction+0x1ec>)
 800208e:	4864      	ldr	r0, [pc, #400]	@ (8002220 <displayVoltReadFunction+0x1e0>)
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	0013      	movs	r3, r2
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	f7fe ff82 	bl	8000fa0 <st7565_drawstring>
                itoa(voltRead,volt,10);
 800209c:	4b64      	ldr	r3, [pc, #400]	@ (8002230 <displayVoltReadFunction+0x1f0>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	003b      	movs	r3, r7
 80020a4:	220a      	movs	r2, #10
 80020a6:	0019      	movs	r1, r3
 80020a8:	f003 faa0 	bl	80055ec <itoa>
                if(voltRead<10){
 80020ac:	4b60      	ldr	r3, [pc, #384]	@ (8002230 <displayVoltReadFunction+0x1f0>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d810      	bhi.n	80020d6 <displayVoltReadFunction+0x96>
                    volt[4]='\0';
 80020b4:	003b      	movs	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[0];
 80020ba:	003b      	movs	r3, r7
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	003b      	movs	r3, r7
 80020c0:	70da      	strb	r2, [r3, #3]
                    volt[2]='0';
 80020c2:	003b      	movs	r3, r7
 80020c4:	2230      	movs	r2, #48	@ 0x30
 80020c6:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 80020c8:	003b      	movs	r3, r7
 80020ca:	222e      	movs	r2, #46	@ 0x2e
 80020cc:	705a      	strb	r2, [r3, #1]
                    volt[0]='0';
 80020ce:	003b      	movs	r3, r7
 80020d0:	2230      	movs	r2, #48	@ 0x30
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e027      	b.n	8002126 <displayVoltReadFunction+0xe6>
                else if(voltRead>=10&&voltRead<100){
 80020d6:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <displayVoltReadFunction+0x1f0>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b09      	cmp	r3, #9
 80020dc:	d915      	bls.n	800210a <displayVoltReadFunction+0xca>
 80020de:	4b54      	ldr	r3, [pc, #336]	@ (8002230 <displayVoltReadFunction+0x1f0>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b63      	cmp	r3, #99	@ 0x63
 80020e4:	d811      	bhi.n	800210a <displayVoltReadFunction+0xca>
                    volt[4]='\0';
 80020e6:	003b      	movs	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[1];
 80020ec:	003b      	movs	r3, r7
 80020ee:	785a      	ldrb	r2, [r3, #1]
 80020f0:	003b      	movs	r3, r7
 80020f2:	70da      	strb	r2, [r3, #3]
                    volt[2]=volt[0];
 80020f4:	003b      	movs	r3, r7
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	003b      	movs	r3, r7
 80020fa:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 80020fc:	003b      	movs	r3, r7
 80020fe:	222e      	movs	r2, #46	@ 0x2e
 8002100:	705a      	strb	r2, [r3, #1]
                    volt[0]='0';
 8002102:	003b      	movs	r3, r7
 8002104:	2230      	movs	r2, #48	@ 0x30
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e00d      	b.n	8002126 <displayVoltReadFunction+0xe6>
                    volt[4]='\0';
 800210a:	003b      	movs	r3, r7
 800210c:	2200      	movs	r2, #0
 800210e:	711a      	strb	r2, [r3, #4]
                    volt[3]=volt[2];
 8002110:	003b      	movs	r3, r7
 8002112:	789a      	ldrb	r2, [r3, #2]
 8002114:	003b      	movs	r3, r7
 8002116:	70da      	strb	r2, [r3, #3]
                    volt[2]=volt[1];
 8002118:	003b      	movs	r3, r7
 800211a:	785a      	ldrb	r2, [r3, #1]
 800211c:	003b      	movs	r3, r7
 800211e:	709a      	strb	r2, [r3, #2]
                    volt[1]='.';
 8002120:	003b      	movs	r3, r7
 8002122:	222e      	movs	r2, #46	@ 0x2e
 8002124:	705a      	strb	r2, [r3, #1]
                st7565_drawstring(buffer,0,1,volt,fontMode);
 8002126:	4b40      	ldr	r3, [pc, #256]	@ (8002228 <displayVoltReadFunction+0x1e8>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	003a      	movs	r2, r7
 800212c:	483c      	ldr	r0, [pc, #240]	@ (8002220 <displayVoltReadFunction+0x1e0>)
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	0013      	movs	r3, r2
 8002132:	2201      	movs	r2, #1
 8002134:	2100      	movs	r1, #0
 8002136:	f7fe ff33 	bl	8000fa0 <st7565_drawstring>
 800213a:	e200      	b.n	800253e <displayVoltReadFunction+0x4fe>
            } else if(displayMode==1){
 800213c:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <displayVoltReadFunction+0x1e4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d000      	beq.n	8002146 <displayVoltReadFunction+0x106>
 8002144:	e1a2      	b.n	800248c <displayVoltReadFunction+0x44c>
                st7565_drawstring(buffer,30,2,"Volt Range",fontMode);
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <displayVoltReadFunction+0x1e8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <displayVoltReadFunction+0x1f4>)
 800214c:	4834      	ldr	r0, [pc, #208]	@ (8002220 <displayVoltReadFunction+0x1e0>)
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0013      	movs	r3, r2
 8002152:	2202      	movs	r2, #2
 8002154:	211e      	movs	r1, #30
 8002156:	f7fe ff23 	bl	8000fa0 <st7565_drawstring>
                int bar_x0 = 5;
 800215a:	2305      	movs	r3, #5
 800215c:	22b0      	movs	r2, #176	@ 0xb0
 800215e:	18b9      	adds	r1, r7, r2
 8002160:	600b      	str	r3, [r1, #0]
                int bar_x1 = 121;
 8002162:	2379      	movs	r3, #121	@ 0x79
 8002164:	20ac      	movs	r0, #172	@ 0xac
 8002166:	1839      	adds	r1, r7, r0
 8002168:	600b      	str	r3, [r1, #0]
                int bar_y0 = 30;
 800216a:	231e      	movs	r3, #30
 800216c:	24a8      	movs	r4, #168	@ 0xa8
 800216e:	1939      	adds	r1, r7, r4
 8002170:	600b      	str	r3, [r1, #0]
                int bar_y1 = 37;
 8002172:	2325      	movs	r3, #37	@ 0x25
 8002174:	26a4      	movs	r6, #164	@ 0xa4
 8002176:	19b9      	adds	r1, r7, r6
 8002178:	600b      	str	r3, [r1, #0]
                int squares = 10;
 800217a:	230a      	movs	r3, #10
 800217c:	21a0      	movs	r1, #160	@ 0xa0
 800217e:	187d      	adds	r5, r7, r1
 8002180:	602b      	str	r3, [r5, #0]
                int inner_x0 = bar_x0 + 1;
 8002182:	18bb      	adds	r3, r7, r2
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	259c      	movs	r5, #156	@ 0x9c
 800218a:	197a      	adds	r2, r7, r5
 800218c:	6013      	str	r3, [r2, #0]
                int inner_x1 = bar_x1 - 1;
 800218e:	183b      	adds	r3, r7, r0
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3b01      	subs	r3, #1
 8002194:	2298      	movs	r2, #152	@ 0x98
 8002196:	18b8      	adds	r0, r7, r2
 8002198:	6003      	str	r3, [r0, #0]
                int inner_y0 = bar_y0 + 1;
 800219a:	193b      	adds	r3, r7, r4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	2094      	movs	r0, #148	@ 0x94
 80021a2:	1838      	adds	r0, r7, r0
 80021a4:	6003      	str	r3, [r0, #0]
                int inner_y1 = bar_y1 - 1;
 80021a6:	19bb      	adds	r3, r7, r6
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	2090      	movs	r0, #144	@ 0x90
 80021ae:	1838      	adds	r0, r7, r0
 80021b0:	6003      	str	r3, [r0, #0]
                int inner_width = inner_x1 - inner_x0 + 1;
 80021b2:	18bb      	adds	r3, r7, r2
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	197b      	adds	r3, r7, r5
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	268c      	movs	r6, #140	@ 0x8c
 80021c0:	19ba      	adds	r2, r7, r6
 80021c2:	6013      	str	r3, [r2, #0]
                int square_width = inner_width / squares;
 80021c4:	000c      	movs	r4, r1
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	19bb      	adds	r3, r7, r6
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	f7fe f823 	bl	8000218 <__divsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	2288      	movs	r2, #136	@ 0x88
 80021d6:	18b9      	adds	r1, r7, r2
 80021d8:	600b      	str	r3, [r1, #0]
                int remainder = inner_width - square_width * squares;
 80021da:	18bb      	adds	r3, r7, r2
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0021      	movs	r1, r4
 80021e0:	187a      	adds	r2, r7, r1
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	4353      	muls	r3, r2
 80021e6:	19ba      	adds	r2, r7, r6
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2284      	movs	r2, #132	@ 0x84
 80021ee:	18ba      	adds	r2, r7, r2
 80021f0:	6013      	str	r3, [r2, #0]
                int volt_step = 330 / squares;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	23a5      	movs	r3, #165	@ 0xa5
 80021f8:	0058      	lsls	r0, r3, #1
 80021fa:	f7fe f80d 	bl	8000218 <__divsi3>
 80021fe:	0003      	movs	r3, r0
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	18ba      	adds	r2, r7, r2
 8002204:	6013      	str	r3, [r2, #0]
                int x = inner_x0;
 8002206:	197b      	adds	r3, r7, r5
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22cc      	movs	r2, #204	@ 0xcc
 800220c:	18ba      	adds	r2, r7, r2
 800220e:	6013      	str	r3, [r2, #0]
                for(int i = 0; i < squares; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	22c8      	movs	r2, #200	@ 0xc8
 8002214:	18ba      	adds	r2, r7, r2
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e05a      	b.n	80022d0 <displayVoltReadFunction+0x290>
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	20000811 	.word	0x20000811
 8002220:	2000000c 	.word	0x2000000c
 8002224:	20000008 	.word	0x20000008
 8002228:	200005b8 	.word	0x200005b8
 800222c:	08005744 	.word	0x08005744
 8002230:	200005b0 	.word	0x200005b0
 8002234:	0800574c 	.word	0x0800574c
                    int w = square_width + (i < remainder ? 1 : 0);
 8002238:	2301      	movs	r3, #1
 800223a:	1c19      	adds	r1, r3, #0
 800223c:	23c8      	movs	r3, #200	@ 0xc8
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2384      	movs	r3, #132	@ 0x84
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	db01      	blt.n	8002250 <displayVoltReadFunction+0x210>
 800224c:	2300      	movs	r3, #0
 800224e:	1c19      	adds	r1, r3, #0
 8002250:	b2cb      	uxtb	r3, r1
 8002252:	001a      	movs	r2, r3
 8002254:	2388      	movs	r3, #136	@ 0x88
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	189b      	adds	r3, r3, r2
 800225c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    int threshold = (i + 1) * volt_step;
 800225e:	23c8      	movs	r3, #200	@ 0xc8
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4353      	muls	r3, r2
 800226e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if(voltRead >= threshold) {
 8002270:	4bb5      	ldr	r3, [pc, #724]	@ (8002548 <displayVoltReadFunction+0x508>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	001a      	movs	r2, r3
 8002276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002278:	4293      	cmp	r3, r2
 800227a:	dc1c      	bgt.n	80022b6 <displayVoltReadFunction+0x276>
                        st7565_fillrect(buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 800227c:	23cc      	movs	r3, #204	@ 0xcc
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b2d9      	uxtb	r1, r3
 8002284:	2094      	movs	r0, #148	@ 0x94
 8002286:	183b      	adds	r3, r7, r0
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b2dc      	uxtb	r4, r3
 800228c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800228e:	b2dd      	uxtb	r5, r3
 8002290:	2390      	movs	r3, #144	@ 0x90
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	183b      	adds	r3, r7, r0
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	48a9      	ldr	r0, [pc, #676]	@ (800254c <displayVoltReadFunction+0x50c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	9201      	str	r2, [sp, #4]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	002b      	movs	r3, r5
 80022b0:	0022      	movs	r2, r4
 80022b2:	f7ff f82e 	bl	8001312 <st7565_fillrect>
                    x += w;
 80022b6:	21cc      	movs	r1, #204	@ 0xcc
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	187a      	adds	r2, r7, r1
 80022c2:	6013      	str	r3, [r2, #0]
                for(int i = 0; i < squares; i++) {
 80022c4:	22c8      	movs	r2, #200	@ 0xc8
 80022c6:	18bb      	adds	r3, r7, r2
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	18ba      	adds	r2, r7, r2
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	23c8      	movs	r3, #200	@ 0xc8
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	23a0      	movs	r3, #160	@ 0xa0
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbab      	blt.n	8002238 <displayVoltReadFunction+0x1f8>
                st7565_drawline(buffer, bar_x0+1, bar_y0, bar_x1-1, bar_y0, 1);
 80022e0:	26b0      	movs	r6, #176	@ 0xb0
 80022e2:	19bb      	adds	r3, r7, r6
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	b2d9      	uxtb	r1, r3
 80022ec:	20a8      	movs	r0, #168	@ 0xa8
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	25ac      	movs	r5, #172	@ 0xac
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b2dc      	uxtb	r4, r3
 8002300:	183b      	adds	r3, r7, r0
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4891      	ldr	r0, [pc, #580]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002308:	2501      	movs	r5, #1
 800230a:	9501      	str	r5, [sp, #4]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	0023      	movs	r3, r4
 8002310:	f7ff f8fc 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, bar_x0+1, bar_y1, bar_x1-1, bar_y1, 1);
 8002314:	19bb      	adds	r3, r7, r6
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3301      	adds	r3, #1
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	23a4      	movs	r3, #164	@ 0xa4
 8002320:	0018      	movs	r0, r3
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	25ac      	movs	r5, #172	@ 0xac
 800232a:	197b      	adds	r3, r7, r5
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b2dc      	uxtb	r4, r3
 8002334:	0003      	movs	r3, r0
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4883      	ldr	r0, [pc, #524]	@ (800254c <displayVoltReadFunction+0x50c>)
 800233e:	2501      	movs	r5, #1
 8002340:	9501      	str	r5, [sp, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	0023      	movs	r3, r4
 8002346:	f7ff f8e1 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, bar_x0, bar_y0+1, bar_x0, bar_y1-1, 1);
 800234a:	19ba      	adds	r2, r7, r6
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	b2d9      	uxtb	r1, r3
 8002350:	20a8      	movs	r0, #168	@ 0xa8
 8002352:	183a      	adds	r2, r7, r0
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	b2da      	uxtb	r2, r3
 800235c:	19bc      	adds	r4, r7, r6
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	b2dc      	uxtb	r4, r3
 8002362:	23a4      	movs	r3, #164	@ 0xa4
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4877      	ldr	r0, [pc, #476]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002370:	2501      	movs	r5, #1
 8002372:	9501      	str	r5, [sp, #4]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	0023      	movs	r3, r4
 8002378:	f7ff f8c8 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, bar_x1, bar_y0+1, bar_x1, bar_y1-1, 1);
 800237c:	25ac      	movs	r5, #172	@ 0xac
 800237e:	197a      	adds	r2, r7, r5
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	b2d9      	uxtb	r1, r3
 8002384:	20a8      	movs	r0, #168	@ 0xa8
 8002386:	183a      	adds	r2, r7, r0
 8002388:	6813      	ldr	r3, [r2, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	1978      	adds	r0, r7, r5
 8002392:	6803      	ldr	r3, [r0, #0]
 8002394:	b2dc      	uxtb	r4, r3
 8002396:	23a4      	movs	r3, #164	@ 0xa4
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	486a      	ldr	r0, [pc, #424]	@ (800254c <displayVoltReadFunction+0x50c>)
 80023a4:	2501      	movs	r5, #1
 80023a6:	9501      	str	r5, [sp, #4]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	0023      	movs	r3, r4
 80023ac:	f7ff f8ae 	bl	800150c <st7565_drawline>
                st7565_setpixel(buffer, bar_x0 +1, bar_y0+1, 1);
 80023b0:	19ba      	adds	r2, r7, r6
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	24a8      	movs	r4, #168	@ 0xa8
 80023bc:	193a      	adds	r2, r7, r4
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4861      	ldr	r0, [pc, #388]	@ (800254c <displayVoltReadFunction+0x50c>)
 80023c8:	2301      	movs	r3, #1
 80023ca:	f7fe fd7e 	bl	8000eca <st7565_setpixel>
                st7565_setpixel(buffer, bar_x0 +1, bar_y1-1, 1);
 80023ce:	19ba      	adds	r2, r7, r6
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2d9      	uxtb	r1, r3
 80023d8:	26a4      	movs	r6, #164	@ 0xa4
 80023da:	19bb      	adds	r3, r7, r6
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4859      	ldr	r0, [pc, #356]	@ (800254c <displayVoltReadFunction+0x50c>)
 80023e6:	2301      	movs	r3, #1
 80023e8:	f7fe fd6f 	bl	8000eca <st7565_setpixel>
                st7565_setpixel(buffer, bar_x1 -1, bar_y0+1, 1);
 80023ec:	25ac      	movs	r5, #172	@ 0xac
 80023ee:	197b      	adds	r3, r7, r5
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4852      	ldr	r0, [pc, #328]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002404:	2301      	movs	r3, #1
 8002406:	f7fe fd60 	bl	8000eca <st7565_setpixel>
                st7565_setpixel(buffer, bar_x1 -1, bar_y1-1, 1);
 800240a:	197b      	adds	r3, r7, r5
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	19bb      	adds	r3, r7, r6
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	484b      	ldr	r0, [pc, #300]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002420:	2301      	movs	r3, #1
 8002422:	f7fe fd52 	bl	8000eca <st7565_setpixel>
                st7565_drawstring(buffer, 0, 5, "0",fontMode);
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <displayVoltReadFunction+0x510>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <displayVoltReadFunction+0x514>)
 800242c:	4847      	ldr	r0, [pc, #284]	@ (800254c <displayVoltReadFunction+0x50c>)
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	0013      	movs	r3, r2
 8002432:	2205      	movs	r2, #5
 8002434:	2100      	movs	r1, #0
 8002436:	f7fe fdb3 	bl	8000fa0 <st7565_drawstring>
                st7565_drawstring(buffer, 20, 5, "0.8",fontMode);
 800243a:	4b45      	ldr	r3, [pc, #276]	@ (8002550 <displayVoltReadFunction+0x510>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <displayVoltReadFunction+0x518>)
 8002440:	4842      	ldr	r0, [pc, #264]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	0013      	movs	r3, r2
 8002446:	2205      	movs	r2, #5
 8002448:	2114      	movs	r1, #20
 800244a:	f7fe fda9 	bl	8000fa0 <st7565_drawstring>
                st7565_drawstring(buffer, 45, 5, "1.6",fontMode);
 800244e:	4b40      	ldr	r3, [pc, #256]	@ (8002550 <displayVoltReadFunction+0x510>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4a42      	ldr	r2, [pc, #264]	@ (800255c <displayVoltReadFunction+0x51c>)
 8002454:	483d      	ldr	r0, [pc, #244]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	0013      	movs	r3, r2
 800245a:	2205      	movs	r2, #5
 800245c:	212d      	movs	r1, #45	@ 0x2d
 800245e:	f7fe fd9f 	bl	8000fa0 <st7565_drawstring>
                st7565_drawstring(buffer, 75, 5, "2.5",fontMode);
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <displayVoltReadFunction+0x510>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4a3e      	ldr	r2, [pc, #248]	@ (8002560 <displayVoltReadFunction+0x520>)
 8002468:	4838      	ldr	r0, [pc, #224]	@ (800254c <displayVoltReadFunction+0x50c>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	0013      	movs	r3, r2
 800246e:	2205      	movs	r2, #5
 8002470:	214b      	movs	r1, #75	@ 0x4b
 8002472:	f7fe fd95 	bl	8000fa0 <st7565_drawstring>
                st7565_drawstring(buffer, 108, 5, "3.3",fontMode);
 8002476:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <displayVoltReadFunction+0x510>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4a3a      	ldr	r2, [pc, #232]	@ (8002564 <displayVoltReadFunction+0x524>)
 800247c:	4833      	ldr	r0, [pc, #204]	@ (800254c <displayVoltReadFunction+0x50c>)
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	0013      	movs	r3, r2
 8002482:	2205      	movs	r2, #5
 8002484:	216c      	movs	r1, #108	@ 0x6c
 8002486:	f7fe fd8b 	bl	8000fa0 <st7565_drawstring>
 800248a:	e058      	b.n	800253e <displayVoltReadFunction+0x4fe>
            } else if(displayMode==2){
 800248c:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <displayVoltReadFunction+0x528>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d146      	bne.n	8002522 <displayVoltReadFunction+0x4e2>
                for(int x=1; x<256; x+=2) {
 8002494:	2301      	movs	r3, #1
 8002496:	22c4      	movs	r2, #196	@ 0xc4
 8002498:	18ba      	adds	r2, r7, r2
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e03b      	b.n	8002516 <displayVoltReadFunction+0x4d6>
                    int value = adc_buffer[x];
 800249e:	4b33      	ldr	r3, [pc, #204]	@ (800256c <displayVoltReadFunction+0x52c>)
 80024a0:	22c4      	movs	r2, #196	@ 0xc4
 80024a2:	18ba      	adds	r2, r7, r2
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	5ad3      	ldrh	r3, [r2, r3]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	22b4      	movs	r2, #180	@ 0xb4
 80024ae:	18b9      	adds	r1, r7, r2
 80024b0:	600b      	str	r3, [r1, #0]
                    int y = 63 - (value * 63 / 4095);
 80024b2:	18bb      	adds	r3, r7, r2
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2241      	movs	r2, #65	@ 0x41
 80024b8:	4251      	negs	r1, r2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7fd feac 	bl	8000218 <__divsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	333f      	adds	r3, #63	@ 0x3f
 80024c4:	22c0      	movs	r2, #192	@ 0xc0
 80024c6:	18b9      	adds	r1, r7, r2
 80024c8:	600b      	str	r3, [r1, #0]
                    if(y<0) y=0;
 80024ca:	18bb      	adds	r3, r7, r2
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da02      	bge.n	80024d8 <displayVoltReadFunction+0x498>
 80024d2:	2300      	movs	r3, #0
 80024d4:	18ba      	adds	r2, r7, r2
 80024d6:	6013      	str	r3, [r2, #0]
                    if(y>63) y=63;
 80024d8:	22c0      	movs	r2, #192	@ 0xc0
 80024da:	18bb      	adds	r3, r7, r2
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b3f      	cmp	r3, #63	@ 0x3f
 80024e0:	dd02      	ble.n	80024e8 <displayVoltReadFunction+0x4a8>
 80024e2:	233f      	movs	r3, #63	@ 0x3f
 80024e4:	18ba      	adds	r2, r7, r2
 80024e6:	6013      	str	r3, [r2, #0]
                    st7565_setpixel(buffer, (x-1)/2, y, 1);
 80024e8:	23c4      	movs	r3, #196	@ 0xc4
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da00      	bge.n	80024f6 <displayVoltReadFunction+0x4b6>
 80024f4:	3301      	adds	r3, #1
 80024f6:	105b      	asrs	r3, r3, #1
 80024f8:	b2d9      	uxtb	r1, r3
 80024fa:	23c0      	movs	r3, #192	@ 0xc0
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4812      	ldr	r0, [pc, #72]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002504:	2301      	movs	r3, #1
 8002506:	f7fe fce0 	bl	8000eca <st7565_setpixel>
                for(int x=1; x<256; x+=2) {
 800250a:	22c4      	movs	r2, #196	@ 0xc4
 800250c:	18bb      	adds	r3, r7, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3302      	adds	r3, #2
 8002512:	18ba      	adds	r2, r7, r2
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	23c4      	movs	r3, #196	@ 0xc4
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2bff      	cmp	r3, #255	@ 0xff
 800251e:	ddbe      	ble.n	800249e <displayVoltReadFunction+0x45e>
 8002520:	e00d      	b.n	800253e <displayVoltReadFunction+0x4fe>
            } else if(displayMode==100){
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <displayVoltReadFunction+0x528>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d109      	bne.n	800253e <displayVoltReadFunction+0x4fe>
                st7565_drawstring(buffer, 0, 0, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F",fontMode);
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <displayVoltReadFunction+0x510>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4a10      	ldr	r2, [pc, #64]	@ (8002570 <displayVoltReadFunction+0x530>)
 8002530:	4806      	ldr	r0, [pc, #24]	@ (800254c <displayVoltReadFunction+0x50c>)
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	0013      	movs	r3, r2
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	f7fe fd31 	bl	8000fa0 <st7565_drawstring>
            state = DRAWING_POPUP;
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <displayVoltReadFunction+0x534>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
            break;
 8002544:	e14d      	b.n	80027e2 <displayVoltReadFunction+0x7a2>
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	200005b0 	.word	0x200005b0
 800254c:	2000000c 	.word	0x2000000c
 8002550:	200005b8 	.word	0x200005b8
 8002554:	08005758 	.word	0x08005758
 8002558:	0800575c 	.word	0x0800575c
 800255c:	08005760 	.word	0x08005760
 8002560:	08005764 	.word	0x08005764
 8002564:	08005768 	.word	0x08005768
 8002568:	20000008 	.word	0x20000008
 800256c:	200005f4 	.word	0x200005f4
 8002570:	0800576c 	.word	0x0800576c
 8002574:	20000811 	.word	0x20000811
            if(showDisplayModeOverlay && (now - displayModeChangeTime) < 1250*1000) {
 8002578:	4b9c      	ldr	r3, [pc, #624]	@ (80027ec <displayVoltReadFunction+0x7ac>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d100      	bne.n	8002582 <displayVoltReadFunction+0x542>
 8002580:	e0be      	b.n	8002700 <displayVoltReadFunction+0x6c0>
 8002582:	4b9b      	ldr	r3, [pc, #620]	@ (80027f0 <displayVoltReadFunction+0x7b0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	22bc      	movs	r2, #188	@ 0xbc
 8002588:	18ba      	adds	r2, r7, r2
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	4a99      	ldr	r2, [pc, #612]	@ (80027f4 <displayVoltReadFunction+0x7b4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d900      	bls.n	8002596 <displayVoltReadFunction+0x556>
 8002594:	e0b4      	b.n	8002700 <displayVoltReadFunction+0x6c0>
                uint8_t rect_x = 80;
 8002596:	21bb      	movs	r1, #187	@ 0xbb
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2250      	movs	r2, #80	@ 0x50
 800259c:	701a      	strb	r2, [r3, #0]
                uint8_t rect_y = 45;
 800259e:	26ba      	movs	r6, #186	@ 0xba
 80025a0:	19bb      	adds	r3, r7, r6
 80025a2:	222d      	movs	r2, #45	@ 0x2d
 80025a4:	701a      	strb	r2, [r3, #0]
                uint8_t rect_w = 47;
 80025a6:	24b9      	movs	r4, #185	@ 0xb9
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	222f      	movs	r2, #47	@ 0x2f
 80025ac:	701a      	strb	r2, [r3, #0]
                uint8_t rect_h = 18;
 80025ae:	23b8      	movs	r3, #184	@ 0xb8
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2212      	movs	r2, #18
 80025b4:	701a      	strb	r2, [r3, #0]
                st7565_fillrect(buffer, rect_x, rect_y, rect_w, rect_h, 0);
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	781c      	ldrb	r4, [r3, #0]
 80025ba:	19bb      	adds	r3, r7, r6
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	000d      	movs	r5, r1
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	7819      	ldrb	r1, [r3, #0]
 80025c4:	488c      	ldr	r0, [pc, #560]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	23b8      	movs	r3, #184	@ 0xb8
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0023      	movs	r3, r4
 80025d4:	f7fe fe9d 	bl	8001312 <st7565_fillrect>
                st7565_drawline(buffer, rect_x, rect_y, rect_x + rect_w, rect_y, 1);
 80025d8:	197a      	adds	r2, r7, r5
 80025da:	24b9      	movs	r4, #185	@ 0xb9
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	18d3      	adds	r3, r2, r3
 80025e4:	b2dc      	uxtb	r4, r3
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	197b      	adds	r3, r7, r5
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	4882      	ldr	r0, [pc, #520]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 80025f0:	2301      	movs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	19bb      	adds	r3, r7, r6
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	0023      	movs	r3, r4
 80025fc:	f7fe ff86 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, rect_x, rect_y, rect_x, rect_y + rect_h, 1);
 8002600:	0031      	movs	r1, r6
 8002602:	19ba      	adds	r2, r7, r6
 8002604:	23b8      	movs	r3, #184	@ 0xb8
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	002e      	movs	r6, r5
 8002612:	19ba      	adds	r2, r7, r6
 8002614:	7815      	ldrb	r5, [r2, #0]
 8002616:	187a      	adds	r2, r7, r1
 8002618:	7814      	ldrb	r4, [r2, #0]
 800261a:	19ba      	adds	r2, r7, r6
 800261c:	7811      	ldrb	r1, [r2, #0]
 800261e:	4876      	ldr	r0, [pc, #472]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 8002620:	2201      	movs	r2, #1
 8002622:	9201      	str	r2, [sp, #4]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	002b      	movs	r3, r5
 8002628:	0022      	movs	r2, r4
 800262a:	f7fe ff6f 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, rect_x + rect_w, rect_y, rect_x + rect_w, rect_y + rect_h, 1);
 800262e:	19ba      	adds	r2, r7, r6
 8002630:	24b9      	movs	r4, #185	@ 0xb9
 8002632:	193b      	adds	r3, r7, r4
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	19ba      	adds	r2, r7, r6
 800263e:	193b      	adds	r3, r7, r4
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	b2dc      	uxtb	r4, r3
 8002648:	20ba      	movs	r0, #186	@ 0xba
 800264a:	183a      	adds	r2, r7, r0
 800264c:	25b8      	movs	r5, #184	@ 0xb8
 800264e:	197b      	adds	r3, r7, r5
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	183a      	adds	r2, r7, r0
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	4866      	ldr	r0, [pc, #408]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 800265e:	2501      	movs	r5, #1
 8002660:	9501      	str	r5, [sp, #4]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	0023      	movs	r3, r4
 8002666:	f7fe ff51 	bl	800150c <st7565_drawline>
                st7565_drawline(buffer, rect_x, rect_y + rect_h, rect_x + rect_w, rect_y + rect_h, 1);
 800266a:	21ba      	movs	r1, #186	@ 0xba
 800266c:	187a      	adds	r2, r7, r1
 800266e:	20b8      	movs	r0, #184	@ 0xb8
 8002670:	183b      	adds	r3, r7, r0
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	b2dc      	uxtb	r4, r3
 800267a:	19ba      	adds	r2, r7, r6
 800267c:	23b9      	movs	r3, #185	@ 0xb9
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	b2dd      	uxtb	r5, r3
 8002688:	187a      	adds	r2, r7, r1
 800268a:	183b      	adds	r3, r7, r0
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	19ba      	adds	r2, r7, r6
 8002696:	7811      	ldrb	r1, [r2, #0]
 8002698:	4857      	ldr	r0, [pc, #348]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 800269a:	2201      	movs	r2, #1
 800269c:	9201      	str	r2, [sp, #4]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	002b      	movs	r3, r5
 80026a2:	0022      	movs	r2, r4
 80026a4:	f7fe ff32 	bl	800150c <st7565_drawline>
                char mode_text[20] = "Mode  ";
 80026a8:	2464      	movs	r4, #100	@ 0x64
 80026aa:	1939      	adds	r1, r7, r4
 80026ac:	4a53      	ldr	r2, [pc, #332]	@ (80027fc <displayVoltReadFunction+0x7bc>)
 80026ae:	000b      	movs	r3, r1
 80026b0:	6810      	ldr	r0, [r2, #0]
 80026b2:	6018      	str	r0, [r3, #0]
 80026b4:	8890      	ldrh	r0, [r2, #4]
 80026b6:	8098      	strh	r0, [r3, #4]
 80026b8:	7992      	ldrb	r2, [r2, #6]
 80026ba:	719a      	strb	r2, [r3, #6]
 80026bc:	2307      	movs	r3, #7
 80026be:	18cb      	adds	r3, r1, r3
 80026c0:	220d      	movs	r2, #13
 80026c2:	2100      	movs	r1, #0
 80026c4:	0018      	movs	r0, r3
 80026c6:	f002 ffc9 	bl	800565c <memset>
                mode_text[5] = displayMode + '0';
 80026ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <displayVoltReadFunction+0x7c0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	3330      	adds	r3, #48	@ 0x30
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	0020      	movs	r0, r4
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	715a      	strb	r2, [r3, #5]
                st7565_drawstring(buffer, rect_x + 2, rect_y/8 + 1, mode_text, fontMode);
 80026d8:	19bb      	adds	r3, r7, r6
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3302      	adds	r3, #2
 80026de:	b2d9      	uxtb	r1, r3
 80026e0:	23ba      	movs	r3, #186	@ 0xba
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b45      	ldr	r3, [pc, #276]	@ (8002804 <displayVoltReadFunction+0x7c4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	183c      	adds	r4, r7, r0
 80026f4:	4840      	ldr	r0, [pc, #256]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	0023      	movs	r3, r4
 80026fa:	f7fe fc51 	bl	8000fa0 <st7565_drawstring>
            if(showDisplayModeOverlay && (now - displayModeChangeTime) < 1250*1000) {
 80026fe:	e002      	b.n	8002706 <displayVoltReadFunction+0x6c6>
                showDisplayModeOverlay = 0;
 8002700:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <displayVoltReadFunction+0x7ac>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
            state = SENDING_PAGE;
 8002706:	4b40      	ldr	r3, [pc, #256]	@ (8002808 <displayVoltReadFunction+0x7c8>)
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
            current_page = 0;
 800270c:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <displayVoltReadFunction+0x7cc>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
            break;
 8002712:	e066      	b.n	80027e2 <displayVoltReadFunction+0x7a2>
            CMD(ST7565_CMD_SET_PAGE | pagemap[current_page]);
 8002714:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <displayVoltReadFunction+0x7d0>)
 8002716:	2200      	movs	r2, #0
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	0018      	movs	r0, r3
 800271c:	f001 fadc 	bl	8003cd8 <HAL_GPIO_WritePin>
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <displayVoltReadFunction+0x7cc>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	001a      	movs	r2, r3
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <displayVoltReadFunction+0x7d4>)
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	2250      	movs	r2, #80	@ 0x50
 800272c:	4252      	negs	r2, r2
 800272e:	4313      	orrs	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	0018      	movs	r0, r3
 8002734:	f7fe fa6c 	bl	8000c10 <st7565_sendbyte>
            CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8002738:	4b35      	ldr	r3, [pc, #212]	@ (8002810 <displayVoltReadFunction+0x7d0>)
 800273a:	2200      	movs	r2, #0
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	0018      	movs	r0, r3
 8002740:	f001 faca 	bl	8003cd8 <HAL_GPIO_WritePin>
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fa63 	bl	8000c10 <st7565_sendbyte>
            CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <displayVoltReadFunction+0x7d0>)
 800274c:	2200      	movs	r2, #0
 800274e:	2180      	movs	r1, #128	@ 0x80
 8002750:	0018      	movs	r0, r3
 8002752:	f001 fac1 	bl	8003cd8 <HAL_GPIO_WritePin>
 8002756:	2010      	movs	r0, #16
 8002758:	f7fe fa5a 	bl	8000c10 <st7565_sendbyte>
            CMD(ST7565_CMD_RMW);
 800275c:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <displayVoltReadFunction+0x7d0>)
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0018      	movs	r0, r3
 8002764:	f001 fab8 	bl	8003cd8 <HAL_GPIO_WritePin>
 8002768:	20e0      	movs	r0, #224	@ 0xe0
 800276a:	f7fe fa51 	bl	8000c10 <st7565_sendbyte>
            HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 800276e:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <displayVoltReadFunction+0x7d0>)
 8002770:	2201      	movs	r2, #1
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	0018      	movs	r0, r3
 8002776:	f001 faaf 	bl	8003cd8 <HAL_GPIO_WritePin>
            HAL_SPI_Transmit(&hspi1, &buffer[128 * current_page], 128, 6);
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <displayVoltReadFunction+0x7cc>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	01da      	lsls	r2, r3, #7
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <displayVoltReadFunction+0x7b8>)
 8002782:	18d1      	adds	r1, r2, r3
 8002784:	4824      	ldr	r0, [pc, #144]	@ (8002818 <displayVoltReadFunction+0x7d8>)
 8002786:	2306      	movs	r3, #6
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	f002 f94d 	bl	8004a28 <HAL_SPI_Transmit>
            current_page++;
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <displayVoltReadFunction+0x7cc>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <displayVoltReadFunction+0x7cc>)
 8002798:	701a      	strb	r2, [r3, #0]
            if (current_page >= 8) {
 800279a:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <displayVoltReadFunction+0x7cc>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b07      	cmp	r3, #7
 80027a0:	d91c      	bls.n	80027dc <displayVoltReadFunction+0x79c>
            	os_debug_drawing_time=now - last_frame_time;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <displayVoltReadFunction+0x7dc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22bc      	movs	r2, #188	@ 0xbc
 80027a8:	18ba      	adds	r2, r7, r2
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <displayVoltReadFunction+0x7e0>)
 80027b0:	601a      	str	r2, [r3, #0]
                state = WAITING;
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <displayVoltReadFunction+0x7c8>)
 80027b4:	2203      	movs	r2, #3
 80027b6:	701a      	strb	r2, [r3, #0]
            break;
 80027b8:	e010      	b.n	80027dc <displayVoltReadFunction+0x79c>
            if (now - last_frame_time >= 42*1000) {
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <displayVoltReadFunction+0x7dc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	21bc      	movs	r1, #188	@ 0xbc
 80027c0:	187a      	adds	r2, r7, r1
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <displayVoltReadFunction+0x7e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d909      	bls.n	80027e0 <displayVoltReadFunction+0x7a0>
                state = DRAWING;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <displayVoltReadFunction+0x7c8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
                last_frame_time = now;
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <displayVoltReadFunction+0x7dc>)
 80027d4:	187a      	adds	r2, r7, r1
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	601a      	str	r2, [r3, #0]
            break;
 80027da:	e001      	b.n	80027e0 <displayVoltReadFunction+0x7a0>
            break;
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	e000      	b.n	80027e2 <displayVoltReadFunction+0x7a2>
            break;
 80027e0:	46c0      	nop			@ (mov r8, r8)
}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b035      	add	sp, #212	@ 0xd4
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	200005c8 	.word	0x200005c8
 80027f0:	200005c4 	.word	0x200005c4
 80027f4:	001312cf 	.word	0x001312cf
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	080057d0 	.word	0x080057d0
 8002800:	20000008 	.word	0x20000008
 8002804:	200005b8 	.word	0x200005b8
 8002808:	20000811 	.word	0x20000811
 800280c:	20000812 	.word	0x20000812
 8002810:	48000800 	.word	0x48000800
 8002814:	2000040c 	.word	0x2000040c
 8002818:	200004bc 	.word	0x200004bc
 800281c:	20000814 	.word	0x20000814
 8002820:	200005f0 	.word	0x200005f0
 8002824:	0000a40f 	.word	0x0000a40f

08002828 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
      }
    } else {
      buttonReadRaw = 666;
    }
    HAL_ADC_Stop(&hadc);*/
	buttonReadRaw=adc_buffer[254];
 800282e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a20 <readButtonFunction+0x1f8>)
 8002830:	23fe      	movs	r3, #254	@ 0xfe
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	5ad3      	ldrh	r3, [r2, r3]
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b7a      	ldr	r3, [pc, #488]	@ (8002a24 <readButtonFunction+0x1fc>)
 800283a:	801a      	strh	r2, [r3, #0]
    buttonRead[0]=buttonRead[1];
 800283c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a28 <readButtonFunction+0x200>)
 800283e:	885a      	ldrh	r2, [r3, #2]
 8002840:	4b79      	ldr	r3, [pc, #484]	@ (8002a28 <readButtonFunction+0x200>)
 8002842:	801a      	strh	r2, [r3, #0]
    buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 8002844:	4b77      	ldr	r3, [pc, #476]	@ (8002a24 <readButtonFunction+0x1fc>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b21b      	sxth	r3, r3
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff f872 	bl	8001934 <interpolation>
 8002850:	0003      	movs	r3, r0
 8002852:	b29b      	uxth	r3, r3
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff f8f3 	bl	8001a40 <filterButton>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	4b72      	ldr	r3, [pc, #456]	@ (8002a28 <readButtonFunction+0x200>)
 8002860:	805a      	strh	r2, [r3, #2]
    
    uint8_t rawButtonState = 0;
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
    if(buttonRead[1] <= 50) {
 8002868:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <readButtonFunction+0x200>)
 800286a:	885b      	ldrh	r3, [r3, #2]
 800286c:	2b32      	cmp	r3, #50	@ 0x32
 800286e:	d803      	bhi.n	8002878 <readButtonFunction+0x50>
        rawButtonState = 1;
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e026      	b.n	80028c6 <readButtonFunction+0x9e>
    } else if(buttonRead[1] > 290 && buttonRead[1] < 315) {
 8002878:	4b6b      	ldr	r3, [pc, #428]	@ (8002a28 <readButtonFunction+0x200>)
 800287a:	885a      	ldrh	r2, [r3, #2]
 800287c:	2391      	movs	r3, #145	@ 0x91
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	429a      	cmp	r2, r3
 8002882:	d909      	bls.n	8002898 <readButtonFunction+0x70>
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <readButtonFunction+0x200>)
 8002886:	885a      	ldrh	r2, [r3, #2]
 8002888:	239d      	movs	r3, #157	@ 0x9d
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	429a      	cmp	r2, r3
 800288e:	d803      	bhi.n	8002898 <readButtonFunction+0x70>
        rawButtonState = 2;
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e016      	b.n	80028c6 <readButtonFunction+0x9e>
    } else if(buttonRead[1] > 186 && buttonRead[1] < 206) {
 8002898:	4b63      	ldr	r3, [pc, #396]	@ (8002a28 <readButtonFunction+0x200>)
 800289a:	885b      	ldrh	r3, [r3, #2]
 800289c:	2bba      	cmp	r3, #186	@ 0xba
 800289e:	d907      	bls.n	80028b0 <readButtonFunction+0x88>
 80028a0:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <readButtonFunction+0x200>)
 80028a2:	885b      	ldrh	r3, [r3, #2]
 80028a4:	2bcd      	cmp	r3, #205	@ 0xcd
 80028a6:	d803      	bhi.n	80028b0 <readButtonFunction+0x88>
        rawButtonState = 3;
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e00a      	b.n	80028c6 <readButtonFunction+0x9e>
    } else if(buttonRead[1] > 86 && buttonRead[1] < 108) {
 80028b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <readButtonFunction+0x200>)
 80028b2:	885b      	ldrh	r3, [r3, #2]
 80028b4:	2b56      	cmp	r3, #86	@ 0x56
 80028b6:	d906      	bls.n	80028c6 <readButtonFunction+0x9e>
 80028b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a28 <readButtonFunction+0x200>)
 80028ba:	885b      	ldrh	r3, [r3, #2]
 80028bc:	2b6b      	cmp	r3, #107	@ 0x6b
 80028be:	d802      	bhi.n	80028c6 <readButtonFunction+0x9e>
        rawButtonState = 4;
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	2204      	movs	r2, #4
 80028c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(rawButtonState != buttonState) {
 80028c6:	4b59      	ldr	r3, [pc, #356]	@ (8002a2c <readButtonFunction+0x204>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	1dfa      	adds	r2, r7, #7
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d100      	bne.n	80028d4 <readButtonFunction+0xac>
 80028d2:	e09a      	b.n	8002a0a <readButtonFunction+0x1e2>
        if(!buttonTransitionFlag) {
 80028d4:	4b56      	ldr	r3, [pc, #344]	@ (8002a30 <readButtonFunction+0x208>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <readButtonFunction+0xc0>
            buttonTransitionFlag = 1;
 80028dc:	4b54      	ldr	r3, [pc, #336]	@ (8002a30 <readButtonFunction+0x208>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 80028e2:	4b54      	ldr	r3, [pc, #336]	@ (8002a34 <readButtonFunction+0x20c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
        }
        buttonDebounceTimer += 5;
 80028e8:	4b52      	ldr	r3, [pc, #328]	@ (8002a34 <readButtonFunction+0x20c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1d5a      	adds	r2, r3, #5
 80028ee:	4b51      	ldr	r3, [pc, #324]	@ (8002a34 <readButtonFunction+0x20c>)
 80028f0:	601a      	str	r2, [r3, #0]
        
        if(buttonDebounceTimer >= 15) {
 80028f2:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <readButtonFunction+0x20c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b0e      	cmp	r3, #14
 80028f8:	d800      	bhi.n	80028fc <readButtonFunction+0xd4>
 80028fa:	e08d      	b.n	8002a18 <readButtonFunction+0x1f0>
            buttonStatePrev = buttonState;
 80028fc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a2c <readButtonFunction+0x204>)
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <readButtonFunction+0x210>)
 8002902:	701a      	strb	r2, [r3, #0]
            buttonState = rawButtonState;
 8002904:	4b49      	ldr	r3, [pc, #292]	@ (8002a2c <readButtonFunction+0x204>)
 8002906:	1dfa      	adds	r2, r7, #7
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	701a      	strb	r2, [r3, #0]
            buttonTransitionFlag = 0;
 800290c:	4b48      	ldr	r3, [pc, #288]	@ (8002a30 <readButtonFunction+0x208>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 8002912:	4b48      	ldr	r3, [pc, #288]	@ (8002a34 <readButtonFunction+0x20c>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
            
            if(!buttonTransitionFlag) {
 8002918:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <readButtonFunction+0x208>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d000      	beq.n	8002922 <readButtonFunction+0xfa>
 8002920:	e07a      	b.n	8002a18 <readButtonFunction+0x1f0>
                if(buttonState == 1 && buttonStatePrev == 0) {
 8002922:	4b42      	ldr	r3, [pc, #264]	@ (8002a2c <readButtonFunction+0x204>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d11c      	bne.n	8002964 <readButtonFunction+0x13c>
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <readButtonFunction+0x210>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <readButtonFunction+0x13c>
                    if(displayMode==0)displayMode=displayModeMax;
 8002932:	4b42      	ldr	r3, [pc, #264]	@ (8002a3c <readButtonFunction+0x214>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <readButtonFunction+0x11c>
 800293a:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <readButtonFunction+0x218>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <readButtonFunction+0x214>)
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e005      	b.n	8002950 <readButtonFunction+0x128>
                    else displayMode--;
 8002944:	4b3d      	ldr	r3, [pc, #244]	@ (8002a3c <readButtonFunction+0x214>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a3c <readButtonFunction+0x214>)
 800294e:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 8002950:	4b3c      	ldr	r3, [pc, #240]	@ (8002a44 <readButtonFunction+0x21c>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick_us();
 8002956:	f7fe f8f7 	bl	8000b48 <HAL_GetTick_us>
 800295a:	0003      	movs	r3, r0
 800295c:	001a      	movs	r2, r3
 800295e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a48 <readButtonFunction+0x220>)
 8002960:	601a      	str	r2, [r3, #0]
                if(buttonState == 1 && buttonStatePrev == 0) {
 8002962:	e059      	b.n	8002a18 <readButtonFunction+0x1f0>
                }
                else if(buttonState == 2 && buttonStatePrev == 0) {
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <readButtonFunction+0x204>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11d      	bne.n	80029a8 <readButtonFunction+0x180>
 800296c:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <readButtonFunction+0x210>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d119      	bne.n	80029a8 <readButtonFunction+0x180>
                    if(displayMode==displayModeMax)displayMode=0;
 8002974:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <readButtonFunction+0x214>)
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <readButtonFunction+0x218>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d103      	bne.n	8002988 <readButtonFunction+0x160>
 8002980:	4b2e      	ldr	r3, [pc, #184]	@ (8002a3c <readButtonFunction+0x214>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e005      	b.n	8002994 <readButtonFunction+0x16c>
                    else displayMode++;
 8002988:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <readButtonFunction+0x214>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <readButtonFunction+0x214>)
 8002992:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 8002994:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <readButtonFunction+0x21c>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick_us();
 800299a:	f7fe f8d5 	bl	8000b48 <HAL_GetTick_us>
 800299e:	0003      	movs	r3, r0
 80029a0:	001a      	movs	r2, r3
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <readButtonFunction+0x220>)
 80029a4:	601a      	str	r2, [r3, #0]
                else if(buttonState == 2 && buttonStatePrev == 0) {
 80029a6:	e037      	b.n	8002a18 <readButtonFunction+0x1f0>
                }
                else if(buttonState == 3 && buttonStatePrev == 0) {//apas jos
 80029a8:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <readButtonFunction+0x204>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d113      	bne.n	80029d8 <readButtonFunction+0x1b0>
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <readButtonFunction+0x210>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <readButtonFunction+0x1b0>
                	if(fontMode==0)fontMode=fontModeMax;
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <readButtonFunction+0x224>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <readButtonFunction+0x1a2>
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <readButtonFunction+0x228>)
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <readButtonFunction+0x224>)
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e026      	b.n	8002a18 <readButtonFunction+0x1f0>
                	else fontMode--;
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <readButtonFunction+0x224>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <readButtonFunction+0x224>)
 80029d4:	701a      	strb	r2, [r3, #0]
                	if(fontMode==0)fontMode=fontModeMax;
 80029d6:	e01f      	b.n	8002a18 <readButtonFunction+0x1f0>
                }
                else if(buttonState == 4 && buttonStatePrev == 0) {//apas sus
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <readButtonFunction+0x204>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <readButtonFunction+0x1f0>
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <readButtonFunction+0x210>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d117      	bne.n	8002a18 <readButtonFunction+0x1f0>
                	if(fontMode==fontModeMax)fontMode=0;
 80029e8:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <readButtonFunction+0x224>)
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <readButtonFunction+0x228>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d103      	bne.n	80029fc <readButtonFunction+0x1d4>
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <readButtonFunction+0x224>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
    } else {
        buttonTransitionFlag = 0;
        buttonDebounceTimer = 0;
    }
  /* USER CODE END readButtonFunction */
}
 80029fa:	e00d      	b.n	8002a18 <readButtonFunction+0x1f0>
                	else fontMode++;
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <readButtonFunction+0x224>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <readButtonFunction+0x224>)
 8002a06:	701a      	strb	r2, [r3, #0]
}
 8002a08:	e006      	b.n	8002a18 <readButtonFunction+0x1f0>
        buttonTransitionFlag = 0;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <readButtonFunction+0x208>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
        buttonDebounceTimer = 0;
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <readButtonFunction+0x20c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
}
 8002a16:	e7ff      	b.n	8002a18 <readButtonFunction+0x1f0>
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200005f4 	.word	0x200005f4
 8002a24:	20000006 	.word	0x20000006
 8002a28:	200005b4 	.word	0x200005b4
 8002a2c:	200005b9 	.word	0x200005b9
 8002a30:	200005c0 	.word	0x200005c0
 8002a34:	200005bc 	.word	0x200005bc
 8002a38:	200005ba 	.word	0x200005ba
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	20000009 	.word	0x20000009
 8002a44:	200005c8 	.word	0x200005c8
 8002a48:	200005c4 	.word	0x200005c4
 8002a4c:	200005b8 	.word	0x200005b8
 8002a50:	2000000a 	.word	0x2000000a

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a5c:	46c0      	nop			@ (mov r8, r8)
 8002a5e:	e7fd      	b.n	8002a5c <Error_Handler+0x8>

08002a60 <OS_Init>:
static const SimpleTask *os_tasks = 0;
static uint8_t os_num_tasks = 0;
static void (*os_init_task)(void) = 0;
static uint32_t os_init_max_time_ms = 0;

void OS_Init(const SimpleTask *tasks, uint8_t num_tasks, void (*init_task)(void), uint32_t init_max_time_ms) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	200b      	movs	r0, #11
 8002a6e:	183b      	adds	r3, r7, r0
 8002a70:	1c0a      	adds	r2, r1, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    os_tasks = tasks;
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <OS_Init+0x38>)
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]
    os_num_tasks = num_tasks;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <OS_Init+0x3c>)
 8002a7c:	183a      	adds	r2, r7, r0
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
    os_init_task = init_task;
 8002a82:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <OS_Init+0x40>)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
    os_init_max_time_ms = init_max_time_ms;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <OS_Init+0x44>)
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	20000818 	.word	0x20000818
 8002a9c:	2000081c 	.word	0x2000081c
 8002aa0:	20000820 	.word	0x20000820
 8002aa4:	20000824 	.word	0x20000824

08002aa8 <OS_Run>:

void OS_Run(void) {
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
    if (os_init_task) {
 8002aae:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <OS_Run+0x110>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d026      	beq.n	8002b04 <OS_Run+0x5c>
        uint32_t start = HAL_GetTick();
 8002ab6:	f000 f8e5 	bl	8002c84 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	613b      	str	r3, [r7, #16]
        os_init_task();
 8002abe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <OS_Run+0x110>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick_us() - start;
 8002ac4:	f7fe f840 	bl	8000b48 <HAL_GetTick_us>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	001a      	movs	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
        if (elapsed > os_init_max_time_ms) {
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <OS_Run+0x114>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <OS_Run+0x46>
            os_task_overrun_count[0]++;
 8002adc:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <OS_Run+0x118>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <OS_Run+0x118>)
 8002ae4:	601a      	str	r2, [r3, #0]
            os_task_overrun_time=elapsed;
 8002ae6:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <OS_Run+0x11c>)
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e00a      	b.n	8002b04 <OS_Run+0x5c>
        } else {
            while ((HAL_GetTick_us() - start) < os_init_max_time_ms) {}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	f7fe f82a 	bl	8000b48 <HAL_GetTick_us>
 8002af4:	0003      	movs	r3, r0
 8002af6:	001a      	movs	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad2      	subs	r2, r2, r3
 8002afc:	4b2f      	ldr	r3, [pc, #188]	@ (8002bbc <OS_Run+0x114>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3f5      	bcc.n	8002af0 <OS_Run+0x48>
        }
    }
    uint8_t i = 0;
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    while (1) {
        uint32_t start = HAL_GetTick_us();
 8002b0c:	f7fe f81c 	bl	8000b48 <HAL_GetTick_us>
 8002b10:	0003      	movs	r3, r0
 8002b12:	60bb      	str	r3, [r7, #8]
        os_tasks[i].task_func();
 8002b14:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc8 <OS_Run+0x120>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	2417      	movs	r4, #23
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	0013      	movs	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	18cb      	adds	r3, r1, r3
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick_us() - start;
 8002b2c:	f7fe f80c 	bl	8000b48 <HAL_GetTick_us>
 8002b30:	0003      	movs	r3, r0
 8002b32:	001a      	movs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	607b      	str	r3, [r7, #4]
        if (elapsed > os_tasks[i].max_time_ms) {
 8002b3a:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <OS_Run+0x120>)
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	0013      	movs	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	18cb      	adds	r3, r1, r3
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d90d      	bls.n	8002b70 <OS_Run+0xc8>
            os_task_overrun_count[i+1]++;
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <OS_Run+0x118>)
 8002b5c:	0099      	lsls	r1, r3, #2
 8002b5e:	588a      	ldr	r2, [r1, r2]
 8002b60:	1c51      	adds	r1, r2, #1
 8002b62:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <OS_Run+0x118>)
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	5099      	str	r1, [r3, r2]
            os_task_overrun_time=elapsed;
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <OS_Run+0x11c>)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e013      	b.n	8002b98 <OS_Run+0xf0>
        } else {
            while ((HAL_GetTick_us() - start) < os_tasks[i].max_time_ms) {}//bucla de asteptare pana la urmatorul task
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	f7fd ffe9 	bl	8000b48 <HAL_GetTick_us>
 8002b76:	0003      	movs	r3, r0
 8002b78:	001a      	movs	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad1      	subs	r1, r2, r3
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <OS_Run+0x120>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	2317      	movs	r3, #23
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	18c3      	adds	r3, r0, r3
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4299      	cmp	r1, r3
 8002b96:	d3ec      	bcc.n	8002b72 <OS_Run+0xca>
        }
        i++;
 8002b98:	2117      	movs	r1, #23
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	3201      	adds	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
        if (i >= os_num_tasks) i = 0;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <OS_Run+0x124>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	187a      	adds	r2, r7, r1
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3ad      	bcc.n	8002b0c <OS_Run+0x64>
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    while (1) {
 8002bb6:	e7a9      	b.n	8002b0c <OS_Run+0x64>
 8002bb8:	20000820 	.word	0x20000820
 8002bbc:	20000824 	.word	0x20000824
 8002bc0:	200005cc 	.word	0x200005cc
 8002bc4:	200005ec 	.word	0x200005ec
 8002bc8:	20000818 	.word	0x20000818
 8002bcc:	2000081c 	.word	0x2000081c

08002bd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <HAL_Init+0x24>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_Init+0x24>)
 8002bda:	2110      	movs	r1, #16
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f809 	bl	8002bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be6:	f7fd fe85 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <HAL_InitTick+0x5c>)
 8002c02:	681c      	ldr	r4, [r3, #0]
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_InitTick+0x60>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	0019      	movs	r1, r3
 8002c0a:	23fa      	movs	r3, #250	@ 0xfa
 8002c0c:	0098      	lsls	r0, r3, #2
 8002c0e:	f7fd fa79 	bl	8000104 <__udivsi3>
 8002c12:	0003      	movs	r3, r0
 8002c14:	0019      	movs	r1, r3
 8002c16:	0020      	movs	r0, r4
 8002c18:	f7fd fa74 	bl	8000104 <__udivsi3>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fd1f 	bl	8003662 <HAL_SYSTICK_Config>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00f      	b.n	8002c4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d80b      	bhi.n	8002c4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	2301      	movs	r3, #1
 8002c36:	425b      	negs	r3, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 fcec 	bl	8003618 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_InitTick+0x64>)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b003      	add	sp, #12
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000418 	.word	0x20000418
 8002c5c:	20000414 	.word	0x20000414

08002c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_IncTick+0x1c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	001a      	movs	r2, r3
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_IncTick+0x20>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	18d2      	adds	r2, r2, r3
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_IncTick+0x20>)
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	20000418 	.word	0x20000418
 8002c80:	20000828 	.word	0x20000828

08002c84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b02      	ldr	r3, [pc, #8]	@ (8002c94 <HAL_GetTick+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	20000828 	.word	0x20000828

08002c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fff0 	bl	8002c84 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	d005      	beq.n	8002cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_Delay+0x44>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	f7ff ffe0 	bl	8002c84 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d8f7      	bhi.n	8002cc0 <HAL_Delay+0x28>
  {
  }
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	20000418 	.word	0x20000418

08002ce0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce8:	230f      	movs	r3, #15
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e125      	b.n	8002f4a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2234      	movs	r2, #52	@ 0x34
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f7fd fbfc 	bl	8000514 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d000      	beq.n	8002d28 <HAL_ADC_Init+0x48>
 8002d26:	e103      	b.n	8002f30 <HAL_ADC_Init+0x250>
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d000      	beq.n	8002d34 <HAL_ADC_Init+0x54>
 8002d32:	e0fd      	b.n	8002f30 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d3e:	d000      	beq.n	8002d42 <HAL_ADC_Init+0x62>
 8002d40:	e0f6      	b.n	8002f30 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	4a83      	ldr	r2, [pc, #524]	@ (8002f54 <HAL_ADC_Init+0x274>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d112      	bne.n	8002d86 <HAL_ADC_Init+0xa6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d009      	beq.n	8002d82 <HAL_ADC_Init+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	401a      	ands	r2, r3
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_Init+0xa6>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_Init+0xa8>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2218      	movs	r2, #24
 8002d94:	4393      	bics	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	0899      	lsrs	r1, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4964      	ldr	r1, [pc, #400]	@ (8002f58 <HAL_ADC_Init+0x278>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7e1b      	ldrb	r3, [r3, #24]
 8002dce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7e5b      	ldrb	r3, [r3, #25]
 8002dd4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7e9b      	ldrb	r3, [r3, #26]
 8002ddc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dde:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <HAL_ADC_Init+0x10e>
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	015b      	lsls	r3, r3, #5
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_Init+0x110>
 8002dee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002df0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002df6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_Init+0x124>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_Init+0x126>
 8002e04:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002e06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2124      	movs	r1, #36	@ 0x24
 8002e0c:	5c5b      	ldrb	r3, [r3, r1]
 8002e0e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7edb      	ldrb	r3, [r3, #27]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7e9b      	ldrb	r3, [r3, #26]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	0252      	lsls	r2, r2, #9
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	2220      	movs	r2, #32
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	2201      	movs	r2, #1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	23c2      	movs	r3, #194	@ 0xc2
 8002e52:	33ff      	adds	r3, #255	@ 0xff
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d007      	beq.n	8002e68 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e60:	4313      	orrs	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	055b      	lsls	r3, r3, #21
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d01b      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d017      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d013      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d00f      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00b      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d007      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d003      	beq.n	8002ebc <HAL_ADC_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d112      	bne.n	8002ee2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2107      	movs	r1, #7
 8002ec8:	438a      	bics	r2, r1
 8002eca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6959      	ldr	r1, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <HAL_ADC_Init+0x27c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efc:	2203      	movs	r2, #3
 8002efe:	4393      	bics	r3, r2
 8002f00:	2201      	movs	r2, #1
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f08:	e01c      	b.n	8002f44 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	2212      	movs	r2, #18
 8002f10:	4393      	bics	r3, r2
 8002f12:	2210      	movs	r2, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f26:	230f      	movs	r3, #15
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f2e:	e009      	b.n	8002f44 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	2210      	movs	r2, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f44:	230f      	movs	r3, #15
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	781b      	ldrb	r3, [r3, #0]
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	fffffefd 	.word	0xfffffefd
 8002f58:	fffe0219 	.word	0xfffe0219
 8002f5c:	833fffe7 	.word	0x833fffe7

08002f60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6c:	2317      	movs	r3, #23
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d15e      	bne.n	800303e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2234      	movs	r2, #52	@ 0x34
 8002f84:	5c9b      	ldrb	r3, [r3, r2]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Start_DMA+0x2e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e05e      	b.n	800304c <HAL_ADC_Start_DMA+0xec>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2234      	movs	r2, #52	@ 0x34
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	7e5b      	ldrb	r3, [r3, #25]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d007      	beq.n	8002fae <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f9e:	2317      	movs	r3, #23
 8002fa0:	18fc      	adds	r4, r7, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f983 	bl	80032b0 <ADC_Enable>
 8002faa:	0003      	movs	r3, r0
 8002fac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fae:	2317      	movs	r3, #23
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d146      	bne.n	8003046 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	4a25      	ldr	r2, [pc, #148]	@ (8003054 <HAL_ADC_Start_DMA+0xf4>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	0052      	lsls	r2, r2, #1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2234      	movs	r2, #52	@ 0x34
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_ADC_Start_DMA+0xf8>)
 8002fde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800305c <HAL_ADC_Start_DMA+0xfc>)
 8002fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_ADC_Start_DMA+0x100>)
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	221c      	movs	r2, #28
 8002ff6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2110      	movs	r1, #16
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3340      	adds	r3, #64	@ 0x40
 8003022:	0019      	movs	r1, r3
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f000 fb70 	bl	800370c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2104      	movs	r1, #4
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e003      	b.n	8003046 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800303e:	2317      	movs	r3, #23
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2202      	movs	r2, #2
 8003044:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003046:	2317      	movs	r3, #23
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	781b      	ldrb	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b007      	add	sp, #28
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	fffff0fe 	.word	0xfffff0fe
 8003058:	080033b9 	.word	0x080033b9
 800305c:	0800346d 	.word	0x0800346d
 8003060:	0800348b 	.word	0x0800348b

08003064 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309e:	230f      	movs	r3, #15
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	055b      	lsls	r3, r3, #21
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d011      	beq.n	80030da <HAL_ADC_ConfigChannel+0x46>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d00d      	beq.n	80030da <HAL_ADC_ConfigChannel+0x46>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d009      	beq.n	80030da <HAL_ADC_ConfigChannel+0x46>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d005      	beq.n	80030da <HAL_ADC_ConfigChannel+0x46>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d001      	beq.n	80030da <HAL_ADC_ConfigChannel+0x46>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2234      	movs	r2, #52	@ 0x34
 80030de:	5c9b      	ldrb	r3, [r3, r2]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x54>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0d0      	b.n	800328a <HAL_ADC_ConfigChannel+0x1f6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2234      	movs	r2, #52	@ 0x34
 80030ec:	2101      	movs	r1, #1
 80030ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	d000      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x6a>
 80030fc:	e0b4      	b.n	8003268 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a64      	ldr	r2, [pc, #400]	@ (8003294 <HAL_ADC_ConfigChannel+0x200>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d100      	bne.n	800310a <HAL_ADC_ConfigChannel+0x76>
 8003108:	e082      	b.n	8003210 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	055b      	lsls	r3, r3, #21
 8003128:	429a      	cmp	r2, r3
 800312a:	d037      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d033      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	2b02      	cmp	r3, #2
 800313a:	d02f      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	2b03      	cmp	r3, #3
 8003142:	d02b      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	2b04      	cmp	r3, #4
 800314a:	d027      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	2b05      	cmp	r3, #5
 8003152:	d023      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	2b06      	cmp	r3, #6
 800315a:	d01f      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	2b07      	cmp	r3, #7
 8003162:	d01b      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2107      	movs	r1, #7
 8003170:	400b      	ands	r3, r1
 8003172:	429a      	cmp	r2, r3
 8003174:	d012      	beq.n	800319c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2107      	movs	r1, #7
 8003182:	438a      	bics	r2, r1
 8003184:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6959      	ldr	r1, [r3, #20]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2207      	movs	r2, #7
 8003192:	401a      	ands	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d007      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x120>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b11      	cmp	r3, #17
 80031aa:	d003      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x120>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d163      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80031b4:	4b38      	ldr	r3, [pc, #224]	@ (8003298 <HAL_ADC_ConfigChannel+0x204>)
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d009      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x140>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b11      	cmp	r3, #17
 80031c6:	d102      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x13a>
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	03db      	lsls	r3, r3, #15
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x144>
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	e001      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x144>
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <HAL_ADC_ConfigChannel+0x204>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d14a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031e6:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_ADC_ConfigChannel+0x208>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	492d      	ldr	r1, [pc, #180]	@ (80032a0 <HAL_ADC_ConfigChannel+0x20c>)
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fc ff89 	bl	8000104 <__udivsi3>
 80031f2:	0003      	movs	r3, r0
 80031f4:	001a      	movs	r2, r3
 80031f6:	0013      	movs	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003200:	e002      	b.n	8003208 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x16e>
 800320e:	e035      	b.n	800327c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	4099      	lsls	r1, r3
 800321e:	000b      	movs	r3, r1
 8003220:	43d9      	mvns	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	400a      	ands	r2, r1
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d007      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x1ae>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b11      	cmp	r3, #17
 8003238:	d003      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x1ae>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b12      	cmp	r3, #18
 8003240:	d11c      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_ADC_ConfigChannel+0x204>)
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d007      	beq.n	800325e <HAL_ADC_ConfigChannel+0x1ca>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b11      	cmp	r3, #17
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x1c6>
 8003256:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_ADC_ConfigChannel+0x210>)
 8003258:	e002      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1cc>
 800325a:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_ADC_ConfigChannel+0x214>)
 800325c:	e000      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1cc>
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_ADC_ConfigChannel+0x218>)
 8003260:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <HAL_ADC_ConfigChannel+0x204>)
 8003262:	400b      	ands	r3, r1
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e009      	b.n	800327c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	2220      	movs	r2, #32
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003274:	230f      	movs	r3, #15
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2234      	movs	r2, #52	@ 0x34
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003284:	230f      	movs	r3, #15
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	781b      	ldrb	r3, [r3, #0]
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b004      	add	sp, #16
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	00001001 	.word	0x00001001
 8003298:	40012708 	.word	0x40012708
 800329c:	20000000 	.word	0x20000000
 80032a0:	000f4240 	.word	0x000f4240
 80032a4:	ffbfffff 	.word	0xffbfffff
 80032a8:	feffffff 	.word	0xfeffffff
 80032ac:	ff7fffff 	.word	0xff7fffff

080032b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2203      	movs	r2, #3
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d112      	bne.n	80032f4 <ADC_Enable+0x44>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d009      	beq.n	80032f0 <ADC_Enable+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	401a      	ands	r2, r3
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d101      	bne.n	80032f4 <ADC_Enable+0x44>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <ADC_Enable+0x46>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d152      	bne.n	80033a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a2a      	ldr	r2, [pc, #168]	@ (80033ac <ADC_Enable+0xfc>)
 8003302:	4013      	ands	r3, r2
 8003304:	d00d      	beq.n	8003322 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	2210      	movs	r2, #16
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	2201      	movs	r2, #1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e03f      	b.n	80033a2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <ADC_Enable+0x100>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	491f      	ldr	r1, [pc, #124]	@ (80033b4 <ADC_Enable+0x104>)
 8003338:	0018      	movs	r0, r3
 800333a:	f7fc fee3 	bl	8000104 <__udivsi3>
 800333e:	0003      	movs	r3, r0
 8003340:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003342:	e002      	b.n	800334a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3b01      	subs	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f9      	bne.n	8003344 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003350:	f7ff fc98 	bl	8002c84 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003358:	e01b      	b.n	8003392 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800335a:	f7ff fc93 	bl	8002c84 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d914      	bls.n	8003392 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	2b01      	cmp	r3, #1
 8003374:	d00d      	beq.n	8003392 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	2210      	movs	r2, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	2201      	movs	r2, #1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2201      	movs	r2, #1
 800339a:	4013      	ands	r3, r2
 800339c:	2b01      	cmp	r3, #1
 800339e:	d1dc      	bne.n	800335a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	80000017 	.word	0x80000017
 80033b0:	20000000 	.word	0x20000000
 80033b4:	000f4240 	.word	0x000f4240

080033b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	2250      	movs	r2, #80	@ 0x50
 80033cc:	4013      	ands	r3, r2
 80033ce:	d140      	bne.n	8003452 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4013      	ands	r3, r2
 80033ea:	d12d      	bne.n	8003448 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d129      	bne.n	8003448 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2208      	movs	r2, #8
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d122      	bne.n	8003448 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2204      	movs	r2, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d110      	bne.n	8003430 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	210c      	movs	r1, #12
 800341a:	438a      	bics	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	4a11      	ldr	r2, [pc, #68]	@ (8003468 <ADC_DMAConvCplt+0xb0>)
 8003424:	4013      	ands	r3, r2
 8003426:	2201      	movs	r2, #1
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
 800342e:	e00b      	b.n	8003448 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	2220      	movs	r2, #32
 8003436:	431a      	orrs	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	2201      	movs	r2, #1
 8003442:	431a      	orrs	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff fe0a 	bl	8003064 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003450:	e005      	b.n	800345e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	0010      	movs	r0, r2
 800345c:	4798      	blx	r3
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	fffffefe 	.word	0xfffffefe

0800346c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fdf9 	bl	8003074 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}

0800348a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	431a      	orrs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	2204      	movs	r2, #4
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fde6 	bl	8003084 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	0002      	movs	r2, r0
 80034c8:	1dfb      	adds	r3, r7, #7
 80034ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80034d2:	d809      	bhi.n	80034e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	001a      	movs	r2, r3
 80034da:	231f      	movs	r3, #31
 80034dc:	401a      	ands	r2, r3
 80034de:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <__NVIC_EnableIRQ+0x30>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	4091      	lsls	r1, r2
 80034e4:	000a      	movs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
  }
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	0002      	movs	r2, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b7f      	cmp	r3, #127	@ 0x7f
 8003508:	d828      	bhi.n	800355c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800350a:	4a2f      	ldr	r2, [pc, #188]	@ (80035c8 <__NVIC_SetPriority+0xd4>)
 800350c:	1dfb      	adds	r3, r7, #7
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b25b      	sxtb	r3, r3
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	33c0      	adds	r3, #192	@ 0xc0
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	589b      	ldr	r3, [r3, r2]
 800351a:	1dfa      	adds	r2, r7, #7
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	0011      	movs	r1, r2
 8003520:	2203      	movs	r2, #3
 8003522:	400a      	ands	r2, r1
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	21ff      	movs	r1, #255	@ 0xff
 8003528:	4091      	lsls	r1, r2
 800352a:	000a      	movs	r2, r1
 800352c:	43d2      	mvns	r2, r2
 800352e:	401a      	ands	r2, r3
 8003530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	401a      	ands	r2, r3
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	0018      	movs	r0, r3
 8003540:	2303      	movs	r3, #3
 8003542:	4003      	ands	r3, r0
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003548:	481f      	ldr	r0, [pc, #124]	@ (80035c8 <__NVIC_SetPriority+0xd4>)
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	430a      	orrs	r2, r1
 8003554:	33c0      	adds	r3, #192	@ 0xc0
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800355a:	e031      	b.n	80035c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800355c:	4a1b      	ldr	r2, [pc, #108]	@ (80035cc <__NVIC_SetPriority+0xd8>)
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	0019      	movs	r1, r3
 8003564:	230f      	movs	r3, #15
 8003566:	400b      	ands	r3, r1
 8003568:	3b08      	subs	r3, #8
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	3306      	adds	r3, #6
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	18d3      	adds	r3, r2, r3
 8003572:	3304      	adds	r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1dfa      	adds	r2, r7, #7
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	0011      	movs	r1, r2
 800357c:	2203      	movs	r2, #3
 800357e:	400a      	ands	r2, r1
 8003580:	00d2      	lsls	r2, r2, #3
 8003582:	21ff      	movs	r1, #255	@ 0xff
 8003584:	4091      	lsls	r1, r2
 8003586:	000a      	movs	r2, r1
 8003588:	43d2      	mvns	r2, r2
 800358a:	401a      	ands	r2, r3
 800358c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	22ff      	movs	r2, #255	@ 0xff
 8003594:	401a      	ands	r2, r3
 8003596:	1dfb      	adds	r3, r7, #7
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	0018      	movs	r0, r3
 800359c:	2303      	movs	r3, #3
 800359e:	4003      	ands	r3, r0
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a4:	4809      	ldr	r0, [pc, #36]	@ (80035cc <__NVIC_SetPriority+0xd8>)
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	001c      	movs	r4, r3
 80035ac:	230f      	movs	r3, #15
 80035ae:	4023      	ands	r3, r4
 80035b0:	3b08      	subs	r3, #8
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	430a      	orrs	r2, r1
 80035b6:	3306      	adds	r3, #6
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	18c3      	adds	r3, r0, r3
 80035bc:	3304      	adds	r3, #4
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b003      	add	sp, #12
 80035c6:	bd90      	pop	{r4, r7, pc}
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	045b      	lsls	r3, r3, #17
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d301      	bcc.n	80035e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e4:	2301      	movs	r3, #1
 80035e6:	e010      	b.n	800360a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <SysTick_Config+0x44>)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	3a01      	subs	r2, #1
 80035ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f0:	2301      	movs	r3, #1
 80035f2:	425b      	negs	r3, r3
 80035f4:	2103      	movs	r1, #3
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff7c 	bl	80034f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <SysTick_Config+0x44>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003602:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <SysTick_Config+0x44>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	e000e010 	.word	0xe000e010

08003618 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	210f      	movs	r1, #15
 8003624:	187b      	adds	r3, r7, r1
 8003626:	1c02      	adds	r2, r0, #0
 8003628:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	187b      	adds	r3, r7, r1
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff ff5d 	bl	80034f4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	0002      	movs	r2, r0
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b25b      	sxtb	r3, r3
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff ff33 	bl	80034c0 <__NVIC_EnableIRQ>
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff ffaf 	bl	80035d0 <SysTick_Config>
 8003672:	0003      	movs	r3, r0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e036      	b.n	8003700 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2221      	movs	r2, #33	@ 0x21
 8003696:	2102      	movs	r1, #2
 8003698:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a18      	ldr	r2, [pc, #96]	@ (8003708 <HAL_DMA_Init+0x8c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f946 	bl	8003974 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2221      	movs	r2, #33	@ 0x21
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	ffffc00f 	.word	0xffffc00f

0800370c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2317      	movs	r3, #23
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Start_IT+0x24>
 800372c:	2302      	movs	r3, #2
 800372e:	e04f      	b.n	80037d0 <HAL_DMA_Start_IT+0xc4>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2221      	movs	r2, #33	@ 0x21
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d13a      	bne.n	80037ba <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2221      	movs	r2, #33	@ 0x21
 8003748:	2102      	movs	r1, #2
 800374a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8d7 	bl	800391c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	210e      	movs	r1, #14
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00f      	b.n	80037a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	210a      	movs	r1, #10
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2104      	movs	r1, #4
 80037a4:	438a      	bics	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2101      	movs	r1, #1
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c2:	2317      	movs	r3, #23
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2202      	movs	r2, #2
 80037c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80037ca:	2317      	movs	r3, #23
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	2204      	movs	r2, #4
 80037f6:	409a      	lsls	r2, r3
 80037f8:	0013      	movs	r3, r2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	d024      	beq.n	800384a <HAL_DMA_IRQHandler+0x72>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2204      	movs	r2, #4
 8003804:	4013      	ands	r3, r2
 8003806:	d020      	beq.n	800384a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	d107      	bne.n	8003824 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2104      	movs	r1, #4
 8003820:	438a      	bics	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	2104      	movs	r1, #4
 800382e:	4091      	lsls	r1, r2
 8003830:	000a      	movs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d100      	bne.n	800383e <HAL_DMA_IRQHandler+0x66>
 800383c:	e06a      	b.n	8003914 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	0010      	movs	r0, r2
 8003846:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003848:	e064      	b.n	8003914 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2202      	movs	r2, #2
 8003850:	409a      	lsls	r2, r3
 8003852:	0013      	movs	r3, r2
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	d02b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xda>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2202      	movs	r2, #2
 800385e:	4013      	ands	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2220      	movs	r2, #32
 800386a:	4013      	ands	r3, r2
 800386c:	d10b      	bne.n	8003886 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	210a      	movs	r1, #10
 800387a:	438a      	bics	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2221      	movs	r2, #33	@ 0x21
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	2102      	movs	r1, #2
 8003890:	4091      	lsls	r1, r2
 8003892:	000a      	movs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d036      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	0010      	movs	r0, r2
 80038ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038b0:	e030      	b.n	8003914 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2208      	movs	r2, #8
 80038b8:	409a      	lsls	r2, r3
 80038ba:	0013      	movs	r3, r2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	d028      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13c>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2208      	movs	r2, #8
 80038c6:	4013      	ands	r3, r2
 80038c8:	d024      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	210e      	movs	r1, #14
 80038d6:	438a      	bics	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e2:	2101      	movs	r1, #1
 80038e4:	4091      	lsls	r1, r2
 80038e6:	000a      	movs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2221      	movs	r2, #33	@ 0x21
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	0010      	movs	r0, r2
 8003910:	4798      	blx	r3
    }
  }
}
 8003912:	e7ff      	b.n	8003914 <HAL_DMA_IRQHandler+0x13c>
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}

0800391c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003932:	2101      	movs	r1, #1
 8003934:	4091      	lsls	r1, r2
 8003936:	000a      	movs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b10      	cmp	r3, #16
 8003948:	d108      	bne.n	800395c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800395a:	e007      	b.n	800396c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b004      	add	sp, #16
 8003972:	bd80      	pop	{r7, pc}

08003974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	001a      	movs	r2, r3
 8003982:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d810      	bhi.n	80039aa <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a12      	ldr	r2, [pc, #72]	@ (80039d8 <DMA_CalcBaseAndBitshift+0x64>)
 800398e:	4694      	mov	ip, r2
 8003990:	4463      	add	r3, ip
 8003992:	2114      	movs	r1, #20
 8003994:	0018      	movs	r0, r3
 8003996:	f7fc fbb5 	bl	8000104 <__udivsi3>
 800399a:	0003      	movs	r3, r0
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	@ (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80039a8:	e00f      	b.n	80039ca <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0c      	ldr	r2, [pc, #48]	@ (80039e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80039b0:	4694      	mov	ip, r2
 80039b2:	4463      	add	r3, ip
 80039b4:	2114      	movs	r1, #20
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fc fba4 	bl	8000104 <__udivsi3>
 80039bc:	0003      	movs	r3, r0
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a07      	ldr	r2, [pc, #28]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x70>)
 80039c8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	40020407 	.word	0x40020407
 80039d8:	bffdfff8 	.word	0xbffdfff8
 80039dc:	40020000 	.word	0x40020000
 80039e0:	bffdfbf8 	.word	0xbffdfbf8
 80039e4:	40020400 	.word	0x40020400

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e155      	b.n	8003ca4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4091      	lsls	r1, r2
 8003a02:	000a      	movs	r2, r1
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d100      	bne.n	8003a10 <HAL_GPIO_Init+0x28>
 8003a0e:	e146      	b.n	8003c9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d005      	beq.n	8003a28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d130      	bne.n	8003a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	409a      	lsls	r2, r3
 8003a36:	0013      	movs	r3, r2
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a5e:	2201      	movs	r2, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	43da      	mvns	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	2201      	movs	r2, #1
 8003a76:	401a      	ands	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d017      	beq.n	8003ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2203      	movs	r2, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d123      	bne.n	8003b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	58d3      	ldr	r3, [r2, r3]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	43da      	mvns	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2107      	movs	r1, #7
 8003afe:	400b      	ands	r3, r1
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	6939      	ldr	r1, [r7, #16]
 8003b18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2203      	movs	r2, #3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	23c0      	movs	r3, #192	@ 0xc0
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	4013      	ands	r3, r2
 8003b58:	d100      	bne.n	8003b5c <HAL_GPIO_Init+0x174>
 8003b5a:	e0a0      	b.n	8003c9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5c:	4b57      	ldr	r3, [pc, #348]	@ (8003cbc <HAL_GPIO_Init+0x2d4>)
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	4b56      	ldr	r3, [pc, #344]	@ (8003cbc <HAL_GPIO_Init+0x2d4>)
 8003b62:	2101      	movs	r1, #1
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	4b54      	ldr	r3, [pc, #336]	@ (8003cbc <HAL_GPIO_Init+0x2d4>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b74:	4a52      	ldr	r2, [pc, #328]	@ (8003cc0 <HAL_GPIO_Init+0x2d8>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	589b      	ldr	r3, [r3, r2]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2203      	movs	r2, #3
 8003b86:	4013      	ands	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	0013      	movs	r3, r2
 8003b90:	43da      	mvns	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	2390      	movs	r3, #144	@ 0x90
 8003b9c:	05db      	lsls	r3, r3, #23
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d019      	beq.n	8003bd6 <HAL_GPIO_Init+0x1ee>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a47      	ldr	r2, [pc, #284]	@ (8003cc4 <HAL_GPIO_Init+0x2dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_GPIO_Init+0x1ea>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a46      	ldr	r2, [pc, #280]	@ (8003cc8 <HAL_GPIO_Init+0x2e0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00d      	beq.n	8003bce <HAL_GPIO_Init+0x1e6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	@ (8003ccc <HAL_GPIO_Init+0x2e4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x1e2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a44      	ldr	r2, [pc, #272]	@ (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_GPIO_Init+0x1de>
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	e008      	b.n	8003bd8 <HAL_GPIO_Init+0x1f0>
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x1f0>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e004      	b.n	8003bd8 <HAL_GPIO_Init+0x1f0>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e002      	b.n	8003bd8 <HAL_GPIO_Init+0x1f0>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_GPIO_Init+0x1f0>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	2103      	movs	r1, #3
 8003bdc:	400a      	ands	r2, r1
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4093      	lsls	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003be8:	4935      	ldr	r1, [pc, #212]	@ (8003cc0 <HAL_GPIO_Init+0x2d8>)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	3302      	adds	r3, #2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf6:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	035b      	lsls	r3, r3, #13
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c20:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	039b      	lsls	r3, r3, #14
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c44:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	029b      	lsls	r3, r3, #10
 8003c62:	4013      	ands	r3, r2
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003c74:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c98:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	40da      	lsrs	r2, r3
 8003cac:	1e13      	subs	r3, r2, #0
 8003cae:	d000      	beq.n	8003cb2 <HAL_GPIO_Init+0x2ca>
 8003cb0:	e6a2      	b.n	80039f8 <HAL_GPIO_Init+0x10>
  } 
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b006      	add	sp, #24
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	48000400 	.word	0x48000400
 8003cc8:	48000800 	.word	0x48000800
 8003ccc:	48000c00 	.word	0x48000c00
 8003cd0:	48001000 	.word	0x48001000
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	1cbb      	adds	r3, r7, #2
 8003ce6:	1c02      	adds	r2, r0, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	1c7b      	adds	r3, r7, #1
 8003cec:	1c0a      	adds	r2, r1, #0
 8003cee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf0:	1c7b      	adds	r3, r7, #1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cf8:	1cbb      	adds	r3, r7, #2
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d02:	1cbb      	adds	r3, r7, #2
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f000 fb76 	bl	8004414 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d100      	bne.n	8003d34 <HAL_RCC_OscConfig+0x20>
 8003d32:	e08e      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d34:	4bc5      	ldr	r3, [pc, #788]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	220c      	movs	r2, #12
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00e      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d40:	4bc2      	ldr	r3, [pc, #776]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	220c      	movs	r2, #12
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d117      	bne.n	8003d7c <HAL_RCC_OscConfig+0x68>
 8003d4c:	4bbf      	ldr	r3, [pc, #764]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	23c0      	movs	r3, #192	@ 0xc0
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	401a      	ands	r2, r3
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	025b      	lsls	r3, r3, #9
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10e      	bne.n	8003d7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4bbb      	ldr	r3, [pc, #748]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4013      	ands	r3, r2
 8003d68:	d100      	bne.n	8003d6c <HAL_RCC_OscConfig+0x58>
 8003d6a:	e071      	b.n	8003e50 <HAL_RCC_OscConfig+0x13c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d000      	beq.n	8003d76 <HAL_RCC_OscConfig+0x62>
 8003d74:	e06c      	b.n	8003e50 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f000 fb4c 	bl	8004414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x80>
 8003d84:	4bb1      	ldr	r3, [pc, #708]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4bb0      	ldr	r3, [pc, #704]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d8a:	2180      	movs	r1, #128	@ 0x80
 8003d8c:	0249      	lsls	r1, r1, #9
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e02f      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0xa2>
 8003d9c:	4bab      	ldr	r3, [pc, #684]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4baa      	ldr	r3, [pc, #680]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003da2:	49ab      	ldr	r1, [pc, #684]	@ (8004050 <HAL_RCC_OscConfig+0x33c>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4ba8      	ldr	r3, [pc, #672]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4ba7      	ldr	r3, [pc, #668]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dae:	49a9      	ldr	r1, [pc, #676]	@ (8004054 <HAL_RCC_OscConfig+0x340>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e01e      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10e      	bne.n	8003ddc <HAL_RCC_OscConfig+0xc8>
 8003dbe:	4ba3      	ldr	r3, [pc, #652]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4ba2      	ldr	r3, [pc, #648]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dc4:	2180      	movs	r1, #128	@ 0x80
 8003dc6:	02c9      	lsls	r1, r1, #11
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4b9f      	ldr	r3, [pc, #636]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b9e      	ldr	r3, [pc, #632]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dd2:	2180      	movs	r1, #128	@ 0x80
 8003dd4:	0249      	lsls	r1, r1, #9
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xe0>
 8003ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b9a      	ldr	r3, [pc, #616]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003de2:	499b      	ldr	r1, [pc, #620]	@ (8004050 <HAL_RCC_OscConfig+0x33c>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	4b98      	ldr	r3, [pc, #608]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b97      	ldr	r3, [pc, #604]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003dee:	4999      	ldr	r1, [pc, #612]	@ (8004054 <HAL_RCC_OscConfig+0x340>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d014      	beq.n	8003e26 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe ff42 	bl	8002c84 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e06:	f7fe ff3d 	bl	8002c84 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	@ 0x64
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e2fd      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	4b8c      	ldr	r3, [pc, #560]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	4013      	ands	r3, r2
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0xf2>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe ff2d 	bl	8002c84 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe ff28 	bl	8002c84 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e2e8      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b82      	ldr	r3, [pc, #520]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x11c>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <HAL_RCC_OscConfig+0x14a>
 8003e5c:	e06c      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	220c      	movs	r2, #12
 8003e64:	4013      	ands	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e68:	4b78      	ldr	r3, [pc, #480]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d11f      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1a0>
 8003e74:	4b75      	ldr	r3, [pc, #468]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	23c0      	movs	r3, #192	@ 0xc0
 8003e7a:	025b      	lsls	r3, r3, #9
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	4b71      	ldr	r3, [pc, #452]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x188>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e2bb      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	22f8      	movs	r2, #248	@ 0xf8
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	4b67      	ldr	r3, [pc, #412]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e041      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d024      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebc:	4b63      	ldr	r3, [pc, #396]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b62      	ldr	r3, [pc, #392]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fedc 	bl	8002c84 <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fed7 	bl	8002c84 <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e297      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	d0f1      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b57      	ldr	r3, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	22f8      	movs	r2, #248	@ 0xf8
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00da      	lsls	r2, r3, #3
 8003efe:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e018      	b.n	8003f38 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b51      	ldr	r3, [pc, #324]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	438a      	bics	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fe feb7 	bl	8002c84 <HAL_GetTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fe feb2 	bl	8002c84 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e272      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f1      	bne.n	8003f1c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b40      	ldr	r3, [pc, #256]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f50:	2101      	movs	r1, #1
 8003f52:	430a      	orrs	r2, r1
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fe fe95 	bl	8002c84 <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fe fe90 	bl	8002c84 <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e250      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d0f1      	beq.n	8003f60 <HAL_RCC_OscConfig+0x24c>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7e:	4b33      	ldr	r3, [pc, #204]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f82:	4b32      	ldr	r3, [pc, #200]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	438a      	bics	r2, r1
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fe7b 	bl	8002c84 <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fe fe76 	bl	8002c84 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e236      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa6:	4b29      	ldr	r3, [pc, #164]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d1f1      	bne.n	8003f94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d100      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2a8>
 8003fba:	e0b5      	b.n	8004128 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbc:	201f      	movs	r0, #31
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc4:	4b21      	ldr	r3, [pc, #132]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	055b      	lsls	r3, r3, #21
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d110      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	0549      	lsls	r1, r1, #21
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_RCC_OscConfig+0x344>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d11a      	bne.n	8004034 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffe:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <HAL_RCC_OscConfig+0x344>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <HAL_RCC_OscConfig+0x344>)
 8004004:	2180      	movs	r1, #128	@ 0x80
 8004006:	0049      	lsls	r1, r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400c:	f7fe fe3a 	bl	8002c84 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fe fe35 	bl	8002c84 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b64      	cmp	r3, #100	@ 0x64
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1f5      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_RCC_OscConfig+0x344>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	@ 0x80
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4013      	ands	r3, r2
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10f      	bne.n	800405c <HAL_RCC_OscConfig+0x348>
 800403c:	4b03      	ldr	r3, [pc, #12]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	4b02      	ldr	r3, [pc, #8]	@ (800404c <HAL_RCC_OscConfig+0x338>)
 8004042:	2101      	movs	r1, #1
 8004044:	430a      	orrs	r2, r1
 8004046:	621a      	str	r2, [r3, #32]
 8004048:	e036      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	40021000 	.word	0x40021000
 8004050:	fffeffff 	.word	0xfffeffff
 8004054:	fffbffff 	.word	0xfffbffff
 8004058:	40007000 	.word	0x40007000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x36a>
 8004064:	4bca      	ldr	r3, [pc, #808]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	4bc9      	ldr	r3, [pc, #804]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800406a:	2101      	movs	r1, #1
 800406c:	438a      	bics	r2, r1
 800406e:	621a      	str	r2, [r3, #32]
 8004070:	4bc7      	ldr	r3, [pc, #796]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	4bc6      	ldr	r3, [pc, #792]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004076:	2104      	movs	r1, #4
 8004078:	438a      	bics	r2, r1
 800407a:	621a      	str	r2, [r3, #32]
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x38c>
 8004086:	4bc2      	ldr	r3, [pc, #776]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	4bc1      	ldr	r3, [pc, #772]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800408c:	2104      	movs	r1, #4
 800408e:	430a      	orrs	r2, r1
 8004090:	621a      	str	r2, [r3, #32]
 8004092:	4bbf      	ldr	r3, [pc, #764]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	4bbe      	ldr	r3, [pc, #760]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004098:	2101      	movs	r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	621a      	str	r2, [r3, #32]
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0x3a4>
 80040a0:	4bbb      	ldr	r3, [pc, #748]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	4bba      	ldr	r3, [pc, #744]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	438a      	bics	r2, r1
 80040aa:	621a      	str	r2, [r3, #32]
 80040ac:	4bb8      	ldr	r3, [pc, #736]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	4bb7      	ldr	r3, [pc, #732]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040b2:	2104      	movs	r1, #4
 80040b4:	438a      	bics	r2, r1
 80040b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d014      	beq.n	80040ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7fe fde0 	bl	8002c84 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e009      	b.n	80040de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fe fddb 	bl	8002c84 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4aaf      	ldr	r2, [pc, #700]	@ (8004394 <HAL_RCC_OscConfig+0x680>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e19a      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	4bac      	ldr	r3, [pc, #688]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x3b6>
 80040e8:	e013      	b.n	8004112 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe fdcb 	bl	8002c84 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	e009      	b.n	8004108 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe fdc6 	bl	8002c84 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004394 <HAL_RCC_OscConfig+0x680>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e185      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	4ba1      	ldr	r3, [pc, #644]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004112:	231f      	movs	r3, #31
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411c:	4b9c      	ldr	r3, [pc, #624]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	4b9b      	ldr	r3, [pc, #620]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004122:	499d      	ldr	r1, [pc, #628]	@ (8004398 <HAL_RCC_OscConfig+0x684>)
 8004124:	400a      	ands	r2, r1
 8004126:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2210      	movs	r2, #16
 800412e:	4013      	ands	r3, r2
 8004130:	d063      	beq.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d12a      	bne.n	8004190 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800413a:	4b95      	ldr	r3, [pc, #596]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800413c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800413e:	4b94      	ldr	r3, [pc, #592]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004140:	2104      	movs	r1, #4
 8004142:	430a      	orrs	r2, r1
 8004144:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004146:	4b92      	ldr	r3, [pc, #584]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414a:	4b91      	ldr	r3, [pc, #580]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800414c:	2101      	movs	r1, #1
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fe fd97 	bl	8002c84 <HAL_GetTick>
 8004156:	0003      	movs	r3, r0
 8004158:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800415c:	f7fe fd92 	bl	8002c84 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e152      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800416e:	4b88      	ldr	r3, [pc, #544]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004172:	2202      	movs	r2, #2
 8004174:	4013      	ands	r3, r2
 8004176:	d0f1      	beq.n	800415c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004178:	4b85      	ldr	r3, [pc, #532]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	22f8      	movs	r2, #248	@ 0xf8
 800417e:	4393      	bics	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	00da      	lsls	r2, r3, #3
 8004188:	4b81      	ldr	r3, [pc, #516]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800418a:	430a      	orrs	r2, r1
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34
 800418e:	e034      	b.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	3305      	adds	r3, #5
 8004196:	d111      	bne.n	80041bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004198:	4b7d      	ldr	r3, [pc, #500]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800419a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419c:	4b7c      	ldr	r3, [pc, #496]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041a4:	4b7a      	ldr	r3, [pc, #488]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	22f8      	movs	r2, #248	@ 0xf8
 80041aa:	4393      	bics	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	00da      	lsls	r2, r3, #3
 80041b4:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ba:	e01e      	b.n	80041fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041bc:	4b74      	ldr	r3, [pc, #464]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041c0:	4b73      	ldr	r3, [pc, #460]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	2104      	movs	r1, #4
 80041c4:	430a      	orrs	r2, r1
 80041c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041c8:	4b71      	ldr	r3, [pc, #452]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041cc:	4b70      	ldr	r3, [pc, #448]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	438a      	bics	r2, r1
 80041d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d4:	f7fe fd56 	bl	8002c84 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041de:	f7fe fd51 	bl	8002c84 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e111      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041f0:	4b67      	ldr	r3, [pc, #412]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	d1f1      	bne.n	80041de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2220      	movs	r2, #32
 8004200:	4013      	ands	r3, r2
 8004202:	d05c      	beq.n	80042be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004204:	4b62      	ldr	r3, [pc, #392]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	220c      	movs	r2, #12
 800420a:	4013      	ands	r3, r2
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d00e      	beq.n	800422e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004210:	4b5f      	ldr	r3, [pc, #380]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	220c      	movs	r2, #12
 8004216:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004218:	2b08      	cmp	r3, #8
 800421a:	d114      	bne.n	8004246 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800421c:	4b5c      	ldr	r3, [pc, #368]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	23c0      	movs	r3, #192	@ 0xc0
 8004222:	025b      	lsls	r3, r3, #9
 8004224:	401a      	ands	r2, r3
 8004226:	23c0      	movs	r3, #192	@ 0xc0
 8004228:	025b      	lsls	r3, r3, #9
 800422a:	429a      	cmp	r2, r3
 800422c:	d10b      	bne.n	8004246 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800422e:	4b58      	ldr	r3, [pc, #352]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	029b      	lsls	r3, r3, #10
 8004236:	4013      	ands	r3, r2
 8004238:	d040      	beq.n	80042bc <HAL_RCC_OscConfig+0x5a8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d03c      	beq.n	80042bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0e6      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01b      	beq.n	8004286 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800424e:	4b50      	ldr	r3, [pc, #320]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004252:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004254:	2180      	movs	r1, #128	@ 0x80
 8004256:	0249      	lsls	r1, r1, #9
 8004258:	430a      	orrs	r2, r1
 800425a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fe fd12 	bl	8002c84 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004266:	f7fe fd0d 	bl	8002c84 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0cd      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004278:	4b45      	ldr	r3, [pc, #276]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800427a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	029b      	lsls	r3, r3, #10
 8004280:	4013      	ands	r3, r2
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x552>
 8004284:	e01b      	b.n	80042be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004286:	4b42      	ldr	r3, [pc, #264]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428a:	4b41      	ldr	r3, [pc, #260]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800428c:	4943      	ldr	r1, [pc, #268]	@ (800439c <HAL_RCC_OscConfig+0x688>)
 800428e:	400a      	ands	r2, r1
 8004290:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fcf7 	bl	8002c84 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800429c:	f7fe fcf2 	bl	8002c84 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0b2      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80042ae:	4b38      	ldr	r3, [pc, #224]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b2:	2380      	movs	r3, #128	@ 0x80
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x588>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042bc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d100      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5b4>
 80042c6:	e0a4      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c8:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	220c      	movs	r2, #12
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d100      	bne.n	80042d6 <HAL_RCC_OscConfig+0x5c2>
 80042d4:	e078      	b.n	80043c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d14c      	bne.n	8004378 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 80042e4:	492e      	ldr	r1, [pc, #184]	@ (80043a0 <HAL_RCC_OscConfig+0x68c>)
 80042e6:	400a      	ands	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fe fccb 	bl	8002c84 <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe fcc6 	bl	8002c84 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e086      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004306:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	049b      	lsls	r3, r3, #18
 800430e:	4013      	ands	r3, r2
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	220f      	movs	r2, #15
 8004318:	4393      	bics	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004320:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004322:	430a      	orrs	r2, r1
 8004324:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004326:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <HAL_RCC_OscConfig+0x690>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	431a      	orrs	r2, r3
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004340:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	0449      	lsls	r1, r1, #17
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe fc99 	bl	8002c84 <HAL_GetTick>
 8004352:	0003      	movs	r3, r0
 8004354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe fc94 	bl	8002c84 <HAL_GetTick>
 800435c:	0002      	movs	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e054      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800436a:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	@ 0x80
 8004370:	049b      	lsls	r3, r3, #18
 8004372:	4013      	ands	r3, r2
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x644>
 8004376:	e04c      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <HAL_RCC_OscConfig+0x67c>)
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <HAL_RCC_OscConfig+0x68c>)
 8004380:	400a      	ands	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fc7e 	bl	8002c84 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	e015      	b.n	80043ba <HAL_RCC_OscConfig+0x6a6>
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	40021000 	.word	0x40021000
 8004394:	00001388 	.word	0x00001388
 8004398:	efffffff 	.word	0xefffffff
 800439c:	fffeffff 	.word	0xfffeffff
 80043a0:	feffffff 	.word	0xfeffffff
 80043a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fc6c 	bl	8002c84 <HAL_GetTick>
 80043ac:	0002      	movs	r2, r0
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e02c      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ba:	4b18      	ldr	r3, [pc, #96]	@ (800441c <HAL_RCC_OscConfig+0x708>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	049b      	lsls	r3, r3, #18
 80043c2:	4013      	ands	r3, r2
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x694>
 80043c6:	e024      	b.n	8004412 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e01f      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x708>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <HAL_RCC_OscConfig+0x708>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	23c0      	movs	r3, #192	@ 0xc0
 80043e4:	025b      	lsls	r3, r3, #9
 80043e6:	401a      	ands	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d10e      	bne.n	800440e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	220f      	movs	r2, #15
 80043f4:	401a      	ands	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	23f0      	movs	r3, #240	@ 0xf0
 8004402:	039b      	lsls	r3, r3, #14
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b008      	add	sp, #32
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000

08004420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0bf      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b61      	ldr	r3, [pc, #388]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d911      	bls.n	8004466 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b5e      	ldr	r3, [pc, #376]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4393      	bics	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	4b5b      	ldr	r3, [pc, #364]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004454:	4b59      	ldr	r3, [pc, #356]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0a6      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d015      	beq.n	800449c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2204      	movs	r2, #4
 8004476:	4013      	ands	r3, r2
 8004478:	d006      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800447a:	4b51      	ldr	r3, [pc, #324]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4b50      	ldr	r3, [pc, #320]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004480:	21e0      	movs	r1, #224	@ 0xe0
 8004482:	00c9      	lsls	r1, r1, #3
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b4d      	ldr	r3, [pc, #308]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	22f0      	movs	r2, #240	@ 0xf0
 800448e:	4393      	bics	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b4a      	ldr	r3, [pc, #296]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d04c      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b44      	ldr	r3, [pc, #272]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	@ 0x80
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	4013      	ands	r3, r2
 80044b8:	d120      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07a      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b3e      	ldr	r3, [pc, #248]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	049b      	lsls	r3, r3, #18
 80044ce:	4013      	ands	r3, r2
 80044d0:	d114      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06e      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044de:	4b38      	ldr	r3, [pc, #224]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	4013      	ands	r3, r2
 80044e8:	d108      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e062      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b34      	ldr	r3, [pc, #208]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2202      	movs	r2, #2
 80044f4:	4013      	ands	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e05b      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fc:	4b30      	ldr	r3, [pc, #192]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	4393      	bics	r3, r2
 8004504:	0019      	movs	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fe fbb8 	bl	8002c84 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004518:	e009      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fe fbb3 	bl	8002c84 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	4a27      	ldr	r2, [pc, #156]	@ (80045c4 <HAL_RCC_ClockConfig+0x1a4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e042      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	220c      	movs	r2, #12
 8004534:	401a      	ands	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1ec      	bne.n	800451a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d211      	bcs.n	8004572 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	4393      	bics	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004560:	4b16      	ldr	r3, [pc, #88]	@ (80045bc <HAL_RCC_ClockConfig+0x19c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	4013      	ands	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e020      	b.n	80045b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2204      	movs	r2, #4
 8004578:	4013      	ands	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a11      	ldr	r2, [pc, #68]	@ (80045c8 <HAL_RCC_ClockConfig+0x1a8>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004590:	f000 f820 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004594:	0001      	movs	r1, r0
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	220f      	movs	r2, #15
 800459e:	4013      	ands	r3, r2
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <HAL_RCC_ClockConfig+0x1ac>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	000a      	movs	r2, r1
 80045a6:	40da      	lsrs	r2, r3
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b0>)
 80045aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045ac:	2003      	movs	r0, #3
 80045ae:	f7fe fb23 	bl	8002bf8 <HAL_InitTick>
  
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40021000 	.word	0x40021000
 80045c4:	00001388 	.word	0x00001388
 80045c8:	fffff8ff 	.word	0xfffff8ff
 80045cc:	080057e4 	.word	0x080057e4
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045ee:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	220c      	movs	r2, #12
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d046      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xb8>
 80045fe:	d848      	bhi.n	8004692 <HAL_RCC_GetSysClockFreq+0xbe>
 8004600:	2b04      	cmp	r3, #4
 8004602:	d002      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x36>
 8004604:	2b08      	cmp	r3, #8
 8004606:	d003      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x3c>
 8004608:	e043      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800460a:	4b27      	ldr	r3, [pc, #156]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800460c:	613b      	str	r3, [r7, #16]
      break;
 800460e:	e043      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	0c9b      	lsrs	r3, r3, #18
 8004614:	220f      	movs	r2, #15
 8004616:	4013      	ands	r3, r2
 8004618:	4a24      	ldr	r2, [pc, #144]	@ (80046ac <HAL_RCC_GetSysClockFreq+0xd8>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800461e:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	220f      	movs	r2, #15
 8004624:	4013      	ands	r3, r2
 8004626:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	23c0      	movs	r3, #192	@ 0xc0
 8004630:	025b      	lsls	r3, r3, #9
 8004632:	401a      	ands	r2, r3
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	025b      	lsls	r3, r3, #9
 8004638:	429a      	cmp	r2, r3
 800463a:	d109      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	481a      	ldr	r0, [pc, #104]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004640:	f7fb fd60 	bl	8000104 <__udivsi3>
 8004644:	0003      	movs	r3, r0
 8004646:	001a      	movs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4353      	muls	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e01a      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	23c0      	movs	r3, #192	@ 0xc0
 8004654:	025b      	lsls	r3, r3, #9
 8004656:	401a      	ands	r2, r3
 8004658:	23c0      	movs	r3, #192	@ 0xc0
 800465a:	025b      	lsls	r3, r3, #9
 800465c:	429a      	cmp	r2, r3
 800465e:	d109      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4814      	ldr	r0, [pc, #80]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004664:	f7fb fd4e 	bl	8000104 <__udivsi3>
 8004668:	0003      	movs	r3, r0
 800466a:	001a      	movs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4353      	muls	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e008      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	480c      	ldr	r0, [pc, #48]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004678:	f7fb fd44 	bl	8000104 <__udivsi3>
 800467c:	0003      	movs	r3, r0
 800467e:	001a      	movs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4353      	muls	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	613b      	str	r3, [r7, #16]
      break;
 800468a:	e005      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800468c:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800468e:	613b      	str	r3, [r7, #16]
      break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004694:	613b      	str	r3, [r7, #16]
      break;
 8004696:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004698:	693b      	ldr	r3, [r7, #16]
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b006      	add	sp, #24
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	40021000 	.word	0x40021000
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	080061f8 	.word	0x080061f8
 80046b0:	08006208 	.word	0x08006208
 80046b4:	02dc6c00 	.word	0x02dc6c00

080046b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	025b      	lsls	r3, r3, #9
 80046d0:	4013      	ands	r3, r2
 80046d2:	d100      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046d4:	e08e      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2017      	movs	r0, #23
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b6e      	ldr	r3, [pc, #440]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	2380      	movs	r3, #128	@ 0x80
 80046e4:	055b      	lsls	r3, r3, #21
 80046e6:	4013      	ands	r3, r2
 80046e8:	d110      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046f0:	2180      	movs	r1, #128	@ 0x80
 80046f2:	0549      	lsls	r1, r1, #21
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	4b67      	ldr	r3, [pc, #412]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	055b      	lsls	r3, r3, #21
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	183b      	adds	r3, r7, r0
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	4b63      	ldr	r3, [pc, #396]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4013      	ands	r3, r2
 8004716:	d11a      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004718:	4b60      	ldr	r3, [pc, #384]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b5f      	ldr	r3, [pc, #380]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800471e:	2180      	movs	r1, #128	@ 0x80
 8004720:	0049      	lsls	r1, r1, #1
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fe faad 	bl	8002c84 <HAL_GetTick>
 800472a:	0003      	movs	r3, r0
 800472c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	e008      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fe faa8 	bl	8002c84 <HAL_GetTick>
 8004734:	0002      	movs	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0a6      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b56      	ldr	r3, [pc, #344]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	@ 0x80
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4013      	ands	r3, r2
 800474c:	d0f0      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474e:	4b52      	ldr	r3, [pc, #328]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	23c0      	movs	r3, #192	@ 0xc0
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d034      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	23c0      	movs	r3, #192	@ 0xc0
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4013      	ands	r3, r2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d02c      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004770:	4b49      	ldr	r3, [pc, #292]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a4a      	ldr	r2, [pc, #296]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b47      	ldr	r3, [pc, #284]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	4b46      	ldr	r3, [pc, #280]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004780:	2180      	movs	r1, #128	@ 0x80
 8004782:	0249      	lsls	r1, r1, #9
 8004784:	430a      	orrs	r2, r1
 8004786:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004788:	4b43      	ldr	r3, [pc, #268]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	4b42      	ldr	r3, [pc, #264]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800478e:	4945      	ldr	r1, [pc, #276]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004790:	400a      	ands	r2, r1
 8004792:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004794:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe fa6f 	bl	8002c84 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	e009      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fe fa6a 	bl	8002c84 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e067      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	4b35      	ldr	r3, [pc, #212]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	2202      	movs	r2, #2
 80047c6:	4013      	ands	r3, r2
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ca:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a34      	ldr	r2, [pc, #208]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047de:	2317      	movs	r3, #23
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ee:	492f      	ldr	r1, [pc, #188]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047f0:	400a      	ands	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4013      	ands	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	2203      	movs	r2, #3
 8004804:	4393      	bics	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800480e:	430a      	orrs	r2, r1
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2202      	movs	r2, #2
 8004818:	4013      	ands	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481c:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004822:	4013      	ands	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800482c:	430a      	orrs	r2, r1
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	02db      	lsls	r3, r3, #11
 8004838:	4013      	ands	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483c:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004842:	4013      	ands	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	4b13      	ldr	r3, [pc, #76]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800484c:	430a      	orrs	r2, r1
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2220      	movs	r2, #32
 8004856:	4013      	ands	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485a:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	2210      	movs	r2, #16
 8004860:	4393      	bics	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800486a:	430a      	orrs	r2, r1
 800486c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4013      	ands	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800487a:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	4393      	bics	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	4b03      	ldr	r3, [pc, #12]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800488a:	430a      	orrs	r2, r1
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b006      	add	sp, #24
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	fffffcff 	.word	0xfffffcff
 80048a4:	fffeffff 	.word	0xfffeffff
 80048a8:	00001388 	.word	0x00001388
 80048ac:	efffffff 	.word	0xefffffff
 80048b0:	fffcffff 	.word	0xfffcffff
 80048b4:	fff3ffff 	.word	0xfff3ffff

080048b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0a8      	b.n	8004a1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	2382      	movs	r3, #130	@ 0x82
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	429a      	cmp	r2, r3
 80048dc:	d009      	beq.n	80048f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	61da      	str	r2, [r3, #28]
 80048e4:	e005      	b.n	80048f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	225d      	movs	r2, #93	@ 0x5d
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	225c      	movs	r2, #92	@ 0x5c
 8004908:	2100      	movs	r1, #0
 800490a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0018      	movs	r0, r3
 8004910:	f7fb ffa4 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	225d      	movs	r2, #93	@ 0x5d
 8004918:	2102      	movs	r1, #2
 800491a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2140      	movs	r1, #64	@ 0x40
 8004928:	438a      	bics	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	23e0      	movs	r3, #224	@ 0xe0
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	429a      	cmp	r2, r3
 8004936:	d902      	bls.n	800493e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e002      	b.n	8004944 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	015b      	lsls	r3, r3, #5
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	23f0      	movs	r3, #240	@ 0xf0
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	429a      	cmp	r2, r3
 800494e:	d008      	beq.n	8004962 <HAL_SPI_Init+0xaa>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	23e0      	movs	r3, #224	@ 0xe0
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	429a      	cmp	r2, r3
 800495a:	d002      	beq.n	8004962 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	2382      	movs	r3, #130	@ 0x82
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	401a      	ands	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	2384      	movs	r3, #132	@ 0x84
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	400b      	ands	r3, r1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2102      	movs	r1, #2
 800497e:	400b      	ands	r3, r1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	2101      	movs	r1, #1
 8004988:	400b      	ands	r3, r1
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6999      	ldr	r1, [r3, #24]
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	400b      	ands	r3, r1
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2138      	movs	r1, #56	@ 0x38
 800499e:	400b      	ands	r3, r1
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	2180      	movs	r1, #128	@ 0x80
 80049a8:	400b      	ands	r3, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	0011      	movs	r1, r2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	401a      	ands	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	2204      	movs	r2, #4
 80049c8:	401a      	ands	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	2110      	movs	r1, #16
 80049d0:	400b      	ands	r3, r1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d8:	2108      	movs	r1, #8
 80049da:	400b      	ands	r3, r1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	23f0      	movs	r3, #240	@ 0xf0
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	400b      	ands	r3, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	0011      	movs	r1, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	2380      	movs	r3, #128	@ 0x80
 80049f0:	015b      	lsls	r3, r3, #5
 80049f2:	401a      	ands	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4907      	ldr	r1, [pc, #28]	@ (8004a24 <HAL_SPI_Init+0x16c>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	225d      	movs	r2, #93	@ 0x5d
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	fffff7ff 	.word	0xfffff7ff

08004a28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	1dbb      	adds	r3, r7, #6
 8004a36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a38:	231f      	movs	r3, #31
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	225c      	movs	r2, #92	@ 0x5c
 8004a44:	5c9b      	ldrb	r3, [r3, r2]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Transmit+0x26>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e147      	b.n	8004cde <HAL_SPI_Transmit+0x2b6>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	225c      	movs	r2, #92	@ 0x5c
 8004a52:	2101      	movs	r1, #1
 8004a54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a56:	f7fe f915 	bl	8002c84 <HAL_GetTick>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a5e:	2316      	movs	r3, #22
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	1dba      	adds	r2, r7, #6
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	225d      	movs	r2, #93	@ 0x5d
 8004a6c:	5c9b      	ldrb	r3, [r3, r2]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d004      	beq.n	8004a7e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004a74:	231f      	movs	r3, #31
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a7c:	e128      	b.n	8004cd0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_SPI_Transmit+0x64>
 8004a84:	1dbb      	adds	r3, r7, #6
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004a8c:	231f      	movs	r3, #31
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a94:	e11c      	b.n	8004cd0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	225d      	movs	r2, #93	@ 0x5d
 8004a9a:	2103      	movs	r1, #3
 8004a9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1dba      	adds	r2, r7, #6
 8004aae:	8812      	ldrh	r2, [r2, #0]
 8004ab0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1dba      	adds	r2, r7, #6
 8004ab6:	8812      	ldrh	r2, [r2, #0]
 8004ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2244      	movs	r2, #68	@ 0x44
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2246      	movs	r2, #70	@ 0x46
 8004acc:	2100      	movs	r1, #0
 8004ace:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	2380      	movs	r3, #128	@ 0x80
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d110      	bne.n	8004b0a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2140      	movs	r1, #64	@ 0x40
 8004af4:	438a      	bics	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2180      	movs	r1, #128	@ 0x80
 8004b04:	01c9      	lsls	r1, r1, #7
 8004b06:	430a      	orrs	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2240      	movs	r2, #64	@ 0x40
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d007      	beq.n	8004b28 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2140      	movs	r1, #64	@ 0x40
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	23e0      	movs	r3, #224	@ 0xe0
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d952      	bls.n	8004bda <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_SPI_Transmit+0x11e>
 8004b3c:	2316      	movs	r3, #22
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d143      	bne.n	8004bce <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b6a:	e030      	b.n	8004bce <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2202      	movs	r2, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d112      	bne.n	8004ba0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b9e:	e016      	b.n	8004bce <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba0:	f7fe f870 	bl	8002c84 <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d802      	bhi.n	8004bb6 <HAL_SPI_Transmit+0x18e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	d102      	bne.n	8004bbc <HAL_SPI_Transmit+0x194>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	225d      	movs	r2, #93	@ 0x5d
 8004bc8:	2101      	movs	r1, #1
 8004bca:	5499      	strb	r1, [r3, r2]
          goto error;
 8004bcc:	e080      	b.n	8004cd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1c9      	bne.n	8004b6c <HAL_SPI_Transmit+0x144>
 8004bd8:	e053      	b.n	8004c82 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_SPI_Transmit+0x1c4>
 8004be2:	2316      	movs	r3, #22
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d145      	bne.n	8004c78 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004c12:	e031      	b.n	8004c78 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d113      	bne.n	8004c4a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c48:	e016      	b.n	8004c78 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4a:	f7fe f81b 	bl	8002c84 <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d802      	bhi.n	8004c60 <HAL_SPI_Transmit+0x238>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Transmit+0x23e>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004c66:	231f      	movs	r3, #31
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	225d      	movs	r2, #93	@ 0x5d
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]
          goto error;
 8004c76:	e02b      	b.n	8004cd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1c8      	bne.n	8004c14 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 f95d 	bl	8004f48 <SPI_EndRxTxTransaction>
 8004c8e:	1e03      	subs	r3, r0, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004cbe:	231f      	movs	r3, #31
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e003      	b.n	8004cd0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	225d      	movs	r2, #93	@ 0x5d
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	225c      	movs	r2, #92	@ 0x5c
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004cd8:	231f      	movs	r3, #31
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b008      	add	sp, #32
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cf8:	f7fd ffc4 	bl	8002c84 <HAL_GetTick>
 8004cfc:	0002      	movs	r2, r0
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d08:	f7fd ffbc 	bl	8002c84 <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d10:	4b3a      	ldr	r3, [pc, #232]	@ (8004dfc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	015b      	lsls	r3, r3, #5
 8004d16:	0d1b      	lsrs	r3, r3, #20
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	4353      	muls	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d1e:	e058      	b.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	d055      	beq.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d26:	f7fd ffad 	bl	8002c84 <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d902      	bls.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d142      	bne.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	21e0      	movs	r1, #224	@ 0xe0
 8004d48:	438a      	bics	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	2382      	movs	r3, #130	@ 0x82
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d113      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d005      	beq.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	2380      	movs	r3, #128	@ 0x80
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d107      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2140      	movs	r1, #64	@ 0x40
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	019b      	lsls	r3, r3, #6
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d110      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	491a      	ldr	r1, [pc, #104]	@ (8004e00 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2180      	movs	r1, #128	@ 0x80
 8004da8:	0189      	lsls	r1, r1, #6
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	225d      	movs	r2, #93	@ 0x5d
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	225c      	movs	r2, #92	@ 0x5c
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e017      	b.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	425a      	negs	r2, r3
 8004de2:	4153      	adcs	r3, r2
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	001a      	movs	r2, r3
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d197      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	0018      	movs	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b008      	add	sp, #32
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	ffffdfff 	.word	0xffffdfff

08004e04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	@ 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e12:	2317      	movs	r3, #23
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e1a:	f7fd ff33 	bl	8002c84 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	18d3      	adds	r3, r2, r3
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e2a:	f7fd ff2b 	bl	8002c84 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	0013      	movs	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	00da      	lsls	r2, r3, #3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	0d1b      	lsrs	r3, r3, #20
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	4353      	muls	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e50:	e068      	b.n	8004f24 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	23c0      	movs	r3, #192	@ 0xc0
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d10a      	bne.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	2117      	movs	r1, #23
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	d055      	beq.n	8004f24 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e78:	f7fd ff04 	bl	8002c84 <HAL_GetTick>
 8004e7c:	0002      	movs	r2, r0
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d902      	bls.n	8004e8e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d142      	bne.n	8004f14 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	21e0      	movs	r1, #224	@ 0xe0
 8004e9a:	438a      	bics	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	2382      	movs	r3, #130	@ 0x82
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d113      	bne.n	8004ed2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	2380      	movs	r3, #128	@ 0x80
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d005      	beq.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d107      	bne.n	8004ed2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2140      	movs	r1, #64	@ 0x40
 8004ece:	438a      	bics	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d110      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4916      	ldr	r1, [pc, #88]	@ (8004f44 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2180      	movs	r1, #128	@ 0x80
 8004efa:	0189      	lsls	r1, r1, #6
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	225d      	movs	r2, #93	@ 0x5d
 8004f04:	2101      	movs	r1, #1
 8004f06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	225c      	movs	r2, #92	@ 0x5c
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e010      	b.n	8004f36 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d18e      	bne.n	8004e52 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b00a      	add	sp, #40	@ 0x28
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	20000000 	.word	0x20000000
 8004f44:	ffffdfff 	.word	0xffffdfff

08004f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	23c0      	movs	r3, #192	@ 0xc0
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	0013      	movs	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	f7ff ff4e 	bl	8004e04 <SPI_WaitFifoStateUntilTimeout>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d007      	beq.n	8004f7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f70:	2220      	movs	r2, #32
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e027      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	0013      	movs	r3, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	2180      	movs	r1, #128	@ 0x80
 8004f8a:	f7ff fead 	bl	8004ce8 <SPI_WaitFlagStateUntilTimeout>
 8004f8e:	1e03      	subs	r3, r0, #0
 8004f90:	d007      	beq.n	8004fa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f96:	2220      	movs	r2, #32
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e014      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	23c0      	movs	r3, #192	@ 0xc0
 8004fa6:	00d9      	lsls	r1, r3, #3
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	0013      	movs	r3, r2
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f7ff ff27 	bl	8004e04 <SPI_WaitFifoStateUntilTimeout>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e000      	b.n	8004fcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e042      	b.n	800506c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	223d      	movs	r2, #61	@ 0x3d
 8004fea:	5c9b      	ldrb	r3, [r3, r2]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	223c      	movs	r2, #60	@ 0x3c
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7fb fd73 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	223d      	movs	r2, #61	@ 0x3d
 8005006:	2102      	movs	r1, #2
 8005008:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	0019      	movs	r1, r3
 8005014:	0010      	movs	r0, r2
 8005016:	f000 f94b 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2246      	movs	r2, #70	@ 0x46
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	223e      	movs	r2, #62	@ 0x3e
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	223f      	movs	r2, #63	@ 0x3f
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2240      	movs	r2, #64	@ 0x40
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2241      	movs	r2, #65	@ 0x41
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2242      	movs	r2, #66	@ 0x42
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2243      	movs	r2, #67	@ 0x43
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2244      	movs	r2, #68	@ 0x44
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2245      	movs	r2, #69	@ 0x45
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	223d      	movs	r2, #61	@ 0x3d
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	223d      	movs	r2, #61	@ 0x3d
 8005080:	5c9b      	ldrb	r3, [r3, r2]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e033      	b.n	80050f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	223d      	movs	r2, #61	@ 0x3d
 8005090:	2102      	movs	r1, #2
 8005092:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <HAL_TIM_Base_Start+0x88>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <HAL_TIM_Base_Start+0x4a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	05db      	lsls	r3, r3, #23
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d009      	beq.n	80050be <HAL_TIM_Base_Start+0x4a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a14      	ldr	r2, [pc, #80]	@ (8005100 <HAL_TIM_Base_Start+0x8c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIM_Base_Start+0x4a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a12      	ldr	r2, [pc, #72]	@ (8005104 <HAL_TIM_Base_Start+0x90>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d111      	bne.n	80050e2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2207      	movs	r2, #7
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d010      	beq.n	80050f2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	e007      	b.n	80050f2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b004      	add	sp, #16
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	230f      	movs	r3, #15
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223c      	movs	r2, #60	@ 0x3c
 800511e:	5c9b      	ldrb	r3, [r3, r2]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIM_ConfigClockSource+0x20>
 8005124:	2302      	movs	r3, #2
 8005126:	e0bc      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x19a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	223c      	movs	r2, #60	@ 0x3c
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223d      	movs	r2, #61	@ 0x3d
 8005134:	2102      	movs	r1, #2
 8005136:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2277      	movs	r2, #119	@ 0x77
 8005144:	4393      	bics	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a58      	ldr	r2, [pc, #352]	@ (80052ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2280      	movs	r2, #128	@ 0x80
 800515e:	0192      	lsls	r2, r2, #6
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xde>
 8005164:	2280      	movs	r2, #128	@ 0x80
 8005166:	0192      	lsls	r2, r2, #6
 8005168:	4293      	cmp	r3, r2
 800516a:	d900      	bls.n	800516e <HAL_TIM_ConfigClockSource+0x66>
 800516c:	e088      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800516e:	2280      	movs	r2, #128	@ 0x80
 8005170:	0152      	lsls	r2, r2, #5
 8005172:	4293      	cmp	r3, r2
 8005174:	d100      	bne.n	8005178 <HAL_TIM_ConfigClockSource+0x70>
 8005176:	e088      	b.n	800528a <HAL_TIM_ConfigClockSource+0x182>
 8005178:	2280      	movs	r2, #128	@ 0x80
 800517a:	0152      	lsls	r2, r2, #5
 800517c:	4293      	cmp	r3, r2
 800517e:	d900      	bls.n	8005182 <HAL_TIM_ConfigClockSource+0x7a>
 8005180:	e07e      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 8005182:	2b70      	cmp	r3, #112	@ 0x70
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xb0>
 8005186:	d900      	bls.n	800518a <HAL_TIM_ConfigClockSource+0x82>
 8005188:	e07a      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800518a:	2b60      	cmp	r3, #96	@ 0x60
 800518c:	d04f      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x126>
 800518e:	d900      	bls.n	8005192 <HAL_TIM_ConfigClockSource+0x8a>
 8005190:	e076      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 8005192:	2b50      	cmp	r3, #80	@ 0x50
 8005194:	d03b      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x106>
 8005196:	d900      	bls.n	800519a <HAL_TIM_ConfigClockSource+0x92>
 8005198:	e072      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d057      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x146>
 800519e:	d900      	bls.n	80051a2 <HAL_TIM_ConfigClockSource+0x9a>
 80051a0:	e06e      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051a2:	2b30      	cmp	r3, #48	@ 0x30
 80051a4:	d063      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051a6:	d86b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d060      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051ac:	d868      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d05d      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d05b      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051b6:	e063      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051c8:	f000 f97a 	bl	80054c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2277      	movs	r2, #119	@ 0x77
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
      break;
 80051e4:	e052      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051f6:	f000 f963 	bl	80054c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2180      	movs	r1, #128	@ 0x80
 8005206:	01c9      	lsls	r1, r1, #7
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
      break;
 800520c:	e03e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	001a      	movs	r2, r3
 800521c:	f000 f8d6 	bl	80053cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2150      	movs	r1, #80	@ 0x50
 8005226:	0018      	movs	r0, r3
 8005228:	f000 f930 	bl	800548c <TIM_ITRx_SetConfig>
      break;
 800522c:	e02e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	001a      	movs	r2, r3
 800523c:	f000 f8f4 	bl	8005428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2160      	movs	r1, #96	@ 0x60
 8005246:	0018      	movs	r0, r3
 8005248:	f000 f920 	bl	800548c <TIM_ITRx_SetConfig>
      break;
 800524c:	e01e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	001a      	movs	r2, r3
 800525c:	f000 f8b6 	bl	80053cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2140      	movs	r1, #64	@ 0x40
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f910 	bl	800548c <TIM_ITRx_SetConfig>
      break;
 800526c:	e00e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	0019      	movs	r1, r3
 8005278:	0010      	movs	r0, r2
 800527a:	f000 f907 	bl	800548c <TIM_ITRx_SetConfig>
      break;
 800527e:	e005      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005280:	230f      	movs	r3, #15
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800528a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	223d      	movs	r2, #61	@ 0x3d
 8005290:	2101      	movs	r1, #1
 8005292:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	223c      	movs	r2, #60	@ 0x3c
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

  return status;
 800529c:	230f      	movs	r3, #15
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	781b      	ldrb	r3, [r3, #0]
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	ffff00ff 	.word	0xffff00ff

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <TIM_Base_SetConfig+0x100>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d008      	beq.n	80052da <TIM_Base_SetConfig+0x2a>
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	05db      	lsls	r3, r3, #23
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0x2a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <TIM_Base_SetConfig+0x104>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2270      	movs	r2, #112	@ 0x70
 80052de:	4393      	bics	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <TIM_Base_SetConfig+0x100>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	05db      	lsls	r3, r3, #23
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d013      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <TIM_Base_SetConfig+0x104>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <TIM_Base_SetConfig+0x108>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <TIM_Base_SetConfig+0x10c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a29      	ldr	r2, [pc, #164]	@ (80053c0 <TIM_Base_SetConfig+0x110>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0x76>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a28      	ldr	r2, [pc, #160]	@ (80053c4 <TIM_Base_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <TIM_Base_SetConfig+0x118>)
 800532a:	4013      	ands	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2280      	movs	r2, #128	@ 0x80
 800533c:	4393      	bics	r3, r2
 800533e:	001a      	movs	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a13      	ldr	r2, [pc, #76]	@ (80053b0 <TIM_Base_SetConfig+0x100>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0xce>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a14      	ldr	r2, [pc, #80]	@ (80053bc <TIM_Base_SetConfig+0x10c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0xce>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <TIM_Base_SetConfig+0x110>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0xce>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a12      	ldr	r2, [pc, #72]	@ (80053c4 <TIM_Base_SetConfig+0x114>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d103      	bne.n	8005386 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2201      	movs	r2, #1
 8005392:	4013      	ands	r3, r2
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2201      	movs	r2, #1
 800539e:	4393      	bics	r3, r2
 80053a0:	001a      	movs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]
  }
}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40002000 	.word	0x40002000
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	fffffcff 	.word	0xfffffcff

080053cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4393      	bics	r3, r2
 80053e6:	001a      	movs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	22f0      	movs	r2, #240	@ 0xf0
 80053f6:	4393      	bics	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	220a      	movs	r2, #10
 8005408:	4393      	bics	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b006      	add	sp, #24
 8005426:	bd80      	pop	{r7, pc}

08005428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	2210      	movs	r2, #16
 8005440:	4393      	bics	r3, r2
 8005442:	001a      	movs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <TIM_TI2_ConfigInputStage+0x60>)
 8005452:	4013      	ands	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	22a0      	movs	r2, #160	@ 0xa0
 8005464:	4393      	bics	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b006      	add	sp, #24
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	ffff0fff 	.word	0xffff0fff

0800548c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2270      	movs	r2, #112	@ 0x70
 80054a0:	4393      	bics	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	2207      	movs	r2, #7
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	609a      	str	r2, [r3, #8]
}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4a09      	ldr	r2, [pc, #36]	@ (80054fc <TIM_ETR_SetConfig+0x3c>)
 80054d8:	4013      	ands	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b006      	add	sp, #24
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	ffff00ff 	.word	0xffff00ff

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	223c      	movs	r2, #60	@ 0x3c
 800550e:	5c9b      	ldrb	r3, [r3, r2]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e047      	b.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	223c      	movs	r2, #60	@ 0x3c
 800551c:	2101      	movs	r1, #1
 800551e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	223d      	movs	r2, #61	@ 0x3d
 8005524:	2102      	movs	r1, #2
 8005526:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2270      	movs	r2, #112	@ 0x70
 800553c:	4393      	bics	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a16      	ldr	r2, [pc, #88]	@ (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00f      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	429a      	cmp	r2, r3
 8005566:	d009      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a10      	ldr	r2, [pc, #64]	@ (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10c      	bne.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2280      	movs	r2, #128	@ 0x80
 8005580:	4393      	bics	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223d      	movs	r2, #61	@ 0x3d
 800559a:	2101      	movs	r1, #1
 800559c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	223c      	movs	r2, #60	@ 0x3c
 80055a2:	2100      	movs	r1, #0
 80055a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	0018      	movs	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b004      	add	sp, #16
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40014000 	.word	0x40014000

080055bc <__itoa>:
 80055bc:	1e93      	subs	r3, r2, #2
 80055be:	b510      	push	{r4, lr}
 80055c0:	000c      	movs	r4, r1
 80055c2:	2b22      	cmp	r3, #34	@ 0x22
 80055c4:	d904      	bls.n	80055d0 <__itoa+0x14>
 80055c6:	2300      	movs	r3, #0
 80055c8:	001c      	movs	r4, r3
 80055ca:	700b      	strb	r3, [r1, #0]
 80055cc:	0020      	movs	r0, r4
 80055ce:	bd10      	pop	{r4, pc}
 80055d0:	2a0a      	cmp	r2, #10
 80055d2:	d109      	bne.n	80055e8 <__itoa+0x2c>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	da07      	bge.n	80055e8 <__itoa+0x2c>
 80055d8:	232d      	movs	r3, #45	@ 0x2d
 80055da:	700b      	strb	r3, [r1, #0]
 80055dc:	2101      	movs	r1, #1
 80055de:	4240      	negs	r0, r0
 80055e0:	1861      	adds	r1, r4, r1
 80055e2:	f000 f807 	bl	80055f4 <__utoa>
 80055e6:	e7f1      	b.n	80055cc <__itoa+0x10>
 80055e8:	2100      	movs	r1, #0
 80055ea:	e7f9      	b.n	80055e0 <__itoa+0x24>

080055ec <itoa>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	f7ff ffe5 	bl	80055bc <__itoa>
 80055f2:	bd10      	pop	{r4, pc}

080055f4 <__utoa>:
 80055f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f6:	000c      	movs	r4, r1
 80055f8:	0016      	movs	r6, r2
 80055fa:	b08d      	sub	sp, #52	@ 0x34
 80055fc:	2225      	movs	r2, #37	@ 0x25
 80055fe:	0007      	movs	r7, r0
 8005600:	4915      	ldr	r1, [pc, #84]	@ (8005658 <__utoa+0x64>)
 8005602:	a802      	add	r0, sp, #8
 8005604:	f000 f856 	bl	80056b4 <memcpy>
 8005608:	1e62      	subs	r2, r4, #1
 800560a:	1eb3      	subs	r3, r6, #2
 800560c:	2500      	movs	r5, #0
 800560e:	9201      	str	r2, [sp, #4]
 8005610:	2b22      	cmp	r3, #34	@ 0x22
 8005612:	d904      	bls.n	800561e <__utoa+0x2a>
 8005614:	7025      	strb	r5, [r4, #0]
 8005616:	002c      	movs	r4, r5
 8005618:	0020      	movs	r0, r4
 800561a:	b00d      	add	sp, #52	@ 0x34
 800561c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561e:	0038      	movs	r0, r7
 8005620:	0031      	movs	r1, r6
 8005622:	f7fa fdf5 	bl	8000210 <__aeabi_uidivmod>
 8005626:	000b      	movs	r3, r1
 8005628:	aa02      	add	r2, sp, #8
 800562a:	5cd3      	ldrb	r3, [r2, r3]
 800562c:	9a01      	ldr	r2, [sp, #4]
 800562e:	0029      	movs	r1, r5
 8005630:	3501      	adds	r5, #1
 8005632:	5553      	strb	r3, [r2, r5]
 8005634:	003b      	movs	r3, r7
 8005636:	0007      	movs	r7, r0
 8005638:	429e      	cmp	r6, r3
 800563a:	d9f0      	bls.n	800561e <__utoa+0x2a>
 800563c:	2300      	movs	r3, #0
 800563e:	0022      	movs	r2, r4
 8005640:	5563      	strb	r3, [r4, r5]
 8005642:	000b      	movs	r3, r1
 8005644:	1ac8      	subs	r0, r1, r3
 8005646:	4283      	cmp	r3, r0
 8005648:	dde6      	ble.n	8005618 <__utoa+0x24>
 800564a:	7810      	ldrb	r0, [r2, #0]
 800564c:	5ce5      	ldrb	r5, [r4, r3]
 800564e:	7015      	strb	r5, [r2, #0]
 8005650:	54e0      	strb	r0, [r4, r3]
 8005652:	3201      	adds	r2, #1
 8005654:	3b01      	subs	r3, #1
 8005656:	e7f5      	b.n	8005644 <__utoa+0x50>
 8005658:	08006218 	.word	0x08006218

0800565c <memset>:
 800565c:	0003      	movs	r3, r0
 800565e:	1882      	adds	r2, r0, r2
 8005660:	4293      	cmp	r3, r2
 8005662:	d100      	bne.n	8005666 <memset+0xa>
 8005664:	4770      	bx	lr
 8005666:	7019      	strb	r1, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	e7f9      	b.n	8005660 <memset+0x4>

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	2600      	movs	r6, #0
 8005670:	4c0c      	ldr	r4, [pc, #48]	@ (80056a4 <__libc_init_array+0x38>)
 8005672:	4d0d      	ldr	r5, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	2600      	movs	r6, #0
 800567e:	f000 f823 	bl	80056c8 <_init>
 8005682:	4c0a      	ldr	r4, [pc, #40]	@ (80056ac <__libc_init_array+0x40>)
 8005684:	4d0a      	ldr	r5, [pc, #40]	@ (80056b0 <__libc_init_array+0x44>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	00b3      	lsls	r3, r6, #2
 8005692:	58eb      	ldr	r3, [r5, r3]
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	00b3      	lsls	r3, r6, #2
 800569c:	58eb      	ldr	r3, [r5, r3]
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006240 	.word	0x08006240
 80056a8:	08006240 	.word	0x08006240
 80056ac:	08006244 	.word	0x08006244
 80056b0:	08006240 	.word	0x08006240

080056b4 <memcpy>:
 80056b4:	2300      	movs	r3, #0
 80056b6:	b510      	push	{r4, lr}
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d100      	bne.n	80056be <memcpy+0xa>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	5ccc      	ldrb	r4, [r1, r3]
 80056c0:	54c4      	strb	r4, [r0, r3]
 80056c2:	3301      	adds	r3, #1
 80056c4:	e7f8      	b.n	80056b8 <memcpy+0x4>
	...

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
