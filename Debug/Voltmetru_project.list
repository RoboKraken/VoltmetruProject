
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aec  08007aec  00009420  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007aec  08007aec  00009420  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007aec  08007aec  00009420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aec  08007aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007af0  08007af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08007af4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d38  20000420  08007f14  00009420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006158  08007f14  0000a158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001b425  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0002486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00018cc7  00000000  00000000  000248d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003776  00000000  00000000  0003d59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f8  00000000  00000000  00040d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b7528  00000000  00000000  00042410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011e6  00000000  00000000  000f9938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d53d  00000000  00000000  000fab1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011805b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b0  00000000  00000000  001180a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007470 	.word	0x08007470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08007470 	.word	0x08007470

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f000 f9c6 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f006 fff7 	bl	8007414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 fedf 	bl	80011e8 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8000438:	08007af4 	.word	0x08007af4
  ldr r2, =_sbss
 800043c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000440:	20006158 	.word	0x20006158

08000444 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_COMP_IRQHandler>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_MspInit+0x50>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <HAL_MspInit+0x50>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x50>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x50>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <HAL_MspInit+0x50>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x50>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000482:	2302      	movs	r3, #2
 8000484:	425b      	negs	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	2103      	movs	r1, #3
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fb32 	bl	8002af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	@ 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f006 ffa8 	bl	8007404 <memset>
  if(hadc->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <HAL_ADC_MspInit+0x84>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d12b      	bne.n	8000516 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	193a      	adds	r2, r7, r4
 800050a:	2390      	movs	r3, #144	@ 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fb15 	bl	8002b40 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b00b      	add	sp, #44	@ 0x2c
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	40012400 	.word	0x40012400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b08b      	sub	sp, #44	@ 0x2c
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	2414      	movs	r4, #20
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f006 ff62 	bl	8007404 <memset>
  if(hspi->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <HAL_SPI_MspInit+0x90>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d132      	bne.n	80005b0 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0149      	lsls	r1, r1, #5
 8000554:	430a      	orrs	r2, r1
 8000556:	619a      	str	r2, [r3, #24]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	22a0      	movs	r2, #160	@ 0xa0
 8000588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2203      	movs	r2, #3
 800059a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	2390      	movs	r3, #144	@ 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 fac8 	bl	8002b40 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00b      	add	sp, #44	@ 0x2c
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40013000 	.word	0x40013000
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2414      	movs	r4, #20
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f006 ff16 	bl	8007404 <memset>
  if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <HAL_UART_MspInit+0x90>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d132      	bne.n	8000648 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_UART_MspInit+0x94>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	2390      	movs	r3, #144	@ 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f002 fa7c 	bl	8002b40 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00b      	add	sp, #44	@ 0x2c
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40004400 	.word	0x40004400
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000668:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <HAL_InitTick+0xf0>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <HAL_InitTick+0xf0>)
 800066e:	2102      	movs	r1, #2
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <HAL_InitTick+0xf0>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2202      	movs	r2, #2
 800067a:	4013      	ands	r3, r2
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000680:	230c      	movs	r3, #12
 8000682:	18fa      	adds	r2, r7, r3
 8000684:	2410      	movs	r4, #16
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f003 f8e0 	bl	8003850 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800069c:	f003 f8c2 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80006a0:	0003      	movs	r3, r0
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006a4:	e004      	b.n	80006b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006a6:	f003 f8bd 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80006aa:	0003      	movs	r3, r0
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b2:	4926      	ldr	r1, [pc, #152]	@ (800074c <HAL_InitTick+0xf4>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fd27 	bl	8000108 <__udivsi3>
 80006ba:	0003      	movs	r3, r0
 80006bc:	3b01      	subs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <HAL_InitTick+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c8:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <HAL_InitTick+0x100>)
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ce:	6a3a      	ldr	r2, [r7, #32]
 80006d0:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_InitTick+0xf8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <HAL_InitTick+0xf8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_InitTick+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006e4:	252b      	movs	r5, #43	@ 0x2b
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fd68 	bl	80041c0 <HAL_TIM_Base_Init>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11e      	bne.n	800073a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006fc:	197c      	adds	r4, r7, r5
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_InitTick+0xf8>)
 8000700:	0018      	movs	r0, r3
 8000702:	f003 fdb5 	bl	8004270 <HAL_TIM_Base_Start_IT>
 8000706:	0003      	movs	r3, r0
 8000708:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800070a:	197b      	adds	r3, r7, r5
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d113      	bne.n	800073a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000712:	2010      	movs	r0, #16
 8000714:	f002 fa03 	bl	8002b1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d809      	bhi.n	8000732 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	0019      	movs	r1, r3
 8000724:	2010      	movs	r0, #16
 8000726:	f002 f9e5 	bl	8002af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_InitTick+0x104>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e003      	b.n	800073a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000732:	232b      	movs	r3, #43	@ 0x2b
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800073a:	232b      	movs	r3, #43	@ 0x2b
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b00c      	add	sp, #48	@ 0x30
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	000f4240 	.word	0x000f4240
 8000750:	2000043c 	.word	0x2000043c
 8000754:	40000400 	.word	0x40000400
 8000758:	000003e7 	.word	0x000003e7
 800075c:	20000414 	.word	0x20000414

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <TIM3_IRQHandler+0x14>)
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fdcc 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	2000043c 	.word	0x2000043c

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 800079c:	230e      	movs	r3, #14
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e057      	b.n	8000856 <st7565_write_buffer+0xc2>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80007a6:	4b31      	ldr	r3, [pc, #196]	@ (800086c <st7565_write_buffer+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fb3f 	bl	8002e30 <HAL_GPIO_WritePin>
 80007b2:	230e      	movs	r3, #14
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000870 <st7565_write_buffer+0xdc>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	2250      	movs	r2, #80	@ 0x50
 80007be:	4252      	negs	r2, r2
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f855 	bl	8000874 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <st7565_write_buffer+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 fb2d 	bl	8002e30 <HAL_GPIO_WritePin>
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f84c 	bl	8000874 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <st7565_write_buffer+0xd8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 fb24 	bl	8002e30 <HAL_GPIO_WritePin>
 80007e8:	2010      	movs	r0, #16
 80007ea:	f000 f843 	bl	8000874 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <st7565_write_buffer+0xd8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	2180      	movs	r1, #128	@ 0x80
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fb1b 	bl	8002e30 <HAL_GPIO_WritePin>
 80007fa:	20e0      	movs	r0, #224	@ 0xe0
 80007fc:	f000 f83a 	bl	8000874 <st7565_sendbyte>
		//DATA(0xff);
		for (c = 0; c < 128; c++) {
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e019      	b.n	800083e <st7565_write_buffer+0xaa>
			DATA(buffer[(128 * p) + c]);
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <st7565_write_buffer+0xd8>)
 800080c:	2201      	movs	r2, #1
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fb0d 	bl	8002e30 <HAL_GPIO_WritePin>
 8000816:	230e      	movs	r3, #14
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	01da      	lsls	r2, r3, #7
 800081e:	240f      	movs	r4, #15
 8000820:	193b      	adds	r3, r7, r4
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	001a      	movs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	189b      	adds	r3, r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f820 	bl	8000874 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000834:	193b      	adds	r3, r7, r4
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	193b      	adds	r3, r7, r4
 800083a:	3201      	adds	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	230f      	movs	r3, #15
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	dadf      	bge.n	800080a <st7565_write_buffer+0x76>
	for (p = 0; p < 8; p++) {
 800084a:	210e      	movs	r1, #14
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	187b      	adds	r3, r7, r1
 8000852:	3201      	adds	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	230e      	movs	r3, #14
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b07      	cmp	r3, #7
 800085e:	d9a2      	bls.n	80007a6 <st7565_write_buffer+0x12>
		}
	}
}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b005      	add	sp, #20
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	48000800 	.word	0x48000800
 8000870:	2000040c 	.word	0x2000040c

08000874 <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000880:	1df9      	adds	r1, r7, #7
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <st7565_sendbyte+0x20>)
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	2201      	movs	r2, #1
 8000888:	f003 f9c4 	bl	8003c14 <HAL_SPI_Transmit>
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200004f8 	.word	0x200004f8

08000898 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	0059      	lsls	r1, r3, #1
 80008a0:	2390      	movs	r3, #144	@ 0x90
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	2201      	movs	r2, #1
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fac2 	bl	8002e30 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 80008ac:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <st7565_init+0x150>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fabc 	bl	8002e30 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	0099      	lsls	r1, r3, #2
 80008bc:	2390      	movs	r3, #144	@ 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2201      	movs	r2, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 fab4 	bl	8002e30 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 80008c8:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <st7565_init+0x154>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 faae 	bl	8002e30 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 80008d4:	4b45      	ldr	r3, [pc, #276]	@ (80009ec <st7565_init+0x154>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	@ 0x40
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 faa8 	bl	8002e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	0099      	lsls	r1, r3, #2
 80008e4:	2390      	movs	r3, #144	@ 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 faa0 	bl	8002e30 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 80008f0:	23fa      	movs	r3, #250	@ 0xfa
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fb89 	bl	800200c <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 80008fa:	2380      	movs	r3, #128	@ 0x80
 80008fc:	0099      	lsls	r1, r3, #2
 80008fe:	2390      	movs	r3, #144	@ 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2201      	movs	r2, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fa93 	bl	8002e30 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800090a:	4b37      	ldr	r3, [pc, #220]	@ (80009e8 <st7565_init+0x150>)
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fa8d 	bl	8002e30 <HAL_GPIO_WritePin>
 8000916:	20a3      	movs	r0, #163	@ 0xa3
 8000918:	f7ff ffac 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 800091c:	4b32      	ldr	r3, [pc, #200]	@ (80009e8 <st7565_init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	0018      	movs	r0, r3
 8000924:	f002 fa84 	bl	8002e30 <HAL_GPIO_WritePin>
 8000928:	20a0      	movs	r0, #160	@ 0xa0
 800092a:	f7ff ffa3 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 800092e:	4b2e      	ldr	r3, [pc, #184]	@ (80009e8 <st7565_init+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	@ 0x80
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fa7b 	bl	8002e30 <HAL_GPIO_WritePin>
 800093a:	20c0      	movs	r0, #192	@ 0xc0
 800093c:	f7ff ff9a 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000940:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <st7565_init+0x150>)
 8000942:	2200      	movs	r2, #0
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	0018      	movs	r0, r3
 8000948:	f002 fa72 	bl	8002e30 <HAL_GPIO_WritePin>
 800094c:	2040      	movs	r0, #64	@ 0x40
 800094e:	f7ff ff91 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <st7565_init+0x150>)
 8000954:	2200      	movs	r2, #0
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fa69 	bl	8002e30 <HAL_GPIO_WritePin>
 800095e:	202c      	movs	r0, #44	@ 0x2c
 8000960:	f7ff ff88 	bl	8000874 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000964:	2032      	movs	r0, #50	@ 0x32
 8000966:	f001 fb51 	bl	800200c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 800096a:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <st7565_init+0x150>)
 800096c:	2200      	movs	r2, #0
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	0018      	movs	r0, r3
 8000972:	f002 fa5d 	bl	8002e30 <HAL_GPIO_WritePin>
 8000976:	202e      	movs	r0, #46	@ 0x2e
 8000978:	f7ff ff7c 	bl	8000874 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 800097c:	2032      	movs	r0, #50	@ 0x32
 800097e:	f001 fb45 	bl	800200c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <st7565_init+0x150>)
 8000984:	2200      	movs	r2, #0
 8000986:	2180      	movs	r1, #128	@ 0x80
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fa51 	bl	8002e30 <HAL_GPIO_WritePin>
 800098e:	202f      	movs	r0, #47	@ 0x2f
 8000990:	f7ff ff70 	bl	8000874 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000994:	200a      	movs	r0, #10
 8000996:	f001 fb39 	bl	800200c <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <st7565_init+0x150>)
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	0018      	movs	r0, r3
 80009a2:	f002 fa45 	bl	8002e30 <HAL_GPIO_WritePin>
 80009a6:	2026      	movs	r0, #38	@ 0x26
 80009a8:	f7ff ff64 	bl	8000874 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <st7565_init+0x150>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fa3c 	bl	8002e30 <HAL_GPIO_WritePin>
 80009b8:	20af      	movs	r0, #175	@ 0xaf
 80009ba:	f7ff ff5b 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <st7565_init+0x150>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	2180      	movs	r1, #128	@ 0x80
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 fa33 	bl	8002e30 <HAL_GPIO_WritePin>
 80009ca:	20a4      	movs	r0, #164	@ 0xa4
 80009cc:	f7ff ff52 	bl	8000874 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f81d 	bl	8000a10 <st7565_set_brightness>
 	st7565_clear_screen();
 80009d6:	f000 f83f 	bl	8000a58 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <st7565_init+0x158>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 f897 	bl	8000b10 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000400 	.word	0x48000400
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	0059      	lsls	r1, r3, #1
 80009fc:	2390      	movs	r3, #144	@ 0x90
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fa14 	bl	8002e30 <HAL_GPIO_WritePin>
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <st7565_set_brightness+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fa04 	bl	8002e30 <HAL_GPIO_WritePin>
 8000a28:	2081      	movs	r0, #129	@ 0x81
 8000a2a:	f7ff ff23 	bl	8000874 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <st7565_set_brightness+0x44>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	@ 0x80
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 f9fb 	bl	8002e30 <HAL_GPIO_WritePin>
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	223f      	movs	r2, #63	@ 0x3f
 8000a40:	4013      	ands	r3, r2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff15 	bl	8000874 <st7565_sendbyte>
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	48000800 	.word	0x48000800

08000a58 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e049      	b.n	8000afa <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <st7565_clear_screen+0xb4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 f9df 	bl	8002e30 <HAL_GPIO_WritePin>
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2250      	movs	r2, #80	@ 0x50
 8000a78:	4252      	negs	r2, r2
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fef8 	bl	8000874 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a84:	1dbb      	adds	r3, r7, #6
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e02d      	b.n	8000ae8 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <st7565_clear_screen+0xb4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 f9cc 	bl	8002e30 <HAL_GPIO_WritePin>
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fee6 	bl	8000874 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000aa8:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <st7565_clear_screen+0xb4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 f9be 	bl	8002e30 <HAL_GPIO_WritePin>
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	091b      	lsrs	r3, r3, #4
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	2210      	movs	r2, #16
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fed4 	bl	8000874 <st7565_sendbyte>
			DATA(0x0);
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <st7565_clear_screen+0xb4>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 f9ac 	bl	8002e30 <HAL_GPIO_WritePin>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fecb 	bl	8000874 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000ade:	1dbb      	adds	r3, r7, #6
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	1dbb      	adds	r3, r7, #6
 8000ae4:	3201      	adds	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	1dbb      	adds	r3, r7, #6
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b80      	cmp	r3, #128	@ 0x80
 8000aee:	d9cd      	bls.n	8000a8c <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	3201      	adds	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d9b1      	bls.n	8000a66 <st7565_clear_screen+0xe>
		}
	}
}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	48000800 	.word	0x48000800

08000b10 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	00da      	lsls	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2100      	movs	r1, #0
 8000b20:	0018      	movs	r0, r3
 8000b22:	f006 fc6f 	bl	8007404 <memset>
}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	000c      	movs	r4, r1
 8000b38:	0010      	movs	r0, r2
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	1cfb      	adds	r3, r7, #3
 8000b3e:	1c22      	adds	r2, r4, #0
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	1cbb      	adds	r3, r7, #2
 8000b44:	1c02      	adds	r2, r0, #0
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	1c7b      	adds	r3, r7, #1
 8000b4a:	1c0a      	adds	r2, r1, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000b4e:	1cfb      	adds	r3, r7, #3
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db51      	blt.n	8000bfc <st7565_setpixel+0xce>
 8000b58:	1cbb      	adds	r3, r7, #2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b5e:	d84d      	bhi.n	8000bfc <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000b60:	1c7b      	adds	r3, r7, #1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d023      	beq.n	8000bb0 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000b68:	1cfb      	adds	r3, r7, #3
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	1cbb      	adds	r3, r7, #2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	b2d8      	uxtb	r0, r3
 8000b74:	0003      	movs	r3, r0
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25a      	sxtb	r2, r3
 8000b84:	1cbb      	adds	r3, r7, #2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	2107      	movs	r1, #7
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4099      	lsls	r1, r3
 8000b92:	000b      	movs	r3, r1
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b259      	sxtb	r1, r3
 8000b9a:	1cfb      	adds	r3, r7, #3
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	01db      	lsls	r3, r3, #7
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	189b      	adds	r3, r3, r2
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e026      	b.n	8000bfe <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000bb0:	1cfb      	adds	r3, r7, #3
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	1cbb      	adds	r3, r7, #2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	189b      	adds	r3, r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	1cba      	adds	r2, r7, #2
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	b252      	sxtb	r2, r2
 8000bde:	43d2      	mvns	r2, r2
 8000be0:	b252      	sxtb	r2, r2
 8000be2:	4013      	ands	r3, r2
 8000be4:	b259      	sxtb	r1, r3
 8000be6:	1cfb      	adds	r3, r7, #3
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	0003      	movs	r3, r0
 8000bec:	01db      	lsls	r3, r3, #7
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	189b      	adds	r3, r3, r2
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e000      	b.n	8000bfe <st7565_setpixel+0xd0>
		return;
 8000bfc:	46c0      	nop			@ (mov r8, r8)
}
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b003      	add	sp, #12
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	0008      	movs	r0, r1
 8000c0e:	0011      	movs	r1, r2
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	230b      	movs	r3, #11
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	1c0a      	adds	r2, r1, #0
 8000c20:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8000c22:	e025      	b.n	8000c70 <st7565_drawstring+0x6c>
		st7565_drawchar(buff, x, line, c[0]);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781c      	ldrb	r4, [r3, #0]
 8000c28:	260a      	movs	r6, #10
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	250b      	movs	r5, #11
 8000c30:	197b      	adds	r3, r7, r5
 8000c32:	7819      	ldrb	r1, [r3, #0]
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	0023      	movs	r3, r4
 8000c38:	f000 f824 	bl	8000c84 <st7565_drawchar>
		c++;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8000c42:	0029      	movs	r1, r5
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	3206      	adds	r2, #6
 8000c4c:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b79      	cmp	r3, #121	@ 0x79
 8000c54:	d907      	bls.n	8000c66 <st7565_drawstring+0x62>
			x = 0; // ran out of this line
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
			line++;
 8000c5c:	19bb      	adds	r3, r7, r6
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	19bb      	adds	r3, r7, r6
 8000c62:	3201      	adds	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8000c66:	230a      	movs	r3, #10
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d804      	bhi.n	8000c7a <st7565_drawstring+0x76>
	while (c[0] != 0) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1d5      	bne.n	8000c24 <st7565_drawstring+0x20>
 8000c78:	e000      	b.n	8000c7c <st7565_drawstring+0x78>
			return; // ran out of space :(
 8000c7a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b005      	add	sp, #20
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000c84 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	000c      	movs	r4, r1
 8000c8e:	0010      	movs	r0, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	1cfb      	adds	r3, r7, #3
 8000c94:	1c22      	adds	r2, r4, #0
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	1c7b      	adds	r3, r7, #1
 8000ca0:	1c0a      	adds	r2, r1, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e020      	b.n	8000cf0 <st7565_drawchar+0x6c>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8000cae:	1c7b      	adds	r3, r7, #1
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	189b      	adds	r3, r3, r2
 8000cb8:	001a      	movs	r2, r3
 8000cba:	200f      	movs	r0, #15
 8000cbc:	183b      	adds	r3, r7, r0
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	18d2      	adds	r2, r2, r3
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <st7565_drawchar+0x80>)
 8000cc4:	18d2      	adds	r2, r2, r3
 8000cc6:	1cfb      	adds	r3, r7, #3
 8000cc8:	7819      	ldrb	r1, [r3, #0]
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	01db      	lsls	r3, r3, #7
 8000cd0:	18cb      	adds	r3, r1, r3
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	185b      	adds	r3, r3, r1
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	701a      	strb	r2, [r3, #0]
		x++;
 8000cdc:	1cfb      	adds	r3, r7, #3
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	1cfb      	adds	r3, r7, #3
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8000ce6:	183b      	adds	r3, r7, r0
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	3201      	adds	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d9d9      	bls.n	8000cae <st7565_drawchar+0x2a>
	}
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	08007508 	.word	0x08007508

08000d08 <st7565_drawline>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	000c      	movs	r4, r1
 8000d12:	0010      	movs	r0, r2
 8000d14:	0019      	movs	r1, r3
 8000d16:	1cfb      	adds	r3, r7, #3
 8000d18:	1c22      	adds	r2, r4, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	1cbb      	adds	r3, r7, #2
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	1c7b      	adds	r3, r7, #1
 8000d24:	1c0a      	adds	r2, r1, #0
 8000d26:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8000d30:	1cfa      	adds	r2, r7, #3
 8000d32:	1c7b      	adds	r3, r7, #1
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d908      	bls.n	8000d4e <st7565_drawline+0x46>
		dx = x0 - x1;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	1cf9      	adds	r1, r7, #3
 8000d42:	1c7a      	adds	r2, r7, #1
 8000d44:	7809      	ldrb	r1, [r1, #0]
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <st7565_drawline+0x56>
	else
		dx = x1 - x0;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	1c79      	adds	r1, r7, #1
 8000d54:	1cfa      	adds	r2, r7, #3
 8000d56:	7809      	ldrb	r1, [r1, #0]
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	1a8a      	subs	r2, r1, r2
 8000d5c:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8000d5e:	1cba      	adds	r2, r7, #2
 8000d60:	2020      	movs	r0, #32
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d908      	bls.n	8000d7e <st7565_drawline+0x76>
		dy = y0 - y1;
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	18fa      	adds	r2, r7, r3
 8000d70:	1cb9      	adds	r1, r7, #2
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	7809      	ldrb	r1, [r1, #0]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	1acb      	subs	r3, r1, r3
 8000d7a:	7013      	strb	r3, [r2, #0]
 8000d7c:	e008      	b.n	8000d90 <st7565_drawline+0x88>
	else
		dy = y1 - y0;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	18fa      	adds	r2, r7, r3
 8000d82:	2320      	movs	r3, #32
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	1cb8      	adds	r0, r7, #2
 8000d88:	7819      	ldrb	r1, [r3, #0]
 8000d8a:	7803      	ldrb	r3, [r0, #0]
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8000d90:	200b      	movs	r0, #11
 8000d92:	183a      	adds	r2, r7, r0
 8000d94:	240c      	movs	r4, #12
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d929      	bls.n	8000df4 <st7565_drawline+0xec>
		swap = 1;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8000da8:	2108      	movs	r1, #8
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	193a      	adds	r2, r7, r4
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dx = dy;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	183a      	adds	r2, r7, r0
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	187a      	adds	r2, r7, r1
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	1cfa      	adds	r2, r7, #3
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8000dca:	1cfb      	adds	r3, r7, #3
 8000dcc:	1cba      	adds	r2, r7, #2
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	1c7a      	adds	r2, r7, #1
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 8000de2:	1c7a      	adds	r2, r7, #1
 8000de4:	2020      	movs	r0, #32
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000dec:	183b      	adds	r3, r7, r0
 8000dee:	187a      	adds	r2, r7, r1
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 8000df4:	1cfa      	adds	r2, r7, #3
 8000df6:	1c7b      	adds	r3, r7, #1
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d919      	bls.n	8000e34 <st7565_drawline+0x12c>
		tmp = x0;
 8000e00:	2108      	movs	r1, #8
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	1cfa      	adds	r2, r7, #3
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 8000e0a:	1cfb      	adds	r3, r7, #3
 8000e0c:	1c7a      	adds	r2, r7, #1
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8000e12:	1c7b      	adds	r3, r7, #1
 8000e14:	187a      	adds	r2, r7, r1
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	1cba      	adds	r2, r7, #2
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8000e22:	1cba      	adds	r2, r7, #2
 8000e24:	2020      	movs	r0, #32
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	187a      	adds	r2, r7, r1
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8000e34:	230c      	movs	r3, #12
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	2309      	movs	r3, #9
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8000e44:	2320      	movs	r3, #32
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	1cb9      	adds	r1, r7, #2
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	780b      	ldrb	r3, [r1, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d904      	bls.n	8000e5c <st7565_drawline+0x154>
		ystep = 1;
 8000e52:	230a      	movs	r3, #10
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <st7565_drawline+0x15c>
	else
		ystep = -1;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	22ff      	movs	r2, #255	@ 0xff
 8000e62:	701a      	strb	r2, [r3, #0]
	y = y0;
 8000e64:	230d      	movs	r3, #13
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	1cba      	adds	r2, r7, #2
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000e6e:	230e      	movs	r3, #14
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	1cfa      	adds	r2, r7, #3
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e045      	b.n	8000f06 <st7565_drawline+0x1fe>
		if (swap == 0)
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10d      	bne.n	8000ea0 <st7565_drawline+0x198>
			st7565_setpixel(buff, x, y, color);
 8000e84:	2324      	movs	r3, #36	@ 0x24
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	781c      	ldrb	r4, [r3, #0]
 8000e8a:	230d      	movs	r3, #13
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	230e      	movs	r3, #14
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	7819      	ldrb	r1, [r3, #0]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	0023      	movs	r3, r4
 8000e9a:	f7ff fe48 	bl	8000b2e <st7565_setpixel>
 8000e9e:	e00c      	b.n	8000eba <st7565_drawline+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8000ea0:	2324      	movs	r3, #36	@ 0x24
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781c      	ldrb	r4, [r3, #0]
 8000ea6:	230e      	movs	r3, #14
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	230d      	movs	r3, #13
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	7819      	ldrb	r1, [r3, #0]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	0023      	movs	r3, r4
 8000eb6:	f7ff fe3a 	bl	8000b2e <st7565_setpixel>
		err -= (uint8_t) dy;
 8000eba:	2009      	movs	r0, #9
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8000ece:	183b      	adds	r3, r7, r0
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed4:	d911      	bls.n	8000efa <st7565_drawline+0x1f2>
			y += (uint8_t) ystep;
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	7819      	ldrb	r1, [r3, #0]
 8000edc:	220d      	movs	r2, #13
 8000ede:	18bb      	adds	r3, r7, r2
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	188a      	adds	r2, r1, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	230c      	movs	r3, #12
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	18d3      	adds	r3, r2, r3
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000efa:	210e      	movs	r1, #14
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	3201      	adds	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	230e      	movs	r3, #14
 8000f08:	18fa      	adds	r2, r7, r3
 8000f0a:	1c7b      	adds	r3, r7, #1
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d9b2      	bls.n	8000e7a <st7565_drawline+0x172>
		}
	}
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b005      	add	sp, #20
 8000f1c:	bd90      	pop	{r4, r7, pc}

08000f1e <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		uint8_t color) {
 8000f1e:	b5b0      	push	{r4, r5, r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	000c      	movs	r4, r1
 8000f28:	0010      	movs	r0, r2
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	1cfb      	adds	r3, r7, #3
 8000f2e:	1c22      	adds	r2, r4, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	1cbb      	adds	r3, r7, #2
 8000f34:	1c02      	adds	r2, r0, #0
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	1c7b      	adds	r3, r7, #1
 8000f3a:	1c0a      	adds	r2, r1, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
// stupidest version - just pixels - but fast with internal buffer!
	uint8_t i, j;
	for (i = x; i < x + w; i++) {
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	1cfa      	adds	r2, r7, #3
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e028      	b.n	8000f9c <st7565_fillrect+0x7e>
		for (j = y; j < y + h; j++) {
 8000f4a:	230e      	movs	r3, #14
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	1cba      	adds	r2, r7, #2
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e011      	b.n	8000f7a <st7565_fillrect+0x5c>
			st7565_setpixel(buff, i, j, color);
 8000f56:	2324      	movs	r3, #36	@ 0x24
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	781c      	ldrb	r4, [r3, #0]
 8000f5c:	250e      	movs	r5, #14
 8000f5e:	197b      	adds	r3, r7, r5
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	7819      	ldrb	r1, [r3, #0]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	0023      	movs	r3, r4
 8000f6c:	f7ff fddf 	bl	8000b2e <st7565_setpixel>
		for (j = y; j < y + h; j++) {
 8000f70:	197b      	adds	r3, r7, r5
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	3201      	adds	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	230e      	movs	r3, #14
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	1cbb      	adds	r3, r7, #2
 8000f82:	7819      	ldrb	r1, [r3, #0]
 8000f84:	2320      	movs	r3, #32
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	18cb      	adds	r3, r1, r3
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbe2      	blt.n	8000f56 <st7565_fillrect+0x38>
	for (i = x; i < x + w; i++) {
 8000f90:	210f      	movs	r1, #15
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	3201      	adds	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	7819      	ldrb	r1, [r3, #0]
 8000fa6:	1c7b      	adds	r3, r7, #1
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	18cb      	adds	r3, r1, r3
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbcc      	blt.n	8000f4a <st7565_fillrect+0x2c>
		}
	}
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000fbc <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <interpolation+0x108>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8000fce:	1dba      	adds	r2, r7, #6
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5e52      	ldrsh	r2, [r2, r1]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dc11      	bgt.n	8000ffc <interpolation+0x40>
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <interpolation+0x108>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	5e9b      	ldrsh	r3, [r3, r2]
 8000fde:	001a      	movs	r2, r3
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5e5b      	ldrsh	r3, [r3, r1]
 8000fe6:	435a      	muls	r2, r3
 8000fe8:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <interpolation+0x108>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	5e5b      	ldrsh	r3, [r3, r1]
 8000fee:	0019      	movs	r1, r3
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	f7ff f913 	bl	800021c <__divsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	e05e      	b.n	80010ba <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 8000ffc:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <interpolation+0x108>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	5e9b      	ldrsh	r3, [r3, r2]
 8001002:	1dba      	adds	r2, r7, #6
 8001004:	2100      	movs	r1, #0
 8001006:	5e52      	ldrsh	r2, [r2, r1]
 8001008:	429a      	cmp	r2, r3
 800100a:	db03      	blt.n	8001014 <interpolation+0x58>
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <interpolation+0x108>)
 800100e:	220a      	movs	r2, #10
 8001010:	5e9b      	ldrsh	r3, [r3, r2]
 8001012:	e052      	b.n	80010ba <interpolation+0xfe>
    if (input <= pts[1].x) {
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <interpolation+0x108>)
 8001016:	2204      	movs	r2, #4
 8001018:	5e9b      	ldrsh	r3, [r3, r2]
 800101a:	1dba      	adds	r2, r7, #6
 800101c:	2100      	movs	r1, #0
 800101e:	5e52      	ldrsh	r2, [r2, r1]
 8001020:	429a      	cmp	r2, r3
 8001022:	dc25      	bgt.n	8001070 <interpolation+0xb4>
        return pts[0].y +
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <interpolation+0x108>)
 8001026:	2202      	movs	r2, #2
 8001028:	5e9b      	ldrsh	r3, [r3, r2]
 800102a:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 800102c:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <interpolation+0x108>)
 800102e:	2206      	movs	r2, #6
 8001030:	5e9b      	ldrsh	r3, [r3, r2]
 8001032:	001a      	movs	r2, r3
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <interpolation+0x108>)
 8001036:	2102      	movs	r1, #2
 8001038:	5e5b      	ldrsh	r3, [r3, r1]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	1dba      	adds	r2, r7, #6
 800103e:	2100      	movs	r1, #0
 8001040:	5e52      	ldrsh	r2, [r2, r1]
 8001042:	4920      	ldr	r1, [pc, #128]	@ (80010c4 <interpolation+0x108>)
 8001044:	2000      	movs	r0, #0
 8001046:	5e09      	ldrsh	r1, [r1, r0]
 8001048:	1a52      	subs	r2, r2, r1
 800104a:	435a      	muls	r2, r3
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <interpolation+0x108>)
 800104e:	2104      	movs	r1, #4
 8001050:	5e5b      	ldrsh	r3, [r3, r1]
 8001052:	0019      	movs	r1, r3
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <interpolation+0x108>)
 8001056:	2000      	movs	r0, #0
 8001058:	5e1b      	ldrsh	r3, [r3, r0]
 800105a:	1acb      	subs	r3, r1, r3
 800105c:	0019      	movs	r1, r3
 800105e:	0010      	movs	r0, r2
 8001060:	f7ff f8dc 	bl	800021c <__divsi3>
 8001064:	0003      	movs	r3, r0
        return pts[0].y +
 8001066:	b29b      	uxth	r3, r3
 8001068:	18e3      	adds	r3, r4, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	e024      	b.n	80010ba <interpolation+0xfe>
    } else {

        return pts[1].y +
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <interpolation+0x108>)
 8001072:	2206      	movs	r2, #6
 8001074:	5e9b      	ldrsh	r3, [r3, r2]
 8001076:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <interpolation+0x108>)
 800107a:	220a      	movs	r2, #10
 800107c:	5e9b      	ldrsh	r3, [r3, r2]
 800107e:	001a      	movs	r2, r3
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <interpolation+0x108>)
 8001082:	2106      	movs	r1, #6
 8001084:	5e5b      	ldrsh	r3, [r3, r1]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	1dba      	adds	r2, r7, #6
 800108a:	2100      	movs	r1, #0
 800108c:	5e52      	ldrsh	r2, [r2, r1]
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <interpolation+0x108>)
 8001090:	2004      	movs	r0, #4
 8001092:	5e09      	ldrsh	r1, [r1, r0]
 8001094:	1a52      	subs	r2, r2, r1
 8001096:	435a      	muls	r2, r3
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <interpolation+0x108>)
 800109a:	2108      	movs	r1, #8
 800109c:	5e5b      	ldrsh	r3, [r3, r1]
 800109e:	0019      	movs	r1, r3
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <interpolation+0x108>)
 80010a2:	2004      	movs	r0, #4
 80010a4:	5e1b      	ldrsh	r3, [r3, r0]
 80010a6:	1acb      	subs	r3, r1, r3
 80010a8:	0019      	movs	r1, r3
 80010aa:	0010      	movs	r0, r2
 80010ac:	f7ff f8b6 	bl	800021c <__divsi3>
 80010b0:	0003      	movs	r3, r0
        return pts[1].y +
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	18e3      	adds	r3, r4, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b21b      	sxth	r3, r3
    }
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b003      	add	sp, #12
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	08007a70 	.word	0x08007a70

080010c8 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[10];

static uint16_t filterButton(uint16_t voltIn){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 80010d4:	230e      	movs	r3, #14
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	1dba      	adds	r2, r7, #6
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 80010de:	230d      	movs	r3, #13
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e01c      	b.n	8001122 <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 80010e8:	200d      	movs	r0, #13
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <filterButton+0x8c>)
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	5ad1      	ldrh	r1, [r2, r3]
 80010f6:	220e      	movs	r2, #14
 80010f8:	18bb      	adds	r3, r7, r2
 80010fa:	18ba      	adds	r2, r7, r2
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	188a      	adds	r2, r1, r2
 8001100:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 8001102:	183b      	adds	r3, r7, r0
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	1c59      	adds	r1, r3, #1
 8001108:	183b      	adds	r3, r7, r0
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <filterButton+0x8c>)
 800110e:	0049      	lsls	r1, r1, #1
 8001110:	5ac9      	ldrh	r1, [r1, r3]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <filterButton+0x8c>)
 8001114:	0052      	lsls	r2, r2, #1
 8001116:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001118:	183b      	adds	r3, r7, r0
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	183b      	adds	r3, r7, r0
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	230d      	movs	r3, #13
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b08      	cmp	r3, #8
 800112a:	d9dd      	bls.n	80010e8 <filterButton+0x20>
	}
	MAVectorButton[9]=voltIn;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <filterButton+0x8c>)
 800112e:	1dba      	adds	r2, r7, #6
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001134:	250e      	movs	r5, #14
 8001136:	197c      	adds	r4, r7, r5
 8001138:	197b      	adds	r3, r7, r5
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	210a      	movs	r1, #10
 800113e:	0018      	movs	r0, r3
 8001140:	f7fe ffe2 	bl	8000108 <__udivsi3>
 8001144:	0003      	movs	r3, r0
 8001146:	8023      	strh	r3, [r4, #0]
	return media;
 8001148:	197b      	adds	r3, r7, r5
 800114a:	881b      	ldrh	r3, [r3, #0]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bdb0      	pop	{r4, r5, r7, pc}
 8001154:	20000490 	.word	0x20000490

08001158 <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001164:	230e      	movs	r3, #14
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	1dba      	adds	r2, r7, #6
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 800116e:	230d      	movs	r3, #13
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e01c      	b.n	80011b2 <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 8001178:	200d      	movs	r0, #13
 800117a:	183b      	adds	r3, r7, r0
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <filterVolt+0x8c>)
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	5ad1      	ldrh	r1, [r2, r3]
 8001186:	220e      	movs	r2, #14
 8001188:	18bb      	adds	r3, r7, r2
 800118a:	18ba      	adds	r2, r7, r2
 800118c:	8812      	ldrh	r2, [r2, #0]
 800118e:	188a      	adds	r2, r1, r2
 8001190:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 8001192:	183b      	adds	r3, r7, r0
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	183b      	adds	r3, r7, r0
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <filterVolt+0x8c>)
 800119e:	0049      	lsls	r1, r1, #1
 80011a0:	5ac9      	ldrh	r1, [r1, r3]
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <filterVolt+0x8c>)
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 80011a8:	183b      	adds	r3, r7, r0
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	183b      	adds	r3, r7, r0
 80011ae:	3201      	adds	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	230d      	movs	r3, #13
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d9dd      	bls.n	8001178 <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <filterVolt+0x8c>)
 80011be:	1dba      	adds	r2, r7, #6
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	825a      	strh	r2, [r3, #18]
	media/=10;
 80011c4:	250e      	movs	r5, #14
 80011c6:	197c      	adds	r4, r7, r5
 80011c8:	197b      	adds	r3, r7, r5
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	210a      	movs	r1, #10
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7fe ff9a 	bl	8000108 <__udivsi3>
 80011d4:	0003      	movs	r3, r0
 80011d6:	8023      	strh	r3, [r4, #0]
	return media;
 80011d8:	197b      	adds	r3, r7, r5
 80011da:	881b      	ldrh	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	200004a4 	.word	0x200004a4

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fede 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f848 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f984 	bl	8001500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f8:	f000 f952 	bl	80014a0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80011fc:	f000 f8aa 	bl	8001354 <MX_ADC_Init>
  MX_SPI1_Init();
 8001200:	f000 f910 	bl	8001424 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001204:	f003 fe9e 	bl	8004f44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readAdcVolt */
  readAdcVoltHandle = osThreadNew(readAdcVoltFunction, NULL, &readAdcVolt_attributes);
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <main+0x74>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <main+0x78>)
 800120c:	2100      	movs	r1, #0
 800120e:	0018      	movs	r0, r3
 8001210:	f003 fef2 	bl	8004ff8 <osThreadNew>
 8001214:	0002      	movs	r2, r0
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <main+0x7c>)
 8001218:	601a      	str	r2, [r3, #0]

  /* creation of displayVoltRead */
  displayVoltReadHandle = osThreadNew(displayVoltReadFunction, NULL, &displayVoltRead_attributes);
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <main+0x80>)
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <main+0x84>)
 800121e:	2100      	movs	r1, #0
 8001220:	0018      	movs	r0, r3
 8001222:	f003 fee9 	bl	8004ff8 <osThreadNew>
 8001226:	0002      	movs	r2, r0
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <main+0x88>)
 800122a:	601a      	str	r2, [r3, #0]

  /* creation of readButton */
  readButtonHandle = osThreadNew(readButtonFunction, NULL, &readButton_attributes);
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <main+0x8c>)
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <main+0x90>)
 8001230:	2100      	movs	r1, #0
 8001232:	0018      	movs	r0, r3
 8001234:	f003 fee0 	bl	8004ff8 <osThreadNew>
 8001238:	0002      	movs	r2, r0
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <main+0x94>)
 800123c:	601a      	str	r2, [r3, #0]
  
  if (readButtonHandle != NULL) {
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <main+0x94>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <main+0x66>
      buttonTaskCreated = 1;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e002      	b.n	8001254 <main+0x6c>
  } else {
      buttonTaskCreated = 0;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <main+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001254:	f003 fea2 	bl	8004f9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	e7fd      	b.n	8001258 <main+0x70>
 800125c:	08007a04 	.word	0x08007a04
 8001260:	0800165d 	.word	0x0800165d
 8001264:	200005e4 	.word	0x200005e4
 8001268:	08007a28 	.word	0x08007a28
 800126c:	080016d5 	.word	0x080016d5
 8001270:	200005e8 	.word	0x200005e8
 8001274:	08007a4c 	.word	0x08007a4c
 8001278:	08001e61 	.word	0x08001e61
 800127c:	200005ec 	.word	0x200005ec
 8001280:	200005f1 	.word	0x200005f1

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b099      	sub	sp, #100	@ 0x64
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	242c      	movs	r4, #44	@ 0x2c
 800128c:	193b      	adds	r3, r7, r4
 800128e:	0018      	movs	r0, r3
 8001290:	2334      	movs	r3, #52	@ 0x34
 8001292:	001a      	movs	r2, r3
 8001294:	2100      	movs	r1, #0
 8001296:	f006 f8b5 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129a:	231c      	movs	r3, #28
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	0018      	movs	r0, r3
 80012a0:	2310      	movs	r3, #16
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f006 f8ad 	bl	8007404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012aa:	003b      	movs	r3, r7
 80012ac:	0018      	movs	r0, r3
 80012ae:	231c      	movs	r3, #28
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f006 f8a6 	bl	8007404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80012b8:	0021      	movs	r1, r4
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2212      	movs	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2201      	movs	r2, #1
 80012c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2201      	movs	r2, #1
 80012ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2210      	movs	r2, #16
 80012d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2210      	movs	r2, #16
 80012d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2202      	movs	r2, #2
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0212      	lsls	r2, r2, #8
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	22a0      	movs	r2, #160	@ 0xa0
 80012ea:	0392      	lsls	r2, r2, #14
 80012ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2201      	movs	r2, #1
 80012f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 fdb8 	bl	8002e6c <HAL_RCC_OscConfig>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001300:	f000 fe4e 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	211c      	movs	r1, #28
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2202      	movs	r2, #2
 8001310:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2101      	movs	r1, #1
 8001322:	0018      	movs	r0, r3
 8001324:	f002 f928 	bl	8003578 <HAL_RCC_ClockConfig>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800132c:	f000 fe38 	bl	8001fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001330:	003b      	movs	r3, r7
 8001332:	2202      	movs	r2, #2
 8001334:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001336:	003b      	movs	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133c:	003b      	movs	r3, r7
 800133e:	0018      	movs	r0, r3
 8001340:	f002 fab0 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001348:	f000 fe2a 	bl	8001fa0 <Error_Handler>
  }
}
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b019      	add	sp, #100	@ 0x64
 8001352:	bd90      	pop	{r4, r7, pc}

08001354 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	0018      	movs	r0, r3
 800135e:	230c      	movs	r3, #12
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f006 f84e 	bl	8007404 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001368:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <MX_ADC_Init+0xc8>)
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <MX_ADC_Init+0xcc>)
 800136c:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_ADC_Init+0xc8>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001374:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_ADC_Init+0xc8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_ADC_Init+0xc8>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_ADC_Init+0xc8>)
 8001382:	2201      	movs	r2, #1
 8001384:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_ADC_Init+0xc8>)
 8001388:	2204      	movs	r2, #4
 800138a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_ADC_Init+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_ADC_Init+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_ADC_Init+0xc8>)
 800139a:	2200      	movs	r2, #0
 800139c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC_Init+0xc8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_ADC_Init+0xc8>)
 80013a6:	22c2      	movs	r2, #194	@ 0xc2
 80013a8:	32ff      	adds	r2, #255	@ 0xff
 80013aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_ADC_Init+0xc8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC_Init+0xc8>)
 80013b4:	2224      	movs	r2, #36	@ 0x24
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_ADC_Init+0xc8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_ADC_Init+0xc8>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fe46 	bl	8002054 <HAL_ADC_Init>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80013cc:	f000 fde8 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	0152      	lsls	r2, r2, #5
 80013dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2205      	movs	r2, #5
 80013e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013e4:	1d3a      	adds	r2, r7, #4
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <MX_ADC_Init+0xc8>)
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 f8aa 	bl	8002544 <HAL_ADC_ConfigChannel>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80013f4:	f000 fdd4 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013fe:	1d3a      	adds	r2, r7, #4
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <MX_ADC_Init+0xc8>)
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f001 f89d 	bl	8002544 <HAL_ADC_ConfigChannel>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800140e:	f000 fdc7 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	200004b8 	.word	0x200004b8
 8001420:	40012400 	.word	0x40012400

08001424 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_SPI1_Init+0x74>)
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <MX_SPI1_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001430:	2282      	movs	r2, #130	@ 0x82
 8001432:	0052      	lsls	r2, r2, #1
 8001434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_SPI1_Init+0x74>)
 800143e:	22e0      	movs	r2, #224	@ 0xe0
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_SPI1_Init+0x74>)
 800145a:	2218      	movs	r2, #24
 800145c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_SPI1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001472:	2207      	movs	r2, #7
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_SPI1_Init+0x74>)
 800147e:	2208      	movs	r2, #8
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <MX_SPI1_Init+0x74>)
 8001484:	0018      	movs	r0, r3
 8001486:	f002 fb0d 	bl	8003aa4 <HAL_SPI_Init>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 fd87 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200004f8 	.word	0x200004f8
 800149c:	40013000 	.word	0x40013000

080014a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014a6:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <MX_USART2_UART_Init+0x5c>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014ac:	22e1      	movs	r2, #225	@ 0xe1
 80014ae:	0252      	lsls	r2, r2, #9
 80014b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <MX_USART2_UART_Init+0x58>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f003 f8c1 	bl	800466c <HAL_UART_Init>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ee:	f000 fd57 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000055c 	.word	0x2000055c
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b08b      	sub	sp, #44	@ 0x2c
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	2414      	movs	r4, #20
 8001508:	193b      	adds	r3, r7, r4
 800150a:	0018      	movs	r0, r3
 800150c:	2314      	movs	r3, #20
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f005 ff77 	bl	8007404 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <MX_GPIO_Init+0x150>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0309      	lsls	r1, r1, #12
 8001520:	430a      	orrs	r2, r1
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001538:	2180      	movs	r1, #128	@ 0x80
 800153a:	03c9      	lsls	r1, r1, #15
 800153c:	430a      	orrs	r2, r1
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	03db      	lsls	r3, r3, #15
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001554:	2180      	movs	r1, #128	@ 0x80
 8001556:	0289      	lsls	r1, r1, #10
 8001558:	430a      	orrs	r2, r1
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <MX_GPIO_Init+0x150>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <MX_GPIO_Init+0x150>)
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <MX_GPIO_Init+0x150>)
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	02c9      	lsls	r1, r1, #11
 8001574:	430a      	orrs	r2, r1
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <MX_GPIO_Init+0x150>)
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	02db      	lsls	r3, r3, #11
 8001580:	4013      	ands	r3, r2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 8001586:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <MX_GPIO_Init+0x154>)
 8001588:	2200      	movs	r2, #0
 800158a:	2180      	movs	r1, #128	@ 0x80
 800158c:	0018      	movs	r0, r3
 800158e:	f001 fc4f 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8001592:	23c0      	movs	r3, #192	@ 0xc0
 8001594:	0099      	lsls	r1, r3, #2
 8001596:	2390      	movs	r3, #144	@ 0x90
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	2200      	movs	r2, #0
 800159c:	0018      	movs	r0, r3
 800159e:	f001 fc47 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <MX_GPIO_Init+0x158>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	@ 0x40
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 fc41 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	0192      	lsls	r2, r2, #6
 80015b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2284      	movs	r2, #132	@ 0x84
 80015ba:	0392      	lsls	r2, r2, #14
 80015bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <MX_GPIO_Init+0x154>)
 80015c8:	0019      	movs	r1, r3
 80015ca:	0010      	movs	r0, r2
 80015cc:	f001 fab8 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2201      	movs	r2, #1
 80015da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <MX_GPIO_Init+0x154>)
 80015ec:	0019      	movs	r1, r3
 80015ee:	0010      	movs	r0, r2
 80015f0:	f001 faa6 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 80015f4:	0021      	movs	r1, r4
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	22c0      	movs	r2, #192	@ 0xc0
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	000c      	movs	r4, r1
 8001600:	193b      	adds	r3, r7, r4
 8001602:	2201      	movs	r2, #1
 8001604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	193b      	adds	r3, r7, r4
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	193b      	adds	r3, r7, r4
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	193a      	adds	r2, r7, r4
 8001614:	2390      	movs	r3, #144	@ 0x90
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f001 fa90 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8001620:	0021      	movs	r1, r4
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2240      	movs	r2, #64	@ 0x40
 8001626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2201      	movs	r2, #1
 800162c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 800163a:	187b      	adds	r3, r7, r1
 800163c:	4a06      	ldr	r2, [pc, #24]	@ (8001658 <MX_GPIO_Init+0x158>)
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f001 fa7d 	bl	8002b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b00b      	add	sp, #44	@ 0x2c
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	48000800 	.word	0x48000800
 8001658:	48000400 	.word	0x48000400

0800165c <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <readAdcVoltFunction+0x6c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2202      	movs	r2, #2
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
	      HAL_ADC_Start(&hadc);
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <readAdcVoltFunction+0x6c>)
 800166e:	0018      	movs	r0, r3
 8001670:	f000 fe30 	bl	80022d4 <HAL_ADC_Start>
	      if(HAL_ADC_PollForConversion(&hadc, 30)==HAL_OK)
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <readAdcVoltFunction+0x6c>)
 8001676:	211e      	movs	r1, #30
 8001678:	0018      	movs	r0, r3
 800167a:	f000 febf 	bl	80023fc <HAL_ADC_PollForConversion>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d108      	bne.n	8001694 <readAdcVoltFunction+0x38>
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <readAdcVoltFunction+0x6c>)
 8001684:	0018      	movs	r0, r3
 8001686:	f000 ff51 	bl	800252c <HAL_ADC_GetValue>
 800168a:	0003      	movs	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <readAdcVoltFunction+0x70>)
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	e002      	b.n	800169a <readAdcVoltFunction+0x3e>
	      else voltReadRaw=0;
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <readAdcVoltFunction+0x70>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]

	      HAL_ADC_Stop(&hadc);
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <readAdcVoltFunction+0x6c>)
 800169c:	0018      	movs	r0, r3
 800169e:	f000 fe6d 	bl	800237c <HAL_ADC_Stop>

	      voltRead = filterVolt(interpolation(voltReadRaw));
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <readAdcVoltFunction+0x70>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fc87 	bl	8000fbc <interpolation>
 80016ae:	0003      	movs	r3, r0
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff fd50 	bl	8001158 <filterVolt>
 80016b8:	0003      	movs	r3, r0
 80016ba:	001a      	movs	r2, r3
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <readAdcVoltFunction+0x74>)
 80016be:	801a      	strh	r2, [r3, #0]
    osDelay(5);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f003 fd41 	bl	8005148 <osDelay>
	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 80016c6:	e7cd      	b.n	8001664 <readAdcVoltFunction+0x8>
 80016c8:	200004b8 	.word	0x200004b8
 80016cc:	20000004 	.word	0x20000004
 80016d0:	20000484 	.word	0x20000484

080016d4 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void *argument)
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	b0b9      	sub	sp, #228	@ 0xe4
 80016d8:	af02      	add	r7, sp, #8
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayVoltReadFunction */
  /* Infinite loop */
				st7565_init();
 80016dc:	f7ff f8dc 	bl	8000898 <st7565_init>
  			  st7565_backlight_enable();
 80016e0:	f7ff f988 	bl	80009f4 <st7565_backlight_enable>
  			  st7565_clear_screen();
 80016e4:	f7ff f9b8 	bl	8000a58 <st7565_clear_screen>
  			st7565_set_brightness(0);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff f991 	bl	8000a10 <st7565_set_brightness>
  			//osDelay(1000);

  			//st7565_fade_in(10);


  			  st7565_clear_buffer(buffer);
 80016ee:	4bb7      	ldr	r3, [pc, #732]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff fa0d 	bl	8000b10 <st7565_clear_buffer>

  			    			  //Animatie jmekera de startup

  			  uint8_t spacingx=126/10; //Cat de distantate sunt liniile in animatie x
 80016f6:	23b3      	movs	r3, #179	@ 0xb3
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	220c      	movs	r2, #12
 80016fc:	701a      	strb	r2, [r3, #0]
  			  uint8_t spacingy=63/6;
 80016fe:	23b2      	movs	r3, #178	@ 0xb2
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	220a      	movs	r2, #10
 8001704:	701a      	strb	r2, [r3, #0]
  			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001706:	23d6      	movs	r3, #214	@ 0xd6
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e0bc      	b.n	800188a <displayVoltReadFunction+0x1b6>
  				  //spacing=5+i/10;
  				  if(i%4==0)st7565_set_brightness(i/4);
 8001710:	21d6      	movs	r1, #214	@ 0xd6
 8001712:	187b      	adds	r3, r7, r1
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	2203      	movs	r2, #3
 8001718:	4013      	ands	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <displayVoltReadFunction+0x5c>
 8001720:	187b      	adds	r3, r7, r1
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	b29b      	uxth	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff f970 	bl	8000a10 <st7565_set_brightness>
  				  uint16_t j=i/2;
 8001730:	2370      	movs	r3, #112	@ 0x70
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	22d6      	movs	r2, #214	@ 0xd6
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	0852      	lsrs	r2, r2, #1
 800173c:	801a      	strh	r2, [r3, #0]
  				  st7565_clear_buffer(buffer);
 800173e:	4ba3      	ldr	r3, [pc, #652]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff f9e5 	bl	8000b10 <st7565_clear_buffer>
  				  //Linie de la i,j la marginea dreapta
  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001746:	23d4      	movs	r3, #212	@ 0xd4
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	2200      	movs	r2, #0
 800174c:	801a      	strh	r2, [r3, #0]
 800174e:	e01b      	b.n	8001788 <displayVoltReadFunction+0xb4>
  					st7565_drawline(buffer,i,j,126,j2,1);
 8001750:	23d6      	movs	r3, #214	@ 0xd6
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b2d9      	uxtb	r1, r3
 8001758:	2370      	movs	r3, #112	@ 0x70
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	25d4      	movs	r5, #212	@ 0xd4
 8001762:	197b      	adds	r3, r7, r5
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4898      	ldr	r0, [pc, #608]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 800176a:	2401      	movs	r4, #1
 800176c:	9401      	str	r4, [sp, #4]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	237e      	movs	r3, #126	@ 0x7e
 8001772:	f7ff fac9 	bl	8000d08 <st7565_drawline>
  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001776:	23b2      	movs	r3, #178	@ 0xb2
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b299      	uxth	r1, r3
 800177e:	197b      	adds	r3, r7, r5
 8001780:	197a      	adds	r2, r7, r5
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	188a      	adds	r2, r1, r2
 8001786:	801a      	strh	r2, [r3, #0]
 8001788:	23d4      	movs	r3, #212	@ 0xd4
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001790:	d9de      	bls.n	8001750 <displayVoltReadFunction+0x7c>
  				  }
  				//Linie de la i,j la marginea stanga
  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001792:	23d2      	movs	r3, #210	@ 0xd2
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2200      	movs	r2, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	e01b      	b.n	80017d4 <displayVoltReadFunction+0x100>
  				  					st7565_drawline(buffer,i,j,0,j2,1);
 800179c:	23d6      	movs	r3, #214	@ 0xd6
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b2d9      	uxtb	r1, r3
 80017a4:	2370      	movs	r3, #112	@ 0x70
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	25d2      	movs	r5, #210	@ 0xd2
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4885      	ldr	r0, [pc, #532]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 80017b6:	2401      	movs	r4, #1
 80017b8:	9401      	str	r4, [sp, #4]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	f7ff faa3 	bl	8000d08 <st7565_drawline>
  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80017c2:	23b2      	movs	r3, #178	@ 0xb2
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b299      	uxth	r1, r3
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	197a      	adds	r2, r7, r5
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	188a      	adds	r2, r1, r2
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	23d2      	movs	r3, #210	@ 0xd2
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b3f      	cmp	r3, #63	@ 0x3f
 80017dc:	d9de      	bls.n	800179c <displayVoltReadFunction+0xc8>
  				  				  }

  				  //Linie de la i,j la margine jos
  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80017de:	23d0      	movs	r3, #208	@ 0xd0
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2200      	movs	r2, #0
 80017e4:	801a      	strh	r2, [r3, #0]
 80017e6:	e01b      	b.n	8001820 <displayVoltReadFunction+0x14c>
  				  		st7565_drawline(buffer,i,j,i2,63,1);
 80017e8:	23d6      	movs	r3, #214	@ 0xd6
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	2370      	movs	r3, #112	@ 0x70
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	25d0      	movs	r5, #208	@ 0xd0
 80017fa:	197b      	adds	r3, r7, r5
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4872      	ldr	r0, [pc, #456]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 8001802:	2401      	movs	r4, #1
 8001804:	9401      	str	r4, [sp, #4]
 8001806:	243f      	movs	r4, #63	@ 0x3f
 8001808:	9400      	str	r4, [sp, #0]
 800180a:	f7ff fa7d 	bl	8000d08 <st7565_drawline>
  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800180e:	23b3      	movs	r3, #179	@ 0xb3
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b299      	uxth	r1, r3
 8001816:	197b      	adds	r3, r7, r5
 8001818:	197a      	adds	r2, r7, r5
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	188a      	adds	r2, r1, r2
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	23d0      	movs	r3, #208	@ 0xd0
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b7e      	cmp	r3, #126	@ 0x7e
 8001828:	d9de      	bls.n	80017e8 <displayVoltReadFunction+0x114>
  				  				  }
  				//Linie de la i,j la margine sus
  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800182a:	23ce      	movs	r3, #206	@ 0xce
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	e01b      	b.n	800186c <displayVoltReadFunction+0x198>
  				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 8001834:	23d6      	movs	r3, #214	@ 0xd6
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b2d9      	uxtb	r1, r3
 800183c:	2370      	movs	r3, #112	@ 0x70
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	25ce      	movs	r5, #206	@ 0xce
 8001846:	197b      	adds	r3, r7, r5
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	485f      	ldr	r0, [pc, #380]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 800184e:	2401      	movs	r4, #1
 8001850:	9401      	str	r4, [sp, #4]
 8001852:	2400      	movs	r4, #0
 8001854:	9400      	str	r4, [sp, #0]
 8001856:	f7ff fa57 	bl	8000d08 <st7565_drawline>
  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800185a:	23b3      	movs	r3, #179	@ 0xb3
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b299      	uxth	r1, r3
 8001862:	197b      	adds	r3, r7, r5
 8001864:	197a      	adds	r2, r7, r5
 8001866:	8812      	ldrh	r2, [r2, #0]
 8001868:	188a      	adds	r2, r1, r2
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	23ce      	movs	r3, #206	@ 0xce
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b7e      	cmp	r3, #126	@ 0x7e
 8001874:	d9de      	bls.n	8001834 <displayVoltReadFunction+0x160>
  				  				  }

  				//deseneaza frame
  				st7565_write_buffer(buffer);
 8001876:	4b55      	ldr	r3, [pc, #340]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 8001878:	0018      	movs	r0, r3
 800187a:	f7fe ff8b 	bl	8000794 <st7565_write_buffer>
  			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 800187e:	22d6      	movs	r2, #214	@ 0xd6
 8001880:	18bb      	adds	r3, r7, r2
 8001882:	18ba      	adds	r2, r7, r2
 8001884:	8812      	ldrh	r2, [r2, #0]
 8001886:	3202      	adds	r2, #2
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	23d6      	movs	r3, #214	@ 0xd6
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	2b3f      	cmp	r3, #63	@ 0x3f
 8001892:	d800      	bhi.n	8001896 <displayVoltReadFunction+0x1c2>
 8001894:	e73c      	b.n	8001710 <displayVoltReadFunction+0x3c>
				//HAL_Delay(50);

  				//osDelay(2);

  			  }
  			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001896:	23cc      	movs	r3, #204	@ 0xcc
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2240      	movs	r2, #64	@ 0x40
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	e0c2      	b.n	8001a26 <displayVoltReadFunction+0x352>
  				//spacing=11-(i-64)/10;
  				if(i%4==0)st7565_set_brightness((126-i)/4);
 80018a0:	21cc      	movs	r1, #204	@ 0xcc
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <displayVoltReadFunction+0x1f2>
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	227e      	movs	r2, #126	@ 0x7e
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	d500      	bpl.n	80018bc <displayVoltReadFunction+0x1e8>
 80018ba:	3303      	adds	r3, #3
 80018bc:	109b      	asrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff f8a5 	bl	8000a10 <st7565_set_brightness>
  			  				  uint16_t j=i/2;
 80018c6:	2372      	movs	r3, #114	@ 0x72
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	22cc      	movs	r2, #204	@ 0xcc
 80018cc:	18ba      	adds	r2, r7, r2
 80018ce:	8812      	ldrh	r2, [r2, #0]
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	801a      	strh	r2, [r3, #0]
  			  				  st7565_clear_buffer(buffer);
 80018d4:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff f91a 	bl	8000b10 <st7565_clear_buffer>
  			  				//Linie de la i,j la marginea dreapta
  			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80018dc:	23ca      	movs	r3, #202	@ 0xca
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	e01b      	b.n	800191e <displayVoltReadFunction+0x24a>
  			  				  					st7565_drawline(buffer,i,j,126,j2,1);
 80018e6:	23cc      	movs	r3, #204	@ 0xcc
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b2d9      	uxtb	r1, r3
 80018ee:	2372      	movs	r3, #114	@ 0x72
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	25ca      	movs	r5, #202	@ 0xca
 80018f8:	197b      	adds	r3, r7, r5
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4833      	ldr	r0, [pc, #204]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 8001900:	2401      	movs	r4, #1
 8001902:	9401      	str	r4, [sp, #4]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	237e      	movs	r3, #126	@ 0x7e
 8001908:	f7ff f9fe 	bl	8000d08 <st7565_drawline>
  			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 800190c:	23b2      	movs	r3, #178	@ 0xb2
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b299      	uxth	r1, r3
 8001914:	197b      	adds	r3, r7, r5
 8001916:	197a      	adds	r2, r7, r5
 8001918:	8812      	ldrh	r2, [r2, #0]
 800191a:	188a      	adds	r2, r1, r2
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	23ca      	movs	r3, #202	@ 0xca
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	2b3f      	cmp	r3, #63	@ 0x3f
 8001926:	d9de      	bls.n	80018e6 <displayVoltReadFunction+0x212>
  			  				  				  }
  			  				  				//Linie de la i,j la marginea stanga
  			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001928:	23c8      	movs	r3, #200	@ 0xc8
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	e01b      	b.n	800196a <displayVoltReadFunction+0x296>
  			  				  				  					st7565_drawline(buffer,i,j,0,j2,1);
 8001932:	23cc      	movs	r3, #204	@ 0xcc
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	2372      	movs	r3, #114	@ 0x72
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	25c8      	movs	r5, #200	@ 0xc8
 8001944:	197b      	adds	r3, r7, r5
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4820      	ldr	r0, [pc, #128]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 800194c:	2401      	movs	r4, #1
 800194e:	9401      	str	r4, [sp, #4]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	f7ff f9d8 	bl	8000d08 <st7565_drawline>
  			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001958:	23b2      	movs	r3, #178	@ 0xb2
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b299      	uxth	r1, r3
 8001960:	197b      	adds	r3, r7, r5
 8001962:	197a      	adds	r2, r7, r5
 8001964:	8812      	ldrh	r2, [r2, #0]
 8001966:	188a      	adds	r2, r1, r2
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	23c8      	movs	r3, #200	@ 0xc8
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b3f      	cmp	r3, #63	@ 0x3f
 8001972:	d9de      	bls.n	8001932 <displayVoltReadFunction+0x25e>
  			  				  				  				  }

  			  				  				  //Linie de la i,j la margine jos
  			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001974:	23c6      	movs	r3, #198	@ 0xc6
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
 800197c:	e01b      	b.n	80019b6 <displayVoltReadFunction+0x2e2>
  			  				  				  		st7565_drawline(buffer,i,j,i2,63,1);
 800197e:	23cc      	movs	r3, #204	@ 0xcc
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b2d9      	uxtb	r1, r3
 8001986:	2372      	movs	r3, #114	@ 0x72
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	25c6      	movs	r5, #198	@ 0xc6
 8001990:	197b      	adds	r3, r7, r5
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	480d      	ldr	r0, [pc, #52]	@ (80019cc <displayVoltReadFunction+0x2f8>)
 8001998:	2401      	movs	r4, #1
 800199a:	9401      	str	r4, [sp, #4]
 800199c:	243f      	movs	r4, #63	@ 0x3f
 800199e:	9400      	str	r4, [sp, #0]
 80019a0:	f7ff f9b2 	bl	8000d08 <st7565_drawline>
  			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80019a4:	23b3      	movs	r3, #179	@ 0xb3
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b299      	uxth	r1, r3
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	197a      	adds	r2, r7, r5
 80019b0:	8812      	ldrh	r2, [r2, #0]
 80019b2:	188a      	adds	r2, r1, r2
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	23c6      	movs	r3, #198	@ 0xc6
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80019be:	d9de      	bls.n	800197e <displayVoltReadFunction+0x2aa>
  			  				  				  }
  			  				  				//Linie de la i,j la margine sus
  			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80019c0:	23c4      	movs	r3, #196	@ 0xc4
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
 80019c8:	e01e      	b.n	8001a08 <displayVoltReadFunction+0x334>
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	2000000c 	.word	0x2000000c
  			  				  				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 80019d0:	23cc      	movs	r3, #204	@ 0xcc
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b2d9      	uxtb	r1, r3
 80019d8:	2372      	movs	r3, #114	@ 0x72
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	25c4      	movs	r5, #196	@ 0xc4
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	48c7      	ldr	r0, [pc, #796]	@ (8001d08 <displayVoltReadFunction+0x634>)
 80019ea:	2401      	movs	r4, #1
 80019ec:	9401      	str	r4, [sp, #4]
 80019ee:	2400      	movs	r4, #0
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	f7ff f989 	bl	8000d08 <st7565_drawline>
  			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80019f6:	23b3      	movs	r3, #179	@ 0xb3
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b299      	uxth	r1, r3
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	197a      	adds	r2, r7, r5
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	188a      	adds	r2, r1, r2
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	23c4      	movs	r3, #196	@ 0xc4
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a10:	d9de      	bls.n	80019d0 <displayVoltReadFunction+0x2fc>
  			  				  				  				  }

  			  				//deseneaza frame
  			  				st7565_write_buffer(buffer);
 8001a12:	4bbd      	ldr	r3, [pc, #756]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe febd 	bl	8000794 <st7565_write_buffer>
  			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001a1a:	22cc      	movs	r2, #204	@ 0xcc
 8001a1c:	18bb      	adds	r3, r7, r2
 8001a1e:	18ba      	adds	r2, r7, r2
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	3202      	adds	r2, #2
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	23cc      	movs	r3, #204	@ 0xcc
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a2e:	d800      	bhi.n	8001a32 <displayVoltReadFunction+0x35e>
 8001a30:	e736      	b.n	80018a0 <displayVoltReadFunction+0x1cc>


  			  //HAL_ReadPin
  			  //Trimitem comanda sa desenam

  			st7565_set_brightness(0);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7fe ffec 	bl	8000a10 <st7565_set_brightness>
  for(;;)
  {
	  //st7565_fillrect(buffer,10,10,10,10,1);
	  if(displayMode==0){
 8001a38:	4bb4      	ldr	r3, [pc, #720]	@ (8001d0c <displayVoltReadFunction+0x638>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d15e      	bne.n	8001afe <displayVoltReadFunction+0x42a>
	  st7565_clear_buffer(buffer);
 8001a40:	4bb1      	ldr	r3, [pc, #708]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff f864 	bl	8000b10 <st7565_clear_buffer>
	  st7565_drawstring(buffer,0,0,"Volt:");
 8001a48:	4bb1      	ldr	r3, [pc, #708]	@ (8001d10 <displayVoltReadFunction+0x63c>)
 8001a4a:	48af      	ldr	r0, [pc, #700]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f7ff f8d8 	bl	8000c04 <st7565_drawstring>
	    			char volt[100];
	    			itoa(voltRead,volt,10);
 8001a54:	4baf      	ldr	r3, [pc, #700]	@ (8001d14 <displayVoltReadFunction+0x640>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	240c      	movs	r4, #12
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	220a      	movs	r2, #10
 8001a60:	0019      	movs	r1, r3
 8001a62:	f005 fc97 	bl	8007394 <itoa>
	    			if(voltRead<10){
 8001a66:	4bab      	ldr	r3, [pc, #684]	@ (8001d14 <displayVoltReadFunction+0x640>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d811      	bhi.n	8001a92 <displayVoltReadFunction+0x3be>
	    				volt[4]='\0';
 8001a6e:	0021      	movs	r1, r4
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[0];
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	70da      	strb	r2, [r3, #3]
	    				volt[2]='0';
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2230      	movs	r2, #48	@ 0x30
 8001a82:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	222e      	movs	r2, #46	@ 0x2e
 8001a88:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2230      	movs	r2, #48	@ 0x30
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e029      	b.n	8001ae6 <displayVoltReadFunction+0x412>
	    			}
	    			else if(voltRead>=10&&voltRead<100){
 8001a92:	4ba0      	ldr	r3, [pc, #640]	@ (8001d14 <displayVoltReadFunction+0x640>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b09      	cmp	r3, #9
 8001a98:	d916      	bls.n	8001ac8 <displayVoltReadFunction+0x3f4>
 8001a9a:	4b9e      	ldr	r3, [pc, #632]	@ (8001d14 <displayVoltReadFunction+0x640>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b63      	cmp	r3, #99	@ 0x63
 8001aa0:	d812      	bhi.n	8001ac8 <displayVoltReadFunction+0x3f4>
	    				volt[4]='\0';
 8001aa2:	210c      	movs	r1, #12
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[1];
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	785a      	ldrb	r2, [r3, #1]
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[0];
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	222e      	movs	r2, #46	@ 0x2e
 8001abe:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2230      	movs	r2, #48	@ 0x30
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e00e      	b.n	8001ae6 <displayVoltReadFunction+0x412>
	    			}
	    			else{
	    				volt[4]='\0';
 8001ac8:	210c      	movs	r1, #12
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[2];
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	789a      	ldrb	r2, [r3, #2]
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[1];
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	785a      	ldrb	r2, [r3, #1]
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	222e      	movs	r2, #46	@ 0x2e
 8001ae4:	705a      	strb	r2, [r3, #1]
	    				//volt[0]=volt[0];
	    			}
	    			st7565_drawstring(buffer,0,1,volt);
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	4887      	ldr	r0, [pc, #540]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	2100      	movs	r1, #0
 8001af0:	f7ff f888 	bl	8000c04 <st7565_drawstring>
	  st7565_write_buffer(buffer);}
 8001af4:	4b84      	ldr	r3, [pc, #528]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7fe fe4c 	bl	8000794 <st7565_write_buffer>
 8001afc:	e1a0      	b.n	8001e40 <displayVoltReadFunction+0x76c>
	  else if(displayMode==1){
 8001afe:	4b83      	ldr	r3, [pc, #524]	@ (8001d0c <displayVoltReadFunction+0x638>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d000      	beq.n	8001b08 <displayVoltReadFunction+0x434>
 8001b06:	e19b      	b.n	8001e40 <displayVoltReadFunction+0x76c>
      st7565_clear_buffer(buffer);
 8001b08:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff f800 	bl	8000b10 <st7565_clear_buffer>
      st7565_drawstring(buffer,30,2,"Volt Range");
 8001b10:	4b81      	ldr	r3, [pc, #516]	@ (8001d18 <displayVoltReadFunction+0x644>)
 8001b12:	487d      	ldr	r0, [pc, #500]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001b14:	2202      	movs	r2, #2
 8001b16:	211e      	movs	r1, #30
 8001b18:	f7ff f874 	bl	8000c04 <st7565_drawstring>
      int bar_x0 = 5;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	22ac      	movs	r2, #172	@ 0xac
 8001b20:	18b9      	adds	r1, r7, r2
 8001b22:	600b      	str	r3, [r1, #0]
      int bar_x1 = 121;
 8001b24:	2379      	movs	r3, #121	@ 0x79
 8001b26:	20a8      	movs	r0, #168	@ 0xa8
 8001b28:	1839      	adds	r1, r7, r0
 8001b2a:	600b      	str	r3, [r1, #0]
      int bar_y0 = 30;
 8001b2c:	231e      	movs	r3, #30
 8001b2e:	24a4      	movs	r4, #164	@ 0xa4
 8001b30:	1939      	adds	r1, r7, r4
 8001b32:	600b      	str	r3, [r1, #0]
      int bar_y1 = 37;
 8001b34:	2325      	movs	r3, #37	@ 0x25
 8001b36:	26a0      	movs	r6, #160	@ 0xa0
 8001b38:	19b9      	adds	r1, r7, r6
 8001b3a:	600b      	str	r3, [r1, #0]
      int squares = 10;
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	219c      	movs	r1, #156	@ 0x9c
 8001b40:	187d      	adds	r5, r7, r1
 8001b42:	602b      	str	r3, [r5, #0]
      int inner_x0 = bar_x0 + 1;
 8001b44:	18bb      	adds	r3, r7, r2
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	2598      	movs	r5, #152	@ 0x98
 8001b4c:	197a      	adds	r2, r7, r5
 8001b4e:	6013      	str	r3, [r2, #0]
      int inner_x1 = bar_x1 - 1;
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	2294      	movs	r2, #148	@ 0x94
 8001b58:	18b8      	adds	r0, r7, r2
 8001b5a:	6003      	str	r3, [r0, #0]
      int inner_y0 = bar_y0 + 1;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	2090      	movs	r0, #144	@ 0x90
 8001b64:	1838      	adds	r0, r7, r0
 8001b66:	6003      	str	r3, [r0, #0]
      int inner_y1 = bar_y1 - 1;
 8001b68:	19bb      	adds	r3, r7, r6
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	208c      	movs	r0, #140	@ 0x8c
 8001b70:	1838      	adds	r0, r7, r0
 8001b72:	6003      	str	r3, [r0, #0]
      int inner_width = inner_x1 - inner_x0 + 1;
 8001b74:	18bb      	adds	r3, r7, r2
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	197b      	adds	r3, r7, r5
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	2688      	movs	r6, #136	@ 0x88
 8001b82:	19ba      	adds	r2, r7, r6
 8001b84:	6013      	str	r3, [r2, #0]
      int square_width = inner_width / squares;
 8001b86:	000c      	movs	r4, r1
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	19bb      	adds	r3, r7, r6
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	f7fe fb44 	bl	800021c <__divsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	2284      	movs	r2, #132	@ 0x84
 8001b98:	18b9      	adds	r1, r7, r2
 8001b9a:	600b      	str	r3, [r1, #0]
      int remainder = inner_width - square_width * squares;
 8001b9c:	18bb      	adds	r3, r7, r2
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0021      	movs	r1, r4
 8001ba2:	187a      	adds	r2, r7, r1
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4353      	muls	r3, r2
 8001ba8:	19ba      	adds	r2, r7, r6
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	18ba      	adds	r2, r7, r2
 8001bb2:	6013      	str	r3, [r2, #0]
      int volt_step = 330 / squares;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	23a5      	movs	r3, #165	@ 0xa5
 8001bba:	0058      	lsls	r0, r3, #1
 8001bbc:	f7fe fb2e 	bl	800021c <__divsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      int x = inner_x0;
 8001bc4:	197b      	adds	r3, r7, r5
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	22c0      	movs	r2, #192	@ 0xc0
 8001bca:	18ba      	adds	r2, r7, r2
 8001bcc:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	22bc      	movs	r2, #188	@ 0xbc
 8001bd2:	18ba      	adds	r2, r7, r2
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e049      	b.n	8001c6c <displayVoltReadFunction+0x598>
          int w = square_width + (i < remainder ? 1 : 0);
 8001bd8:	2301      	movs	r3, #1
 8001bda:	1c19      	adds	r1, r3, #0
 8001bdc:	23bc      	movs	r3, #188	@ 0xbc
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	db01      	blt.n	8001bf0 <displayVoltReadFunction+0x51c>
 8001bec:	2300      	movs	r3, #0
 8001bee:	1c19      	adds	r1, r3, #0
 8001bf0:	b2cb      	uxtb	r3, r1
 8001bf2:	001a      	movs	r2, r3
 8001bf4:	2384      	movs	r3, #132	@ 0x84
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	189b      	adds	r3, r3, r2
 8001bfc:	67bb      	str	r3, [r7, #120]	@ 0x78
          int threshold = (i + 1) * volt_step;
 8001bfe:	23bc      	movs	r3, #188	@ 0xbc
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c08:	4353      	muls	r3, r2
 8001c0a:	677b      	str	r3, [r7, #116]	@ 0x74
          if(voltRead >= threshold) {
 8001c0c:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <displayVoltReadFunction+0x640>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	001a      	movs	r2, r3
 8001c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c14:	4293      	cmp	r3, r2
 8001c16:	dc1c      	bgt.n	8001c52 <displayVoltReadFunction+0x57e>
              st7565_fillrect(buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b2d9      	uxtb	r1, r3
 8001c20:	2090      	movs	r0, #144	@ 0x90
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b2dc      	uxtb	r4, r3
 8001c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c2a:	b2dd      	uxtb	r5, r3
 8001c2c:	238c      	movs	r3, #140	@ 0x8c
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	183b      	adds	r3, r7, r0
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4831      	ldr	r0, [pc, #196]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	9201      	str	r2, [sp, #4]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	002b      	movs	r3, r5
 8001c4c:	0022      	movs	r2, r4
 8001c4e:	f7ff f966 	bl	8000f1e <st7565_fillrect>
          }
          x += w;
 8001c52:	21c0      	movs	r1, #192	@ 0xc0
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c5a:	18d3      	adds	r3, r2, r3
 8001c5c:	187a      	adds	r2, r7, r1
 8001c5e:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001c60:	22bc      	movs	r2, #188	@ 0xbc
 8001c62:	18bb      	adds	r3, r7, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	18ba      	adds	r2, r7, r2
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	23bc      	movs	r3, #188	@ 0xbc
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	239c      	movs	r3, #156	@ 0x9c
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbad      	blt.n	8001bd8 <displayVoltReadFunction+0x504>
      }
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001c7c:	23ac      	movs	r3, #172	@ 0xac
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	22b8      	movs	r2, #184	@ 0xb8
 8001c86:	18ba      	adds	r2, r7, r2
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e02c      	b.n	8001ce6 <displayVoltReadFunction+0x612>
          if(px != bar_x0 + 1 && px != bar_x1 - 1) {
 8001c8c:	23ac      	movs	r3, #172	@ 0xac
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	24b8      	movs	r4, #184	@ 0xb8
 8001c96:	193a      	adds	r2, r7, r4
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d01d      	beq.n	8001cda <displayVoltReadFunction+0x606>
 8001c9e:	23a8      	movs	r3, #168	@ 0xa8
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	193a      	adds	r2, r7, r4
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d015      	beq.n	8001cda <displayVoltReadFunction+0x606>
              st7565_setpixel(buffer, px, bar_y0, 1);
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	23a4      	movs	r3, #164	@ 0xa4
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4812      	ldr	r0, [pc, #72]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f7fe ff35 	bl	8000b2e <st7565_setpixel>
              st7565_setpixel(buffer, px, bar_y1, 1);
 8001cc4:	193b      	adds	r3, r7, r4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	23a0      	movs	r3, #160	@ 0xa0
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <displayVoltReadFunction+0x634>)
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f7fe ff2a 	bl	8000b2e <st7565_setpixel>
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001cda:	22b8      	movs	r2, #184	@ 0xb8
 8001cdc:	18bb      	adds	r3, r7, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	18ba      	adds	r2, r7, r2
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	23b8      	movs	r3, #184	@ 0xb8
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	23a8      	movs	r3, #168	@ 0xa8
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbca      	blt.n	8001c8c <displayVoltReadFunction+0x5b8>
          }
      }
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001cf6:	23a4      	movs	r3, #164	@ 0xa4
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	22b4      	movs	r2, #180	@ 0xb4
 8001d00:	18ba      	adds	r2, r7, r2
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e037      	b.n	8001d76 <displayVoltReadFunction+0x6a2>
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	2000048c 	.word	0x2000048c
 8001d10:	080074b0 	.word	0x080074b0
 8001d14:	20000484 	.word	0x20000484
 8001d18:	080074b8 	.word	0x080074b8
          if(py != bar_y0 + 1 && py != bar_y1 - 1) {
 8001d1c:	23a4      	movs	r3, #164	@ 0xa4
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	24b4      	movs	r4, #180	@ 0xb4
 8001d26:	193a      	adds	r2, r7, r4
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d01d      	beq.n	8001d6a <displayVoltReadFunction+0x696>
 8001d2e:	23a0      	movs	r3, #160	@ 0xa0
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	193a      	adds	r2, r7, r4
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d015      	beq.n	8001d6a <displayVoltReadFunction+0x696>
              st7565_setpixel(buffer, bar_x0, py, 1);
 8001d3e:	23ac      	movs	r3, #172	@ 0xac
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	483e      	ldr	r0, [pc, #248]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f7fe feed 	bl	8000b2e <st7565_setpixel>
              st7565_setpixel(buffer, bar_x1, py, 1);
 8001d54:	23a8      	movs	r3, #168	@ 0xa8
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b2d9      	uxtb	r1, r3
 8001d5c:	193b      	adds	r3, r7, r4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4839      	ldr	r0, [pc, #228]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001d64:	2301      	movs	r3, #1
 8001d66:	f7fe fee2 	bl	8000b2e <st7565_setpixel>
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001d6a:	22b4      	movs	r2, #180	@ 0xb4
 8001d6c:	18bb      	adds	r3, r7, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	18ba      	adds	r2, r7, r2
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	23b4      	movs	r3, #180	@ 0xb4
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	24a0      	movs	r4, #160	@ 0xa0
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbca      	blt.n	8001d1c <displayVoltReadFunction+0x648>
          }
      }
      st7565_setpixel(buffer, bar_x0 +1, bar_y0+1, 1);
 8001d86:	25ac      	movs	r5, #172	@ 0xac
 8001d88:	197b      	adds	r3, r7, r5
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2d9      	uxtb	r1, r3
 8001d92:	26a4      	movs	r6, #164	@ 0xa4
 8001d94:	19bb      	adds	r3, r7, r6
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	482a      	ldr	r0, [pc, #168]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001da0:	2301      	movs	r3, #1
 8001da2:	f7fe fec4 	bl	8000b2e <st7565_setpixel>
      st7565_setpixel(buffer, bar_x0 +1, bar_y1-1, 1);
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2d9      	uxtb	r1, r3
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4823      	ldr	r0, [pc, #140]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f7fe feb6 	bl	8000b2e <st7565_setpixel>

      st7565_setpixel(buffer, bar_x1 -1, bar_y0+1, 1);
 8001dc2:	25a8      	movs	r5, #168	@ 0xa8
 8001dc4:	197b      	adds	r3, r7, r5
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b2d9      	uxtb	r1, r3
 8001dce:	19bb      	adds	r3, r7, r6
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	481b      	ldr	r0, [pc, #108]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f7fe fea7 	bl	8000b2e <st7565_setpixel>
      st7565_setpixel(buffer, bar_x1 -1, bar_y1-1, 1);
 8001de0:	197b      	adds	r3, r7, r5
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4814      	ldr	r0, [pc, #80]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001df6:	2301      	movs	r3, #1
 8001df8:	f7fe fe99 	bl	8000b2e <st7565_setpixel>
      st7565_drawstring(buffer, 0, 5, "0");
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <displayVoltReadFunction+0x778>)
 8001dfe:	4812      	ldr	r0, [pc, #72]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e00:	2205      	movs	r2, #5
 8001e02:	2100      	movs	r1, #0
 8001e04:	f7fe fefe 	bl	8000c04 <st7565_drawstring>
      st7565_drawstring(buffer, 20, 5, "0.8");
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <displayVoltReadFunction+0x77c>)
 8001e0a:	480f      	ldr	r0, [pc, #60]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	2114      	movs	r1, #20
 8001e10:	f7fe fef8 	bl	8000c04 <st7565_drawstring>
      st7565_drawstring(buffer, 45, 5, "1.6");
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <displayVoltReadFunction+0x780>)
 8001e16:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e18:	2205      	movs	r2, #5
 8001e1a:	212d      	movs	r1, #45	@ 0x2d
 8001e1c:	f7fe fef2 	bl	8000c04 <st7565_drawstring>
      st7565_drawstring(buffer, 75, 5, "2.5");
 8001e20:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <displayVoltReadFunction+0x784>)
 8001e22:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e24:	2205      	movs	r2, #5
 8001e26:	214b      	movs	r1, #75	@ 0x4b
 8001e28:	f7fe feec 	bl	8000c04 <st7565_drawstring>
      st7565_drawstring(buffer, 108, 5, "3.3");
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <displayVoltReadFunction+0x788>)
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e30:	2205      	movs	r2, #5
 8001e32:	216c      	movs	r1, #108	@ 0x6c
 8001e34:	f7fe fee6 	bl	8000c04 <st7565_drawstring>
      st7565_write_buffer(buffer);
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <displayVoltReadFunction+0x774>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7fe fcaa 	bl	8000794 <st7565_write_buffer>
  }
    osDelay(10);
 8001e40:	200a      	movs	r0, #10
 8001e42:	f003 f981 	bl	8005148 <osDelay>
	  if(displayMode==0){
 8001e46:	e5f7      	b.n	8001a38 <displayVoltReadFunction+0x364>
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	080074c4 	.word	0x080074c4
 8001e50:	080074c8 	.word	0x080074c8
 8001e54:	080074cc 	.word	0x080074cc
 8001e58:	080074d0 	.word	0x080074d0
 8001e5c:	080074d4 	.word	0x080074d4

08001e60 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void *argument)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */
	flag=1;
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <readButtonFunction+0x100>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <readButtonFunction+0x104>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_ADC_Start(&hadc) == HAL_OK) {
 8001e76:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <readButtonFunction+0x104>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fa2b 	bl	80022d4 <HAL_ADC_Start>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d113      	bne.n	8001eaa <readButtonFunction+0x4a>
      if (HAL_ADC_PollForConversion(&hadc, 4) == HAL_OK) {
 8001e82:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <readButtonFunction+0x104>)
 8001e84:	2104      	movs	r1, #4
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 fab8 	bl	80023fc <HAL_ADC_PollForConversion>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d108      	bne.n	8001ea2 <readButtonFunction+0x42>
        buttonReadRaw = HAL_ADC_GetValue(&hadc);
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <readButtonFunction+0x104>)
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 fb4a 	bl	800252c <HAL_ADC_GetValue>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <readButtonFunction+0x108>)
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	e006      	b.n	8001eb0 <readButtonFunction+0x50>
      } else {
        buttonReadRaw = 666;
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <readButtonFunction+0x108>)
 8001ea4:	4a31      	ldr	r2, [pc, #196]	@ (8001f6c <readButtonFunction+0x10c>)
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	e002      	b.n	8001eb0 <readButtonFunction+0x50>
      }
    } else {
      buttonReadRaw = 666;
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <readButtonFunction+0x108>)
 8001eac:	4a2f      	ldr	r2, [pc, #188]	@ (8001f6c <readButtonFunction+0x10c>)
 8001eae:	801a      	strh	r2, [r3, #0]
    }
    buttonRead[0]=buttonRead[1];
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f70 <readButtonFunction+0x110>)
 8001eb2:	885a      	ldrh	r2, [r3, #2]
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <readButtonFunction+0x110>)
 8001eb6:	801a      	strh	r2, [r3, #0]
    buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <readButtonFunction+0x108>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff f87c 	bl	8000fbc <interpolation>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff f8fd 	bl	80010c8 <filterButton>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <readButtonFunction+0x110>)
 8001ed4:	805a      	strh	r2, [r3, #2]
    if(buttonRead[1]<=50&&buttonRead[0]>50){
 8001ed6:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <readButtonFunction+0x110>)
 8001ed8:	885b      	ldrh	r3, [r3, #2]
 8001eda:	2b32      	cmp	r3, #50	@ 0x32
 8001edc:	d813      	bhi.n	8001f06 <readButtonFunction+0xa6>
 8001ede:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <readButtonFunction+0x110>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	2b32      	cmp	r3, #50	@ 0x32
 8001ee4:	d90f      	bls.n	8001f06 <readButtonFunction+0xa6>
      if(displayMode==0)displayMode=displayModeMax;
 8001ee6:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <readButtonFunction+0x114>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <readButtonFunction+0x98>
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <readButtonFunction+0x118>)
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <readButtonFunction+0x114>)
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e02e      	b.n	8001f56 <readButtonFunction+0xf6>
      else displayMode--;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <readButtonFunction+0x114>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <readButtonFunction+0x114>)
 8001f02:	701a      	strb	r2, [r3, #0]
      if(displayMode==0)displayMode=displayModeMax;
 8001f04:	e027      	b.n	8001f56 <readButtonFunction+0xf6>
    }
    else if(buttonRead[1]>300&&buttonRead[1]<315&&(buttonRead[0]>=315||buttonRead[0]<=300)){
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <readButtonFunction+0x110>)
 8001f08:	885a      	ldrh	r2, [r3, #2]
 8001f0a:	2396      	movs	r3, #150	@ 0x96
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d921      	bls.n	8001f56 <readButtonFunction+0xf6>
 8001f12:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <readButtonFunction+0x110>)
 8001f14:	885a      	ldrh	r2, [r3, #2]
 8001f16:	239d      	movs	r3, #157	@ 0x9d
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d81b      	bhi.n	8001f56 <readButtonFunction+0xf6>
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <readButtonFunction+0x110>)
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	239d      	movs	r3, #157	@ 0x9d
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d805      	bhi.n	8001f36 <readButtonFunction+0xd6>
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <readButtonFunction+0x110>)
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	2396      	movs	r3, #150	@ 0x96
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d80f      	bhi.n	8001f56 <readButtonFunction+0xf6>
      if(displayMode==displayModeMax)displayMode=0;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <readButtonFunction+0x114>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <readButtonFunction+0x118>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d103      	bne.n	8001f4a <readButtonFunction+0xea>
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <readButtonFunction+0x114>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e005      	b.n	8001f56 <readButtonFunction+0xf6>
      else displayMode++;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <readButtonFunction+0x114>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <readButtonFunction+0x114>)
 8001f54:	701a      	strb	r2, [r3, #0]

    }
    else if(buttonRead[1]>87&&buttonRead[1]<107&&(buttonRead[0]>=107||buttonRead[0]<=87)){

    }
    osDelay(5);
 8001f56:	2005      	movs	r0, #5
 8001f58:	f003 f8f6 	bl	8005148 <osDelay>
    hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 8001f5c:	e787      	b.n	8001e6e <readButtonFunction+0xe>
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	200005f0 	.word	0x200005f0
 8001f64:	200004b8 	.word	0x200004b8
 8001f68:	20000006 	.word	0x20000006
 8001f6c:	0000029a 	.word	0x0000029a
 8001f70:	20000488 	.word	0x20000488
 8001f74:	2000048c 	.word	0x2000048c
 8001f78:	20000008 	.word	0x20000008

08001f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f8e:	f000 f821 	bl	8001fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	40000400 	.word	0x40000400

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	e7fd      	b.n	8001fa8 <Error_Handler+0x8>

08001fac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <HAL_Init+0x24>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_Init+0x24>)
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f7fe fb4b 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc2:	f7fe fa41 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_IncTick+0x1c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	001a      	movs	r2, r3
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	18d2      	adds	r2, r2, r3
 8001fe4:	4b03      	ldr	r3, [pc, #12]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	20000418 	.word	0x20000418
 8001ff4:	200005f4 	.word	0x200005f4

08001ff8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <HAL_GetTick+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	200005f4 	.word	0x200005f4

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3301      	adds	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	001a      	movs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	189b      	adds	r3, r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	f7ff ffe0 	bl	8001ff8 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	20000418 	.word	0x20000418

08002054 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e125      	b.n	80022be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2234      	movs	r2, #52	@ 0x34
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f7fe fa06 	bl	800049c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002094:	2210      	movs	r2, #16
 8002096:	4013      	ands	r3, r2
 8002098:	d000      	beq.n	800209c <HAL_ADC_Init+0x48>
 800209a:	e103      	b.n	80022a4 <HAL_ADC_Init+0x250>
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d000      	beq.n	80020a8 <HAL_ADC_Init+0x54>
 80020a6:	e0fd      	b.n	80022a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80020b2:	d000      	beq.n	80020b6 <HAL_ADC_Init+0x62>
 80020b4:	e0f6      	b.n	80022a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ba:	4a83      	ldr	r2, [pc, #524]	@ (80022c8 <HAL_ADC_Init+0x274>)
 80020bc:	4013      	ands	r3, r2
 80020be:	2202      	movs	r2, #2
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d112      	bne.n	80020fa <HAL_ADC_Init+0xa6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d009      	beq.n	80020f6 <HAL_ADC_Init+0xa2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	401a      	ands	r2, r3
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0xa6>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_ADC_Init+0xa8>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d116      	bne.n	800212e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2218      	movs	r2, #24
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	0899      	lsrs	r1, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4964      	ldr	r1, [pc, #400]	@ (80022cc <HAL_ADC_Init+0x278>)
 800213a:	400a      	ands	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7e1b      	ldrb	r3, [r3, #24]
 8002142:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7e5b      	ldrb	r3, [r3, #25]
 8002148:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800214a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e9b      	ldrb	r3, [r3, #26]
 8002150:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002152:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	2b01      	cmp	r3, #1
 800215a:	d002      	beq.n	8002162 <HAL_ADC_Init+0x10e>
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	e000      	b.n	8002164 <HAL_ADC_Init+0x110>
 8002162:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002164:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800216a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d101      	bne.n	8002178 <HAL_ADC_Init+0x124>
 8002174:	2304      	movs	r3, #4
 8002176:	e000      	b.n	800217a <HAL_ADC_Init+0x126>
 8002178:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800217a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2124      	movs	r1, #36	@ 0x24
 8002180:	5c5b      	ldrb	r3, [r3, r1]
 8002182:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002184:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4313      	orrs	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7edb      	ldrb	r3, [r3, #27]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d115      	bne.n	80021c0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e9b      	ldrb	r3, [r3, #26]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	0252      	lsls	r2, r2, #9
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	e00b      	b.n	80021c0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ac:	2220      	movs	r2, #32
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2201      	movs	r2, #1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	23c2      	movs	r3, #194	@ 0xc2
 80021c6:	33ff      	adds	r3, #255	@ 0xff
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d007      	beq.n	80021dc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021d4:	4313      	orrs	r3, r2
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68d9      	ldr	r1, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	055b      	lsls	r3, r3, #21
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d01b      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d017      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	2b02      	cmp	r3, #2
 8002206:	d013      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	2b03      	cmp	r3, #3
 800220e:	d00f      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00b      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	2b05      	cmp	r3, #5
 800221e:	d007      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	2b06      	cmp	r3, #6
 8002226:	d003      	beq.n	8002230 <HAL_ADC_Init+0x1dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	2b07      	cmp	r3, #7
 800222e:	d112      	bne.n	8002256 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2107      	movs	r1, #7
 800223c:	438a      	bics	r2, r1
 800223e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6959      	ldr	r1, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	2207      	movs	r2, #7
 800224c:	401a      	ands	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a1c      	ldr	r2, [pc, #112]	@ (80022d0 <HAL_ADC_Init+0x27c>)
 800225e:	4013      	ands	r3, r2
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d10b      	bne.n	800227e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	2203      	movs	r2, #3
 8002272:	4393      	bics	r3, r2
 8002274:	2201      	movs	r2, #1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800227c:	e01c      	b.n	80022b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	2212      	movs	r2, #18
 8002284:	4393      	bics	r3, r2
 8002286:	2210      	movs	r2, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	2201      	movs	r2, #1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800229a:	230f      	movs	r3, #15
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022a2:	e009      	b.n	80022b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a8:	2210      	movs	r2, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	fffffefd 	.word	0xfffffefd
 80022cc:	fffe0219 	.word	0xfffe0219
 80022d0:	833fffe7 	.word	0x833fffe7

080022d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d138      	bne.n	8002362 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2234      	movs	r2, #52	@ 0x34
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Start+0x2a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e038      	b.n	8002370 <HAL_ADC_Start+0x9c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2234      	movs	r2, #52	@ 0x34
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7e5b      	ldrb	r3, [r3, #25]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d007      	beq.n	800231e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800230e:	230f      	movs	r3, #15
 8002310:	18fc      	adds	r4, r7, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 fa23 	bl	8002760 <ADC_Enable>
 800231a:	0003      	movs	r3, r0
 800231c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800231e:	230f      	movs	r3, #15
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d120      	bne.n	800236a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_ADC_Start+0xa4>)
 800232e:	4013      	ands	r3, r2
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	0052      	lsls	r2, r2, #1
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2234      	movs	r2, #52	@ 0x34
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	221c      	movs	r2, #28
 800234e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2104      	movs	r1, #4
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e003      	b.n	800236a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2202      	movs	r2, #2
 8002368:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800236a:	230f      	movs	r3, #15
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b005      	add	sp, #20
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	fffff0fe 	.word	0xfffff0fe

0800237c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2234      	movs	r2, #52	@ 0x34
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Stop+0x1e>
 8002396:	2302      	movs	r3, #2
 8002398:	e029      	b.n	80023ee <HAL_ADC_Stop+0x72>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2234      	movs	r2, #52	@ 0x34
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80023a2:	250f      	movs	r5, #15
 80023a4:	197c      	adds	r4, r7, r5
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 face 	bl	800294a <ADC_ConversionStop>
 80023ae:	0003      	movs	r3, r0
 80023b0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d112      	bne.n	80023e0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023ba:	197c      	adds	r4, r7, r5
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fa52 	bl	8002868 <ADC_Disable>
 80023c4:	0003      	movs	r3, r0
 80023c6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023c8:	197b      	adds	r3, r7, r5
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d4:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_ADC_Stop+0x7c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	2201      	movs	r2, #1
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2234      	movs	r2, #52	@ 0x34
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	781b      	ldrb	r3, [r3, #0]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b004      	add	sp, #16
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	fffffefe 	.word	0xfffffefe

080023fc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d102      	bne.n	8002414 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800240e:	2308      	movs	r3, #8
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e014      	b.n	800243e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10b      	bne.n	800243a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002426:	2220      	movs	r2, #32
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2234      	movs	r2, #52	@ 0x34
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e071      	b.n	800251e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800243a:	230c      	movs	r3, #12
 800243c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800243e:	f7ff fddb 	bl	8001ff8 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002446:	e01f      	b.n	8002488 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	d01c      	beq.n	8002488 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_ADC_PollForConversion+0x68>
 8002454:	f7ff fdd0 	bl	8001ff8 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d211      	bcs.n	8002488 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	d10b      	bne.n	8002488 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	2204      	movs	r2, #4
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2234      	movs	r2, #52	@ 0x34
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e04a      	b.n	800251e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	d0d9      	beq.n	8002448 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002498:	2280      	movs	r2, #128	@ 0x80
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	23c0      	movs	r3, #192	@ 0xc0
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	4013      	ands	r3, r2
 80024ae:	d12d      	bne.n	800250c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d129      	bne.n	800250c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d122      	bne.n	800250c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d110      	bne.n	80024f4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	210c      	movs	r1, #12
 80024de:	438a      	bics	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_ADC_PollForConversion+0x12c>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80024f2:	e00b      	b.n	800250c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	2220      	movs	r2, #32
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e1b      	ldrb	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	220c      	movs	r2, #12
 800251a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	fffffefe 	.word	0xfffffefe

0800252c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	230f      	movs	r3, #15
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	055b      	lsls	r3, r3, #21
 8002562:	429a      	cmp	r2, r3
 8002564:	d011      	beq.n	800258a <HAL_ADC_ConfigChannel+0x46>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00d      	beq.n	800258a <HAL_ADC_ConfigChannel+0x46>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	2b02      	cmp	r3, #2
 8002574:	d009      	beq.n	800258a <HAL_ADC_ConfigChannel+0x46>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	2b03      	cmp	r3, #3
 800257c:	d005      	beq.n	800258a <HAL_ADC_ConfigChannel+0x46>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	2b04      	cmp	r3, #4
 8002584:	d001      	beq.n	800258a <HAL_ADC_ConfigChannel+0x46>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2234      	movs	r2, #52	@ 0x34
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x54>
 8002594:	2302      	movs	r3, #2
 8002596:	e0d0      	b.n	800273a <HAL_ADC_ConfigChannel+0x1f6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2234      	movs	r2, #52	@ 0x34
 800259c:	2101      	movs	r1, #1
 800259e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2204      	movs	r2, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d000      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x6a>
 80025ac:	e0b4      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a64      	ldr	r2, [pc, #400]	@ (8002744 <HAL_ADC_ConfigChannel+0x200>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x76>
 80025b8:	e082      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	429a      	cmp	r2, r3
 80025da:	d037      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d033      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d02f      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d02b      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d027      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	2b05      	cmp	r3, #5
 8002602:	d023      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	2b06      	cmp	r3, #6
 800260a:	d01f      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	2b07      	cmp	r3, #7
 8002612:	d01b      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2107      	movs	r1, #7
 8002620:	400b      	ands	r3, r1
 8002622:	429a      	cmp	r2, r3
 8002624:	d012      	beq.n	800264c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2107      	movs	r1, #7
 8002632:	438a      	bics	r2, r1
 8002634:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6959      	ldr	r1, [r3, #20]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2207      	movs	r2, #7
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b10      	cmp	r3, #16
 8002652:	d007      	beq.n	8002664 <HAL_ADC_ConfigChannel+0x120>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b11      	cmp	r3, #17
 800265a:	d003      	beq.n	8002664 <HAL_ADC_ConfigChannel+0x120>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d163      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002664:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_ADC_ConfigChannel+0x204>)
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d009      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x140>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b11      	cmp	r3, #17
 8002676:	d102      	bne.n	800267e <HAL_ADC_ConfigChannel+0x13a>
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	03db      	lsls	r3, r3, #15
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x144>
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	045b      	lsls	r3, r3, #17
 8002682:	e001      	b.n	8002688 <HAL_ADC_ConfigChannel+0x144>
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	4a2f      	ldr	r2, [pc, #188]	@ (8002748 <HAL_ADC_ConfigChannel+0x204>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d14a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_ADC_ConfigChannel+0x208>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	492d      	ldr	r1, [pc, #180]	@ (8002750 <HAL_ADC_ConfigChannel+0x20c>)
 800269c:	0018      	movs	r0, r3
 800269e:	f7fd fd33 	bl	8000108 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	001a      	movs	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x16e>
 80026be:	e035      	b.n	800272c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	4099      	lsls	r1, r3
 80026ce:	000b      	movs	r3, r1
 80026d0:	43d9      	mvns	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d007      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x1ae>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d003      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x1ae>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d11c      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HAL_ADC_ConfigChannel+0x204>)
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d007      	beq.n	800270e <HAL_ADC_ConfigChannel+0x1ca>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b11      	cmp	r3, #17
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x1c6>
 8002706:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <HAL_ADC_ConfigChannel+0x210>)
 8002708:	e002      	b.n	8002710 <HAL_ADC_ConfigChannel+0x1cc>
 800270a:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_ADC_ConfigChannel+0x214>)
 800270c:	e000      	b.n	8002710 <HAL_ADC_ConfigChannel+0x1cc>
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_ADC_ConfigChannel+0x218>)
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_ADC_ConfigChannel+0x204>)
 8002712:	400b      	ands	r3, r1
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e009      	b.n	800272c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	2220      	movs	r2, #32
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002724:	230f      	movs	r3, #15
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2234      	movs	r2, #52	@ 0x34
 8002730:	2100      	movs	r1, #0
 8002732:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002734:	230f      	movs	r3, #15
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	00001001 	.word	0x00001001
 8002748:	40012708 	.word	0x40012708
 800274c:	20000000 	.word	0x20000000
 8002750:	000f4240 	.word	0x000f4240
 8002754:	ffbfffff 	.word	0xffbfffff
 8002758:	feffffff 	.word	0xfeffffff
 800275c:	ff7fffff 	.word	0xff7fffff

08002760 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2203      	movs	r2, #3
 8002778:	4013      	ands	r3, r2
 800277a:	2b01      	cmp	r3, #1
 800277c:	d112      	bne.n	80027a4 <ADC_Enable+0x44>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	2b01      	cmp	r3, #1
 800278a:	d009      	beq.n	80027a0 <ADC_Enable+0x40>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	401a      	ands	r2, r3
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	429a      	cmp	r2, r3
 800279e:	d101      	bne.n	80027a4 <ADC_Enable+0x44>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <ADC_Enable+0x46>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d152      	bne.n	8002850 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <ADC_Enable+0xfc>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	2210      	movs	r2, #16
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c6:	2201      	movs	r2, #1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e03f      	b.n	8002852 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <ADC_Enable+0x100>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	491f      	ldr	r1, [pc, #124]	@ (8002864 <ADC_Enable+0x104>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fd fc8d 	bl	8000108 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f2:	e002      	b.n	80027fa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002800:	f7ff fbfa 	bl	8001ff8 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002808:	e01b      	b.n	8002842 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800280a:	f7ff fbf5 	bl	8001ff8 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d914      	bls.n	8002842 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4013      	ands	r3, r2
 8002822:	2b01      	cmp	r3, #1
 8002824:	d00d      	beq.n	8002842 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282a:	2210      	movs	r2, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	2201      	movs	r2, #1
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1dc      	bne.n	800280a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	80000017 	.word	0x80000017
 8002860:	20000000 	.word	0x20000000
 8002864:	000f4240 	.word	0x000f4240

08002868 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2203      	movs	r2, #3
 800287c:	4013      	ands	r3, r2
 800287e:	2b01      	cmp	r3, #1
 8002880:	d112      	bne.n	80028a8 <ADC_Disable+0x40>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d009      	beq.n	80028a4 <ADC_Disable+0x3c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	401a      	ands	r2, r3
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d101      	bne.n	80028a8 <ADC_Disable+0x40>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <ADC_Disable+0x42>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d048      	beq.n	8002940 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2205      	movs	r2, #5
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d110      	bne.n	80028de <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2102      	movs	r1, #2
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2203      	movs	r2, #3
 80028d2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028d4:	f7ff fb90 	bl	8001ff8 <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028dc:	e029      	b.n	8002932 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e2:	2210      	movs	r2, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ee:	2201      	movs	r2, #1
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e023      	b.n	8002942 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028fa:	f7ff fb7d 	bl	8001ff8 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d914      	bls.n	8002932 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10d      	bne.n	8002932 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	2210      	movs	r2, #16
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002926:	2201      	movs	r2, #1
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e007      	b.n	8002942 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	2b01      	cmp	r3, #1
 800293e:	d0dc      	beq.n	80028fa <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}

0800294a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	d03a      	beq.n	80029d8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	2b04      	cmp	r3, #4
 800296e:	d10d      	bne.n	800298c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800297a:	d107      	bne.n	800298c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2110      	movs	r1, #16
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800298c:	f7ff fb34 	bl	8001ff8 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002994:	e01a      	b.n	80029cc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002996:	f7ff fb2f 	bl	8001ff8 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d913      	bls.n	80029cc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2204      	movs	r2, #4
 80029ac:	4013      	ands	r3, r2
 80029ae:	d00d      	beq.n	80029cc <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b4:	2210      	movs	r2, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	2201      	movs	r2, #1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e006      	b.n	80029da <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d1de      	bne.n	8002996 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	0002      	movs	r2, r0
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	1dfb      	adds	r3, r7, #7
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80029f6:	d809      	bhi.n	8002a0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	001a      	movs	r2, r3
 80029fe:	231f      	movs	r3, #31
 8002a00:	401a      	ands	r2, r3
 8002a02:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_EnableIRQ+0x30>)
 8002a04:	2101      	movs	r1, #1
 8002a06:	4091      	lsls	r1, r2
 8002a08:	000a      	movs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
  }
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a2c:	d828      	bhi.n	8002a80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002aec <__NVIC_SetPriority+0xd4>)
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	33c0      	adds	r3, #192	@ 0xc0
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	589b      	ldr	r3, [r3, r2]
 8002a3e:	1dfa      	adds	r2, r7, #7
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	0011      	movs	r1, r2
 8002a44:	2203      	movs	r2, #3
 8002a46:	400a      	ands	r2, r1
 8002a48:	00d2      	lsls	r2, r2, #3
 8002a4a:	21ff      	movs	r1, #255	@ 0xff
 8002a4c:	4091      	lsls	r1, r2
 8002a4e:	000a      	movs	r2, r1
 8002a50:	43d2      	mvns	r2, r2
 8002a52:	401a      	ands	r2, r3
 8002a54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	22ff      	movs	r2, #255	@ 0xff
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	0018      	movs	r0, r3
 8002a64:	2303      	movs	r3, #3
 8002a66:	4003      	ands	r3, r0
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a6c:	481f      	ldr	r0, [pc, #124]	@ (8002aec <__NVIC_SetPriority+0xd4>)
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	430a      	orrs	r2, r1
 8002a78:	33c0      	adds	r3, #192	@ 0xc0
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a7e:	e031      	b.n	8002ae4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <__NVIC_SetPriority+0xd8>)
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	0019      	movs	r1, r3
 8002a88:	230f      	movs	r3, #15
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	3b08      	subs	r3, #8
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3306      	adds	r3, #6
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	18d3      	adds	r3, r2, r3
 8002a96:	3304      	adds	r3, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1dfa      	adds	r2, r7, #7
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	00d2      	lsls	r2, r2, #3
 8002aa6:	21ff      	movs	r1, #255	@ 0xff
 8002aa8:	4091      	lsls	r1, r2
 8002aaa:	000a      	movs	r2, r1
 8002aac:	43d2      	mvns	r2, r2
 8002aae:	401a      	ands	r2, r3
 8002ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	22ff      	movs	r2, #255	@ 0xff
 8002ab8:	401a      	ands	r2, r3
 8002aba:	1dfb      	adds	r3, r7, #7
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	4003      	ands	r3, r0
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac8:	4809      	ldr	r0, [pc, #36]	@ (8002af0 <__NVIC_SetPriority+0xd8>)
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	001c      	movs	r4, r3
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	4023      	ands	r3, r4
 8002ad4:	3b08      	subs	r3, #8
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	3306      	adds	r3, #6
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	18c3      	adds	r3, r0, r3
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b003      	add	sp, #12
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	210f      	movs	r1, #15
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	0011      	movs	r1, r2
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff ff81 	bl	8002a18 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	0002      	movs	r2, r0
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff57 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	e155      	b.n	8002dfc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4091      	lsls	r1, r2
 8002b5a:	000a      	movs	r2, r1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d100      	bne.n	8002b68 <HAL_GPIO_Init+0x28>
 8002b66:	e146      	b.n	8002df6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d005      	beq.n	8002b80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d130      	bne.n	8002be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	43da      	mvns	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	2201      	movs	r2, #1
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2203      	movs	r2, #3
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d017      	beq.n	8002c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d123      	bne.n	8002c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	58d3      	ldr	r3, [r2, r3]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	409a      	lsls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	43da      	mvns	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2107      	movs	r1, #7
 8002c56:	400b      	ands	r3, r1
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	0092      	lsls	r2, r2, #2
 8002c6e:	6939      	ldr	r1, [r7, #16]
 8002c70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	401a      	ands	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	23c0      	movs	r3, #192	@ 0xc0
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <HAL_GPIO_Init+0x174>
 8002cb2:	e0a0      	b.n	8002df6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb4:	4b57      	ldr	r3, [pc, #348]	@ (8002e14 <HAL_GPIO_Init+0x2d4>)
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	4b56      	ldr	r3, [pc, #344]	@ (8002e14 <HAL_GPIO_Init+0x2d4>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	4b54      	ldr	r3, [pc, #336]	@ (8002e14 <HAL_GPIO_Init+0x2d4>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ccc:	4a52      	ldr	r2, [pc, #328]	@ (8002e18 <HAL_GPIO_Init+0x2d8>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	589b      	ldr	r3, [r3, r2]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	4013      	ands	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	2390      	movs	r3, #144	@ 0x90
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x1ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a47      	ldr	r2, [pc, #284]	@ (8002e1c <HAL_GPIO_Init+0x2dc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x1ea>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a46      	ldr	r2, [pc, #280]	@ (8002e20 <HAL_GPIO_Init+0x2e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x1e6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	@ (8002e24 <HAL_GPIO_Init+0x2e4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x1e2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a44      	ldr	r2, [pc, #272]	@ (8002e28 <HAL_GPIO_Init+0x2e8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x1de>
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	e008      	b.n	8002d30 <HAL_GPIO_Init+0x1f0>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x1f0>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e004      	b.n	8002d30 <HAL_GPIO_Init+0x1f0>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e002      	b.n	8002d30 <HAL_GPIO_Init+0x1f0>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x1f0>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	2103      	movs	r1, #3
 8002d34:	400a      	ands	r2, r1
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d40:	4935      	ldr	r1, [pc, #212]	@ (8002e18 <HAL_GPIO_Init+0x2d8>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4e:	4b37      	ldr	r3, [pc, #220]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43da      	mvns	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	2380      	movs	r3, #128	@ 0x80
 8002d64:	035b      	lsls	r3, r3, #13
 8002d66:	4013      	ands	r3, r2
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d72:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d78:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	039b      	lsls	r3, r3, #14
 8002d90:	4013      	ands	r3, r2
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d9c:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	4013      	ands	r3, r2
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	40da      	lsrs	r2, r3
 8002e04:	1e13      	subs	r3, r2, #0
 8002e06:	d000      	beq.n	8002e0a <HAL_GPIO_Init+0x2ca>
 8002e08:	e6a2      	b.n	8002b50 <HAL_GPIO_Init+0x10>
  } 
}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b006      	add	sp, #24
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	48000400 	.word	0x48000400
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48000c00 	.word	0x48000c00
 8002e28:	48001000 	.word	0x48001000
 8002e2c:	40010400 	.word	0x40010400

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	0008      	movs	r0, r1
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	1cbb      	adds	r3, r7, #2
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	1c7b      	adds	r3, r7, #1
 8002e44:	1c0a      	adds	r2, r1, #0
 8002e46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e48:	1c7b      	adds	r3, r7, #1
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e50:	1cbb      	adds	r3, r7, #2
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5a:	1cbb      	adds	r3, r7, #2
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f000 fb76 	bl	800356c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_RCC_OscConfig+0x20>
 8002e8a:	e08e      	b.n	8002faa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e8c:	4bc5      	ldr	r3, [pc, #788]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	220c      	movs	r2, #12
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00e      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e98:	4bc2      	ldr	r3, [pc, #776]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	220c      	movs	r2, #12
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d117      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x68>
 8002ea4:	4bbf      	ldr	r3, [pc, #764]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	23c0      	movs	r3, #192	@ 0xc0
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	401a      	ands	r2, r3
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4bbb      	ldr	r3, [pc, #748]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d100      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x58>
 8002ec2:	e071      	b.n	8002fa8 <HAL_RCC_OscConfig+0x13c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d000      	beq.n	8002ece <HAL_RCC_OscConfig+0x62>
 8002ecc:	e06c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f000 fb4c 	bl	800356c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x80>
 8002edc:	4bb1      	ldr	r3, [pc, #708]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4bb0      	ldr	r3, [pc, #704]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	0249      	lsls	r1, r1, #9
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e02f      	b.n	8002f4c <HAL_RCC_OscConfig+0xe0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0xa2>
 8002ef4:	4bab      	ldr	r3, [pc, #684]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4baa      	ldr	r3, [pc, #680]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002efa:	49ab      	ldr	r1, [pc, #684]	@ (80031a8 <HAL_RCC_OscConfig+0x33c>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	4ba8      	ldr	r3, [pc, #672]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4ba7      	ldr	r3, [pc, #668]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f06:	49a9      	ldr	r1, [pc, #676]	@ (80031ac <HAL_RCC_OscConfig+0x340>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e01e      	b.n	8002f4c <HAL_RCC_OscConfig+0xe0>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10e      	bne.n	8002f34 <HAL_RCC_OscConfig+0xc8>
 8002f16:	4ba3      	ldr	r3, [pc, #652]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4ba2      	ldr	r3, [pc, #648]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	2180      	movs	r1, #128	@ 0x80
 8002f1e:	02c9      	lsls	r1, r1, #11
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	4b9f      	ldr	r3, [pc, #636]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b9e      	ldr	r3, [pc, #632]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	2180      	movs	r1, #128	@ 0x80
 8002f2c:	0249      	lsls	r1, r1, #9
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xe0>
 8002f34:	4b9b      	ldr	r3, [pc, #620]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b9a      	ldr	r3, [pc, #616]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f3a:	499b      	ldr	r1, [pc, #620]	@ (80031a8 <HAL_RCC_OscConfig+0x33c>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	4b98      	ldr	r3, [pc, #608]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b97      	ldr	r3, [pc, #604]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f46:	4999      	ldr	r1, [pc, #612]	@ (80031ac <HAL_RCC_OscConfig+0x340>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7ff f850 	bl	8001ff8 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5e:	f7ff f84b 	bl	8001ff8 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	@ 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e2fd      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f70:	4b8c      	ldr	r3, [pc, #560]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	029b      	lsls	r3, r3, #10
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0xf2>
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f83b 	bl	8001ff8 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f836 	bl	8001ff8 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e2e8      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b82      	ldr	r3, [pc, #520]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x11c>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x14a>
 8002fb4:	e06c      	b.n	8003090 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	220c      	movs	r2, #12
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc0:	4b78      	ldr	r3, [pc, #480]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d11f      	bne.n	800300c <HAL_RCC_OscConfig+0x1a0>
 8002fcc:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	23c0      	movs	r3, #192	@ 0xc0
 8002fd2:	025b      	lsls	r3, r3, #9
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d116      	bne.n	800300c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	4b71      	ldr	r3, [pc, #452]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x188>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e2bb      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b6b      	ldr	r3, [pc, #428]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	22f8      	movs	r2, #248	@ 0xf8
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	4b67      	ldr	r3, [pc, #412]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	e041      	b.n	8003090 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b63      	ldr	r3, [pc, #396]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b62      	ldr	r3, [pc, #392]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800301a:	2101      	movs	r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe ffea 	bl	8001ff8 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe ffe5 	bl	8001ff8 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e297      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b59      	ldr	r3, [pc, #356]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d0f1      	beq.n	800302a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b57      	ldr	r3, [pc, #348]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	22f8      	movs	r2, #248	@ 0xf8
 800304c:	4393      	bics	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00da      	lsls	r2, r3, #3
 8003056:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e018      	b.n	8003090 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b51      	ldr	r3, [pc, #324]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b50      	ldr	r3, [pc, #320]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003064:	2101      	movs	r1, #1
 8003066:	438a      	bics	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe ffc5 	bl	8001ff8 <HAL_GetTick>
 800306e:	0003      	movs	r3, r0
 8003070:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe ffc0 	bl	8001ff8 <HAL_GetTick>
 8003078:	0002      	movs	r2, r0
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e272      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2202      	movs	r2, #2
 800308c:	4013      	ands	r3, r2
 800308e:	d1f1      	bne.n	8003074 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2208      	movs	r2, #8
 8003096:	4013      	ands	r3, r2
 8003098:	d036      	beq.n	8003108 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d019      	beq.n	80030d6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b40      	ldr	r3, [pc, #256]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 80030a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 80030a8:	2101      	movs	r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe ffa3 	bl	8001ff8 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe ff9e 	bl	8001ff8 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e250      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	d0f1      	beq.n	80030b8 <HAL_RCC_OscConfig+0x24c>
 80030d4:	e018      	b.n	8003108 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d6:	4b33      	ldr	r3, [pc, #204]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 80030d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030da:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 80030dc:	2101      	movs	r1, #1
 80030de:	438a      	bics	r2, r1
 80030e0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe ff89 	bl	8001ff8 <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fe ff84 	bl	8001ff8 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e236      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d1f1      	bne.n	80030ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d100      	bne.n	8003114 <HAL_RCC_OscConfig+0x2a8>
 8003112:	e0b5      	b.n	8003280 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003114:	201f      	movs	r0, #31
 8003116:	183b      	adds	r3, r7, r0
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311c:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	055b      	lsls	r3, r3, #21
 8003124:	4013      	ands	r3, r2
 8003126:	d110      	bne.n	800314a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	0549      	lsls	r1, r1, #21
 8003132:	430a      	orrs	r2, r1
 8003134:	61da      	str	r2, [r3, #28]
 8003136:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	055b      	lsls	r3, r3, #21
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003144:	183b      	adds	r3, r7, r0
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_RCC_OscConfig+0x344>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d11a      	bne.n	800318c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <HAL_RCC_OscConfig+0x344>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCC_OscConfig+0x344>)
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	0049      	lsls	r1, r1, #1
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe ff48 	bl	8001ff8 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe ff43 	bl	8001ff8 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	@ 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1f5      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_OscConfig+0x344>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4013      	ands	r3, r2
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10f      	bne.n	80031b4 <HAL_RCC_OscConfig+0x348>
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	4b02      	ldr	r3, [pc, #8]	@ (80031a4 <HAL_RCC_OscConfig+0x338>)
 800319a:	2101      	movs	r1, #1
 800319c:	430a      	orrs	r2, r1
 800319e:	621a      	str	r2, [r3, #32]
 80031a0:	e036      	b.n	8003210 <HAL_RCC_OscConfig+0x3a4>
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	40021000 	.word	0x40021000
 80031a8:	fffeffff 	.word	0xfffeffff
 80031ac:	fffbffff 	.word	0xfffbffff
 80031b0:	40007000 	.word	0x40007000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x36a>
 80031bc:	4bca      	ldr	r3, [pc, #808]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	4bc9      	ldr	r3, [pc, #804]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	438a      	bics	r2, r1
 80031c6:	621a      	str	r2, [r3, #32]
 80031c8:	4bc7      	ldr	r3, [pc, #796]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4bc6      	ldr	r3, [pc, #792]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031ce:	2104      	movs	r1, #4
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	e01c      	b.n	8003210 <HAL_RCC_OscConfig+0x3a4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x38c>
 80031de:	4bc2      	ldr	r3, [pc, #776]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	4bc1      	ldr	r3, [pc, #772]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031e4:	2104      	movs	r1, #4
 80031e6:	430a      	orrs	r2, r1
 80031e8:	621a      	str	r2, [r3, #32]
 80031ea:	4bbf      	ldr	r3, [pc, #764]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	4bbe      	ldr	r3, [pc, #760]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	430a      	orrs	r2, r1
 80031f4:	621a      	str	r2, [r3, #32]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x3a4>
 80031f8:	4bbb      	ldr	r3, [pc, #748]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	4bba      	ldr	r3, [pc, #744]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80031fe:	2101      	movs	r1, #1
 8003200:	438a      	bics	r2, r1
 8003202:	621a      	str	r2, [r3, #32]
 8003204:	4bb8      	ldr	r3, [pc, #736]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	4bb7      	ldr	r3, [pc, #732]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800320a:	2104      	movs	r1, #4
 800320c:	438a      	bics	r2, r1
 800320e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d014      	beq.n	8003242 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe feee 	bl	8001ff8 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fee9 	bl	8001ff8 <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4aaf      	ldr	r2, [pc, #700]	@ (80034ec <HAL_RCC_OscConfig+0x680>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e19a      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	4bac      	ldr	r3, [pc, #688]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x3b6>
 8003240:	e013      	b.n	800326a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fe fed9 	bl	8001ff8 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324a:	e009      	b.n	8003260 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe fed4 	bl	8001ff8 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	4aa5      	ldr	r2, [pc, #660]	@ (80034ec <HAL_RCC_OscConfig+0x680>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e185      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	4ba1      	ldr	r3, [pc, #644]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800326a:	231f      	movs	r3, #31
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b9c      	ldr	r3, [pc, #624]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	4b9b      	ldr	r3, [pc, #620]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800327a:	499d      	ldr	r1, [pc, #628]	@ (80034f0 <HAL_RCC_OscConfig+0x684>)
 800327c:	400a      	ands	r2, r1
 800327e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2210      	movs	r2, #16
 8003286:	4013      	ands	r3, r2
 8003288:	d063      	beq.n	8003352 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d12a      	bne.n	80032e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003292:	4b95      	ldr	r3, [pc, #596]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003296:	4b94      	ldr	r3, [pc, #592]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003298:	2104      	movs	r1, #4
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800329e:	4b92      	ldr	r3, [pc, #584]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a2:	4b91      	ldr	r3, [pc, #580]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe fea5 	bl	8001ff8 <HAL_GetTick>
 80032ae:	0003      	movs	r3, r0
 80032b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032b4:	f7fe fea0 	bl	8001ff8 <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e152      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032c6:	4b88      	ldr	r3, [pc, #544]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d0f1      	beq.n	80032b4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032d0:	4b85      	ldr	r3, [pc, #532]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d4:	22f8      	movs	r2, #248	@ 0xf8
 80032d6:	4393      	bics	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	00da      	lsls	r2, r3, #3
 80032e0:	4b81      	ldr	r3, [pc, #516]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80032e6:	e034      	b.n	8003352 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	3305      	adds	r3, #5
 80032ee:	d111      	bne.n	8003314 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032f0:	4b7d      	ldr	r3, [pc, #500]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f4:	4b7c      	ldr	r3, [pc, #496]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032f6:	2104      	movs	r1, #4
 80032f8:	438a      	bics	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032fc:	4b7a      	ldr	r3, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80032fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003300:	22f8      	movs	r2, #248	@ 0xf8
 8003302:	4393      	bics	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	4b76      	ldr	r3, [pc, #472]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800330e:	430a      	orrs	r2, r1
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34
 8003312:	e01e      	b.n	8003352 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003314:	4b74      	ldr	r3, [pc, #464]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003318:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800331a:	2104      	movs	r1, #4
 800331c:	430a      	orrs	r2, r1
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003320:	4b71      	ldr	r3, [pc, #452]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003324:	4b70      	ldr	r3, [pc, #448]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003326:	2101      	movs	r1, #1
 8003328:	438a      	bics	r2, r1
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fe fe64 	bl	8001ff8 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003336:	f7fe fe5f 	bl	8001ff8 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e111      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003348:	4b67      	ldr	r3, [pc, #412]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d1f1      	bne.n	8003336 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2220      	movs	r2, #32
 8003358:	4013      	ands	r3, r2
 800335a:	d05c      	beq.n	8003416 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800335c:	4b62      	ldr	r3, [pc, #392]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	220c      	movs	r2, #12
 8003362:	4013      	ands	r3, r2
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d00e      	beq.n	8003386 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003368:	4b5f      	ldr	r3, [pc, #380]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	220c      	movs	r2, #12
 800336e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003370:	2b08      	cmp	r3, #8
 8003372:	d114      	bne.n	800339e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003374:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	23c0      	movs	r3, #192	@ 0xc0
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	401a      	ands	r2, r3
 800337e:	23c0      	movs	r3, #192	@ 0xc0
 8003380:	025b      	lsls	r3, r3, #9
 8003382:	429a      	cmp	r2, r3
 8003384:	d10b      	bne.n	800339e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003386:	4b58      	ldr	r3, [pc, #352]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	4013      	ands	r3, r2
 8003390:	d040      	beq.n	8003414 <HAL_RCC_OscConfig+0x5a8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d03c      	beq.n	8003414 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0e6      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01b      	beq.n	80033de <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033a6:	4b50      	ldr	r3, [pc, #320]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80033a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033aa:	4b4f      	ldr	r3, [pc, #316]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80033ac:	2180      	movs	r1, #128	@ 0x80
 80033ae:	0249      	lsls	r1, r1, #9
 80033b0:	430a      	orrs	r2, r1
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fe20 	bl	8001ff8 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033be:	f7fe fe1b 	bl	8001ff8 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0cd      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d4:	2380      	movs	r3, #128	@ 0x80
 80033d6:	029b      	lsls	r3, r3, #10
 80033d8:	4013      	ands	r3, r2
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x552>
 80033dc:	e01b      	b.n	8003416 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033de:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e2:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80033e4:	4943      	ldr	r1, [pc, #268]	@ (80034f4 <HAL_RCC_OscConfig+0x688>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fe05 	bl	8001ff8 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f4:	f7fe fe00 	bl	8001ff8 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0b2      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003406:	4b38      	ldr	r3, [pc, #224]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4013      	ands	r3, r2
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x588>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003414:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d100      	bne.n	8003420 <HAL_RCC_OscConfig+0x5b4>
 800341e:	e0a4      	b.n	800356a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	220c      	movs	r2, #12
 8003426:	4013      	ands	r3, r2
 8003428:	2b08      	cmp	r3, #8
 800342a:	d100      	bne.n	800342e <HAL_RCC_OscConfig+0x5c2>
 800342c:	e078      	b.n	8003520 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	d14c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b2b      	ldr	r3, [pc, #172]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800343c:	492e      	ldr	r1, [pc, #184]	@ (80034f8 <HAL_RCC_OscConfig+0x68c>)
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fdd9 	bl	8001ff8 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fdd4 	bl	8001ff8 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e086      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345e:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	049b      	lsls	r3, r3, #18
 8003466:	4013      	ands	r3, r2
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	220f      	movs	r2, #15
 8003470:	4393      	bics	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003478:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800347e:	4b1a      	ldr	r3, [pc, #104]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a1e      	ldr	r2, [pc, #120]	@ (80034fc <HAL_RCC_OscConfig+0x690>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	431a      	orrs	r2, r3
 8003492:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 800349e:	2180      	movs	r1, #128	@ 0x80
 80034a0:	0449      	lsls	r1, r1, #17
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fda7 	bl	8001ff8 <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe fda2 	bl	8001ff8 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e054      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	049b      	lsls	r3, r3, #18
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x644>
 80034ce:	e04c      	b.n	800356a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <HAL_RCC_OscConfig+0x67c>)
 80034d6:	4908      	ldr	r1, [pc, #32]	@ (80034f8 <HAL_RCC_OscConfig+0x68c>)
 80034d8:	400a      	ands	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fd8c 	bl	8001ff8 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x6a6>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	40021000 	.word	0x40021000
 80034ec:	00001388 	.word	0x00001388
 80034f0:	efffffff 	.word	0xefffffff
 80034f4:	fffeffff 	.word	0xfffeffff
 80034f8:	feffffff 	.word	0xfeffffff
 80034fc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fd7a 	bl	8001ff8 <HAL_GetTick>
 8003504:	0002      	movs	r2, r0
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e02c      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003512:	4b18      	ldr	r3, [pc, #96]	@ (8003574 <HAL_RCC_OscConfig+0x708>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	049b      	lsls	r3, r3, #18
 800351a:	4013      	ands	r3, r2
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x694>
 800351e:	e024      	b.n	800356a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e01f      	b.n	800356c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_OscConfig+0x708>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <HAL_RCC_OscConfig+0x708>)
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	23c0      	movs	r3, #192	@ 0xc0
 800353c:	025b      	lsls	r3, r3, #9
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	429a      	cmp	r2, r3
 8003546:	d10e      	bne.n	8003566 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	220f      	movs	r2, #15
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d107      	bne.n	8003566 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	23f0      	movs	r3, #240	@ 0xf0
 800355a:	039b      	lsls	r3, r3, #14
 800355c:	401a      	ands	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b008      	add	sp, #32
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0bf      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d911      	bls.n	80035be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b5e      	ldr	r3, [pc, #376]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0a6      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2204      	movs	r2, #4
 80035ce:	4013      	ands	r3, r2
 80035d0:	d006      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035d2:	4b51      	ldr	r3, [pc, #324]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4b50      	ldr	r3, [pc, #320]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80035d8:	21e0      	movs	r1, #224	@ 0xe0
 80035da:	00c9      	lsls	r1, r1, #3
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b4d      	ldr	r3, [pc, #308]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	22f0      	movs	r2, #240	@ 0xf0
 80035e6:	4393      	bics	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	d04c      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b44      	ldr	r3, [pc, #272]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	4013      	ands	r3, r2
 8003610:	d120      	bne.n	8003654 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e07a      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	049b      	lsls	r3, r3, #18
 8003626:	4013      	ands	r3, r2
 8003628:	d114      	bne.n	8003654 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06e      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003636:	4b38      	ldr	r3, [pc, #224]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	029b      	lsls	r3, r3, #10
 800363e:	4013      	ands	r3, r2
 8003640:	d108      	bne.n	8003654 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e062      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e05b      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003654:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	4393      	bics	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe fcc6 	bl	8001ff8 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003670:	e009      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003672:	f7fe fcc1 	bl	8001ff8 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	4a27      	ldr	r2, [pc, #156]	@ (800371c <HAL_RCC_ClockConfig+0x1a4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e042      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	220c      	movs	r2, #12
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1ec      	bne.n	8003672 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d211      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4393      	bics	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b8:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <HAL_RCC_ClockConfig+0x19c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e020      	b.n	800370c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2204      	movs	r2, #4
 80036d0:	4013      	ands	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a11      	ldr	r2, [pc, #68]	@ (8003720 <HAL_RCC_ClockConfig+0x1a8>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036e8:	f000 f820 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036ec:	0001      	movs	r1, r0
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RCC_ClockConfig+0x1a0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	220f      	movs	r2, #15
 80036f6:	4013      	ands	r3, r2
 80036f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <HAL_RCC_ClockConfig+0x1ac>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	000a      	movs	r2, r1
 80036fe:	40da      	lsrs	r2, r3
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003702:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003704:	2003      	movs	r0, #3
 8003706:	f7fc ffa7 	bl	8000658 <HAL_InitTick>
  
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40022000 	.word	0x40022000
 8003718:	40021000 	.word	0x40021000
 800371c:	00001388 	.word	0x00001388
 8003720:	fffff8ff 	.word	0xfffff8ff
 8003724:	080074f0 	.word	0x080074f0
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	220c      	movs	r2, #12
 8003750:	4013      	ands	r3, r2
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d046      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb8>
 8003756:	d848      	bhi.n	80037ea <HAL_RCC_GetSysClockFreq+0xbe>
 8003758:	2b04      	cmp	r3, #4
 800375a:	d002      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x36>
 800375c:	2b08      	cmp	r3, #8
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x3c>
 8003760:	e043      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003762:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003764:	613b      	str	r3, [r7, #16]
      break;
 8003766:	e043      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	0c9b      	lsrs	r3, r3, #18
 800376c:	220f      	movs	r2, #15
 800376e:	4013      	ands	r3, r2
 8003770:	4a24      	ldr	r2, [pc, #144]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003776:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	220f      	movs	r2, #15
 800377c:	4013      	ands	r3, r2
 800377e:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	23c0      	movs	r3, #192	@ 0xc0
 8003788:	025b      	lsls	r3, r3, #9
 800378a:	401a      	ands	r2, r3
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	025b      	lsls	r3, r3, #9
 8003790:	429a      	cmp	r2, r3
 8003792:	d109      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	481a      	ldr	r0, [pc, #104]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003798:	f7fc fcb6 	bl	8000108 <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	001a      	movs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4353      	muls	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e01a      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	23c0      	movs	r3, #192	@ 0xc0
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	401a      	ands	r2, r3
 80037b0:	23c0      	movs	r3, #192	@ 0xc0
 80037b2:	025b      	lsls	r3, r3, #9
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4814      	ldr	r0, [pc, #80]	@ (800380c <HAL_RCC_GetSysClockFreq+0xe0>)
 80037bc:	f7fc fca4 	bl	8000108 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4353      	muls	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e008      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	480c      	ldr	r0, [pc, #48]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037d0:	f7fc fc9a 	bl	8000108 <__udivsi3>
 80037d4:	0003      	movs	r3, r0
 80037d6:	001a      	movs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4353      	muls	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	613b      	str	r3, [r7, #16]
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_RCC_GetSysClockFreq+0xe0>)
 80037e6:	613b      	str	r3, [r7, #16]
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037ec:	613b      	str	r3, [r7, #16]
      break;
 80037ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037f0:	693b      	ldr	r3, [r7, #16]
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b006      	add	sp, #24
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	08007a7c 	.word	0x08007a7c
 8003808:	08007a8c 	.word	0x08007a8c
 800380c:	02dc6c00 	.word	0x02dc6c00

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	0001      	movs	r1, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	2207      	movs	r2, #7
 8003836:	4013      	ands	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x28>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	40d9      	lsrs	r1, r3
 800383e:	000b      	movs	r3, r1
}    
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	40021000 	.word	0x40021000
 800384c:	08007500 	.word	0x08007500

08003850 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2207      	movs	r2, #7
 800385e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_RCC_GetClockConfig+0x4c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_GetClockConfig+0x4c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	22f0      	movs	r2, #240	@ 0xf0
 8003872:	401a      	ands	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <HAL_RCC_GetClockConfig+0x4c>)
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	23e0      	movs	r3, #224	@ 0xe0
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_GetClockConfig+0x50>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	401a      	ands	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	40021000 	.word	0x40021000
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	4013      	ands	r3, r2
 80038be:	d100      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80038c0:	e08e      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	2017      	movs	r0, #23
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	055b      	lsls	r3, r3, #21
 80038d2:	4013      	ands	r3, r2
 80038d4:	d110      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	4b6a      	ldr	r3, [pc, #424]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	0549      	lsls	r1, r1, #21
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
 80038e4:	4b67      	ldr	r3, [pc, #412]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	055b      	lsls	r3, r3, #21
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f2:	183b      	adds	r3, r7, r0
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b63      	ldr	r3, [pc, #396]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d11a      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003904:	4b60      	ldr	r3, [pc, #384]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b5f      	ldr	r3, [pc, #380]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800390a:	2180      	movs	r1, #128	@ 0x80
 800390c:	0049      	lsls	r1, r1, #1
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe fb71 	bl	8001ff8 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	e008      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fe fb6c 	bl	8001ff8 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0a6      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b56      	ldr	r3, [pc, #344]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4013      	ands	r3, r2
 8003938:	d0f0      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393a:	4b52      	ldr	r3, [pc, #328]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	23c0      	movs	r3, #192	@ 0xc0
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4013      	ands	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d034      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	23c0      	movs	r3, #192	@ 0xc0
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4013      	ands	r3, r2
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	429a      	cmp	r2, r3
 800395a:	d02c      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395c:	4b49      	ldr	r3, [pc, #292]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4a4a      	ldr	r2, [pc, #296]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b47      	ldr	r3, [pc, #284]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	4b46      	ldr	r3, [pc, #280]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800396c:	2180      	movs	r1, #128	@ 0x80
 800396e:	0249      	lsls	r1, r1, #9
 8003970:	430a      	orrs	r2, r1
 8003972:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003974:	4b43      	ldr	r3, [pc, #268]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4b42      	ldr	r3, [pc, #264]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800397a:	4945      	ldr	r1, [pc, #276]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800397c:	400a      	ands	r2, r1
 800397e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003980:	4b40      	ldr	r3, [pc, #256]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	4013      	ands	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe fb33 	bl	8001ff8 <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e009      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe fb2e 	bl	8001ff8 <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e067      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	2202      	movs	r2, #2
 80039b2:	4013      	ands	r3, r2
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b6:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ca:	2317      	movs	r3, #23
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039da:	492f      	ldr	r1, [pc, #188]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80039dc:	400a      	ands	r2, r1
 80039de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4013      	ands	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ea:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	2203      	movs	r2, #3
 80039f0:	4393      	bics	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039fa:	430a      	orrs	r2, r1
 80039fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2202      	movs	r2, #2
 8003a04:	4013      	ands	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a08:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	4a23      	ldr	r2, [pc, #140]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	02db      	lsls	r3, r3, #11
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a28:	4b16      	ldr	r3, [pc, #88]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	4b13      	ldr	r3, [pc, #76]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	4013      	ands	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a46:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a56:	430a      	orrs	r2, r1
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4013      	ands	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a66:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	2240      	movs	r2, #64	@ 0x40
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a76:	430a      	orrs	r2, r1
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b006      	add	sp, #24
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	fffffcff 	.word	0xfffffcff
 8003a90:	fffeffff 	.word	0xfffeffff
 8003a94:	00001388 	.word	0x00001388
 8003a98:	efffffff 	.word	0xefffffff
 8003a9c:	fffcffff 	.word	0xfffcffff
 8003aa0:	fff3ffff 	.word	0xfff3ffff

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0a8      	b.n	8003c08 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	2382      	movs	r3, #130	@ 0x82
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d009      	beq.n	8003ade <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	61da      	str	r2, [r3, #28]
 8003ad0:	e005      	b.n	8003ade <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	225d      	movs	r2, #93	@ 0x5d
 8003ae8:	5c9b      	ldrb	r3, [r3, r2]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	225c      	movs	r2, #92	@ 0x5c
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fc fd14 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	225d      	movs	r2, #93	@ 0x5d
 8003b04:	2102      	movs	r1, #2
 8003b06:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2140      	movs	r1, #64	@ 0x40
 8003b14:	438a      	bics	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	23e0      	movs	r3, #224	@ 0xe0
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d902      	bls.n	8003b2a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e002      	b.n	8003b30 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	23f0      	movs	r3, #240	@ 0xf0
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d008      	beq.n	8003b4e <HAL_SPI_Init+0xaa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	23e0      	movs	r3, #224	@ 0xe0
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	2382      	movs	r3, #130	@ 0x82
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	401a      	ands	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6899      	ldr	r1, [r3, #8]
 8003b5c:	2384      	movs	r3, #132	@ 0x84
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	400b      	ands	r3, r1
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2102      	movs	r1, #2
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2101      	movs	r1, #1
 8003b74:	400b      	ands	r3, r1
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6999      	ldr	r1, [r3, #24]
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	400b      	ands	r3, r1
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2138      	movs	r1, #56	@ 0x38
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2180      	movs	r1, #128	@ 0x80
 8003b94:	400b      	ands	r3, r1
 8003b96:	431a      	orrs	r2, r3
 8003b98:	0011      	movs	r1, r2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	2110      	movs	r1, #16
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc4:	2108      	movs	r1, #8
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68d9      	ldr	r1, [r3, #12]
 8003bce:	23f0      	movs	r3, #240	@ 0xf0
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	015b      	lsls	r3, r3, #5
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <HAL_SPI_Init+0x16c>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	225d      	movs	r2, #93	@ 0x5d
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b004      	add	sp, #16
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffff7ff 	.word	0xfffff7ff

08003c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	1dbb      	adds	r3, r7, #6
 8003c22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c24:	231f      	movs	r3, #31
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	225c      	movs	r2, #92	@ 0x5c
 8003c30:	5c9b      	ldrb	r3, [r3, r2]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_Transmit+0x26>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e147      	b.n	8003eca <HAL_SPI_Transmit+0x2b6>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	225c      	movs	r2, #92	@ 0x5c
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c42:	f7fe f9d9 	bl	8001ff8 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c4a:	2316      	movs	r3, #22
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	1dba      	adds	r2, r7, #6
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	225d      	movs	r2, #93	@ 0x5d
 8003c58:	5c9b      	ldrb	r3, [r3, r2]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d004      	beq.n	8003c6a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003c60:	231f      	movs	r3, #31
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2202      	movs	r2, #2
 8003c66:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c68:	e128      	b.n	8003ebc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_SPI_Transmit+0x64>
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c80:	e11c      	b.n	8003ebc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	225d      	movs	r2, #93	@ 0x5d
 8003c86:	2103      	movs	r1, #3
 8003c88:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1dba      	adds	r2, r7, #6
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1dba      	adds	r2, r7, #6
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2244      	movs	r2, #68	@ 0x44
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2246      	movs	r2, #70	@ 0x46
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d110      	bne.n	8003cf6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2140      	movs	r1, #64	@ 0x40
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	01c9      	lsls	r1, r1, #7
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2140      	movs	r1, #64	@ 0x40
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	23e0      	movs	r3, #224	@ 0xe0
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d952      	bls.n	8003dc6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_SPI_Transmit+0x11e>
 8003d28:	2316      	movs	r3, #22
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d143      	bne.n	8003dba <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d56:	e030      	b.n	8003dba <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d112      	bne.n	8003d8c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d8a:	e016      	b.n	8003dba <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8c:	f7fe f934 	bl	8001ff8 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d802      	bhi.n	8003da2 <HAL_SPI_Transmit+0x18e>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	d102      	bne.n	8003da8 <HAL_SPI_Transmit+0x194>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003da8:	231f      	movs	r3, #31
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2203      	movs	r2, #3
 8003dae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	225d      	movs	r2, #93	@ 0x5d
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]
          goto error;
 8003db8:	e080      	b.n	8003ebc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1c9      	bne.n	8003d58 <HAL_SPI_Transmit+0x144>
 8003dc4:	e053      	b.n	8003e6e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_SPI_Transmit+0x1c4>
 8003dce:	2316      	movs	r3, #22
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d145      	bne.n	8003e64 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003dfe:	e031      	b.n	8003e64 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d113      	bne.n	8003e36 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e34:	e016      	b.n	8003e64 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e36:	f7fe f8df 	bl	8001ff8 <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d802      	bhi.n	8003e4c <HAL_SPI_Transmit+0x238>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Transmit+0x23e>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d108      	bne.n	8003e64 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003e52:	231f      	movs	r3, #31
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	225d      	movs	r2, #93	@ 0x5d
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e62:	e02b      	b.n	8003ebc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1c8      	bne.n	8003e00 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 f95d 	bl	8004134 <SPI_EndRxTxTransaction>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003eaa:	231f      	movs	r3, #31
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e003      	b.n	8003ebc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	225d      	movs	r2, #93	@ 0x5d
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	225c      	movs	r2, #92	@ 0x5c
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ec4:	231f      	movs	r3, #31
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	781b      	ldrb	r3, [r3, #0]
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b008      	add	sp, #32
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	1dfb      	adds	r3, r7, #7
 8003ee2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ee4:	f7fe f888 	bl	8001ff8 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ef4:	f7fe f880 	bl	8001ff8 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003efc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	015b      	lsls	r3, r3, #5
 8003f02:	0d1b      	lsrs	r3, r3, #20
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	4353      	muls	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0a:	e058      	b.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	d055      	beq.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f12:	f7fe f871 	bl	8001ff8 <HAL_GetTick>
 8003f16:	0002      	movs	r2, r0
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d902      	bls.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d142      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	21e0      	movs	r1, #224	@ 0xe0
 8003f34:	438a      	bics	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	2382      	movs	r3, #130	@ 0x82
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d113      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d005      	beq.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d107      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2140      	movs	r1, #64	@ 0x40
 8003f68:	438a      	bics	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	019b      	lsls	r3, r3, #6
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d110      	bne.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	491a      	ldr	r1, [pc, #104]	@ (8003fec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2180      	movs	r1, #128	@ 0x80
 8003f94:	0189      	lsls	r1, r1, #6
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	225d      	movs	r2, #93	@ 0x5d
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	225c      	movs	r2, #92	@ 0x5c
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e017      	b.n	8003fde <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	425a      	negs	r2, r3
 8003fce:	4153      	adcs	r3, r2
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d197      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	0018      	movs	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b008      	add	sp, #32
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	ffffdfff 	.word	0xffffdfff

08003ff0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	@ 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ffe:	2317      	movs	r3, #23
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004006:	f7fd fff7 	bl	8001ff8 <HAL_GetTick>
 800400a:	0002      	movs	r2, r0
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004016:	f7fd ffef 	bl	8001ff8 <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004026:	4b41      	ldr	r3, [pc, #260]	@ (800412c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	0013      	movs	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	189b      	adds	r3, r3, r2
 8004030:	00da      	lsls	r2, r3, #3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	0d1b      	lsrs	r3, r3, #20
 8004036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004038:	4353      	muls	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800403c:	e068      	b.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	23c0      	movs	r3, #192	@ 0xc0
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	429a      	cmp	r2, r3
 8004046:	d10a      	bne.n	800405e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	2117      	movs	r1, #23
 8004056:	187b      	adds	r3, r7, r1
 8004058:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800405a:	187b      	adds	r3, r7, r1
 800405c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	d055      	beq.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004064:	f7fd ffc8 	bl	8001ff8 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d142      	bne.n	8004100 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	21e0      	movs	r1, #224	@ 0xe0
 8004086:	438a      	bics	r2, r1
 8004088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	2382      	movs	r3, #130	@ 0x82
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	429a      	cmp	r2, r3
 8004094:	d113      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0xce>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	429a      	cmp	r2, r3
 80040a0:	d005      	beq.n	80040ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d107      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	@ 0x40
 80040ba:	438a      	bics	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	019b      	lsls	r3, r3, #6
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d110      	bne.n	80040ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4916      	ldr	r1, [pc, #88]	@ (8004130 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80040d6:	400a      	ands	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2180      	movs	r1, #128	@ 0x80
 80040e6:	0189      	lsls	r1, r1, #6
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	225d      	movs	r2, #93	@ 0x5d
 80040f0:	2101      	movs	r1, #1
 80040f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	225c      	movs	r2, #92	@ 0x5c
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e010      	b.n	8004122 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3b01      	subs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d18e      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b00a      	add	sp, #40	@ 0x28
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	20000000 	.word	0x20000000
 8004130:	ffffdfff 	.word	0xffffdfff

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	23c0      	movs	r3, #192	@ 0xc0
 8004144:	0159      	lsls	r1, r3, #5
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	0013      	movs	r3, r2
 800414e:	2200      	movs	r2, #0
 8004150:	f7ff ff4e 	bl	8003ff0 <SPI_WaitFifoStateUntilTimeout>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d007      	beq.n	8004168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415c:	2220      	movs	r2, #32
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e027      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	0013      	movs	r3, r2
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	@ 0x80
 8004176:	f7ff fead 	bl	8003ed4 <SPI_WaitFlagStateUntilTimeout>
 800417a:	1e03      	subs	r3, r0, #0
 800417c:	d007      	beq.n	800418e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	2220      	movs	r2, #32
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e014      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	23c0      	movs	r3, #192	@ 0xc0
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	0013      	movs	r3, r2
 800419c:	2200      	movs	r2, #0
 800419e:	f7ff ff27 	bl	8003ff0 <SPI_WaitFifoStateUntilTimeout>
 80041a2:	1e03      	subs	r3, r0, #0
 80041a4:	d007      	beq.n	80041b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041aa:	2220      	movs	r2, #32
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e000      	b.n	80041b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b004      	add	sp, #16
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e042      	b.n	8004258 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223d      	movs	r2, #61	@ 0x3d
 80041d6:	5c9b      	ldrb	r3, [r3, r2]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223c      	movs	r2, #60	@ 0x3c
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 f839 	bl	8004260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	223d      	movs	r2, #61	@ 0x3d
 80041f2:	2102      	movs	r1, #2
 80041f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	0019      	movs	r1, r3
 8004200:	0010      	movs	r0, r2
 8004202:	f000 f995 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2246      	movs	r2, #70	@ 0x46
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	223e      	movs	r2, #62	@ 0x3e
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223f      	movs	r2, #63	@ 0x3f
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2240      	movs	r2, #64	@ 0x40
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2241      	movs	r2, #65	@ 0x41
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2242      	movs	r2, #66	@ 0x42
 8004232:	2101      	movs	r1, #1
 8004234:	5499      	strb	r1, [r3, r2]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2243      	movs	r2, #67	@ 0x43
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2244      	movs	r2, #68	@ 0x44
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2245      	movs	r2, #69	@ 0x45
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	223d      	movs	r2, #61	@ 0x3d
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004268:	46c0      	nop			@ (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	b002      	add	sp, #8
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	223d      	movs	r2, #61	@ 0x3d
 800427c:	5c9b      	ldrb	r3, [r3, r2]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e03b      	b.n	8004300 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	223d      	movs	r2, #61	@ 0x3d
 800428c:	2102      	movs	r1, #2
 800428e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	430a      	orrs	r2, r1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIM_Base_Start_IT+0x98>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0x5a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	05db      	lsls	r3, r3, #23
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d009      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0x5a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a14      	ldr	r2, [pc, #80]	@ (800430c <HAL_TIM_Base_Start_IT+0x9c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0x5a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <HAL_TIM_Base_Start_IT+0xa0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d111      	bne.n	80042ee <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2207      	movs	r2, #7
 80042d2:	4013      	ands	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b06      	cmp	r3, #6
 80042da:	d010      	beq.n	80042fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	e007      	b.n	80042fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40014000 	.word	0x40014000

08004314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2202      	movs	r2, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d021      	beq.n	8004378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	d01d      	beq.n	8004378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2203      	movs	r2, #3
 8004342:	4252      	negs	r2, r2
 8004344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2203      	movs	r2, #3
 8004354:	4013      	ands	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f8d0 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004360:	e007      	b.n	8004372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f000 f8c3 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f8cf 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2204      	movs	r2, #4
 8004384:	4013      	ands	r3, r2
 8004386:	d01e      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2205      	movs	r2, #5
 800438e:	4252      	negs	r2, r2
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	23c0      	movs	r3, #192	@ 0xc0
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4013      	ands	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 f8a9 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80043ae:	e007      	b.n	80043c0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 f89c 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 f8a8 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2208      	movs	r2, #8
 80043ca:	4013      	ands	r3, r2
 80043cc:	d021      	beq.n	8004412 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4013      	ands	r3, r2
 80043d4:	d01d      	beq.n	8004412 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2209      	movs	r2, #9
 80043dc:	4252      	negs	r2, r2
 80043de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2204      	movs	r2, #4
 80043e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f883 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80043fa:	e007      	b.n	800440c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f876 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f882 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2210      	movs	r2, #16
 8004416:	4013      	ands	r3, r2
 8004418:	d022      	beq.n	8004460 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2210      	movs	r2, #16
 800441e:	4013      	ands	r3, r2
 8004420:	d01e      	beq.n	8004460 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2211      	movs	r2, #17
 8004428:	4252      	negs	r2, r2
 800442a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2208      	movs	r2, #8
 8004430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	23c0      	movs	r3, #192	@ 0xc0
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4013      	ands	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f85c 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004448:	e007      	b.n	800445a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f84f 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f000 f85b 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2201      	movs	r2, #1
 8004464:	4013      	ands	r3, r2
 8004466:	d00c      	beq.n	8004482 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d008      	beq.n	8004482 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2202      	movs	r2, #2
 8004476:	4252      	negs	r2, r2
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f7fd fd7d 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	4013      	ands	r3, r2
 8004488:	d00c      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	4013      	ands	r3, r2
 8004490:	d008      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2281      	movs	r2, #129	@ 0x81
 8004498:	4252      	negs	r2, r2
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f8dc 	bl	800465c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00c      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2240      	movs	r2, #64	@ 0x40
 80044b0:	4013      	ands	r3, r2
 80044b2:	d008      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2241      	movs	r2, #65	@ 0x41
 80044ba:	4252      	negs	r2, r2
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 f82d 	bl	8004520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2220      	movs	r2, #32
 80044ca:	4013      	ands	r3, r2
 80044cc:	d00c      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d008      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2221      	movs	r2, #33	@ 0x21
 80044dc:	4252      	negs	r2, r2
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f8b2 	bl	800464c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e8:	46c0      	nop			@ (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b004      	add	sp, #16
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f8:	46c0      	nop			@ (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3b      	ldr	r2, [pc, #236]	@ (8004630 <TIM_Base_SetConfig+0x100>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d008      	beq.n	800455a <TIM_Base_SetConfig+0x2a>
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	05db      	lsls	r3, r3, #23
 800454e:	429a      	cmp	r2, r3
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0x2a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a37      	ldr	r2, [pc, #220]	@ (8004634 <TIM_Base_SetConfig+0x104>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2270      	movs	r2, #112	@ 0x70
 800455e:	4393      	bics	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a30      	ldr	r2, [pc, #192]	@ (8004630 <TIM_Base_SetConfig+0x100>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	429a      	cmp	r2, r3
 800457c:	d013      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2c      	ldr	r2, [pc, #176]	@ (8004634 <TIM_Base_SetConfig+0x104>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <TIM_Base_SetConfig+0x108>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <TIM_Base_SetConfig+0x10c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a29      	ldr	r2, [pc, #164]	@ (8004640 <TIM_Base_SetConfig+0x110>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x76>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a28      	ldr	r2, [pc, #160]	@ (8004644 <TIM_Base_SetConfig+0x114>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a27      	ldr	r2, [pc, #156]	@ (8004648 <TIM_Base_SetConfig+0x118>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2280      	movs	r2, #128	@ 0x80
 80045bc:	4393      	bics	r3, r2
 80045be:	001a      	movs	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <TIM_Base_SetConfig+0x100>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00b      	beq.n	80045fe <TIM_Base_SetConfig+0xce>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a14      	ldr	r2, [pc, #80]	@ (800463c <TIM_Base_SetConfig+0x10c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <TIM_Base_SetConfig+0xce>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <TIM_Base_SetConfig+0x110>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <TIM_Base_SetConfig+0xce>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a12      	ldr	r2, [pc, #72]	@ (8004644 <TIM_Base_SetConfig+0x114>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d103      	bne.n	8004606 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2201      	movs	r2, #1
 8004612:	4013      	ands	r3, r2
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2201      	movs	r2, #1
 800461e:	4393      	bics	r3, r2
 8004620:	001a      	movs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]
  }
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40002000 	.word	0x40002000
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	fffffcff 	.word	0xfffffcff

0800464c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004664:	46c0      	nop			@ (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e044      	b.n	8004708 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2278      	movs	r2, #120	@ 0x78
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fb ff95 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2224      	movs	r2, #36	@ 0x24
 800469a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fa14 	bl	8004ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f828 	bl	8004714 <UART_SetConfig>
 80046c4:	0003      	movs	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01c      	b.n	8004708 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	490d      	ldr	r1, [pc, #52]	@ (8004710 <HAL_UART_Init+0xa4>)
 80046da:	400a      	ands	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	212a      	movs	r1, #42	@ 0x2a
 80046ea:	438a      	bics	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f000 faa3 	bl	8004c4c <UART_CheckIdleState>
 8004706:	0003      	movs	r3, r0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}
 8004710:	ffffb7ff 	.word	0xffffb7ff

08004714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471c:	231e      	movs	r3, #30
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4abe      	ldr	r2, [pc, #760]	@ (8004a3c <UART_SetConfig+0x328>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4ab9      	ldr	r2, [pc, #740]	@ (8004a40 <UART_SetConfig+0x32c>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4ab0      	ldr	r2, [pc, #704]	@ (8004a44 <UART_SetConfig+0x330>)
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4aac      	ldr	r2, [pc, #688]	@ (8004a48 <UART_SetConfig+0x334>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d127      	bne.n	80047ea <UART_SetConfig+0xd6>
 800479a:	4bac      	ldr	r3, [pc, #688]	@ (8004a4c <UART_SetConfig+0x338>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	2203      	movs	r2, #3
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d00d      	beq.n	80047c2 <UART_SetConfig+0xae>
 80047a6:	d81b      	bhi.n	80047e0 <UART_SetConfig+0xcc>
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d014      	beq.n	80047d6 <UART_SetConfig+0xc2>
 80047ac:	d818      	bhi.n	80047e0 <UART_SetConfig+0xcc>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <UART_SetConfig+0xa4>
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d00a      	beq.n	80047cc <UART_SetConfig+0xb8>
 80047b6:	e013      	b.n	80047e0 <UART_SetConfig+0xcc>
 80047b8:	231f      	movs	r3, #31
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e0bd      	b.n	800493e <UART_SetConfig+0x22a>
 80047c2:	231f      	movs	r3, #31
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e0b8      	b.n	800493e <UART_SetConfig+0x22a>
 80047cc:	231f      	movs	r3, #31
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2204      	movs	r2, #4
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e0b3      	b.n	800493e <UART_SetConfig+0x22a>
 80047d6:	231f      	movs	r3, #31
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	2208      	movs	r2, #8
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e0ae      	b.n	800493e <UART_SetConfig+0x22a>
 80047e0:	231f      	movs	r3, #31
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2210      	movs	r2, #16
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e0a9      	b.n	800493e <UART_SetConfig+0x22a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a98      	ldr	r2, [pc, #608]	@ (8004a50 <UART_SetConfig+0x33c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d134      	bne.n	800485e <UART_SetConfig+0x14a>
 80047f4:	4b95      	ldr	r3, [pc, #596]	@ (8004a4c <UART_SetConfig+0x338>)
 80047f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f8:	23c0      	movs	r3, #192	@ 0xc0
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	4013      	ands	r3, r2
 80047fe:	22c0      	movs	r2, #192	@ 0xc0
 8004800:	0292      	lsls	r2, r2, #10
 8004802:	4293      	cmp	r3, r2
 8004804:	d017      	beq.n	8004836 <UART_SetConfig+0x122>
 8004806:	22c0      	movs	r2, #192	@ 0xc0
 8004808:	0292      	lsls	r2, r2, #10
 800480a:	4293      	cmp	r3, r2
 800480c:	d822      	bhi.n	8004854 <UART_SetConfig+0x140>
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	0292      	lsls	r2, r2, #10
 8004812:	4293      	cmp	r3, r2
 8004814:	d019      	beq.n	800484a <UART_SetConfig+0x136>
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	0292      	lsls	r2, r2, #10
 800481a:	4293      	cmp	r3, r2
 800481c:	d81a      	bhi.n	8004854 <UART_SetConfig+0x140>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <UART_SetConfig+0x118>
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	0252      	lsls	r2, r2, #9
 8004826:	4293      	cmp	r3, r2
 8004828:	d00a      	beq.n	8004840 <UART_SetConfig+0x12c>
 800482a:	e013      	b.n	8004854 <UART_SetConfig+0x140>
 800482c:	231f      	movs	r3, #31
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e083      	b.n	800493e <UART_SetConfig+0x22a>
 8004836:	231f      	movs	r3, #31
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e07e      	b.n	800493e <UART_SetConfig+0x22a>
 8004840:	231f      	movs	r3, #31
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2204      	movs	r2, #4
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e079      	b.n	800493e <UART_SetConfig+0x22a>
 800484a:	231f      	movs	r3, #31
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2208      	movs	r2, #8
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e074      	b.n	800493e <UART_SetConfig+0x22a>
 8004854:	231f      	movs	r3, #31
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2210      	movs	r2, #16
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e06f      	b.n	800493e <UART_SetConfig+0x22a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7c      	ldr	r2, [pc, #496]	@ (8004a54 <UART_SetConfig+0x340>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d134      	bne.n	80048d2 <UART_SetConfig+0x1be>
 8004868:	4b78      	ldr	r3, [pc, #480]	@ (8004a4c <UART_SetConfig+0x338>)
 800486a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800486c:	23c0      	movs	r3, #192	@ 0xc0
 800486e:	031b      	lsls	r3, r3, #12
 8004870:	4013      	ands	r3, r2
 8004872:	22c0      	movs	r2, #192	@ 0xc0
 8004874:	0312      	lsls	r2, r2, #12
 8004876:	4293      	cmp	r3, r2
 8004878:	d017      	beq.n	80048aa <UART_SetConfig+0x196>
 800487a:	22c0      	movs	r2, #192	@ 0xc0
 800487c:	0312      	lsls	r2, r2, #12
 800487e:	4293      	cmp	r3, r2
 8004880:	d822      	bhi.n	80048c8 <UART_SetConfig+0x1b4>
 8004882:	2280      	movs	r2, #128	@ 0x80
 8004884:	0312      	lsls	r2, r2, #12
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <UART_SetConfig+0x1aa>
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	0312      	lsls	r2, r2, #12
 800488e:	4293      	cmp	r3, r2
 8004890:	d81a      	bhi.n	80048c8 <UART_SetConfig+0x1b4>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x18c>
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	02d2      	lsls	r2, r2, #11
 800489a:	4293      	cmp	r3, r2
 800489c:	d00a      	beq.n	80048b4 <UART_SetConfig+0x1a0>
 800489e:	e013      	b.n	80048c8 <UART_SetConfig+0x1b4>
 80048a0:	231f      	movs	r3, #31
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e049      	b.n	800493e <UART_SetConfig+0x22a>
 80048aa:	231f      	movs	r3, #31
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	2202      	movs	r2, #2
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e044      	b.n	800493e <UART_SetConfig+0x22a>
 80048b4:	231f      	movs	r3, #31
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2204      	movs	r2, #4
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e03f      	b.n	800493e <UART_SetConfig+0x22a>
 80048be:	231f      	movs	r3, #31
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2208      	movs	r2, #8
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e03a      	b.n	800493e <UART_SetConfig+0x22a>
 80048c8:	231f      	movs	r3, #31
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2210      	movs	r2, #16
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e035      	b.n	800493e <UART_SetConfig+0x22a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a60      	ldr	r2, [pc, #384]	@ (8004a58 <UART_SetConfig+0x344>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d104      	bne.n	80048e6 <UART_SetConfig+0x1d2>
 80048dc:	231f      	movs	r3, #31
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e02b      	b.n	800493e <UART_SetConfig+0x22a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5c      	ldr	r2, [pc, #368]	@ (8004a5c <UART_SetConfig+0x348>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d104      	bne.n	80048fa <UART_SetConfig+0x1e6>
 80048f0:	231f      	movs	r3, #31
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e021      	b.n	800493e <UART_SetConfig+0x22a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a58      	ldr	r2, [pc, #352]	@ (8004a60 <UART_SetConfig+0x34c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d104      	bne.n	800490e <UART_SetConfig+0x1fa>
 8004904:	231f      	movs	r3, #31
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e017      	b.n	800493e <UART_SetConfig+0x22a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a54      	ldr	r2, [pc, #336]	@ (8004a64 <UART_SetConfig+0x350>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d104      	bne.n	8004922 <UART_SetConfig+0x20e>
 8004918:	231f      	movs	r3, #31
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x22a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a50      	ldr	r2, [pc, #320]	@ (8004a68 <UART_SetConfig+0x354>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d104      	bne.n	8004936 <UART_SetConfig+0x222>
 800492c:	231f      	movs	r3, #31
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e003      	b.n	800493e <UART_SetConfig+0x22a>
 8004936:	231f      	movs	r3, #31
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2210      	movs	r2, #16
 800493c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	429a      	cmp	r2, r3
 8004948:	d15c      	bne.n	8004a04 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800494a:	231f      	movs	r3, #31
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d015      	beq.n	8004980 <UART_SetConfig+0x26c>
 8004954:	dc18      	bgt.n	8004988 <UART_SetConfig+0x274>
 8004956:	2b04      	cmp	r3, #4
 8004958:	d00d      	beq.n	8004976 <UART_SetConfig+0x262>
 800495a:	dc15      	bgt.n	8004988 <UART_SetConfig+0x274>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <UART_SetConfig+0x252>
 8004960:	2b02      	cmp	r3, #2
 8004962:	d005      	beq.n	8004970 <UART_SetConfig+0x25c>
 8004964:	e010      	b.n	8004988 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004966:	f7fe ff5d 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800496a:	0003      	movs	r3, r0
 800496c:	61bb      	str	r3, [r7, #24]
        break;
 800496e:	e012      	b.n	8004996 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b3e      	ldr	r3, [pc, #248]	@ (8004a6c <UART_SetConfig+0x358>)
 8004972:	61bb      	str	r3, [r7, #24]
        break;
 8004974:	e00f      	b.n	8004996 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fed9 	bl	800372c <HAL_RCC_GetSysClockFreq>
 800497a:	0003      	movs	r3, r0
 800497c:	61bb      	str	r3, [r7, #24]
        break;
 800497e:	e00a      	b.n	8004996 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	61bb      	str	r3, [r7, #24]
        break;
 8004986:	e006      	b.n	8004996 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498c:	231e      	movs	r3, #30
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2201      	movs	r2, #1
 8004992:	701a      	strb	r2, [r3, #0]
        break;
 8004994:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d100      	bne.n	800499e <UART_SetConfig+0x28a>
 800499c:	e095      	b.n	8004aca <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	005a      	lsls	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	18d2      	adds	r2, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0019      	movs	r1, r3
 80049b0:	0010      	movs	r0, r2
 80049b2:	f7fb fba9 	bl	8000108 <__udivsi3>
 80049b6:	0003      	movs	r3, r0
 80049b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d91c      	bls.n	80049fa <UART_SetConfig+0x2e6>
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	025b      	lsls	r3, r3, #9
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d217      	bcs.n	80049fa <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	200e      	movs	r0, #14
 80049d0:	183b      	adds	r3, r7, r0
 80049d2:	210f      	movs	r1, #15
 80049d4:	438a      	bics	r2, r1
 80049d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2207      	movs	r2, #7
 80049e0:	4013      	ands	r3, r2
 80049e2:	b299      	uxth	r1, r3
 80049e4:	183b      	adds	r3, r7, r0
 80049e6:	183a      	adds	r2, r7, r0
 80049e8:	8812      	ldrh	r2, [r2, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	183a      	adds	r2, r7, r0
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	e067      	b.n	8004aca <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80049fa:	231e      	movs	r3, #30
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e062      	b.n	8004aca <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a04:	231f      	movs	r3, #31
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d030      	beq.n	8004a70 <UART_SetConfig+0x35c>
 8004a0e:	dc33      	bgt.n	8004a78 <UART_SetConfig+0x364>
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d00d      	beq.n	8004a30 <UART_SetConfig+0x31c>
 8004a14:	dc30      	bgt.n	8004a78 <UART_SetConfig+0x364>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <UART_SetConfig+0x30c>
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d005      	beq.n	8004a2a <UART_SetConfig+0x316>
 8004a1e:	e02b      	b.n	8004a78 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe ff00 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8004a24:	0003      	movs	r3, r0
 8004a26:	61bb      	str	r3, [r7, #24]
        break;
 8004a28:	e02d      	b.n	8004a86 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2a:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <UART_SetConfig+0x358>)
 8004a2c:	61bb      	str	r3, [r7, #24]
        break;
 8004a2e:	e02a      	b.n	8004a86 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a30:	f7fe fe7c 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8004a34:	0003      	movs	r3, r0
 8004a36:	61bb      	str	r3, [r7, #24]
        break;
 8004a38:	e025      	b.n	8004a86 <UART_SetConfig+0x372>
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	efff69f3 	.word	0xefff69f3
 8004a40:	ffffcfff 	.word	0xffffcfff
 8004a44:	fffff4ff 	.word	0xfffff4ff
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40004800 	.word	0x40004800
 8004a58:	40004c00 	.word	0x40004c00
 8004a5c:	40005000 	.word	0x40005000
 8004a60:	40011400 	.word	0x40011400
 8004a64:	40011800 	.word	0x40011800
 8004a68:	40011c00 	.word	0x40011c00
 8004a6c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	61bb      	str	r3, [r7, #24]
        break;
 8004a76:	e006      	b.n	8004a86 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a7c:	231e      	movs	r3, #30
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
        break;
 8004a84:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01e      	beq.n	8004aca <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	085a      	lsrs	r2, r3, #1
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	18d2      	adds	r2, r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	f7fb fb33 	bl	8000108 <__udivsi3>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b0f      	cmp	r3, #15
 8004aaa:	d90a      	bls.n	8004ac2 <UART_SetConfig+0x3ae>
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	025b      	lsls	r3, r3, #9
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d205      	bcs.n	8004ac2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	e003      	b.n	8004aca <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac2:	231e      	movs	r3, #30
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ad6:	231e      	movs	r3, #30
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b008      	add	sp, #32
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	2208      	movs	r2, #8
 8004af2:	4013      	ands	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a4a      	ldr	r2, [pc, #296]	@ (8004c28 <UART_AdvFeatureConfig+0x144>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	2201      	movs	r2, #1
 8004b14:	4013      	ands	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4a43      	ldr	r2, [pc, #268]	@ (8004c2c <UART_AdvFeatureConfig+0x148>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	2202      	movs	r2, #2
 8004b36:	4013      	ands	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a3b      	ldr	r2, [pc, #236]	@ (8004c30 <UART_AdvFeatureConfig+0x14c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	2204      	movs	r2, #4
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <UART_AdvFeatureConfig+0x150>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	0019      	movs	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	2210      	movs	r2, #16
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	@ (8004c38 <UART_AdvFeatureConfig+0x154>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	0019      	movs	r1, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <UART_AdvFeatureConfig+0x158>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	2240      	movs	r2, #64	@ 0x40
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d01d      	beq.n	8004bfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <UART_AdvFeatureConfig+0x15c>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	035b      	lsls	r3, r3, #13
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d10b      	bne.n	8004bfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a15      	ldr	r2, [pc, #84]	@ (8004c44 <UART_AdvFeatureConfig+0x160>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	2280      	movs	r2, #128	@ 0x80
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c48 <UART_AdvFeatureConfig+0x164>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }
}
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	ffff7fff 	.word	0xffff7fff
 8004c2c:	fffdffff 	.word	0xfffdffff
 8004c30:	fffeffff 	.word	0xfffeffff
 8004c34:	fffbffff 	.word	0xfffbffff
 8004c38:	ffffefff 	.word	0xffffefff
 8004c3c:	ffffdfff 	.word	0xffffdfff
 8004c40:	ffefffff 	.word	0xffefffff
 8004c44:	ff9fffff 	.word	0xff9fffff
 8004c48:	fff7ffff 	.word	0xfff7ffff

08004c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b092      	sub	sp, #72	@ 0x48
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2284      	movs	r2, #132	@ 0x84
 8004c58:	2100      	movs	r1, #0
 8004c5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c5c:	f7fd f9cc 	bl	8001ff8 <HAL_GetTick>
 8004c60:	0003      	movs	r3, r0
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d12c      	bne.n	8004ccc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c74:	2280      	movs	r2, #128	@ 0x80
 8004c76:	0391      	lsls	r1, r2, #14
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	@ (8004d94 <UART_CheckIdleState+0x148>)
 8004c7c:	9200      	str	r2, [sp, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f000 f88c 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004c84:	1e03      	subs	r3, r0, #0
 8004c86:	d021      	beq.n	8004ccc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c88:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c92:	2301      	movs	r3, #1
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2180      	movs	r1, #128	@ 0x80
 8004caa:	438a      	bics	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2278      	movs	r2, #120	@ 0x78
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e05f      	b.n	8004d8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d146      	bne.n	8004d68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	03d1      	lsls	r1, r2, #15
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <UART_CheckIdleState+0x148>)
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f000 f858 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004cec:	1e03      	subs	r3, r0, #0
 8004cee:	d03b      	beq.n	8004d68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4921      	ldr	r1, [pc, #132]	@ (8004d98 <UART_CheckIdleState+0x14c>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	@ 0x80
 8004d58:	2120      	movs	r1, #32
 8004d5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2278      	movs	r2, #120	@ 0x78
 8004d60:	2100      	movs	r1, #0
 8004d62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e011      	b.n	8004d8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2280      	movs	r2, #128	@ 0x80
 8004d72:	2120      	movs	r1, #32
 8004d74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2278      	movs	r2, #120	@ 0x78
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b010      	add	sp, #64	@ 0x40
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	01ffffff 	.word	0x01ffffff
 8004d98:	fffffedf 	.word	0xfffffedf

08004d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	e051      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3301      	adds	r3, #1
 8004db2:	d04e      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db4:	f7fd f920 	bl	8001ff8 <HAL_GetTick>
 8004db8:	0002      	movs	r2, r0
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <UART_WaitOnFlagUntilTimeout+0x2e>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e051      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b80      	cmp	r3, #128	@ 0x80
 8004dde:	d038      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b40      	cmp	r3, #64	@ 0x40
 8004de4:	d035      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	2208      	movs	r2, #8
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d111      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 f83c 	bl	8004e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2284      	movs	r2, #132	@ 0x84
 8004e08:	2108      	movs	r1, #8
 8004e0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2278      	movs	r2, #120	@ 0x78
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e02c      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	2380      	movs	r3, #128	@ 0x80
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	401a      	ands	r2, r3
 8004e24:	2380      	movs	r3, #128	@ 0x80
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d112      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2280      	movs	r2, #128	@ 0x80
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f81f 	bl	8004e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2284      	movs	r2, #132	@ 0x84
 8004e42:	2120      	movs	r1, #32
 8004e44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2278      	movs	r2, #120	@ 0x78
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00f      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	425a      	negs	r2, r3
 8004e62:	4153      	adcs	r3, r2
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	001a      	movs	r2, r3
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d09e      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	@ 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4926      	ldr	r1, [pc, #152]	@ (8004f40 <UART_EndRxTransfer+0xc4>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	623b      	str	r3, [r7, #32]
  return(result);
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	438a      	bics	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d118      	bne.n	8004f22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	2301      	movs	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2110      	movs	r1, #16
 8004f12:	438a      	bics	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	2120      	movs	r1, #32
 8004f28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b00e      	add	sp, #56	@ 0x38
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	fffffedf 	.word	0xfffffedf

08004f44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4a:	f3ef 8305 	mrs	r3, IPSR
 8004f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <osKernelInitialize+0x2e>
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <osKernelInitialize+0x54>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d103      	bne.n	8004f72 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004f6a:	2306      	movs	r3, #6
 8004f6c:	425b      	negs	r3, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e00c      	b.n	8004f8c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f72:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <osKernelInitialize+0x54>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d105      	bne.n	8004f86 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <osKernelInitialize+0x54>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e002      	b.n	8004f8c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004f86:	2301      	movs	r3, #1
 8004f88:	425b      	negs	r3, r3
 8004f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	200005f8 	.word	0x200005f8

08004f9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa2:	f3ef 8305 	mrs	r3, IPSR
 8004fa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fae:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb2:	607b      	str	r3, [r7, #4]
  return(result);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <osKernelStart+0x2e>
 8004fba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <osKernelStart+0x58>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d103      	bne.n	8004fca <osKernelStart+0x2e>
    stat = osErrorISR;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e00e      	b.n	8004fe8 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <osKernelStart+0x58>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004fd2:	4b08      	ldr	r3, [pc, #32]	@ (8004ff4 <osKernelStart+0x58>)
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004fd8:	f000 ff78 	bl	8005ecc <vTaskStartScheduler>
      stat = osOK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e002      	b.n	8004fe8 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	200005f8 	.word	0x200005f8

08004ff8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ff8:	b5b0      	push	{r4, r5, r7, lr}
 8004ffa:	b090      	sub	sp, #64	@ 0x40
 8004ffc:	af04      	add	r7, sp, #16
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005008:	f3ef 8305 	mrs	r3, IPSR
 800500c:	61fb      	str	r3, [r7, #28]
  return(result);
 800500e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005010:	2b00      	cmp	r3, #0
 8005012:	d000      	beq.n	8005016 <osThreadNew+0x1e>
 8005014:	e090      	b.n	8005138 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005016:	f3ef 8310 	mrs	r3, PRIMASK
 800501a:	61bb      	str	r3, [r7, #24]
  return(result);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <osThreadNew+0x34>
 8005022:	4b48      	ldr	r3, [pc, #288]	@ (8005144 <osThreadNew+0x14c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d100      	bne.n	800502c <osThreadNew+0x34>
 800502a:	e085      	b.n	8005138 <osThreadNew+0x140>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d100      	bne.n	8005034 <osThreadNew+0x3c>
 8005032:	e081      	b.n	8005138 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005038:	2318      	movs	r3, #24
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24

    empty = '\0';
 800503c:	2117      	movs	r1, #23
 800503e:	187b      	adds	r3, r7, r1
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005044:	187b      	adds	r3, r7, r1
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem   = -1;
 8005048:	2301      	movs	r3, #1
 800504a:	425b      	negs	r3, r3
 800504c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d044      	beq.n	80050de <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <osThreadNew+0x6a>
        name = attr->name;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <osThreadNew+0x8e>
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	2b38      	cmp	r3, #56	@ 0x38
 800507a:	d804      	bhi.n	8005086 <osThreadNew+0x8e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	4013      	ands	r3, r2
 8005084:	d001      	beq.n	800508a <osThreadNew+0x92>
        return (NULL);
 8005086:	2300      	movs	r3, #0
 8005088:	e057      	b.n	800513a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <osThreadNew+0xc8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b5b      	cmp	r3, #91	@ 0x5b
 80050a8:	d90a      	bls.n	80050c0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <osThreadNew+0xc8>
        mem = 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	e010      	b.n	80050e2 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10c      	bne.n	80050e2 <osThreadNew+0xea>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <osThreadNew+0xea>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <osThreadNew+0xea>
          mem = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	e001      	b.n	80050e2 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d112      	bne.n	800510e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050f0:	68bd      	ldr	r5, [r7, #8]
 80050f2:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80050f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	9302      	str	r3, [sp, #8]
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	002b      	movs	r3, r5
 8005102:	0022      	movs	r2, r4
 8005104:	f000 fd47 	bl	8005b96 <xTaskCreateStatic>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e014      	b.n	8005138 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d111      	bne.n	8005138 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	b29a      	uxth	r2, r3
 8005118:	68bc      	ldr	r4, [r7, #8]
 800511a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	2310      	movs	r3, #16
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	0023      	movs	r3, r4
 800512a:	f000 fd7a 	bl	8005c22 <xTaskCreate>
 800512e:	0003      	movs	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <osThreadNew+0x140>
          hTask = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005138:	693b      	ldr	r3, [r7, #16]
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b00c      	add	sp, #48	@ 0x30
 8005140:	bdb0      	pop	{r4, r5, r7, pc}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	200005f8 	.word	0x200005f8

08005148 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005150:	f3ef 8305 	mrs	r3, IPSR
 8005154:	613b      	str	r3, [r7, #16]
  return(result);
 8005156:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515c:	f3ef 8310 	mrs	r3, PRIMASK
 8005160:	60fb      	str	r3, [r7, #12]
  return(result);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <osDelay+0x30>
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <osDelay+0x4c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d103      	bne.n	8005178 <osDelay+0x30>
    stat = osErrorISR;
 8005170:	2306      	movs	r3, #6
 8005172:	425b      	negs	r3, r3
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e008      	b.n	800518a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <osDelay+0x42>
      vTaskDelay(ticks);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 fe7b 	bl	8005e80 <vTaskDelay>
    }
  }

  return (stat);
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b006      	add	sp, #24
 8005192:	bd80      	pop	{r7, pc}
 8005194:	200005f8 	.word	0x200005f8

08005198 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a06      	ldr	r2, [pc, #24]	@ (80051c0 <vApplicationGetIdleTaskMemory+0x28>)
 80051a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a05      	ldr	r2, [pc, #20]	@ (80051c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2280      	movs	r2, #128	@ 0x80
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b004      	add	sp, #16
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	200005fc 	.word	0x200005fc
 80051c4:	20000658 	.word	0x20000658

080051c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a06      	ldr	r2, [pc, #24]	@ (80051f0 <vApplicationGetTimerTaskMemory+0x28>)
 80051d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80051de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2280      	movs	r2, #128	@ 0x80
 80051e4:	0052      	lsls	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	46c0      	nop			@ (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000858 	.word	0x20000858
 80051f4:	200008b4 	.word	0x200008b4

080051f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3308      	adds	r3, #8
 8005204:	001a      	movs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	4252      	negs	r2, r2
 8005210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3308      	adds	r3, #8
 8005216:	001a      	movs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3308      	adds	r3, #8
 8005220:	001a      	movs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800522c:	46c0      	nop			@ (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}

08005234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b002      	add	sp, #8
 8005248:	bd80      	pop	{r7, pc}

0800524a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}

0800528e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3301      	adds	r3, #1
 80052a2:	d103      	bne.n	80052ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e00c      	b.n	80052c6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3308      	adds	r3, #8
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e002      	b.n	80052ba <vListInsert+0x2c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d2f6      	bcs.n	80052b4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b004      	add	sp, #16
 80052f8:	bd80      	pop	{r7, pc}

080052fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6852      	ldr	r2, [r2, #4]
 800531a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d103      	bne.n	800532e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}

0800534a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <xQueueGenericReset+0x1a>
 800535e:	b672      	cpsid	i
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	e7fd      	b.n	8005360 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005364:	f001 fdbc 	bl	8006ee0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	434b      	muls	r3, r1
 8005376:	18d2      	adds	r2, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005392:	1e59      	subs	r1, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	434b      	muls	r3, r1
 800539a:	18d2      	adds	r2, r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2244      	movs	r2, #68	@ 0x44
 80053a4:	21ff      	movs	r1, #255	@ 0xff
 80053a6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2245      	movs	r2, #69	@ 0x45
 80053ac:	21ff      	movs	r1, #255	@ 0xff
 80053ae:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <xQueueGenericReset+0x80>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00f      	beq.n	80053de <xQueueGenericReset+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3310      	adds	r3, #16
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 ffa6 	bl	8006314 <xTaskRemoveFromEventList>
 80053c8:	e009      	b.n	80053de <xQueueGenericReset+0x94>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3310      	adds	r3, #16
 80053ce:	0018      	movs	r0, r3
 80053d0:	f7ff ff12 	bl	80051f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3324      	adds	r3, #36	@ 0x24
 80053d8:	0018      	movs	r0, r3
 80053da:	f7ff ff0d 	bl	80051f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fd91 	bl	8006f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053e2:	2301      	movs	r3, #1
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}

080053ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b089      	sub	sp, #36	@ 0x24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <xQueueGenericCreateStatic+0x1a>
 8005400:	b672      	cpsid	i
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	e7fd      	b.n	8005402 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xQueueGenericCreateStatic+0x26>
 800540c:	b672      	cpsid	i
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	e7fd      	b.n	800540e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <xQueueGenericCreateStatic+0x32>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <xQueueGenericCreateStatic+0x36>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericCreateStatic+0x38>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <xQueueGenericCreateStatic+0x42>
 8005428:	b672      	cpsid	i
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	e7fd      	b.n	800542a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <xQueueGenericCreateStatic+0x4e>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <xQueueGenericCreateStatic+0x52>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <xQueueGenericCreateStatic+0x54>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueGenericCreateStatic+0x5e>
 8005444:	b672      	cpsid	i
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	e7fd      	b.n	8005446 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800544a:	2350      	movs	r3, #80	@ 0x50
 800544c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b50      	cmp	r3, #80	@ 0x50
 8005452:	d002      	beq.n	800545a <xQueueGenericCreateStatic+0x6e>
 8005454:	b672      	cpsid	i
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	e7fd      	b.n	8005456 <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00e      	beq.n	8005482 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2246      	movs	r2, #70	@ 0x46
 8005468:	2101      	movs	r1, #1
 800546a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800546c:	2328      	movs	r3, #40	@ 0x28
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	781c      	ldrb	r4, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	0023      	movs	r3, r4
 800547e:	f000 f805 	bl	800548c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005482:	697b      	ldr	r3, [r7, #20]
	}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b007      	add	sp, #28
 800548a:	bd90      	pop	{r4, r7, pc}

0800548c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	001a      	movs	r2, r3
 800549a:	1cfb      	adds	r3, r7, #3
 800549c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2101      	movs	r1, #1
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7ff ff41 	bl	800534a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1cfa      	adds	r2, r7, #3
 80054cc:	214c      	movs	r1, #76	@ 0x4c
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}

080054da <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	@ 0x28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054e8:	2300      	movs	r3, #0
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <xQueueGenericSend+0x22>
 80054f6:	b672      	cpsid	i
 80054f8:	46c0      	nop			@ (mov r8, r8)
 80054fa:	e7fd      	b.n	80054f8 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x30>
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <xQueueGenericSend+0x34>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSend+0x36>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <xQueueGenericSend+0x40>
 8005514:	b672      	cpsid	i
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	e7fd      	b.n	8005516 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d103      	bne.n	8005528 <xQueueGenericSend+0x4e>
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <xQueueGenericSend+0x52>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <xQueueGenericSend+0x54>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <xQueueGenericSend+0x5e>
 8005532:	b672      	cpsid	i
 8005534:	46c0      	nop			@ (mov r8, r8)
 8005536:	e7fd      	b.n	8005534 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005538:	f001 f884 	bl	8006644 <xTaskGetSchedulerState>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d102      	bne.n	8005546 <xQueueGenericSend+0x6c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0x70>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSend+0x72>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <xQueueGenericSend+0x7c>
 8005550:	b672      	cpsid	i
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	e7fd      	b.n	8005552 <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005556:	f001 fcc3 	bl	8006ee0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <xQueueGenericSend+0x92>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d114      	bne.n	8005596 <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	0018      	movs	r0, r3
 8005574:	f000 f997 	bl	80058a6 <prvCopyDataToQueue>
 8005578:	0003      	movs	r3, r0
 800557a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <xQueueGenericSend+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	3324      	adds	r3, #36	@ 0x24
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fec3 	bl	8006314 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800558e:	f001 fcb9 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 8005592:	2301      	movs	r3, #1
 8005594:	e05b      	b.n	800564e <xQueueGenericSend+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <xQueueGenericSend+0xca>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800559c:	f001 fcb2 	bl	8006f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e054      	b.n	800564e <xQueueGenericSend+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <xQueueGenericSend+0xde>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055aa:	2314      	movs	r3, #20
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 ff0e 	bl	80063d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055b4:	2301      	movs	r3, #1
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b8:	f001 fca4 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055bc:	f000 fcdc 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055c0:	f001 fc8e 	bl	8006ee0 <vPortEnterCritical>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2244      	movs	r2, #68	@ 0x44
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	3301      	adds	r3, #1
 80055ce:	d103      	bne.n	80055d8 <xQueueGenericSend+0xfe>
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2244      	movs	r2, #68	@ 0x44
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2245      	movs	r2, #69	@ 0x45
 80055dc:	5c9b      	ldrb	r3, [r3, r2]
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	3301      	adds	r3, #1
 80055e2:	d103      	bne.n	80055ec <xQueueGenericSend+0x112>
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2245      	movs	r2, #69	@ 0x45
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]
 80055ec:	f001 fc8a 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f0:	1d3a      	adds	r2, r7, #4
 80055f2:	2314      	movs	r3, #20
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fefd 	bl	80063f8 <xTaskCheckForTimeOut>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d11e      	bne.n	8005640 <xQueueGenericSend+0x166>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	0018      	movs	r0, r3
 8005606:	f000 fa53 	bl	8005ab0 <prvIsQueueFull>
 800560a:	1e03      	subs	r3, r0, #0
 800560c:	d011      	beq.n	8005632 <xQueueGenericSend+0x158>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	3310      	adds	r3, #16
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	0011      	movs	r1, r2
 8005616:	0018      	movs	r0, r3
 8005618:	f000 fe34 	bl	8006284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	0018      	movs	r0, r3
 8005620:	f000 f9d2 	bl	80059c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005624:	f000 fcb4 	bl	8005f90 <xTaskResumeAll>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d194      	bne.n	8005556 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800562c:	f001 fc48 	bl	8006ec0 <vPortYield>
 8005630:	e791      	b.n	8005556 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	0018      	movs	r0, r3
 8005636:	f000 f9c7 	bl	80059c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563a:	f000 fca9 	bl	8005f90 <xTaskResumeAll>
 800563e:	e78a      	b.n	8005556 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	0018      	movs	r0, r3
 8005644:	f000 f9c0 	bl	80059c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005648:	f000 fca2 	bl	8005f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800564c:	2300      	movs	r3, #0
		}
	}
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b00a      	add	sp, #40	@ 0x28
 8005654:	bd80      	pop	{r7, pc}

08005656 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005656:	b590      	push	{r4, r7, lr}
 8005658:	b089      	sub	sp, #36	@ 0x24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <xQueueGenericSendFromISR+0x1e>
 800566e:	b672      	cpsid	i
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	e7fd      	b.n	8005670 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <xQueueGenericSendFromISR+0x2c>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <xQueueGenericSendFromISR+0x30>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <xQueueGenericSendFromISR+0x32>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <xQueueGenericSendFromISR+0x3c>
 800568c:	b672      	cpsid	i
 800568e:	46c0      	nop			@ (mov r8, r8)
 8005690:	e7fd      	b.n	800568e <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d103      	bne.n	80056a0 <xQueueGenericSendFromISR+0x4a>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <xQueueGenericSendFromISR+0x4e>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <xQueueGenericSendFromISR+0x50>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <xQueueGenericSendFromISR+0x5a>
 80056aa:	b672      	cpsid	i
 80056ac:	46c0      	nop			@ (mov r8, r8)
 80056ae:	e7fd      	b.n	80056ac <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b0:	f001 fc40 	bl	8006f34 <ulSetInterruptMaskFromISR>
 80056b4:	0003      	movs	r3, r0
 80056b6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <xQueueGenericSendFromISR+0x74>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d12e      	bne.n	8005728 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056ca:	2413      	movs	r4, #19
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	2145      	movs	r1, #69	@ 0x45
 80056d2:	5c52      	ldrb	r2, [r2, r1]
 80056d4:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f8e2 	bl	80058a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056e2:	193b      	adds	r3, r7, r4
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	d111      	bne.n	8005710 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d016      	beq.n	8005722 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	3324      	adds	r3, #36	@ 0x24
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 fe0b 	bl	8006314 <xTaskRemoveFromEventList>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d00f      	beq.n	8005722 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e008      	b.n	8005722 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005710:	2313      	movs	r3, #19
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	b259      	sxtb	r1, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2245      	movs	r2, #69	@ 0x45
 8005720:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005722:	2301      	movs	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
		{
 8005726:	e001      	b.n	800572c <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	0018      	movs	r0, r3
 8005730:	f001 fc06 	bl	8006f40 <vClearInterruptMaskFromISR>

	return xReturn;
 8005734:	69fb      	ldr	r3, [r7, #28]
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b009      	add	sp, #36	@ 0x24
 800573c:	bd90      	pop	{r4, r7, pc}

0800573e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	@ 0x28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <xQueueReceive+0x20>
 8005758:	b672      	cpsid	i
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	e7fd      	b.n	800575a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <xQueueReceive+0x2e>
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueReceive+0x32>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xQueueReceive+0x34>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <xQueueReceive+0x3e>
 8005776:	b672      	cpsid	i
 8005778:	46c0      	nop			@ (mov r8, r8)
 800577a:	e7fd      	b.n	8005778 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800577c:	f000 ff62 	bl	8006644 <xTaskGetSchedulerState>
 8005780:	1e03      	subs	r3, r0, #0
 8005782:	d102      	bne.n	800578a <xQueueReceive+0x4c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <xQueueReceive+0x50>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueReceive+0x52>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueReceive+0x5c>
 8005794:	b672      	cpsid	i
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	e7fd      	b.n	8005796 <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800579a:	f001 fba1 	bl	8006ee0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <xQueueReceive+0x9a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 f8e3 	bl	800597c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	1e5a      	subs	r2, r3, #1
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <xQueueReceive+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	3310      	adds	r3, #16
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fda2 	bl	8006314 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d0:	f001 fb98 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e062      	b.n	800589e <xQueueReceive+0x160>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <xQueueReceive+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057de:	f001 fb91 	bl	8006f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e05b      	b.n	800589e <xQueueReceive+0x160>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ec:	2314      	movs	r3, #20
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 fded 	bl	80063d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fa:	f001 fb83 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057fe:	f000 fbbb 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005802:	f001 fb6d 	bl	8006ee0 <vPortEnterCritical>
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2244      	movs	r2, #68	@ 0x44
 800580a:	5c9b      	ldrb	r3, [r3, r2]
 800580c:	b25b      	sxtb	r3, r3
 800580e:	3301      	adds	r3, #1
 8005810:	d103      	bne.n	800581a <xQueueReceive+0xdc>
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2244      	movs	r2, #68	@ 0x44
 8005816:	2100      	movs	r1, #0
 8005818:	5499      	strb	r1, [r3, r2]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2245      	movs	r2, #69	@ 0x45
 800581e:	5c9b      	ldrb	r3, [r3, r2]
 8005820:	b25b      	sxtb	r3, r3
 8005822:	3301      	adds	r3, #1
 8005824:	d103      	bne.n	800582e <xQueueReceive+0xf0>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2245      	movs	r2, #69	@ 0x45
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]
 800582e:	f001 fb69 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005832:	1d3a      	adds	r2, r7, #4
 8005834:	2314      	movs	r3, #20
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	0011      	movs	r1, r2
 800583a:	0018      	movs	r0, r3
 800583c:	f000 fddc 	bl	80063f8 <xTaskCheckForTimeOut>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d11e      	bne.n	8005882 <xQueueReceive+0x144>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	0018      	movs	r0, r3
 8005848:	f000 f91c 	bl	8005a84 <prvIsQueueEmpty>
 800584c:	1e03      	subs	r3, r0, #0
 800584e:	d011      	beq.n	8005874 <xQueueReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	3324      	adds	r3, #36	@ 0x24
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	0011      	movs	r1, r2
 8005858:	0018      	movs	r0, r3
 800585a:	f000 fd13 	bl	8006284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	0018      	movs	r0, r3
 8005862:	f000 f8b1 	bl	80059c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005866:	f000 fb93 	bl	8005f90 <xTaskResumeAll>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d195      	bne.n	800579a <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800586e:	f001 fb27 	bl	8006ec0 <vPortYield>
 8005872:	e792      	b.n	800579a <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f8a6 	bl	80059c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800587c:	f000 fb88 	bl	8005f90 <xTaskResumeAll>
 8005880:	e78b      	b.n	800579a <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 f89f 	bl	80059c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800588a:	f000 fb81 	bl	8005f90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	0018      	movs	r0, r3
 8005892:	f000 f8f7 	bl	8005a84 <prvIsQueueEmpty>
 8005896:	1e03      	subs	r3, r0, #0
 8005898:	d100      	bne.n	800589c <xQueueReceive+0x15e>
 800589a:	e77e      	b.n	800579a <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800589c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b00a      	add	sp, #40	@ 0x28
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10e      	bne.n	80058e2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d14e      	bne.n	800596a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 fed3 	bl	800667c <xTaskPriorityDisinherit>
 80058d6:	0003      	movs	r3, r0
 80058d8:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	e043      	b.n	800596a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d119      	bne.n	800591c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6898      	ldr	r0, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	0019      	movs	r1, r3
 80058f4:	f001 fdb2 	bl	800745c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	18d2      	adds	r2, r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	429a      	cmp	r2, r3
 8005910:	d32b      	bcc.n	800596a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	e026      	b.n	800596a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68d8      	ldr	r0, [r3, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	0019      	movs	r1, r3
 8005928:	f001 fd98 	bl	800745c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	425b      	negs	r3, r3
 8005936:	18d2      	adds	r2, r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d207      	bcs.n	8005958 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	425b      	negs	r3, r3
 8005952:	18d2      	adds	r2, r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d105      	bne.n	800596a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3b01      	subs	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b006      	add	sp, #24
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	18d2      	adds	r2, r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d303      	bcc.n	80059b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68d9      	ldr	r1, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f001 fd4e 	bl	800745c <memcpy>
	}
}
 80059c0:	46c0      	nop			@ (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b002      	add	sp, #8
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059d0:	f001 fa86 	bl	8006ee0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	2145      	movs	r1, #69	@ 0x45
 80059dc:	5c52      	ldrb	r2, [r2, r1]
 80059de:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e0:	e013      	b.n	8005a0a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d016      	beq.n	8005a18 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3324      	adds	r3, #36	@ 0x24
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fc90 	bl	8006314 <xTaskRemoveFromEventList>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d001      	beq.n	80059fc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059f8:	f000 fd50 	bl	800649c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059fc:	210f      	movs	r1, #15
 80059fe:	187b      	adds	r3, r7, r1
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b25b      	sxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dce5      	bgt.n	80059e2 <prvUnlockQueue+0x1a>
 8005a16:	e000      	b.n	8005a1a <prvUnlockQueue+0x52>
					break;
 8005a18:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2245      	movs	r2, #69	@ 0x45
 8005a1e:	21ff      	movs	r1, #255	@ 0xff
 8005a20:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a22:	f001 fa6f 	bl	8006f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a26:	f001 fa5b 	bl	8006ee0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a2a:	230e      	movs	r3, #14
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	2144      	movs	r1, #68	@ 0x44
 8005a32:	5c52      	ldrb	r2, [r2, r1]
 8005a34:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a36:	e013      	b.n	8005a60 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d016      	beq.n	8005a6e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3310      	adds	r3, #16
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 fc65 	bl	8006314 <xTaskRemoveFromEventList>
 8005a4a:	1e03      	subs	r3, r0, #0
 8005a4c:	d001      	beq.n	8005a52 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005a4e:	f000 fd25 	bl	800649c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a52:	210e      	movs	r1, #14
 8005a54:	187b      	adds	r3, r7, r1
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a60:	230e      	movs	r3, #14
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dce5      	bgt.n	8005a38 <prvUnlockQueue+0x70>
 8005a6c:	e000      	b.n	8005a70 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005a6e:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2244      	movs	r2, #68	@ 0x44
 8005a74:	21ff      	movs	r1, #255	@ 0xff
 8005a76:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a78:	f001 fa44 	bl	8006f04 <vPortExitCritical>
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b004      	add	sp, #16
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a8c:	f001 fa28 	bl	8006ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e001      	b.n	8005aa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005aa2:	f001 fa2f 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b004      	add	sp, #16
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ab8:	f001 fa12 	bl	8006ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d102      	bne.n	8005ace <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e001      	b.n	8005ad2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ad2:	f001 fa17 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b004      	add	sp, #16
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e015      	b.n	8005b1c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005af0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b2c <vQueueAddToRegistry+0x4c>)
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	00d2      	lsls	r2, r2, #3
 8005af6:	58d3      	ldr	r3, [r2, r3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10c      	bne.n	8005b16 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <vQueueAddToRegistry+0x4c>)
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	00d2      	lsls	r2, r2, #3
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b06:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <vQueueAddToRegistry+0x4c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	3304      	adds	r3, #4
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b14:	e006      	b.n	8005b24 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b07      	cmp	r3, #7
 8005b20:	d9e6      	bls.n	8005af0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	46c0      	nop			@ (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b004      	add	sp, #16
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000cb4 	.word	0x20000cb4

08005b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b40:	f001 f9ce 	bl	8006ee0 <vPortEnterCritical>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2244      	movs	r2, #68	@ 0x44
 8005b48:	5c9b      	ldrb	r3, [r3, r2]
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	d103      	bne.n	8005b58 <vQueueWaitForMessageRestricted+0x28>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2244      	movs	r2, #68	@ 0x44
 8005b54:	2100      	movs	r1, #0
 8005b56:	5499      	strb	r1, [r3, r2]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2245      	movs	r2, #69	@ 0x45
 8005b5c:	5c9b      	ldrb	r3, [r3, r2]
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	3301      	adds	r3, #1
 8005b62:	d103      	bne.n	8005b6c <vQueueWaitForMessageRestricted+0x3c>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2245      	movs	r2, #69	@ 0x45
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]
 8005b6c:	f001 f9ca 	bl	8006f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3324      	adds	r3, #36	@ 0x24
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 fb9f 	bl	80062c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff ff1d 	bl	80059c8 <prvUnlockQueue>
	}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b006      	add	sp, #24
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b96:	b590      	push	{r4, r7, lr}
 8005b98:	b08d      	sub	sp, #52	@ 0x34
 8005b9a:	af04      	add	r7, sp, #16
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <xTaskCreateStatic+0x1a>
 8005baa:	b672      	cpsid	i
 8005bac:	46c0      	nop			@ (mov r8, r8)
 8005bae:	e7fd      	b.n	8005bac <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <xTaskCreateStatic+0x26>
 8005bb6:	b672      	cpsid	i
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	e7fd      	b.n	8005bb8 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bbc:	235c      	movs	r3, #92	@ 0x5c
 8005bbe:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bc4:	d002      	beq.n	8005bcc <xTaskCreateStatic+0x36>
 8005bc6:	b672      	cpsid	i
 8005bc8:	46c0      	nop			@ (mov r8, r8)
 8005bca:	e7fd      	b.n	8005bc8 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d020      	beq.n	8005c14 <xTaskCreateStatic+0x7e>
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01d      	beq.n	8005c14 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2259      	movs	r2, #89	@ 0x59
 8005be6:	2102      	movs	r1, #2
 8005be8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bea:	683c      	ldr	r4, [r7, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9303      	str	r3, [sp, #12]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	9302      	str	r3, [sp, #8]
 8005bfa:	2318      	movs	r3, #24
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	0023      	movs	r3, r4
 8005c06:	f000 f859 	bl	8005cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f8d7 	bl	8005dc0 <prvAddNewTaskToReadyList>
 8005c12:	e001      	b.n	8005c18 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c18:	69bb      	ldr	r3, [r7, #24]
	}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b009      	add	sp, #36	@ 0x24
 8005c20:	bd90      	pop	{r4, r7, pc}

08005c22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c22:	b590      	push	{r4, r7, lr}
 8005c24:	b08d      	sub	sp, #52	@ 0x34
 8005c26:	af04      	add	r7, sp, #16
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c32:	1dbb      	adds	r3, r7, #6
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f001 f9e9 	bl	8007010 <pvPortMalloc>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c48:	205c      	movs	r0, #92	@ 0x5c
 8005c4a:	f001 f9e1 	bl	8007010 <pvPortMalloc>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c5e:	e006      	b.n	8005c6e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f001 fa7c 	bl	8007160 <vPortFree>
 8005c68:	e001      	b.n	8005c6e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2259      	movs	r2, #89	@ 0x59
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	683c      	ldr	r4, [r7, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9303      	str	r3, [sp, #12]
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	9302      	str	r3, [sp, #8]
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	0023      	movs	r3, r4
 8005c98:	f000 f810 	bl	8005cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 f88e 	bl	8005dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e002      	b.n	8005cb0 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005caa:	2301      	movs	r3, #1
 8005cac:	425b      	negs	r3, r3
 8005cae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
	}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b009      	add	sp, #36	@ 0x24
 8005cb8:	bd90      	pop	{r4, r7, pc}
	...

08005cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	21a5      	movs	r1, #165	@ 0xa5
 8005cd6:	f001 fb95 	bl	8007404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4936      	ldr	r1, [pc, #216]	@ (8005dbc <prvInitialiseNewTask+0x100>)
 8005ce2:	468c      	mov	ip, r1
 8005ce4:	4463      	add	r3, ip
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2207      	movs	r2, #7
 8005cf0:	4393      	bics	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d002      	beq.n	8005d02 <prvInitialiseNewTask+0x46>
 8005cfc:	b672      	cpsid	i
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	e7fd      	b.n	8005cfe <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e013      	b.n	8005d30 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	18d3      	adds	r3, r2, r3
 8005d0e:	7818      	ldrb	r0, [r3, #0]
 8005d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d12:	2134      	movs	r1, #52	@ 0x34
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	185b      	adds	r3, r3, r1
 8005d1a:	1c02      	adds	r2, r0, #0
 8005d1c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	18d3      	adds	r3, r2, r3
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d006      	beq.n	8005d38 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d9e8      	bls.n	8005d08 <prvInitialiseNewTask+0x4c>
 8005d36:	e000      	b.n	8005d3a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d38:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	2243      	movs	r2, #67	@ 0x43
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2b37      	cmp	r3, #55	@ 0x37
 8005d46:	d901      	bls.n	8005d4c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d48:	2337      	movs	r3, #55	@ 0x37
 8005d4a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	3304      	adds	r3, #4
 8005d62:	0018      	movs	r0, r3
 8005d64:	f7ff fa66 	bl	8005234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	3318      	adds	r3, #24
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f7ff fa61 	bl	8005234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2238      	movs	r2, #56	@ 0x38
 8005d7c:	1ad2      	subs	r2, r2, r3
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	2258      	movs	r2, #88	@ 0x58
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	68f9      	ldr	r1, [r7, #12]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f001 f803 	bl	8006da8 <pxPortInitialiseStack>
 8005da2:	0002      	movs	r2, r0
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005db2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b006      	add	sp, #24
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	3fffffff 	.word	0x3fffffff

08005dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dc8:	f001 f88a 	bl	8006ee0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dcc:	4b26      	ldr	r3, [pc, #152]	@ (8005e68 <prvAddNewTaskToReadyList+0xa8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	4b25      	ldr	r3, [pc, #148]	@ (8005e68 <prvAddNewTaskToReadyList+0xa8>)
 8005dd4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005dd6:	4b25      	ldr	r3, [pc, #148]	@ (8005e6c <prvAddNewTaskToReadyList+0xac>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dde:	4b23      	ldr	r3, [pc, #140]	@ (8005e6c <prvAddNewTaskToReadyList+0xac>)
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005de4:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <prvAddNewTaskToReadyList+0xa8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d110      	bne.n	8005e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dec:	f000 fb6a 	bl	80064c4 <prvInitialiseTaskLists>
 8005df0:	e00d      	b.n	8005e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005df2:	4b1f      	ldr	r3, [pc, #124]	@ (8005e70 <prvAddNewTaskToReadyList+0xb0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8005e6c <prvAddNewTaskToReadyList+0xac>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d802      	bhi.n	8005e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e08:	4b18      	ldr	r3, [pc, #96]	@ (8005e6c <prvAddNewTaskToReadyList+0xac>)
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <prvAddNewTaskToReadyList+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <prvAddNewTaskToReadyList+0xb4>)
 8005e16:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e18:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <prvAddNewTaskToReadyList+0xb4>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e24:	4b14      	ldr	r3, [pc, #80]	@ (8005e78 <prvAddNewTaskToReadyList+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d903      	bls.n	8005e34 <prvAddNewTaskToReadyList+0x74>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e30:	4b11      	ldr	r3, [pc, #68]	@ (8005e78 <prvAddNewTaskToReadyList+0xb8>)
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e38:	0013      	movs	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a0e      	ldr	r2, [pc, #56]	@ (8005e7c <prvAddNewTaskToReadyList+0xbc>)
 8005e42:	189a      	adds	r2, r3, r2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	0019      	movs	r1, r3
 8005e4a:	0010      	movs	r0, r2
 8005e4c:	f7ff f9fd 	bl	800524a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e50:	f001 f858 	bl	8006f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <prvAddNewTaskToReadyList+0xb0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e5c:	4b03      	ldr	r3, [pc, #12]	@ (8005e6c <prvAddNewTaskToReadyList+0xac>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e60:	46c0      	nop			@ (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	200011c8 	.word	0x200011c8
 8005e6c:	20000cf4 	.word	0x20000cf4
 8005e70:	200011d4 	.word	0x200011d4
 8005e74:	200011e4 	.word	0x200011e4
 8005e78:	200011d0 	.word	0x200011d0
 8005e7c:	20000cf8 	.word	0x20000cf8

08005e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d011      	beq.n	8005eb6 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec8 <vTaskDelay+0x48>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <vTaskDelay+0x20>
 8005e9a:	b672      	cpsid	i
 8005e9c:	46c0      	nop			@ (mov r8, r8)
 8005e9e:	e7fd      	b.n	8005e9c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005ea0:	f000 f86a 	bl	8005f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f000 fc45 	bl	8006738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eae:	f000 f86f 	bl	8005f90 <xTaskResumeAll>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005ebc:	f001 f800 	bl	8006ec0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ec0:	46c0      	nop			@ (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200011f0 	.word	0x200011f0

08005ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b089      	sub	sp, #36	@ 0x24
 8005ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eda:	003a      	movs	r2, r7
 8005edc:	1d39      	adds	r1, r7, #4
 8005ede:	2308      	movs	r3, #8
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff f958 	bl	8005198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ee8:	683c      	ldr	r4, [r7, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	491c      	ldr	r1, [pc, #112]	@ (8005f60 <vTaskStartScheduler+0x94>)
 8005ef0:	481c      	ldr	r0, [pc, #112]	@ (8005f64 <vTaskStartScheduler+0x98>)
 8005ef2:	9202      	str	r2, [sp, #8]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2300      	movs	r3, #0
 8005efc:	0022      	movs	r2, r4
 8005efe:	f7ff fe4a 	bl	8005b96 <xTaskCreateStatic>
 8005f02:	0002      	movs	r2, r0
 8005f04:	4b18      	ldr	r3, [pc, #96]	@ (8005f68 <vTaskStartScheduler+0x9c>)
 8005f06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f08:	4b17      	ldr	r3, [pc, #92]	@ (8005f68 <vTaskStartScheduler+0x9c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f10:	2301      	movs	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e001      	b.n	8005f1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d103      	bne.n	8005f28 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005f20:	f000 fc5e 	bl	80067e0 <xTimerCreateTimerTask>
 8005f24:	0003      	movs	r3, r0
 8005f26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10d      	bne.n	8005f4a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005f2e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f30:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <vTaskStartScheduler+0xa0>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	4252      	negs	r2, r2
 8005f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f38:	4b0d      	ldr	r3, [pc, #52]	@ (8005f70 <vTaskStartScheduler+0xa4>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <vTaskStartScheduler+0xa8>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f44:	f000 ff98 	bl	8006e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f48:	e005      	b.n	8005f56 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	d102      	bne.n	8005f56 <vTaskStartScheduler+0x8a>
 8005f50:	b672      	cpsid	i
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	e7fd      	b.n	8005f52 <vTaskStartScheduler+0x86>
}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b005      	add	sp, #20
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	080074d8 	.word	0x080074d8
 8005f64:	080064b1 	.word	0x080064b1
 8005f68:	200011ec 	.word	0x200011ec
 8005f6c:	200011e8 	.word	0x200011e8
 8005f70:	200011d4 	.word	0x200011d4
 8005f74:	200011cc 	.word	0x200011cc

08005f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <vTaskSuspendAll+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	4b02      	ldr	r3, [pc, #8]	@ (8005f8c <vTaskSuspendAll+0x14>)
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	200011f0 	.word	0x200011f0

08005f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f9e:	4b37      	ldr	r3, [pc, #220]	@ (800607c <xTaskResumeAll+0xec>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <xTaskResumeAll+0x1c>
 8005fa6:	b672      	cpsid	i
 8005fa8:	46c0      	nop			@ (mov r8, r8)
 8005faa:	e7fd      	b.n	8005fa8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fac:	f000 ff98 	bl	8006ee0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb0:	4b32      	ldr	r3, [pc, #200]	@ (800607c <xTaskResumeAll+0xec>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1e5a      	subs	r2, r3, #1
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <xTaskResumeAll+0xec>)
 8005fb8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fba:	4b30      	ldr	r3, [pc, #192]	@ (800607c <xTaskResumeAll+0xec>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d155      	bne.n	800606e <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006080 <xTaskResumeAll+0xf0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d051      	beq.n	800606e <xTaskResumeAll+0xde>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fca:	e02f      	b.n	800602c <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006084 <xTaskResumeAll+0xf4>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f7ff f98e 	bl	80052fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f7ff f989 	bl	80052fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fec:	4b26      	ldr	r3, [pc, #152]	@ (8006088 <xTaskResumeAll+0xf8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <xTaskResumeAll+0x6c>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	4b23      	ldr	r3, [pc, #140]	@ (8006088 <xTaskResumeAll+0xf8>)
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006000:	0013      	movs	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	189b      	adds	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4a20      	ldr	r2, [pc, #128]	@ (800608c <xTaskResumeAll+0xfc>)
 800600a:	189a      	adds	r2, r3, r2
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3304      	adds	r3, #4
 8006010:	0019      	movs	r1, r3
 8006012:	0010      	movs	r0, r2
 8006014:	f7ff f919 	bl	800524a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601c:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <xTaskResumeAll+0x100>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8006026:	4b1b      	ldr	r3, [pc, #108]	@ (8006094 <xTaskResumeAll+0x104>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602c:	4b15      	ldr	r3, [pc, #84]	@ (8006084 <xTaskResumeAll+0xf4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1cb      	bne.n	8005fcc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800603a:	f000 fadf 	bl	80065fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800603e:	4b16      	ldr	r3, [pc, #88]	@ (8006098 <xTaskResumeAll+0x108>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00f      	beq.n	800606a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800604a:	f000 f835 	bl	80060b8 <xTaskIncrementTick>
 800604e:	1e03      	subs	r3, r0, #0
 8006050:	d002      	beq.n	8006058 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <xTaskResumeAll+0x104>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3b01      	subs	r3, #1
 800605c:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f2      	bne.n	800604a <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8006064:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <xTaskResumeAll+0x108>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800606a:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <xTaskResumeAll+0x104>)
 800606c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f000 ff49 	bl	8006f04 <vPortExitCritical>

	return xAlreadyYielded;
 8006072:	687b      	ldr	r3, [r7, #4]
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b004      	add	sp, #16
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200011f0 	.word	0x200011f0
 8006080:	200011c8 	.word	0x200011c8
 8006084:	20001188 	.word	0x20001188
 8006088:	200011d0 	.word	0x200011d0
 800608c:	20000cf8 	.word	0x20000cf8
 8006090:	20000cf4 	.word	0x20000cf4
 8006094:	200011dc 	.word	0x200011dc
 8006098:	200011d8 	.word	0x200011d8

0800609c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060a2:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <xTaskGetTickCount+0x18>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060a8:	687b      	ldr	r3, [r7, #4]
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b002      	add	sp, #8
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	200011cc 	.word	0x200011cc

080060b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c2:	4b3e      	ldr	r3, [pc, #248]	@ (80061bc <xTaskIncrementTick+0x104>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d000      	beq.n	80060cc <xTaskIncrementTick+0x14>
 80060ca:	e06d      	b.n	80061a8 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060cc:	4b3c      	ldr	r3, [pc, #240]	@ (80061c0 <xTaskIncrementTick+0x108>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d4:	4b3a      	ldr	r3, [pc, #232]	@ (80061c0 <xTaskIncrementTick+0x108>)
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d118      	bne.n	8006112 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e0:	4b38      	ldr	r3, [pc, #224]	@ (80061c4 <xTaskIncrementTick+0x10c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <xTaskIncrementTick+0x38>
 80060ea:	b672      	cpsid	i
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	e7fd      	b.n	80060ec <xTaskIncrementTick+0x34>
 80060f0:	4b34      	ldr	r3, [pc, #208]	@ (80061c4 <xTaskIncrementTick+0x10c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4b34      	ldr	r3, [pc, #208]	@ (80061c8 <xTaskIncrementTick+0x110>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b32      	ldr	r3, [pc, #200]	@ (80061c4 <xTaskIncrementTick+0x10c>)
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	4b32      	ldr	r3, [pc, #200]	@ (80061c8 <xTaskIncrementTick+0x110>)
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	4b31      	ldr	r3, [pc, #196]	@ (80061cc <xTaskIncrementTick+0x114>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	4b30      	ldr	r3, [pc, #192]	@ (80061cc <xTaskIncrementTick+0x114>)
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f000 fa75 	bl	80065fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006112:	4b2f      	ldr	r3, [pc, #188]	@ (80061d0 <xTaskIncrementTick+0x118>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	d34a      	bcc.n	80061b2 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611c:	4b29      	ldr	r3, [pc, #164]	@ (80061c4 <xTaskIncrementTick+0x10c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <xTaskIncrementTick+0x72>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <xTaskIncrementTick+0x74>
 800612a:	2300      	movs	r3, #0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006130:	4b27      	ldr	r3, [pc, #156]	@ (80061d0 <xTaskIncrementTick+0x118>)
 8006132:	2201      	movs	r2, #1
 8006134:	4252      	negs	r2, r2
 8006136:	601a      	str	r2, [r3, #0]
					break;
 8006138:	e03b      	b.n	80061b2 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800613a:	4b22      	ldr	r3, [pc, #136]	@ (80061c4 <xTaskIncrementTick+0x10c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d203      	bcs.n	800615a <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006152:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <xTaskIncrementTick+0x118>)
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
						break;
 8006158:	e02b      	b.n	80061b2 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3304      	adds	r3, #4
 800615e:	0018      	movs	r0, r3
 8006160:	f7ff f8cb 	bl	80052fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	3318      	adds	r3, #24
 8006170:	0018      	movs	r0, r3
 8006172:	f7ff f8c2 	bl	80052fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617a:	4b16      	ldr	r3, [pc, #88]	@ (80061d4 <xTaskIncrementTick+0x11c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d903      	bls.n	800618a <xTaskIncrementTick+0xd2>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006186:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <xTaskIncrementTick+0x11c>)
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	0013      	movs	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	189b      	adds	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a10      	ldr	r2, [pc, #64]	@ (80061d8 <xTaskIncrementTick+0x120>)
 8006198:	189a      	adds	r2, r3, r2
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3304      	adds	r3, #4
 800619e:	0019      	movs	r1, r3
 80061a0:	0010      	movs	r0, r2
 80061a2:	f7ff f852 	bl	800524a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a6:	e7b9      	b.n	800611c <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061a8:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <xTaskIncrementTick+0x124>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <xTaskIncrementTick+0x124>)
 80061b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061b2:	697b      	ldr	r3, [r7, #20]
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b006      	add	sp, #24
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200011f0 	.word	0x200011f0
 80061c0:	200011cc 	.word	0x200011cc
 80061c4:	20001180 	.word	0x20001180
 80061c8:	20001184 	.word	0x20001184
 80061cc:	200011e0 	.word	0x200011e0
 80061d0:	200011e8 	.word	0x200011e8
 80061d4:	200011d0 	.word	0x200011d0
 80061d8:	20000cf8 	.word	0x20000cf8
 80061dc:	200011d8 	.word	0x200011d8

080061e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <vTaskSwitchContext+0x90>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ee:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <vTaskSwitchContext+0x94>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f4:	e038      	b.n	8006268 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80061f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <vTaskSwitchContext+0x94>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006278 <vTaskSwitchContext+0x98>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	e008      	b.n	8006216 <vTaskSwitchContext+0x36>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <vTaskSwitchContext+0x30>
 800620a:	b672      	cpsid	i
 800620c:	46c0      	nop			@ (mov r8, r8)
 800620e:	e7fd      	b.n	800620c <vTaskSwitchContext+0x2c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3b01      	subs	r3, #1
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	4919      	ldr	r1, [pc, #100]	@ (800627c <vTaskSwitchContext+0x9c>)
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	0013      	movs	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	189b      	adds	r3, r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	585b      	ldr	r3, [r3, r1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ed      	beq.n	8006204 <vTaskSwitchContext+0x24>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	0013      	movs	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	189b      	adds	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a12      	ldr	r2, [pc, #72]	@ (800627c <vTaskSwitchContext+0x9c>)
 8006234:	189b      	adds	r3, r3, r2
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	429a      	cmp	r2, r3
 800624c:	d104      	bne.n	8006258 <vTaskSwitchContext+0x78>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <vTaskSwitchContext+0xa0>)
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <vTaskSwitchContext+0x98>)
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
}
 8006268:	46c0      	nop			@ (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200011f0 	.word	0x200011f0
 8006274:	200011dc 	.word	0x200011dc
 8006278:	200011d0 	.word	0x200011d0
 800627c:	20000cf8 	.word	0x20000cf8
 8006280:	20000cf4 	.word	0x20000cf4

08006284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <vTaskPlaceOnEventList+0x16>
 8006294:	b672      	cpsid	i
 8006296:	46c0      	nop			@ (mov r8, r8)
 8006298:	e7fd      	b.n	8006296 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800629a:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <vTaskPlaceOnEventList+0x3c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3318      	adds	r3, #24
 80062a0:	001a      	movs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0011      	movs	r1, r2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7fe fff1 	bl	800528e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2101      	movs	r1, #1
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 fa41 	bl	8006738 <prvAddCurrentTaskToDelayedList>
}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b002      	add	sp, #8
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	20000cf4 	.word	0x20000cf4

080062c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <vTaskPlaceOnEventListRestricted+0x18>
 80062d6:	b672      	cpsid	i
 80062d8:	46c0      	nop			@ (mov r8, r8)
 80062da:	e7fd      	b.n	80062d8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <vTaskPlaceOnEventListRestricted+0x4c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3318      	adds	r3, #24
 80062e2:	001a      	movs	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0011      	movs	r1, r2
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7fe ffae 	bl	800524a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	425b      	negs	r3, r3
 80062f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f000 fa19 	bl	8006738 <prvAddCurrentTaskToDelayedList>
	}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	20000cf4 	.word	0x20000cf4

08006314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <xTaskRemoveFromEventList+0x1c>
 800632a:	b672      	cpsid	i
 800632c:	46c0      	nop			@ (mov r8, r8)
 800632e:	e7fd      	b.n	800632c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	3318      	adds	r3, #24
 8006334:	0018      	movs	r0, r3
 8006336:	f7fe ffe0 	bl	80052fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633a:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <xTaskRemoveFromEventList+0xa4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11d      	bne.n	800637e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3304      	adds	r3, #4
 8006346:	0018      	movs	r0, r3
 8006348:	f7fe ffd7 	bl	80052fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006350:	4b1a      	ldr	r3, [pc, #104]	@ (80063bc <xTaskRemoveFromEventList+0xa8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskRemoveFromEventList+0x4c>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635c:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <xTaskRemoveFromEventList+0xa8>)
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006364:	0013      	movs	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	189b      	adds	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a14      	ldr	r2, [pc, #80]	@ (80063c0 <xTaskRemoveFromEventList+0xac>)
 800636e:	189a      	adds	r2, r3, r2
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	3304      	adds	r3, #4
 8006374:	0019      	movs	r1, r3
 8006376:	0010      	movs	r0, r2
 8006378:	f7fe ff67 	bl	800524a <vListInsertEnd>
 800637c:	e007      	b.n	800638e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3318      	adds	r3, #24
 8006382:	001a      	movs	r2, r3
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <xTaskRemoveFromEventList+0xb0>)
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f7fe ff5e 	bl	800524a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006392:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <xTaskRemoveFromEventList+0xb4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d905      	bls.n	80063a8 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <xTaskRemoveFromEventList+0xb8>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e001      	b.n	80063ac <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063ac:	68fb      	ldr	r3, [r7, #12]
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	200011f0 	.word	0x200011f0
 80063bc:	200011d0 	.word	0x200011d0
 80063c0:	20000cf8 	.word	0x20000cf8
 80063c4:	20001188 	.word	0x20001188
 80063c8:	20000cf4 	.word	0x20000cf4
 80063cc:	200011dc 	.word	0x200011dc

080063d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <vTaskInternalSetTimeOutState+0x20>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <vTaskInternalSetTimeOutState+0x24>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
}
 80063e8:	46c0      	nop			@ (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	200011e0 	.word	0x200011e0
 80063f4:	200011cc 	.word	0x200011cc

080063f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <xTaskCheckForTimeOut+0x16>
 8006408:	b672      	cpsid	i
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	e7fd      	b.n	800640a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xTaskCheckForTimeOut+0x22>
 8006414:	b672      	cpsid	i
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	e7fd      	b.n	8006416 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 800641a:	f000 fd61 	bl	8006ee0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800641e:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <xTaskCheckForTimeOut+0x9c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	d102      	bne.n	800643c <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e024      	b.n	8006486 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <xTaskCheckForTimeOut+0xa0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d007      	beq.n	8006458 <xTaskCheckForTimeOut+0x60>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e016      	b.n	8006486 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	429a      	cmp	r2, r3
 8006460:	d20c      	bcs.n	800647c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0018      	movs	r0, r3
 8006472:	f7ff ffad 	bl	80063d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e004      	b.n	8006486 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006486:	f000 fd3d 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 800648a:	697b      	ldr	r3, [r7, #20]
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b006      	add	sp, #24
 8006492:	bd80      	pop	{r7, pc}
 8006494:	200011cc 	.word	0x200011cc
 8006498:	200011e0 	.word	0x200011e0

0800649c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064a0:	4b02      	ldr	r3, [pc, #8]	@ (80064ac <vTaskMissedYield+0x10>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200011dc 	.word	0x200011dc

080064b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064b8:	f000 f848 	bl	800654c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80064bc:	f000 fd00 	bl	8006ec0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80064c0:	46c0      	nop			@ (mov r8, r8)
 80064c2:	e7f9      	b.n	80064b8 <prvIdleTask+0x8>

080064c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ca:	2300      	movs	r3, #0
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	e00c      	b.n	80064ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	0013      	movs	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4a14      	ldr	r2, [pc, #80]	@ (800652c <prvInitialiseTaskLists+0x68>)
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	0018      	movs	r0, r3
 80064e0:	f7fe fe8a 	bl	80051f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3301      	adds	r3, #1
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b37      	cmp	r3, #55	@ 0x37
 80064ee:	d9ef      	bls.n	80064d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <prvInitialiseTaskLists+0x6c>)
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fe fe80 	bl	80051f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006534 <prvInitialiseTaskLists+0x70>)
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fe fe7c 	bl	80051f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006500:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <prvInitialiseTaskLists+0x74>)
 8006502:	0018      	movs	r0, r3
 8006504:	f7fe fe78 	bl	80051f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006508:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <prvInitialiseTaskLists+0x78>)
 800650a:	0018      	movs	r0, r3
 800650c:	f7fe fe74 	bl	80051f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <prvInitialiseTaskLists+0x7c>)
 8006512:	0018      	movs	r0, r3
 8006514:	f7fe fe70 	bl	80051f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <prvInitialiseTaskLists+0x80>)
 800651a:	4a05      	ldr	r2, [pc, #20]	@ (8006530 <prvInitialiseTaskLists+0x6c>)
 800651c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <prvInitialiseTaskLists+0x84>)
 8006520:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <prvInitialiseTaskLists+0x70>)
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	46c0      	nop			@ (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000cf8 	.word	0x20000cf8
 8006530:	20001158 	.word	0x20001158
 8006534:	2000116c 	.word	0x2000116c
 8006538:	20001188 	.word	0x20001188
 800653c:	2000119c 	.word	0x2000119c
 8006540:	200011b4 	.word	0x200011b4
 8006544:	20001180 	.word	0x20001180
 8006548:	20001184 	.word	0x20001184

0800654c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006552:	e01a      	b.n	800658a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006554:	f000 fcc4 	bl	8006ee0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006558:	4b10      	ldr	r3, [pc, #64]	@ (800659c <prvCheckTasksWaitingTermination+0x50>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	0018      	movs	r0, r3
 8006566:	f7fe fec8 	bl	80052fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <prvCheckTasksWaitingTermination+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <prvCheckTasksWaitingTermination+0x54>)
 8006572:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006574:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <prvCheckTasksWaitingTermination+0x58>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <prvCheckTasksWaitingTermination+0x58>)
 800657c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800657e:	f000 fcc1 	bl	8006f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f80f 	bl	80065a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658a:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <prvCheckTasksWaitingTermination+0x58>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e0      	bne.n	8006554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}
 800659c:	2000119c 	.word	0x2000119c
 80065a0:	200011c8 	.word	0x200011c8
 80065a4:	200011b0 	.word	0x200011b0

080065a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2259      	movs	r2, #89	@ 0x59
 80065b4:	5c9b      	ldrb	r3, [r3, r2]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 fdce 	bl	8007160 <vPortFree>
				vPortFree( pxTCB );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 fdca 	bl	8007160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065cc:	e011      	b.n	80065f2 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2259      	movs	r2, #89	@ 0x59
 80065d2:	5c9b      	ldrb	r3, [r3, r2]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d104      	bne.n	80065e2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 fdc0 	bl	8007160 <vPortFree>
	}
 80065e0:	e007      	b.n	80065f2 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2259      	movs	r2, #89	@ 0x59
 80065e6:	5c9b      	ldrb	r3, [r3, r2]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d002      	beq.n	80065f2 <prvDeleteTCB+0x4a>
 80065ec:	b672      	cpsid	i
 80065ee:	46c0      	nop			@ (mov r8, r8)
 80065f0:	e7fd      	b.n	80065ee <prvDeleteTCB+0x46>
	}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006602:	4b0e      	ldr	r3, [pc, #56]	@ (800663c <prvResetNextTaskUnblockTime+0x40>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <prvResetNextTaskUnblockTime+0x14>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <prvResetNextTaskUnblockTime+0x16>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <prvResetNextTaskUnblockTime+0x44>)
 8006618:	2201      	movs	r2, #1
 800661a:	4252      	negs	r2, r2
 800661c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800661e:	e008      	b.n	8006632 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <prvResetNextTaskUnblockTime+0x40>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <prvResetNextTaskUnblockTime+0x44>)
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	20001180 	.word	0x20001180
 8006640:	200011e8 	.word	0x200011e8

08006644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800664a:	4b0a      	ldr	r3, [pc, #40]	@ (8006674 <xTaskGetSchedulerState+0x30>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006652:	2301      	movs	r3, #1
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	e008      	b.n	800666a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006658:	4b07      	ldr	r3, [pc, #28]	@ (8006678 <xTaskGetSchedulerState+0x34>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006660:	2302      	movs	r3, #2
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	e001      	b.n	800666a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006666:	2300      	movs	r3, #0
 8006668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800666a:	687b      	ldr	r3, [r7, #4]
	}
 800666c:	0018      	movs	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	b002      	add	sp, #8
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200011d4 	.word	0x200011d4
 8006678:	200011f0 	.word	0x200011f0

0800667c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d046      	beq.n	8006720 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006692:	4b26      	ldr	r3, [pc, #152]	@ (800672c <xTaskPriorityDisinherit+0xb0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d002      	beq.n	80066a2 <xTaskPriorityDisinherit+0x26>
 800669c:	b672      	cpsid	i
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	e7fd      	b.n	800669e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <xTaskPriorityDisinherit+0x34>
 80066aa:	b672      	cpsid	i
 80066ac:	46c0      	nop			@ (mov r8, r8)
 80066ae:	e7fd      	b.n	80066ac <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d02c      	beq.n	8006720 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d128      	bne.n	8006720 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3304      	adds	r3, #4
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7fe fe11 	bl	80052fa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	2238      	movs	r2, #56	@ 0x38
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <xTaskPriorityDisinherit+0xb4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d903      	bls.n	8006700 <xTaskPriorityDisinherit+0x84>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006730 <xTaskPriorityDisinherit+0xb4>)
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006704:	0013      	movs	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	189b      	adds	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <xTaskPriorityDisinherit+0xb8>)
 800670e:	189a      	adds	r2, r3, r2
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3304      	adds	r3, #4
 8006714:	0019      	movs	r1, r3
 8006716:	0010      	movs	r0, r2
 8006718:	f7fe fd97 	bl	800524a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006720:	68fb      	ldr	r3, [r7, #12]
	}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b004      	add	sp, #16
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	20000cf4 	.word	0x20000cf4
 8006730:	200011d0 	.word	0x200011d0
 8006734:	20000cf8 	.word	0x20000cf8

08006738 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006742:	4b21      	ldr	r3, [pc, #132]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006748:	4b20      	ldr	r3, [pc, #128]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x94>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3304      	adds	r3, #4
 800674e:	0018      	movs	r0, r3
 8006750:	f7fe fdd3 	bl	80052fa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3301      	adds	r3, #1
 8006758:	d10b      	bne.n	8006772 <prvAddCurrentTaskToDelayedList+0x3a>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006760:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	4b1a      	ldr	r3, [pc, #104]	@ (80067d0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006768:	0011      	movs	r1, r2
 800676a:	0018      	movs	r0, r3
 800676c:	f7fe fd6d 	bl	800524a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006770:	e026      	b.n	80067c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	18d3      	adds	r3, r2, r3
 8006778:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800677a:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	429a      	cmp	r2, r3
 8006788:	d209      	bcs.n	800679e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678a:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	0019      	movs	r1, r3
 8006796:	0010      	movs	r0, r2
 8006798:	f7fe fd79 	bl	800528e <vListInsert>
}
 800679c:	e010      	b.n	80067c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800679e:	4b0e      	ldr	r3, [pc, #56]	@ (80067d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x94>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	0019      	movs	r1, r3
 80067aa:	0010      	movs	r0, r2
 80067ac:	f7fe fd6f 	bl	800528e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067b0:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d202      	bcs.n	80067c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	601a      	str	r2, [r3, #0]
}
 80067c0:	46c0      	nop			@ (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b004      	add	sp, #16
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200011cc 	.word	0x200011cc
 80067cc:	20000cf4 	.word	0x20000cf4
 80067d0:	200011b4 	.word	0x200011b4
 80067d4:	20001184 	.word	0x20001184
 80067d8:	20001180 	.word	0x20001180
 80067dc:	200011e8 	.word	0x200011e8

080067e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b089      	sub	sp, #36	@ 0x24
 80067e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067ea:	f000 fa9b 	bl	8006d24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067ee:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <xTimerCreateTimerTask+0x70>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d020      	beq.n	8006838 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067fe:	003a      	movs	r2, r7
 8006800:	1d39      	adds	r1, r7, #4
 8006802:	2308      	movs	r3, #8
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	0018      	movs	r0, r3
 8006808:	f7fe fcde 	bl	80051c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800680c:	683c      	ldr	r4, [r7, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4910      	ldr	r1, [pc, #64]	@ (8006854 <xTimerCreateTimerTask+0x74>)
 8006814:	4810      	ldr	r0, [pc, #64]	@ (8006858 <xTimerCreateTimerTask+0x78>)
 8006816:	9202      	str	r2, [sp, #8]
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	2302      	movs	r3, #2
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	2300      	movs	r3, #0
 8006820:	0022      	movs	r2, r4
 8006822:	f7ff f9b8 	bl	8005b96 <xTaskCreateStatic>
 8006826:	0002      	movs	r2, r0
 8006828:	4b0c      	ldr	r3, [pc, #48]	@ (800685c <xTimerCreateTimerTask+0x7c>)
 800682a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800682c:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <xTimerCreateTimerTask+0x7c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <xTimerCreateTimerTask+0x64>
 800683e:	b672      	cpsid	i
 8006840:	46c0      	nop			@ (mov r8, r8)
 8006842:	e7fd      	b.n	8006840 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b005      	add	sp, #20
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	20001224 	.word	0x20001224
 8006854:	080074e0 	.word	0x080074e0
 8006858:	0800696d 	.word	0x0800696d
 800685c:	20001228 	.word	0x20001228

08006860 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b08b      	sub	sp, #44	@ 0x2c
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <xTimerGenericCommand+0x1e>
 8006878:	b672      	cpsid	i
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	e7fd      	b.n	800687a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800687e:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <xTimerGenericCommand+0x94>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d030      	beq.n	80068e8 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006886:	2414      	movs	r4, #20
 8006888:	193b      	adds	r3, r7, r4
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800688e:	193b      	adds	r3, r7, r4
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006894:	193b      	adds	r3, r7, r4
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b05      	cmp	r3, #5
 800689e:	dc19      	bgt.n	80068d4 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068a0:	f7ff fed0 	bl	8006644 <xTaskGetSchedulerState>
 80068a4:	0003      	movs	r3, r0
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d109      	bne.n	80068be <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <xTimerGenericCommand+0x94>)
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b0:	1939      	adds	r1, r7, r4
 80068b2:	2300      	movs	r3, #0
 80068b4:	f7fe fe11 	bl	80054da <xQueueGenericSend>
 80068b8:	0003      	movs	r3, r0
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	e014      	b.n	80068e8 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <xTimerGenericCommand+0x94>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	2314      	movs	r3, #20
 80068c4:	18f9      	adds	r1, r7, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	2200      	movs	r2, #0
 80068ca:	f7fe fe06 	bl	80054da <xQueueGenericSend>
 80068ce:	0003      	movs	r3, r0
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d2:	e009      	b.n	80068e8 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068d4:	4b07      	ldr	r3, [pc, #28]	@ (80068f4 <xTimerGenericCommand+0x94>)
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	2314      	movs	r3, #20
 80068dc:	18f9      	adds	r1, r7, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	f7fe feb9 	bl	8005656 <xQueueGenericSendFromISR>
 80068e4:	0003      	movs	r3, r0
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b00b      	add	sp, #44	@ 0x2c
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	20001224 	.word	0x20001224

080068f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006902:	4b19      	ldr	r3, [pc, #100]	@ (8006968 <prvProcessExpiredTimer+0x70>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3304      	adds	r3, #4
 8006910:	0018      	movs	r0, r3
 8006912:	f7fe fcf2 	bl	80052fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d11a      	bne.n	8006954 <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	18d1      	adds	r1, r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f8ba 	bl	8006aa4 <prvInsertTimerInActiveList>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d00f      	beq.n	8006954 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	2300      	movs	r3, #0
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	2100      	movs	r1, #0
 8006940:	f7ff ff8e 	bl	8006860 <xTimerGenericCommand>
 8006944:	0003      	movs	r3, r0
 8006946:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <prvProcessExpiredTimer+0x5c>
 800694e:	b672      	cpsid	i
 8006950:	46c0      	nop			@ (mov r8, r8)
 8006952:	e7fd      	b.n	8006950 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	0010      	movs	r0, r2
 800695c:	4798      	blx	r3
}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b004      	add	sp, #16
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	2000121c 	.word	0x2000121c

0800696c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006974:	2308      	movs	r3, #8
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	0018      	movs	r0, r3
 800697a:	f000 f853 	bl	8006a24 <prvGetNextExpireTime>
 800697e:	0003      	movs	r3, r0
 8006980:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f805 	bl	8006998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800698e:	f000 f8cb 	bl	8006b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	e7ee      	b.n	8006974 <prvTimerTask+0x8>
	...

08006998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069a2:	f7ff fae9 	bl	8005f78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069a6:	2308      	movs	r3, #8
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 f85a 	bl	8006a64 <prvSampleTimeNow>
 80069b0:	0003      	movs	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d129      	bne.n	8006a0e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10c      	bne.n	80069da <prvProcessTimerOrBlockTask+0x42>
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d808      	bhi.n	80069da <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80069c8:	f7ff fae2 	bl	8005f90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0011      	movs	r1, r2
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff ff90 	bl	80068f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069d8:	e01b      	b.n	8006a12 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069e0:	4b0e      	ldr	r3, [pc, #56]	@ (8006a1c <prvProcessTimerOrBlockTask+0x84>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	425a      	negs	r2, r3
 80069e8:	4153      	adcs	r3, r2
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <prvProcessTimerOrBlockTask+0x88>)
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	0019      	movs	r1, r3
 80069fc:	f7ff f898 	bl	8005b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a00:	f7ff fac6 	bl	8005f90 <xTaskResumeAll>
 8006a04:	1e03      	subs	r3, r0, #0
 8006a06:	d104      	bne.n	8006a12 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006a08:	f000 fa5a 	bl	8006ec0 <vPortYield>
}
 8006a0c:	e001      	b.n	8006a12 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006a0e:	f7ff fabf 	bl	8005f90 <xTaskResumeAll>
}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	46bd      	mov	sp, r7
 8006a16:	b004      	add	sp, #16
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	20001220 	.word	0x20001220
 8006a20:	20001224 	.word	0x20001224

08006a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <prvGetNextExpireTime+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	425a      	negs	r2, r3
 8006a34:	4153      	adcs	r3, r2
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	001a      	movs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d105      	bne.n	8006a52 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a46:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <prvGetNextExpireTime+0x3c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e001      	b.n	8006a56 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b004      	add	sp, #16
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2000121c 	.word	0x2000121c

08006a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a6c:	f7ff fb16 	bl	800609c <xTaskGetTickCount>
 8006a70:	0003      	movs	r3, r0
 8006a72:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a74:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d205      	bcs.n	8006a8a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006a7e:	f000 f8f5 	bl	8006c6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a90:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <prvSampleTimeNow+0x3c>)
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	2000122c 	.word	0x2000122c

08006aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d812      	bhi.n	8006af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e01b      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ade:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <prvInsertTimerInActiveList+0x7c>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	0010      	movs	r0, r2
 8006aea:	f7fe fbd0 	bl	800528e <vListInsert>
 8006aee:	e012      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d206      	bcs.n	8006b06 <prvInsertTimerInActiveList+0x62>
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e007      	b.n	8006b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	@ (8006b24 <prvInsertTimerInActiveList+0x80>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	0019      	movs	r1, r3
 8006b10:	0010      	movs	r0, r2
 8006b12:	f7fe fbbc 	bl	800528e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b006      	add	sp, #24
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20001220 	.word	0x20001220
 8006b24:	2000121c 	.word	0x2000121c

08006b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b08d      	sub	sp, #52	@ 0x34
 8006b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b2e:	e089      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b30:	2208      	movs	r2, #8
 8006b32:	18bb      	adds	r3, r7, r2
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da10      	bge.n	8006b5c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b3a:	18bb      	adds	r3, r7, r2
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <prvProcessReceivedCommands+0x24>
 8006b46:	b672      	cpsid	i
 8006b48:	46c0      	nop			@ (mov r8, r8)
 8006b4a:	e7fd      	b.n	8006b48 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	6858      	ldr	r0, [r3, #4]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	0019      	movs	r1, r3
 8006b5a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	18bb      	adds	r3, r7, r2
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da00      	bge.n	8006b68 <prvProcessReceivedCommands+0x40>
 8006b66:	e06d      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b68:	18bb      	adds	r3, r7, r2
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7fe fbbd 	bl	80052fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7ff ff6e 	bl	8006a64 <prvSampleTimeNow>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d84f      	bhi.n	8006c36 <prvProcessReceivedCommands+0x10e>
 8006b96:	009a      	lsls	r2, r3, #2
 8006b98:	4b32      	ldr	r3, [pc, #200]	@ (8006c64 <prvProcessReceivedCommands+0x13c>)
 8006b9a:	18d3      	adds	r3, r2, r3
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ba0:	2408      	movs	r4, #8
 8006ba2:	193b      	adds	r3, r7, r4
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	18d1      	adds	r1, r2, r3
 8006bac:	193b      	adds	r3, r7, r4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	6a38      	ldr	r0, [r7, #32]
 8006bb4:	f7ff ff76 	bl	8006aa4 <prvInsertTimerInActiveList>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d040      	beq.n	8006c3e <prvProcessReceivedCommands+0x116>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	0010      	movs	r0, r2
 8006bc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d137      	bne.n	8006c3e <prvProcessReceivedCommands+0x116>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bce:	193b      	adds	r3, r7, r4
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	18d2      	adds	r2, r2, r3
 8006bd8:	6a38      	ldr	r0, [r7, #32]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	2300      	movs	r3, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	f7ff fe3d 	bl	8006860 <xTimerGenericCommand>
 8006be6:	0003      	movs	r3, r0
 8006be8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d126      	bne.n	8006c3e <prvProcessReceivedCommands+0x116>
 8006bf0:	b672      	cpsid	i
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	e7fd      	b.n	8006bf2 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <prvProcessReceivedCommands+0xe6>
 8006c08:	b672      	cpsid	i
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	e7fd      	b.n	8006c0a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	18d1      	adds	r1, r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	6a38      	ldr	r0, [r7, #32]
 8006c1c:	f7ff ff42 	bl	8006aa4 <prvInsertTimerInActiveList>
					break;
 8006c20:	e010      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	222c      	movs	r2, #44	@ 0x2c
 8006c26:	5c9b      	ldrb	r3, [r3, r2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <prvProcessReceivedCommands+0x11a>
						{
							vPortFree( pxTimer );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 fa96 	bl	8007160 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c34:	e005      	b.n	8006c42 <prvProcessReceivedCommands+0x11a>

				default	:
					/* Don't expect to get here. */
					break;
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	e004      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
					break;
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	e002      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
					break;
 8006c3e:	46c0      	nop			@ (mov r8, r8)
 8006c40:	e000      	b.n	8006c44 <prvProcessReceivedCommands+0x11c>
					break;
 8006c42:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c44:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <prvProcessReceivedCommands+0x140>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	18b9      	adds	r1, r7, r2
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fe fd75 	bl	800573e <xQueueReceive>
 8006c54:	1e03      	subs	r3, r0, #0
 8006c56:	d000      	beq.n	8006c5a <prvProcessReceivedCommands+0x132>
 8006c58:	e76a      	b.n	8006b30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c5a:	46c0      	nop			@ (mov r8, r8)
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b00b      	add	sp, #44	@ 0x2c
 8006c62:	bd90      	pop	{r4, r7, pc}
 8006c64:	08007a9c 	.word	0x08007a9c
 8006c68:	20001224 	.word	0x20001224

08006c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c72:	e03f      	b.n	8006cf4 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c74:	4b29      	ldr	r3, [pc, #164]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c7e:	4b27      	ldr	r3, [pc, #156]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7fe fb34 	bl	80052fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	0010      	movs	r0, r2
 8006c9a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d127      	bne.n	8006cf4 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	18d3      	adds	r3, r2, r3
 8006cac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d90e      	bls.n	8006cd4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cc2:	4b16      	ldr	r3, [pc, #88]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	0019      	movs	r1, r3
 8006ccc:	0010      	movs	r0, r2
 8006cce:	f7fe fade 	bl	800528e <vListInsert>
 8006cd2:	e00f      	b.n	8006cf4 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2100      	movs	r1, #0
 8006ce0:	f7ff fdbe 	bl	8006860 <xTimerGenericCommand>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <prvSwitchTimerLists+0x88>
 8006cee:	b672      	cpsid	i
 8006cf0:	46c0      	nop			@ (mov r8, r8)
 8006cf2:	e7fd      	b.n	8006cf0 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf4:	4b09      	ldr	r3, [pc, #36]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1ba      	bne.n	8006c74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cfe:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d04:	4b06      	ldr	r3, [pc, #24]	@ (8006d20 <prvSwitchTimerLists+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <prvSwitchTimerLists+0xb0>)
 8006d0a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <prvSwitchTimerLists+0xb4>)
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b006      	add	sp, #24
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	2000121c 	.word	0x2000121c
 8006d20:	20001220 	.word	0x20001220

08006d24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d2a:	f000 f8d9 	bl	8006ee0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d2e:	4b16      	ldr	r3, [pc, #88]	@ (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d123      	bne.n	8006d7e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d36:	4b15      	ldr	r3, [pc, #84]	@ (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7fe fa5d 	bl	80051f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d3e:	4b14      	ldr	r3, [pc, #80]	@ (8006d90 <prvCheckForValidListAndQueue+0x6c>)
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fe fa59 	bl	80051f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <prvCheckForValidListAndQueue+0x70>)
 8006d48:	4a10      	ldr	r2, [pc, #64]	@ (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d4c:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <prvCheckForValidListAndQueue+0x74>)
 8006d4e:	4a10      	ldr	r2, [pc, #64]	@ (8006d90 <prvCheckForValidListAndQueue+0x6c>)
 8006d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d52:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <prvCheckForValidListAndQueue+0x78>)
 8006d54:	4a12      	ldr	r2, [pc, #72]	@ (8006da0 <prvCheckForValidListAndQueue+0x7c>)
 8006d56:	2100      	movs	r1, #0
 8006d58:	9100      	str	r1, [sp, #0]
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	200a      	movs	r0, #10
 8006d5e:	f7fe fb45 	bl	80053ec <xQueueGenericCreateStatic>
 8006d62:	0002      	movs	r2, r0
 8006d64:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d68:	4b07      	ldr	r3, [pc, #28]	@ (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d70:	4b05      	ldr	r3, [pc, #20]	@ (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a0b      	ldr	r2, [pc, #44]	@ (8006da4 <prvCheckForValidListAndQueue+0x80>)
 8006d76:	0011      	movs	r1, r2
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fe feb1 	bl	8005ae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f000 f8c1 	bl	8006f04 <vPortExitCritical>
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20001224 	.word	0x20001224
 8006d8c:	200011f4 	.word	0x200011f4
 8006d90:	20001208 	.word	0x20001208
 8006d94:	2000121c 	.word	0x2000121c
 8006d98:	20001220 	.word	0x20001220
 8006d9c:	200012d0 	.word	0x200012d0
 8006da0:	20001230 	.word	0x20001230
 8006da4:	080074e8 	.word	0x080074e8

08006da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3b04      	subs	r3, #4
 8006db8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2280      	movs	r2, #128	@ 0x80
 8006dbe:	0452      	lsls	r2, r2, #17
 8006dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd4:	4a08      	ldr	r2, [pc, #32]	@ (8006df8 <pxPortInitialiseStack+0x50>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3b14      	subs	r3, #20
 8006dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b20      	subs	r3, #32
 8006dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	0018      	movs	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b004      	add	sp, #16
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	08006dfd 	.word	0x08006dfd

08006dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e06:	4b08      	ldr	r3, [pc, #32]	@ (8006e28 <prvTaskExitError+0x2c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	d002      	beq.n	8006e14 <prvTaskExitError+0x18>
 8006e0e:	b672      	cpsid	i
 8006e10:	46c0      	nop			@ (mov r8, r8)
 8006e12:	e7fd      	b.n	8006e10 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006e14:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0fc      	beq.n	8006e18 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	46c0      	nop			@ (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b002      	add	sp, #8
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2000041c 	.word	0x2000041c

08006e2c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006e30:	46c0      	nop			@ (mov r8, r8)
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006e40:	4a0b      	ldr	r2, [pc, #44]	@ (8006e70 <pxCurrentTCBConst2>)
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	3020      	adds	r0, #32
 8006e48:	f380 8809 	msr	PSP, r0
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	f380 8814 	msr	CONTROL, r0
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006e58:	46ae      	mov	lr, r5
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	bc04      	pop	{r2}
 8006e5e:	b662      	cpsie	i
 8006e60:	4718      	bx	r3
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	46c0      	nop			@ (mov r8, r8)
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	46c0      	nop			@ (mov r8, r8)
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	46c0      	nop			@ (mov r8, r8)

08006e70 <pxCurrentTCBConst2>:
 8006e70:	20000cf4 	.word	0x20000cf4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006e74:	46c0      	nop			@ (mov r8, r8)
 8006e76:	46c0      	nop			@ (mov r8, r8)

08006e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e82:	21ff      	movs	r1, #255	@ 0xff
 8006e84:	0409      	lsls	r1, r1, #16
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e90:	21ff      	movs	r1, #255	@ 0xff
 8006e92:	0609      	lsls	r1, r1, #24
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006e98:	f000 f898 	bl	8006fcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e9c:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <xPortStartScheduler+0x44>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006ea2:	f7ff ffcd 	bl	8006e40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ea6:	f7ff f99b 	bl	80061e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006eaa:	f7ff ffa7 	bl	8006dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			@ (mov r8, r8)
 8006eb8:	e000ed20 	.word	0xe000ed20
 8006ebc:	2000041c 	.word	0x2000041c

08006ec0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <vPortYield+0x1c>)
 8006ec6:	2280      	movs	r2, #128	@ 0x80
 8006ec8:	0552      	lsls	r2, r2, #21
 8006eca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006ecc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ed0:	f3bf 8f6f 	isb	sy
}
 8006ed4:	46c0      	nop			@ (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006ee4:	b672      	cpsid	i
    uxCriticalNesting++;
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <vPortEnterCritical+0x20>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <vPortEnterCritical+0x20>)
 8006eee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006ef0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	2000041c 	.word	0x2000041c

08006f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f08:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <vPortExitCritical+0x12>
 8006f10:	b672      	cpsid	i
 8006f12:	46c0      	nop			@ (mov r8, r8)
 8006f14:	e7fd      	b.n	8006f12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f1e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006f20:	4b03      	ldr	r3, [pc, #12]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d100      	bne.n	8006f2a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8006f28:	b662      	cpsie	i
    }
}
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	2000041c 	.word	0x2000041c

08006f34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006f34:	f3ef 8010 	mrs	r0, PRIMASK
 8006f38:	b672      	cpsid	i
 8006f3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006f3c:	46c0      	nop			@ (mov r8, r8)
 8006f3e:	0018      	movs	r0, r3

08006f40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006f40:	f380 8810 	msr	PRIMASK, r0
 8006f44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006f46:	46c0      	nop			@ (mov r8, r8)
	...

08006f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f50:	f3ef 8009 	mrs	r0, PSP
 8006f54:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <pxCurrentTCBConst>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	3820      	subs	r0, #32
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006f5e:	4644      	mov	r4, r8
 8006f60:	464d      	mov	r5, r9
 8006f62:	4656      	mov	r6, sl
 8006f64:	465f      	mov	r7, fp
 8006f66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006f68:	b508      	push	{r3, lr}
 8006f6a:	b672      	cpsid	i
 8006f6c:	f7ff f938 	bl	80061e0 <vTaskSwitchContext>
 8006f70:	b662      	cpsie	i
 8006f72:	bc0c      	pop	{r2, r3}
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	6808      	ldr	r0, [r1, #0]
 8006f78:	3010      	adds	r0, #16
 8006f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006f7c:	46a0      	mov	r8, r4
 8006f7e:	46a9      	mov	r9, r5
 8006f80:	46b2      	mov	sl, r6
 8006f82:	46bb      	mov	fp, r7
 8006f84:	f380 8809 	msr	PSP, r0
 8006f88:	3820      	subs	r0, #32
 8006f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006f8c:	4718      	bx	r3
 8006f8e:	46c0      	nop			@ (mov r8, r8)

08006f90 <pxCurrentTCBConst>:
 8006f90:	20000cf4 	.word	0x20000cf4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006f94:	46c0      	nop			@ (mov r8, r8)
 8006f96:	46c0      	nop			@ (mov r8, r8)

08006f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f9e:	f7ff ffc9 	bl	8006f34 <ulSetInterruptMaskFromISR>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fa6:	f7ff f887 	bl	80060b8 <xTaskIncrementTick>
 8006faa:	1e03      	subs	r3, r0, #0
 8006fac:	d003      	beq.n	8006fb6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <SysTick_Handler+0x30>)
 8006fb0:	2280      	movs	r2, #128	@ 0x80
 8006fb2:	0552      	lsls	r2, r2, #21
 8006fb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff ffc1 	bl	8006f40 <vClearInterruptMaskFromISR>
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <prvSetupTimerInterrupt+0x34>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <prvSetupTimerInterrupt+0x38>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <prvSetupTimerInterrupt+0x3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	22fa      	movs	r2, #250	@ 0xfa
 8006fe2:	0091      	lsls	r1, r2, #2
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7f9 f88f 	bl	8000108 <__udivsi3>
 8006fea:	0003      	movs	r3, r0
 8006fec:	001a      	movs	r2, r3
 8006fee:	4b07      	ldr	r3, [pc, #28]	@ (800700c <prvSetupTimerInterrupt+0x40>)
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006ff4:	4b02      	ldr	r3, [pc, #8]	@ (8007000 <prvSetupTimerInterrupt+0x34>)
 8006ff6:	2207      	movs	r2, #7
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	e000e010 	.word	0xe000e010
 8007004:	e000e018 	.word	0xe000e018
 8007008:	20000000 	.word	0x20000000
 800700c:	e000e014 	.word	0xe000e014

08007010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800701c:	f7fe ffac 	bl	8005f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007020:	4b4a      	ldr	r3, [pc, #296]	@ (800714c <pvPortMalloc+0x13c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007028:	f000 f8e4 	bl	80071f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800702c:	4b48      	ldr	r3, [pc, #288]	@ (8007150 <pvPortMalloc+0x140>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	4013      	ands	r3, r2
 8007034:	d000      	beq.n	8007038 <pvPortMalloc+0x28>
 8007036:	e07b      	b.n	8007130 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d013      	beq.n	8007066 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800703e:	2208      	movs	r2, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	189b      	adds	r3, r3, r2
 8007044:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2207      	movs	r2, #7
 800704a:	4013      	ands	r3, r2
 800704c:	d00b      	beq.n	8007066 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2207      	movs	r2, #7
 8007052:	4393      	bics	r3, r2
 8007054:	3308      	adds	r3, #8
 8007056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2207      	movs	r2, #7
 800705c:	4013      	ands	r3, r2
 800705e:	d002      	beq.n	8007066 <pvPortMalloc+0x56>
 8007060:	b672      	cpsid	i
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	e7fd      	b.n	8007062 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d061      	beq.n	8007130 <pvPortMalloc+0x120>
 800706c:	4b39      	ldr	r3, [pc, #228]	@ (8007154 <pvPortMalloc+0x144>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d85c      	bhi.n	8007130 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007076:	4b38      	ldr	r3, [pc, #224]	@ (8007158 <pvPortMalloc+0x148>)
 8007078:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800707a:	4b37      	ldr	r3, [pc, #220]	@ (8007158 <pvPortMalloc+0x148>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007080:	e004      	b.n	800708c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d903      	bls.n	800709e <pvPortMalloc+0x8e>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f1      	bne.n	8007082 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800709e:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <pvPortMalloc+0x13c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d043      	beq.n	8007130 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	1ad2      	subs	r2, r2, r3
 80070c2:	2308      	movs	r3, #8
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d917      	bls.n	80070fa <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	18d3      	adds	r3, r2, r3
 80070d0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2207      	movs	r2, #7
 80070d6:	4013      	ands	r3, r2
 80070d8:	d002      	beq.n	80070e0 <pvPortMalloc+0xd0>
 80070da:	b672      	cpsid	i
 80070dc:	46c0      	nop			@ (mov r8, r8)
 80070de:	e7fd      	b.n	80070dc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 f8dd 	bl	80072b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070fa:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <pvPortMalloc+0x144>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <pvPortMalloc+0x144>)
 8007106:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <pvPortMalloc+0x144>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <pvPortMalloc+0x14c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d203      	bcs.n	800711c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007114:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <pvPortMalloc+0x144>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	4b10      	ldr	r3, [pc, #64]	@ (800715c <pvPortMalloc+0x14c>)
 800711a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <pvPortMalloc+0x140>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	431a      	orrs	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007130:	f7fe ff2e 	bl	8005f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2207      	movs	r2, #7
 8007138:	4013      	ands	r3, r2
 800713a:	d002      	beq.n	8007142 <pvPortMalloc+0x132>
 800713c:	b672      	cpsid	i
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	e7fd      	b.n	800713e <pvPortMalloc+0x12e>
	return pvReturn;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b006      	add	sp, #24
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20006148 	.word	0x20006148
 8007150:	20006154 	.word	0x20006154
 8007154:	2000614c 	.word	0x2000614c
 8007158:	20006140 	.word	0x20006140
 800715c:	20006150 	.word	0x20006150

08007160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d037      	beq.n	80071e2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007172:	2308      	movs	r3, #8
 8007174:	425b      	negs	r3, r3
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	18d3      	adds	r3, r2, r3
 800717a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <vPortFree+0x8c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4013      	ands	r3, r2
 800718a:	d102      	bne.n	8007192 <vPortFree+0x32>
 800718c:	b672      	cpsid	i
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	e7fd      	b.n	800718e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <vPortFree+0x40>
 800719a:	b672      	cpsid	i
 800719c:	46c0      	nop			@ (mov r8, r8)
 800719e:	e7fd      	b.n	800719c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4b11      	ldr	r3, [pc, #68]	@ (80071ec <vPortFree+0x8c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4013      	ands	r3, r2
 80071aa:	d01a      	beq.n	80071e2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d116      	bne.n	80071e2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <vPortFree+0x8c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	43db      	mvns	r3, r3
 80071be:	401a      	ands	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071c4:	f7fe fed8 	bl	8005f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <vPortFree+0x90>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	18d2      	adds	r2, r2, r3
 80071d2:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <vPortFree+0x90>)
 80071d4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 f86b 	bl	80072b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071de:	f7fe fed7 	bl	8005f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071e2:	46c0      	nop			@ (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b004      	add	sp, #16
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	20006154 	.word	0x20006154
 80071f0:	2000614c 	.word	0x2000614c

080071f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071fa:	4b27      	ldr	r3, [pc, #156]	@ (8007298 <prvHeapInit+0xa4>)
 80071fc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071fe:	4b27      	ldr	r3, [pc, #156]	@ (800729c <prvHeapInit+0xa8>)
 8007200:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2207      	movs	r2, #7
 8007206:	4013      	ands	r3, r2
 8007208:	d00c      	beq.n	8007224 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3307      	adds	r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2207      	movs	r2, #7
 8007214:	4393      	bics	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad2      	subs	r2, r2, r3
 800721e:	4b1f      	ldr	r3, [pc, #124]	@ (800729c <prvHeapInit+0xa8>)
 8007220:	18d3      	adds	r3, r2, r3
 8007222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007228:	4b1d      	ldr	r3, [pc, #116]	@ (80072a0 <prvHeapInit+0xac>)
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800722e:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <prvHeapInit+0xac>)
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	18d3      	adds	r3, r2, r3
 800723a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800723c:	2208      	movs	r2, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2207      	movs	r2, #7
 8007248:	4393      	bics	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4b15      	ldr	r3, [pc, #84]	@ (80072a4 <prvHeapInit+0xb0>)
 8007250:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <prvHeapInit+0xb0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <prvHeapInit+0xb0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <prvHeapInit+0xb0>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <prvHeapInit+0xb4>)
 800727e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <prvHeapInit+0xb8>)
 8007286:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvHeapInit+0xbc>)
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	0612      	lsls	r2, r2, #24
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	46c0      	nop			@ (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	b004      	add	sp, #16
 8007296:	bd80      	pop	{r7, pc}
 8007298:	00004e20 	.word	0x00004e20
 800729c:	20001320 	.word	0x20001320
 80072a0:	20006140 	.word	0x20006140
 80072a4:	20006148 	.word	0x20006148
 80072a8:	20006150 	.word	0x20006150
 80072ac:	2000614c 	.word	0x2000614c
 80072b0:	20006154 	.word	0x20006154

080072b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072bc:	4b27      	ldr	r3, [pc, #156]	@ (800735c <prvInsertBlockIntoFreeList+0xa8>)
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e002      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x14>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d8f7      	bhi.n	80072c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d108      	bne.n	80072f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	18d2      	adds	r2, r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	18d2      	adds	r2, r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d118      	bne.n	800733c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d00d      	beq.n	8007332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	18d2      	adds	r2, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e008      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e003      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	20006140 	.word	0x20006140
 8007360:	20006148 	.word	0x20006148

08007364 <__itoa>:
 8007364:	1e93      	subs	r3, r2, #2
 8007366:	b510      	push	{r4, lr}
 8007368:	000c      	movs	r4, r1
 800736a:	2b22      	cmp	r3, #34	@ 0x22
 800736c:	d904      	bls.n	8007378 <__itoa+0x14>
 800736e:	2300      	movs	r3, #0
 8007370:	001c      	movs	r4, r3
 8007372:	700b      	strb	r3, [r1, #0]
 8007374:	0020      	movs	r0, r4
 8007376:	bd10      	pop	{r4, pc}
 8007378:	2a0a      	cmp	r2, #10
 800737a:	d109      	bne.n	8007390 <__itoa+0x2c>
 800737c:	2800      	cmp	r0, #0
 800737e:	da07      	bge.n	8007390 <__itoa+0x2c>
 8007380:	232d      	movs	r3, #45	@ 0x2d
 8007382:	700b      	strb	r3, [r1, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	4240      	negs	r0, r0
 8007388:	1861      	adds	r1, r4, r1
 800738a:	f000 f807 	bl	800739c <__utoa>
 800738e:	e7f1      	b.n	8007374 <__itoa+0x10>
 8007390:	2100      	movs	r1, #0
 8007392:	e7f9      	b.n	8007388 <__itoa+0x24>

08007394 <itoa>:
 8007394:	b510      	push	{r4, lr}
 8007396:	f7ff ffe5 	bl	8007364 <__itoa>
 800739a:	bd10      	pop	{r4, pc}

0800739c <__utoa>:
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	000c      	movs	r4, r1
 80073a0:	0016      	movs	r6, r2
 80073a2:	b08d      	sub	sp, #52	@ 0x34
 80073a4:	2225      	movs	r2, #37	@ 0x25
 80073a6:	0007      	movs	r7, r0
 80073a8:	4915      	ldr	r1, [pc, #84]	@ (8007400 <__utoa+0x64>)
 80073aa:	a802      	add	r0, sp, #8
 80073ac:	f000 f856 	bl	800745c <memcpy>
 80073b0:	1e62      	subs	r2, r4, #1
 80073b2:	1eb3      	subs	r3, r6, #2
 80073b4:	2500      	movs	r5, #0
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	2b22      	cmp	r3, #34	@ 0x22
 80073ba:	d904      	bls.n	80073c6 <__utoa+0x2a>
 80073bc:	7025      	strb	r5, [r4, #0]
 80073be:	002c      	movs	r4, r5
 80073c0:	0020      	movs	r0, r4
 80073c2:	b00d      	add	sp, #52	@ 0x34
 80073c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c6:	0038      	movs	r0, r7
 80073c8:	0031      	movs	r1, r6
 80073ca:	f7f8 ff23 	bl	8000214 <__aeabi_uidivmod>
 80073ce:	000b      	movs	r3, r1
 80073d0:	aa02      	add	r2, sp, #8
 80073d2:	5cd3      	ldrb	r3, [r2, r3]
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	0029      	movs	r1, r5
 80073d8:	3501      	adds	r5, #1
 80073da:	5553      	strb	r3, [r2, r5]
 80073dc:	003b      	movs	r3, r7
 80073de:	0007      	movs	r7, r0
 80073e0:	429e      	cmp	r6, r3
 80073e2:	d9f0      	bls.n	80073c6 <__utoa+0x2a>
 80073e4:	2300      	movs	r3, #0
 80073e6:	0022      	movs	r2, r4
 80073e8:	5563      	strb	r3, [r4, r5]
 80073ea:	000b      	movs	r3, r1
 80073ec:	1ac8      	subs	r0, r1, r3
 80073ee:	4283      	cmp	r3, r0
 80073f0:	dde6      	ble.n	80073c0 <__utoa+0x24>
 80073f2:	7810      	ldrb	r0, [r2, #0]
 80073f4:	5ce5      	ldrb	r5, [r4, r3]
 80073f6:	7015      	strb	r5, [r2, #0]
 80073f8:	54e0      	strb	r0, [r4, r3]
 80073fa:	3201      	adds	r2, #1
 80073fc:	3b01      	subs	r3, #1
 80073fe:	e7f5      	b.n	80073ec <__utoa+0x50>
 8007400:	08007ac4 	.word	0x08007ac4

08007404 <memset>:
 8007404:	0003      	movs	r3, r0
 8007406:	1882      	adds	r2, r0, r2
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <__libc_init_array>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	2600      	movs	r6, #0
 8007418:	4c0c      	ldr	r4, [pc, #48]	@ (800744c <__libc_init_array+0x38>)
 800741a:	4d0d      	ldr	r5, [pc, #52]	@ (8007450 <__libc_init_array+0x3c>)
 800741c:	1b64      	subs	r4, r4, r5
 800741e:	10a4      	asrs	r4, r4, #2
 8007420:	42a6      	cmp	r6, r4
 8007422:	d109      	bne.n	8007438 <__libc_init_array+0x24>
 8007424:	2600      	movs	r6, #0
 8007426:	f000 f823 	bl	8007470 <_init>
 800742a:	4c0a      	ldr	r4, [pc, #40]	@ (8007454 <__libc_init_array+0x40>)
 800742c:	4d0a      	ldr	r5, [pc, #40]	@ (8007458 <__libc_init_array+0x44>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	42a6      	cmp	r6, r4
 8007434:	d105      	bne.n	8007442 <__libc_init_array+0x2e>
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	00b3      	lsls	r3, r6, #2
 800743a:	58eb      	ldr	r3, [r5, r3]
 800743c:	4798      	blx	r3
 800743e:	3601      	adds	r6, #1
 8007440:	e7ee      	b.n	8007420 <__libc_init_array+0xc>
 8007442:	00b3      	lsls	r3, r6, #2
 8007444:	58eb      	ldr	r3, [r5, r3]
 8007446:	4798      	blx	r3
 8007448:	3601      	adds	r6, #1
 800744a:	e7f2      	b.n	8007432 <__libc_init_array+0x1e>
 800744c:	08007aec 	.word	0x08007aec
 8007450:	08007aec 	.word	0x08007aec
 8007454:	08007af0 	.word	0x08007af0
 8007458:	08007aec 	.word	0x08007aec

0800745c <memcpy>:
 800745c:	2300      	movs	r3, #0
 800745e:	b510      	push	{r4, lr}
 8007460:	429a      	cmp	r2, r3
 8007462:	d100      	bne.n	8007466 <memcpy+0xa>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	5ccc      	ldrb	r4, [r1, r3]
 8007468:	54c4      	strb	r4, [r0, r3]
 800746a:	3301      	adds	r3, #1
 800746c:	e7f8      	b.n	8007460 <memcpy+0x4>
	...

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
