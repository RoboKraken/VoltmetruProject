
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  080061c0  080061c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d74  08006d74  0000846c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006d74  08006d74  0000846c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006d74  08006d74  0000846c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000046c  20000000  08006d7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  2000046c  080071e8  0000846c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  080071e8  00008c44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000846c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00017710  00000000  00000000  00008494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001fba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00013632  00000000  00000000  0001fc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dd4  00000000  00000000  0003323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  00036018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b5211  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e7c  00000000  00000000  000ec4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d22a  00000000  00000000  000ed33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047b8  00000000  00000000  0010a5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000046c 	.word	0x2000046c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061a8 	.word	0x080061a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000470 	.word	0x20000470
 8000104:	080061a8 	.word	0x080061a8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f000 f9c6 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f005 fa49 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f000 ff07 	bl	800124c <main>

0800043e <LoopForever>:

LoopForever:
    b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 800044c:	08006d7c 	.word	0x08006d7c
  ldr r2, =_sbss
 8000450:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 8000454:	20000c44 	.word	0x20000c44

08000458 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_COMP_IRQHandler>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <HAL_MspInit+0x50>)
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <HAL_MspInit+0x50>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <HAL_MspInit+0x50>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_MspInit+0x50>)
 800047c:	69da      	ldr	r2, [r3, #28]
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <HAL_MspInit+0x50>)
 8000480:	2180      	movs	r1, #128	@ 0x80
 8000482:	0549      	lsls	r1, r1, #21
 8000484:	430a      	orrs	r2, r1
 8000486:	61da      	str	r2, [r3, #28]
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_MspInit+0x50>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	055b      	lsls	r3, r3, #21
 8000490:	4013      	ands	r3, r2
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000496:	2302      	movs	r3, #2
 8000498:	425b      	negs	r3, r3
 800049a:	2200      	movs	r2, #0
 800049c:	2103      	movs	r1, #3
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fdc6 	bl	8003030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b08b      	sub	sp, #44	@ 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	2414      	movs	r4, #20
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	0018      	movs	r0, r3
 80004be:	2314      	movs	r3, #20
 80004c0:	001a      	movs	r2, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	f005 f9f4 	bl	80058b0 <memset>
  if(hadc->Instance==ADC1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a19      	ldr	r2, [pc, #100]	@ (8000534 <HAL_ADC_MspInit+0x84>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d12b      	bne.n	800052a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d2:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	0089      	lsls	r1, r1, #2
 80004dc:	430a      	orrs	r2, r1
 80004de:	619a      	str	r2, [r3, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4013      	ands	r3, r2
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0289      	lsls	r1, r1, #10
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <HAL_ADC_MspInit+0x88>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2203      	movs	r2, #3
 800050e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2203      	movs	r2, #3
 8000514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	193a      	adds	r2, r7, r4
 800051e:	2390      	movs	r3, #144	@ 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fda9 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00b      	add	sp, #44	@ 0x2c
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40012400 	.word	0x40012400
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b08b      	sub	sp, #44	@ 0x2c
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	2414      	movs	r4, #20
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f005 f9ae 	bl	80058b0 <memset>
  if(hspi->Instance==SPI1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <HAL_SPI_MspInit+0x90>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d132      	bne.n	80005c4 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0149      	lsls	r1, r1, #5
 8000568:	430a      	orrs	r2, r1
 800056a:	619a      	str	r2, [r3, #24]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	015b      	lsls	r3, r3, #5
 8000574:	4013      	ands	r3, r2
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <HAL_SPI_MspInit+0x94>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	22a0      	movs	r2, #160	@ 0xa0
 800059c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2202      	movs	r2, #2
 80005a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2203      	movs	r2, #3
 80005ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	187a      	adds	r2, r7, r1
 80005b8:	2390      	movs	r3, #144	@ 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fd5c 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b00b      	add	sp, #44	@ 0x2c
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40013000 	.word	0x40013000
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	@ 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2414      	movs	r4, #20
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f005 f962 	bl	80058b0 <memset>
  if(huart->Instance==USART2)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_UART_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d132      	bne.n	800065c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_UART_MspInit+0x94>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <HAL_UART_MspInit+0x94>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	0289      	lsls	r1, r1, #10
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	029b      	lsls	r3, r3, #10
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	187a      	adds	r2, r7, r1
 8000650:	2390      	movs	r3, #144	@ 0x90
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fd10 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b00b      	add	sp, #44	@ 0x2c
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40004400 	.word	0x40004400
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08c      	sub	sp, #48	@ 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800067c:	4b37      	ldr	r3, [pc, #220]	@ (800075c <HAL_InitTick+0xf0>)
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	4b36      	ldr	r3, [pc, #216]	@ (800075c <HAL_InitTick+0xf0>)
 8000682:	2102      	movs	r1, #2
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
 8000688:	4b34      	ldr	r3, [pc, #208]	@ (800075c <HAL_InitTick+0xf0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	2202      	movs	r2, #2
 800068e:	4013      	ands	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000694:	230c      	movs	r3, #12
 8000696:	18fa      	adds	r2, r7, r3
 8000698:	2410      	movs	r4, #16
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 fb74 	bl	8003d8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d104      	bne.n	80006ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006b0:	f003 fb56 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80006b4:	0003      	movs	r3, r0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b8:	e004      	b.n	80006c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006ba:	f003 fb51 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 80006be:	0003      	movs	r3, r0
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c6:	4926      	ldr	r1, [pc, #152]	@ (8000760 <HAL_InitTick+0xf4>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fd27 	bl	800011c <__udivsi3>
 80006ce:	0003      	movs	r3, r0
 80006d0:	3b01      	subs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <HAL_InitTick+0xf8>)
 80006d6:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <HAL_InitTick+0xfc>)
 80006d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <HAL_InitTick+0xf8>)
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_InitTick+0x100>)
 80006de:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <HAL_InitTick+0xf8>)
 80006e2:	6a3a      	ldr	r2, [r7, #32]
 80006e4:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <HAL_InitTick+0xf8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <HAL_InitTick+0xf8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <HAL_InitTick+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006f8:	252b      	movs	r5, #43	@ 0x2b
 80006fa:	197c      	adds	r4, r7, r5
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <HAL_InitTick+0xf8>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f003 fffc 	bl	80046fc <HAL_TIM_Base_Init>
 8000704:	0003      	movs	r3, r0
 8000706:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000708:	197b      	adds	r3, r7, r5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d11e      	bne.n	800074e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000710:	197c      	adds	r4, r7, r5
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <HAL_InitTick+0xf8>)
 8000714:	0018      	movs	r0, r3
 8000716:	f004 f849 	bl	80047ac <HAL_TIM_Base_Start_IT>
 800071a:	0003      	movs	r3, r0
 800071c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d113      	bne.n	800074e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000726:	2010      	movs	r0, #16
 8000728:	f002 fc97 	bl	800305a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d809      	bhi.n	8000746 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	0019      	movs	r1, r3
 8000738:	2010      	movs	r0, #16
 800073a:	f002 fc79 	bl	8003030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_InitTick+0x104>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e003      	b.n	800074e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000746:	232b      	movs	r3, #43	@ 0x2b
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800074e:	232b      	movs	r3, #43	@ 0x2b
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b00c      	add	sp, #48	@ 0x30
 800075a:	bdb0      	pop	{r4, r5, r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	000f4240 	.word	0x000f4240
 8000764:	20000488 	.word	0x20000488
 8000768:	40000400 	.word	0x40000400
 800076c:	000003e7 	.word	0x000003e7
 8000770:	20000414 	.word	0x20000414

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <TIM3_IRQHandler+0x14>)
 800078a:	0018      	movs	r0, r3
 800078c:	f004 f860 	bl	8004850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	20000488 	.word	0x20000488

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80007b0:	230e      	movs	r3, #14
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e057      	b.n	800086a <st7565_write_buffer+0xc2>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fdd3 	bl	800336c <HAL_GPIO_WritePin>
 80007c6:	230e      	movs	r3, #14
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000884 <st7565_write_buffer+0xdc>)
 80007ce:	5cd3      	ldrb	r3, [r2, r3]
 80007d0:	2250      	movs	r2, #80	@ 0x50
 80007d2:	4252      	negs	r2, r2
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f855 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fdc1 	bl	800336c <HAL_GPIO_WritePin>
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f84c 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <st7565_write_buffer+0xd8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fdb8 	bl	800336c <HAL_GPIO_WritePin>
 80007fc:	2010      	movs	r0, #16
 80007fe:	f000 f843 	bl	8000888 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <st7565_write_buffer+0xd8>)
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fdaf 	bl	800336c <HAL_GPIO_WritePin>
 800080e:	20e0      	movs	r0, #224	@ 0xe0
 8000810:	f000 f83a 	bl	8000888 <st7565_sendbyte>
		//DATA(0xff);
		for (c = 0; c < 128; c++) {
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e019      	b.n	8000852 <st7565_write_buffer+0xaa>
			DATA(buffer[(128 * p) + c]);
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <st7565_write_buffer+0xd8>)
 8000820:	2201      	movs	r2, #1
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fda1 	bl	800336c <HAL_GPIO_WritePin>
 800082a:	230e      	movs	r3, #14
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	01da      	lsls	r2, r3, #7
 8000832:	240f      	movs	r4, #15
 8000834:	193b      	adds	r3, r7, r4
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	001a      	movs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	189b      	adds	r3, r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f820 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000848:	193b      	adds	r3, r7, r4
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	193b      	adds	r3, r7, r4
 800084e:	3201      	adds	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	230f      	movs	r3, #15
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	dadf      	bge.n	800081e <st7565_write_buffer+0x76>
	for (p = 0; p < 8; p++) {
 800085e:	210e      	movs	r1, #14
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	187b      	adds	r3, r7, r1
 8000866:	3201      	adds	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b07      	cmp	r3, #7
 8000872:	d9a2      	bls.n	80007ba <st7565_write_buffer+0x12>
		}
	}
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b005      	add	sp, #20
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	48000800 	.word	0x48000800
 8000884:	2000040c 	.word	0x2000040c

08000888 <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	0002      	movs	r2, r0
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000894:	1df9      	adds	r1, r7, #7
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <st7565_sendbyte+0x20>)
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	2201      	movs	r2, #1
 800089c:	f003 fc58 	bl	8004150 <HAL_SPI_Transmit>
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000056c 	.word	0x2000056c

080008ac <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	0059      	lsls	r1, r3, #1
 80008b4:	2390      	movs	r3, #144	@ 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2201      	movs	r2, #1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fd56 	bl	800336c <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 80008c0:	4b4e      	ldr	r3, [pc, #312]	@ (80009fc <st7565_init+0x150>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 fd50 	bl	800336c <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	0099      	lsls	r1, r3, #2
 80008d0:	2390      	movs	r3, #144	@ 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fd48 	bl	800336c <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 80008dc:	4b48      	ldr	r3, [pc, #288]	@ (8000a00 <st7565_init+0x154>)
 80008de:	2201      	movs	r2, #1
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fd42 	bl	800336c <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 80008e8:	4b45      	ldr	r3, [pc, #276]	@ (8000a00 <st7565_init+0x154>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	@ 0x40
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fd3c 	bl	800336c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	0099      	lsls	r1, r3, #2
 80008f8:	2390      	movs	r3, #144	@ 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2200      	movs	r2, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f002 fd34 	bl	800336c <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000904:	23fa      	movs	r3, #250	@ 0xfa
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	0018      	movs	r0, r3
 800090a:	f001 fe1d 	bl	8002548 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	0099      	lsls	r1, r3, #2
 8000912:	2390      	movs	r3, #144	@ 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2201      	movs	r2, #1
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fd27 	bl	800336c <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <st7565_init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fd21 	bl	800336c <HAL_GPIO_WritePin>
 800092a:	20a3      	movs	r0, #163	@ 0xa3
 800092c:	f7ff ffac 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <st7565_init+0x150>)
 8000932:	2200      	movs	r2, #0
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0018      	movs	r0, r3
 8000938:	f002 fd18 	bl	800336c <HAL_GPIO_WritePin>
 800093c:	20a0      	movs	r0, #160	@ 0xa0
 800093e:	f7ff ffa3 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <st7565_init+0x150>)
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	0018      	movs	r0, r3
 800094a:	f002 fd0f 	bl	800336c <HAL_GPIO_WritePin>
 800094e:	20c0      	movs	r0, #192	@ 0xc0
 8000950:	f7ff ff9a 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <st7565_init+0x150>)
 8000956:	2200      	movs	r2, #0
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fd06 	bl	800336c <HAL_GPIO_WritePin>
 8000960:	2040      	movs	r0, #64	@ 0x40
 8000962:	f7ff ff91 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <st7565_init+0x150>)
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fcfd 	bl	800336c <HAL_GPIO_WritePin>
 8000972:	202c      	movs	r0, #44	@ 0x2c
 8000974:	f7ff ff88 	bl	8000888 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000978:	2032      	movs	r0, #50	@ 0x32
 800097a:	f001 fde5 	bl	8002548 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <st7565_init+0x150>)
 8000980:	2200      	movs	r2, #0
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fcf1 	bl	800336c <HAL_GPIO_WritePin>
 800098a:	202e      	movs	r0, #46	@ 0x2e
 800098c:	f7ff ff7c 	bl	8000888 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000990:	2032      	movs	r0, #50	@ 0x32
 8000992:	f001 fdd9 	bl	8002548 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <st7565_init+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fce5 	bl	800336c <HAL_GPIO_WritePin>
 80009a2:	202f      	movs	r0, #47	@ 0x2f
 80009a4:	f7ff ff70 	bl	8000888 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 fdcd 	bl	8002548 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <st7565_init+0x150>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fcd9 	bl	800336c <HAL_GPIO_WritePin>
 80009ba:	2026      	movs	r0, #38	@ 0x26
 80009bc:	f7ff ff64 	bl	8000888 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <st7565_init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fcd0 	bl	800336c <HAL_GPIO_WritePin>
 80009cc:	20af      	movs	r0, #175	@ 0xaf
 80009ce:	f7ff ff5b 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <st7565_init+0x150>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fcc7 	bl	800336c <HAL_GPIO_WritePin>
 80009de:	20a4      	movs	r0, #164	@ 0xa4
 80009e0:	f7ff ff52 	bl	8000888 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f81d 	bl	8000a24 <st7565_set_brightness>
 	st7565_clear_screen();
 80009ea:	f000 f83f 	bl	8000a6c <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <st7565_init+0x158>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f897 	bl	8000b24 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	48000800 	.word	0x48000800
 8000a00:	48000400 	.word	0x48000400
 8000a04:	2000000c 	.word	0x2000000c

08000a08 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	0059      	lsls	r1, r3, #1
 8000a10:	2390      	movs	r3, #144	@ 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	2201      	movs	r2, #1
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 fca8 	bl	800336c <HAL_GPIO_WritePin>
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <st7565_set_brightness+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fc98 	bl	800336c <HAL_GPIO_WritePin>
 8000a3c:	2081      	movs	r0, #129	@ 0x81
 8000a3e:	f7ff ff23 	bl	8000888 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <st7565_set_brightness+0x44>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fc8f 	bl	800336c <HAL_GPIO_WritePin>
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	223f      	movs	r2, #63	@ 0x3f
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff15 	bl	8000888 <st7565_sendbyte>
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	48000800 	.word	0x48000800

08000a6c <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e049      	b.n	8000b0e <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fc73 	bl	800336c <HAL_GPIO_WritePin>
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2250      	movs	r2, #80	@ 0x50
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fef8 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e02d      	b.n	8000afc <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fc60 	bl	800336c <HAL_GPIO_WritePin>
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fee6 	bl	8000888 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fc52 	bl	800336c <HAL_GPIO_WritePin>
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fed4 	bl	8000888 <st7565_sendbyte>
			DATA(0x0);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <st7565_clear_screen+0xb4>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fc40 	bl	800336c <HAL_GPIO_WritePin>
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fecb 	bl	8000888 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	3201      	adds	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b80      	cmp	r3, #128	@ 0x80
 8000b02:	d9cd      	bls.n	8000aa0 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b07      	cmp	r3, #7
 8000b14:	d9b1      	bls.n	8000a7a <st7565_clear_screen+0xe>
		}
	}
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000800 	.word	0x48000800

08000b24 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	00da      	lsls	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2100      	movs	r1, #0
 8000b34:	0018      	movs	r0, r3
 8000b36:	f004 febb 	bl	80058b0 <memset>
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000b42:	b590      	push	{r4, r7, lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	0010      	movs	r0, r2
 8000b4e:	0019      	movs	r1, r3
 8000b50:	1cfb      	adds	r3, r7, #3
 8000b52:	1c22      	adds	r2, r4, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	1cbb      	adds	r3, r7, #2
 8000b58:	1c02      	adds	r2, r0, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	1c7b      	adds	r3, r7, #1
 8000b5e:	1c0a      	adds	r2, r1, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000b62:	1cfb      	adds	r3, r7, #3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db51      	blt.n	8000c10 <st7565_setpixel+0xce>
 8000b6c:	1cbb      	adds	r3, r7, #2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b72:	d84d      	bhi.n	8000c10 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000b74:	1c7b      	adds	r3, r7, #1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d023      	beq.n	8000bc4 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000b7c:	1cfb      	adds	r3, r7, #3
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	1cbb      	adds	r3, r7, #2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	08db      	lsrs	r3, r3, #3
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	0003      	movs	r3, r0
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	001a      	movs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	1cbb      	adds	r3, r7, #2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4099      	lsls	r1, r3
 8000ba6:	000b      	movs	r3, r1
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b259      	sxtb	r1, r3
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	001a      	movs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e026      	b.n	8000c12 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000bc4:	1cfb      	adds	r3, r7, #3
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	1cbb      	adds	r3, r7, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	01db      	lsls	r3, r3, #7
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	1cba      	adds	r2, r7, #2
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	43d2      	mvns	r2, r2
 8000be6:	2107      	movs	r1, #7
 8000be8:	400a      	ands	r2, r1
 8000bea:	2101      	movs	r1, #1
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	b252      	sxtb	r2, r2
 8000bf2:	43d2      	mvns	r2, r2
 8000bf4:	b252      	sxtb	r2, r2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b259      	sxtb	r1, r3
 8000bfa:	1cfb      	adds	r3, r7, #3
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	0003      	movs	r3, r0
 8000c00:	01db      	lsls	r3, r3, #7
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	001a      	movs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e000      	b.n	8000c12 <st7565_setpixel+0xd0>
		return;
 8000c10:	46c0      	nop			@ (mov r8, r8)
}
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c,uint8_t fontSelect) {
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	0008      	movs	r0, r1
 8000c22:	0011      	movs	r1, r2
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	230b      	movs	r3, #11
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	1c02      	adds	r2, r0, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	230a      	movs	r3, #10
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	1c0a      	adds	r2, r1, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8000c36:	e02c      	b.n	8000c92 <st7565_drawstring+0x7a>
		st7565_drawchar(buff, x, line, c[0], fontSelect);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781c      	ldrb	r4, [r3, #0]
 8000c3c:	260a      	movs	r6, #10
 8000c3e:	19bb      	adds	r3, r7, r6
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	469c      	mov	ip, r3
 8000c44:	250b      	movs	r5, #11
 8000c46:	197b      	adds	r3, r7, r5
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	2208      	movs	r2, #8
 8000c50:	189b      	adds	r3, r3, r2
 8000c52:	19db      	adds	r3, r3, r7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	0023      	movs	r3, r4
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	f000 f822 	bl	8000ca4 <st7565_drawchar>
		c++;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8000c66:	197b      	adds	r3, r7, r5
 8000c68:	197a      	adds	r2, r7, r5
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	3206      	adds	r2, #6
 8000c6e:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b79      	cmp	r3, #121	@ 0x79
 8000c76:	d907      	bls.n	8000c88 <st7565_drawstring+0x70>
			x = 0; // ran out of this line
 8000c78:	197b      	adds	r3, r7, r5
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			line++;
 8000c7e:	19bb      	adds	r3, r7, r6
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	19bb      	adds	r3, r7, r6
 8000c84:	3201      	adds	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8000c88:	230a      	movs	r3, #10
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d804      	bhi.n	8000c9c <st7565_drawstring+0x84>
	while (c[0] != 0) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1ce      	bne.n	8000c38 <st7565_drawstring+0x20>
 8000c9a:	e000      	b.n	8000c9e <st7565_drawstring+0x86>
			return; // ran out of space :(
 8000c9c:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b005      	add	sp, #20
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ca4 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c, uint8_t fontSelect) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	000c      	movs	r4, r1
 8000cae:	0010      	movs	r0, r2
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	1c22      	adds	r2, r4, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	1c7b      	adds	r3, r7, #1
 8000cc0:	1c0a      	adds	r2, r1, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e043      	b.n	8000d56 <st7565_drawchar+0xb2>
		if(fontSelect==0)
 8000cce:	2320      	movs	r3, #32
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d117      	bne.n	8000d08 <st7565_drawchar+0x64>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	0013      	movs	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	189b      	adds	r3, r3, r2
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <st7565_drawchar+0xc8>)
 8000cee:	18d2      	adds	r2, r2, r3
 8000cf0:	1cfb      	adds	r3, r7, #3
 8000cf2:	7819      	ldrb	r1, [r3, #0]
 8000cf4:	1cbb      	adds	r3, r7, #2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	01db      	lsls	r3, r3, #7
 8000cfa:	18cb      	adds	r3, r1, r3
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e01b      	b.n	8000d40 <st7565_drawchar+0x9c>
		else if(fontSelect==1)
 8000d08:	2320      	movs	r3, #32
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d116      	bne.n	8000d40 <st7565_drawchar+0x9c>
		buff[x + (line * 128)] = *(ultraFont + (c * 5) + i);
 8000d12:	1c7b      	adds	r3, r7, #1
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	0013      	movs	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	18d2      	adds	r2, r2, r3
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <st7565_drawchar+0xcc>)
 8000d28:	18d2      	adds	r2, r2, r3
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	7819      	ldrb	r1, [r3, #0]
 8000d2e:	1cbb      	adds	r3, r7, #2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	01db      	lsls	r3, r3, #7
 8000d34:	18cb      	adds	r3, r1, r3
 8000d36:	0019      	movs	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	185b      	adds	r3, r3, r1
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	701a      	strb	r2, [r3, #0]
		x++;
 8000d40:	1cfb      	adds	r3, r7, #3
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	1cfb      	adds	r3, r7, #3
 8000d46:	3201      	adds	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	3201      	adds	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d9b6      	bls.n	8000cce <st7565_drawchar+0x2a>
	}
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b005      	add	sp, #20
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	080067f4 	.word	0x080067f4
 8000d70:	080062f8 	.word	0x080062f8

08000d74 <st7565_drawline>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	000c      	movs	r4, r1
 8000d7e:	0010      	movs	r0, r2
 8000d80:	0019      	movs	r1, r3
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	1c22      	adds	r2, r4, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	1cbb      	adds	r3, r7, #2
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	1c7b      	adds	r3, r7, #1
 8000d90:	1c0a      	adds	r2, r1, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 8000d9c:	1cfa      	adds	r2, r7, #3
 8000d9e:	1c7b      	adds	r3, r7, #1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d908      	bls.n	8000dba <st7565_drawline+0x46>
		dx = x0 - x1;
 8000da8:	230c      	movs	r3, #12
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	1cf9      	adds	r1, r7, #3
 8000dae:	1c7a      	adds	r2, r7, #1
 8000db0:	7809      	ldrb	r1, [r1, #0]
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <st7565_drawline+0x56>
	else
		dx = x1 - x0;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	1c79      	adds	r1, r7, #1
 8000dc0:	1cfa      	adds	r2, r7, #3
 8000dc2:	7809      	ldrb	r1, [r1, #0]
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	1a8a      	subs	r2, r1, r2
 8000dc8:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8000dca:	1cba      	adds	r2, r7, #2
 8000dcc:	2020      	movs	r0, #32
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d908      	bls.n	8000dea <st7565_drawline+0x76>
		dy = y0 - y1;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	18fa      	adds	r2, r7, r3
 8000ddc:	1cb9      	adds	r1, r7, #2
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	7809      	ldrb	r1, [r1, #0]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	1acb      	subs	r3, r1, r3
 8000de6:	7013      	strb	r3, [r2, #0]
 8000de8:	e008      	b.n	8000dfc <st7565_drawline+0x88>
	else
		dy = y1 - y0;
 8000dea:	230b      	movs	r3, #11
 8000dec:	18fa      	adds	r2, r7, r3
 8000dee:	2320      	movs	r3, #32
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	1cb8      	adds	r0, r7, #2
 8000df4:	7819      	ldrb	r1, [r3, #0]
 8000df6:	7803      	ldrb	r3, [r0, #0]
 8000df8:	1acb      	subs	r3, r1, r3
 8000dfa:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8000dfc:	200b      	movs	r0, #11
 8000dfe:	183a      	adds	r2, r7, r0
 8000e00:	240c      	movs	r4, #12
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d929      	bls.n	8000e60 <st7565_drawline+0xec>
		swap = 1;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8000e14:	2108      	movs	r1, #8
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	193a      	adds	r2, r7, r4
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
		dx = dy;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	183a      	adds	r2, r7, r0
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	187a      	adds	r2, r7, r1
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	1cfa      	adds	r2, r7, #3
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8000e36:	1cfb      	adds	r3, r7, #3
 8000e38:	1cba      	adds	r2, r7, #2
 8000e3a:	7812      	ldrb	r2, [r2, #0]
 8000e3c:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	187a      	adds	r2, r7, r1
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	1c7a      	adds	r2, r7, #1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 8000e4e:	1c7a      	adds	r2, r7, #1
 8000e50:	2020      	movs	r0, #32
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e58:	183b      	adds	r3, r7, r0
 8000e5a:	187a      	adds	r2, r7, r1
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 8000e60:	1cfa      	adds	r2, r7, #3
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d919      	bls.n	8000ea0 <st7565_drawline+0x12c>
		tmp = x0;
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	1cfa      	adds	r2, r7, #3
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 8000e76:	1cfb      	adds	r3, r7, #3
 8000e78:	1c7a      	adds	r2, r7, #1
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 8000e7e:	1c7b      	adds	r3, r7, #1
 8000e80:	187a      	adds	r2, r7, r1
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	1cba      	adds	r2, r7, #2
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 8000e8e:	1cba      	adds	r2, r7, #2
 8000e90:	2020      	movs	r0, #32
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8000e98:	183b      	adds	r3, r7, r0
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	085b      	lsrs	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	2309      	movs	r3, #9
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	1cb9      	adds	r1, r7, #2
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	780b      	ldrb	r3, [r1, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d904      	bls.n	8000ec8 <st7565_drawline+0x154>
		ystep = 1;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e003      	b.n	8000ed0 <st7565_drawline+0x15c>
	else
		ystep = -1;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	22ff      	movs	r2, #255	@ 0xff
 8000ece:	701a      	strb	r2, [r3, #0]
	y = y0;
 8000ed0:	230d      	movs	r3, #13
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	1cba      	adds	r2, r7, #2
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000eda:	230e      	movs	r3, #14
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	1cfa      	adds	r2, r7, #3
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e045      	b.n	8000f72 <st7565_drawline+0x1fe>
		if (swap == 0)
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10d      	bne.n	8000f0c <st7565_drawline+0x198>
			st7565_setpixel(buff, x, y, color);
 8000ef0:	2324      	movs	r3, #36	@ 0x24
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781c      	ldrb	r4, [r3, #0]
 8000ef6:	230d      	movs	r3, #13
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	230e      	movs	r3, #14
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	7819      	ldrb	r1, [r3, #0]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	0023      	movs	r3, r4
 8000f06:	f7ff fe1c 	bl	8000b42 <st7565_setpixel>
 8000f0a:	e00c      	b.n	8000f26 <st7565_drawline+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8000f0c:	2324      	movs	r3, #36	@ 0x24
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781c      	ldrb	r4, [r3, #0]
 8000f12:	230e      	movs	r3, #14
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	230d      	movs	r3, #13
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	7819      	ldrb	r1, [r3, #0]
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	0023      	movs	r3, r4
 8000f22:	f7ff fe0e 	bl	8000b42 <st7565_setpixel>
		err -= (uint8_t) dy;
 8000f26:	2009      	movs	r0, #9
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8000f3a:	183b      	adds	r3, r7, r0
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f40:	d911      	bls.n	8000f66 <st7565_drawline+0x1f2>
			y += (uint8_t) ystep;
 8000f42:	230a      	movs	r3, #10
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	7819      	ldrb	r1, [r3, #0]
 8000f48:	220d      	movs	r2, #13
 8000f4a:	18bb      	adds	r3, r7, r2
 8000f4c:	18ba      	adds	r2, r7, r2
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	188a      	adds	r2, r1, r2
 8000f52:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	230c      	movs	r3, #12
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	183b      	adds	r3, r7, r0
 8000f64:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8000f66:	210e      	movs	r1, #14
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	3201      	adds	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	230e      	movs	r3, #14
 8000f74:	18fa      	adds	r2, r7, r3
 8000f76:	1c7b      	adds	r3, r7, #1
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d9b2      	bls.n	8000ee6 <st7565_drawline+0x172>
		}
	}
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b005      	add	sp, #20
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		uint8_t color) {
 8000f8a:	b5b0      	push	{r4, r5, r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	000c      	movs	r4, r1
 8000f94:	0010      	movs	r0, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	1c22      	adds	r2, r4, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	1cbb      	adds	r3, r7, #2
 8000fa0:	1c02      	adds	r2, r0, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	1c7b      	adds	r3, r7, #1
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
// stupidest version - just pixels - but fast with internal buffer!
	uint8_t i, j;
	for (i = x; i < x + w; i++) {
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	1cfa      	adds	r2, r7, #3
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e028      	b.n	8001008 <st7565_fillrect+0x7e>
		for (j = y; j < y + h; j++) {
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	1cba      	adds	r2, r7, #2
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e011      	b.n	8000fe6 <st7565_fillrect+0x5c>
			st7565_setpixel(buff, i, j, color);
 8000fc2:	2324      	movs	r3, #36	@ 0x24
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781c      	ldrb	r4, [r3, #0]
 8000fc8:	250e      	movs	r5, #14
 8000fca:	197b      	adds	r3, r7, r5
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	f7ff fdb3 	bl	8000b42 <st7565_setpixel>
		for (j = y; j < y + h; j++) {
 8000fdc:	197b      	adds	r3, r7, r5
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	197b      	adds	r3, r7, r5
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	230e      	movs	r3, #14
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	18cb      	adds	r3, r1, r3
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbe2      	blt.n	8000fc2 <st7565_fillrect+0x38>
	for (i = x; i < x + w; i++) {
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	187b      	adds	r3, r7, r1
 8001004:	3201      	adds	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	7819      	ldrb	r1, [r3, #0]
 8001012:	1c7b      	adds	r3, r7, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	18cb      	adds	r3, r1, r3
 8001018:	429a      	cmp	r2, r3
 800101a:	dbcc      	blt.n	8000fb6 <st7565_fillrect+0x2c>
		}
	}
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001028 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	0002      	movs	r2, r0
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 8001034:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <interpolation+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	5e9b      	ldrsh	r3, [r3, r2]
 800103a:	1dba      	adds	r2, r7, #6
 800103c:	2100      	movs	r1, #0
 800103e:	5e52      	ldrsh	r2, [r2, r1]
 8001040:	429a      	cmp	r2, r3
 8001042:	dc11      	bgt.n	8001068 <interpolation+0x40>
 8001044:	4b3a      	ldr	r3, [pc, #232]	@ (8001130 <interpolation+0x108>)
 8001046:	2202      	movs	r2, #2
 8001048:	5e9b      	ldrsh	r3, [r3, r2]
 800104a:	001a      	movs	r2, r3
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	2100      	movs	r1, #0
 8001050:	5e5b      	ldrsh	r3, [r3, r1]
 8001052:	435a      	muls	r2, r3
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <interpolation+0x108>)
 8001056:	2100      	movs	r1, #0
 8001058:	5e5b      	ldrsh	r3, [r3, r1]
 800105a:	0019      	movs	r1, r3
 800105c:	0010      	movs	r0, r2
 800105e:	f7ff f8e7 	bl	8000230 <__divsi3>
 8001062:	0003      	movs	r3, r0
 8001064:	b21b      	sxth	r3, r3
 8001066:	e05e      	b.n	8001126 <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <interpolation+0x108>)
 800106a:	2208      	movs	r2, #8
 800106c:	5e9b      	ldrsh	r3, [r3, r2]
 800106e:	1dba      	adds	r2, r7, #6
 8001070:	2100      	movs	r1, #0
 8001072:	5e52      	ldrsh	r2, [r2, r1]
 8001074:	429a      	cmp	r2, r3
 8001076:	db03      	blt.n	8001080 <interpolation+0x58>
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <interpolation+0x108>)
 800107a:	220a      	movs	r2, #10
 800107c:	5e9b      	ldrsh	r3, [r3, r2]
 800107e:	e052      	b.n	8001126 <interpolation+0xfe>
    if (input <= pts[1].x) {
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <interpolation+0x108>)
 8001082:	2204      	movs	r2, #4
 8001084:	5e9b      	ldrsh	r3, [r3, r2]
 8001086:	1dba      	adds	r2, r7, #6
 8001088:	2100      	movs	r1, #0
 800108a:	5e52      	ldrsh	r2, [r2, r1]
 800108c:	429a      	cmp	r2, r3
 800108e:	dc25      	bgt.n	80010dc <interpolation+0xb4>
        return pts[0].y +
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <interpolation+0x108>)
 8001092:	2202      	movs	r2, #2
 8001094:	5e9b      	ldrsh	r3, [r3, r2]
 8001096:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <interpolation+0x108>)
 800109a:	2206      	movs	r2, #6
 800109c:	5e9b      	ldrsh	r3, [r3, r2]
 800109e:	001a      	movs	r2, r3
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <interpolation+0x108>)
 80010a2:	2102      	movs	r1, #2
 80010a4:	5e5b      	ldrsh	r3, [r3, r1]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	1dba      	adds	r2, r7, #6
 80010aa:	2100      	movs	r1, #0
 80010ac:	5e52      	ldrsh	r2, [r2, r1]
 80010ae:	4920      	ldr	r1, [pc, #128]	@ (8001130 <interpolation+0x108>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	5e09      	ldrsh	r1, [r1, r0]
 80010b4:	1a52      	subs	r2, r2, r1
 80010b6:	435a      	muls	r2, r3
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <interpolation+0x108>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	5e5b      	ldrsh	r3, [r3, r1]
 80010be:	0019      	movs	r1, r3
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <interpolation+0x108>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	5e1b      	ldrsh	r3, [r3, r0]
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	0019      	movs	r1, r3
 80010ca:	0010      	movs	r0, r2
 80010cc:	f7ff f8b0 	bl	8000230 <__divsi3>
 80010d0:	0003      	movs	r3, r0
        return pts[0].y +
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	18e3      	adds	r3, r4, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	e024      	b.n	8001126 <interpolation+0xfe>
    } else {

        return pts[1].y +
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <interpolation+0x108>)
 80010de:	2206      	movs	r2, #6
 80010e0:	5e9b      	ldrsh	r3, [r3, r2]
 80010e2:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <interpolation+0x108>)
 80010e6:	220a      	movs	r2, #10
 80010e8:	5e9b      	ldrsh	r3, [r3, r2]
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <interpolation+0x108>)
 80010ee:	2106      	movs	r1, #6
 80010f0:	5e5b      	ldrsh	r3, [r3, r1]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	1dba      	adds	r2, r7, #6
 80010f6:	2100      	movs	r1, #0
 80010f8:	5e52      	ldrsh	r2, [r2, r1]
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <interpolation+0x108>)
 80010fc:	2004      	movs	r0, #4
 80010fe:	5e09      	ldrsh	r1, [r1, r0]
 8001100:	1a52      	subs	r2, r2, r1
 8001102:	435a      	muls	r2, r3
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <interpolation+0x108>)
 8001106:	2108      	movs	r1, #8
 8001108:	5e5b      	ldrsh	r3, [r3, r1]
 800110a:	0019      	movs	r1, r3
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <interpolation+0x108>)
 800110e:	2004      	movs	r0, #4
 8001110:	5e1b      	ldrsh	r3, [r3, r0]
 8001112:	1acb      	subs	r3, r1, r3
 8001114:	0019      	movs	r1, r3
 8001116:	0010      	movs	r0, r2
 8001118:	f7ff f88a 	bl	8000230 <__divsi3>
 800111c:	0003      	movs	r3, r0
        return pts[1].y +
 800111e:	b29b      	uxth	r3, r3
 8001120:	18e3      	adds	r3, r4, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21b      	sxth	r3, r3
    }
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b003      	add	sp, #12
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	08006cf0 	.word	0x08006cf0

08001134 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[4];

static uint16_t filterButton(uint16_t voltIn){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001140:	230e      	movs	r3, #14
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	1dba      	adds	r2, r7, #6
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<3;i++){
 800114a:	230d      	movs	r3, #13
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e01c      	b.n	800118e <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 8001154:	200d      	movs	r0, #13
 8001156:	183b      	adds	r3, r7, r0
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <filterButton+0x84>)
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	5ad1      	ldrh	r1, [r2, r3]
 8001162:	220e      	movs	r2, #14
 8001164:	18bb      	adds	r3, r7, r2
 8001166:	18ba      	adds	r2, r7, r2
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	188a      	adds	r2, r1, r2
 800116c:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	183b      	adds	r3, r7, r0
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <filterButton+0x84>)
 800117a:	0049      	lsls	r1, r1, #1
 800117c:	5ac9      	ldrh	r1, [r1, r3]
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <filterButton+0x84>)
 8001180:	0052      	lsls	r2, r2, #1
 8001182:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<3;i++){
 8001184:	183b      	adds	r3, r7, r0
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	183b      	adds	r3, r7, r0
 800118a:	3201      	adds	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	230d      	movs	r3, #13
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d9dd      	bls.n	8001154 <filterButton+0x20>
	}
	MAVectorButton[3]=voltIn;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <filterButton+0x84>)
 800119a:	1dba      	adds	r2, r7, #6
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	80da      	strh	r2, [r3, #6]
	media/=4;
 80011a0:	210e      	movs	r1, #14
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	187a      	adds	r2, r7, r1
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	0892      	lsrs	r2, r2, #2
 80011aa:	801a      	strh	r2, [r3, #0]

	//if(media>)
	return media;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	881b      	ldrh	r3, [r3, #0]
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000510 	.word	0x20000510

080011bc <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 80011c8:	230e      	movs	r3, #14
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	1dba      	adds	r2, r7, #6
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 80011d2:	230d      	movs	r3, #13
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e01c      	b.n	8001216 <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 80011dc:	200d      	movs	r0, #13
 80011de:	183b      	adds	r3, r7, r0
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <filterVolt+0x8c>)
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	5ad1      	ldrh	r1, [r2, r3]
 80011ea:	220e      	movs	r2, #14
 80011ec:	18bb      	adds	r3, r7, r2
 80011ee:	18ba      	adds	r2, r7, r2
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	188a      	adds	r2, r1, r2
 80011f4:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	1c59      	adds	r1, r3, #1
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <filterVolt+0x8c>)
 8001202:	0049      	lsls	r1, r1, #1
 8001204:	5ac9      	ldrh	r1, [r1, r3]
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <filterVolt+0x8c>)
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 800120c:	183b      	adds	r3, r7, r0
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	183b      	adds	r3, r7, r0
 8001212:	3201      	adds	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	230d      	movs	r3, #13
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d9dd      	bls.n	80011dc <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <filterVolt+0x8c>)
 8001222:	1dba      	adds	r2, r7, #6
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001228:	250e      	movs	r5, #14
 800122a:	197c      	adds	r4, r7, r5
 800122c:	197b      	adds	r3, r7, r5
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	210a      	movs	r1, #10
 8001232:	0018      	movs	r0, r3
 8001234:	f7fe ff72 	bl	800011c <__udivsi3>
 8001238:	0003      	movs	r3, r0
 800123a:	8023      	strh	r3, [r4, #0]
	return media;
 800123c:	197b      	adds	r3, r7, r5
 800123e:	881b      	ldrh	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b004      	add	sp, #16
 8001246:	bdb0      	pop	{r4, r5, r7, pc}
 8001248:	20000518 	.word	0x20000518

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b08c      	sub	sp, #48	@ 0x30
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f001 f949 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f829 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 f965 	bl	8001528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800125e:	f000 f933 	bl	80014c8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001262:	f000 f88b 	bl	800137c <MX_ADC_Init>
  MX_SPI1_Init();
 8001266:	f000 f8f1 	bl	800144c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uint8_t nrTasks=3; //Numar taskuri
 800126a:	252f      	movs	r5, #47	@ 0x2f
 800126c:	197b      	adds	r3, r7, r5
 800126e:	2203      	movs	r2, #3
 8001270:	701a      	strb	r2, [r3, #0]
  SimpleTask tasks[] = {
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <main+0x54>)
 8001276:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001278:	c313      	stmia	r3!, {r0, r1, r4}
 800127a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800127c:	c313      	stmia	r3!, {r0, r1, r4}
 800127e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001280:	c313      	stmia	r3!, {r0, r1, r4}
    {"readAdcVoltFunction", readAdcVoltFunction, 1},
	{"displayVoltReadFunction", displayVoltReadFunction, 29},
    {"readButtonFunction",readButtonFunction,1}
  };//timpul total pana vom intra din nou intr-o functie, ex readAdcVoltFunction, e suma tuturor ms a tuturor taskurilor.

  uint32_t initTaskMaxTime=2750; //timp alocat task-ului de init OS(dupa initializarea OS-ului in sine). In ms.
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <main+0x58>)
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  OS_Init(tasks, nrTasks, init_task,initTaskMaxTime);
 8001286:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001288:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <main+0x5c>)
 800128a:	197b      	adds	r3, r7, r5
 800128c:	7819      	ldrb	r1, [r3, #0]
 800128e:	1d38      	adds	r0, r7, #4
 8001290:	0023      	movs	r3, r4
 8001292:	f001 f83f 	bl	8002314 <OS_Init>
  OS_Run();
 8001296:	f001 f861 	bl	800235c <OS_Run>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	e7fd      	b.n	800129a <main+0x4e>
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	08006228 	.word	0x08006228
 80012a4:	00000abe 	.word	0x00000abe
 80012a8:	08001685 	.word	0x08001685

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b099      	sub	sp, #100	@ 0x64
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	242c      	movs	r4, #44	@ 0x2c
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	0018      	movs	r0, r3
 80012b8:	2334      	movs	r3, #52	@ 0x34
 80012ba:	001a      	movs	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f004 faf7 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c2:	231c      	movs	r3, #28
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	0018      	movs	r0, r3
 80012c8:	2310      	movs	r3, #16
 80012ca:	001a      	movs	r2, r3
 80012cc:	2100      	movs	r1, #0
 80012ce:	f004 faef 	bl	80058b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d2:	003b      	movs	r3, r7
 80012d4:	0018      	movs	r0, r3
 80012d6:	231c      	movs	r3, #28
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f004 fae8 	bl	80058b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80012e0:	0021      	movs	r1, r4
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2212      	movs	r2, #18
 80012e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2201      	movs	r2, #1
 80012ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2201      	movs	r2, #1
 80012f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2210      	movs	r2, #16
 80012f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2210      	movs	r2, #16
 80012fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2202      	movs	r2, #2
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	22a0      	movs	r2, #160	@ 0xa0
 8001312:	0392      	lsls	r2, r2, #14
 8001314:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2201      	movs	r2, #1
 800131a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	187b      	adds	r3, r7, r1
 800131e:	0018      	movs	r0, r3
 8001320:	f002 f842 	bl	80033a8 <HAL_RCC_OscConfig>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001328:	f000 ffee 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	211c      	movs	r1, #28
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2202      	movs	r2, #2
 8001338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2101      	movs	r1, #1
 800134a:	0018      	movs	r0, r3
 800134c:	f002 fbb2 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001354:	f000 ffd8 	bl	8002308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001358:	003b      	movs	r3, r7
 800135a:	2202      	movs	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800135e:	003b      	movs	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	003b      	movs	r3, r7
 8001366:	0018      	movs	r0, r3
 8001368:	f002 fd3a 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001370:	f000 ffca 	bl	8002308 <Error_Handler>
  }
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b019      	add	sp, #100	@ 0x64
 800137a:	bd90      	pop	{r4, r7, pc}

0800137c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	0018      	movs	r0, r3
 8001386:	230c      	movs	r3, #12
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f004 fa90 	bl	80058b0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001390:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_ADC_Init+0xc8>)
 8001392:	4a2d      	ldr	r2, [pc, #180]	@ (8001448 <MX_ADC_Init+0xcc>)
 8001394:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <MX_ADC_Init+0xc8>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800139c:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <MX_ADC_Init+0xc8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013a8:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ae:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013ce:	22c2      	movs	r2, #194	@ 0xc2
 80013d0:	32ff      	adds	r2, #255	@ 0xff
 80013d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013dc:	2224      	movs	r2, #36	@ 0x24
 80013de:	2100      	movs	r1, #0
 80013e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_ADC_Init+0xc8>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 f8d0 	bl	8002590 <HAL_ADC_Init>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 ff88 	bl	8002308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2280      	movs	r2, #128	@ 0x80
 8001402:	0152      	lsls	r2, r2, #5
 8001404:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2207      	movs	r2, #7
 800140a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <MX_ADC_Init+0xc8>)
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fb34 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800141c:	f000 ff74 	bl	8002308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001426:	1d3a      	adds	r2, r7, #4
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_ADC_Init+0xc8>)
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f001 fb27 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001436:	f000 ff67 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	2000052c 	.word	0x2000052c
 8001448:	40012400 	.word	0x40012400

0800144c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MX_SPI1_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001458:	2282      	movs	r2, #130	@ 0x82
 800145a:	0052      	lsls	r2, r2, #1
 800145c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001466:	22e0      	movs	r2, #224	@ 0xe0
 8001468:	00d2      	lsls	r2, r2, #3
 800146a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_SPI1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_SPI1_Init+0x74>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001482:	2218      	movs	r2, #24
 8001484:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_SPI1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_SPI1_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_SPI1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_SPI1_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <MX_SPI1_Init+0x74>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f002 fd97 	bl	8003fe0 <HAL_SPI_Init>
 80014b2:	1e03      	subs	r3, r0, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 ff27 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000056c 	.word	0x2000056c
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <MX_USART2_UART_Init+0x5c>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014d4:	22e1      	movs	r2, #225	@ 0xe1
 80014d6:	0252      	lsls	r2, r2, #9
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150a:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <MX_USART2_UART_Init+0x58>)
 800150c:	0018      	movs	r0, r3
 800150e:	f003 fb4b 	bl	8004ba8 <HAL_UART_Init>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001516:	f000 fef7 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200005d0 	.word	0x200005d0
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b08b      	sub	sp, #44	@ 0x2c
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	2414      	movs	r4, #20
 8001530:	193b      	adds	r3, r7, r4
 8001532:	0018      	movs	r0, r3
 8001534:	2314      	movs	r3, #20
 8001536:	001a      	movs	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	f004 f9b9 	bl	80058b0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	4b4d      	ldr	r3, [pc, #308]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	0309      	lsls	r1, r1, #12
 8001548:	430a      	orrs	r2, r1
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <MX_GPIO_Init+0x150>)
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	031b      	lsls	r3, r3, #12
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b47      	ldr	r3, [pc, #284]	@ (8001678 <MX_GPIO_Init+0x150>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	03c9      	lsls	r1, r1, #15
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b43      	ldr	r3, [pc, #268]	@ (8001678 <MX_GPIO_Init+0x150>)
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	03db      	lsls	r3, r3, #15
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b40      	ldr	r3, [pc, #256]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <MX_GPIO_Init+0x150>)
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0289      	lsls	r1, r1, #10
 8001580:	430a      	orrs	r2, r1
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <MX_GPIO_Init+0x150>)
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	02c9      	lsls	r1, r1, #11
 800159c:	430a      	orrs	r2, r1
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <MX_GPIO_Init+0x150>)
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	4013      	ands	r3, r2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 80015ae:	4b33      	ldr	r3, [pc, #204]	@ (800167c <MX_GPIO_Init+0x154>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 fed9 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	0099      	lsls	r1, r3, #2
 80015be:	2390      	movs	r3, #144	@ 0x90
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	2200      	movs	r2, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 fed1 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <MX_GPIO_Init+0x158>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	0018      	movs	r0, r3
 80015d2:	f001 fecb 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	0192      	lsls	r2, r2, #6
 80015dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	2284      	movs	r2, #132	@ 0x84
 80015e2:	0392      	lsls	r2, r2, #14
 80015e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_GPIO_Init+0x154>)
 80015f0:	0019      	movs	r1, r3
 80015f2:	0010      	movs	r0, r2
 80015f4:	f001 fd42 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	2201      	movs	r2, #1
 8001602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	193b      	adds	r3, r7, r4
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8001610:	193b      	adds	r3, r7, r4
 8001612:	4a1a      	ldr	r2, [pc, #104]	@ (800167c <MX_GPIO_Init+0x154>)
 8001614:	0019      	movs	r1, r3
 8001616:	0010      	movs	r0, r2
 8001618:	f001 fd30 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 800161c:	0021      	movs	r1, r4
 800161e:	187b      	adds	r3, r7, r1
 8001620:	22c0      	movs	r2, #192	@ 0xc0
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	000c      	movs	r4, r1
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2201      	movs	r2, #1
 800162c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	193a      	adds	r2, r7, r4
 800163c:	2390      	movs	r3, #144	@ 0x90
 800163e:	05db      	lsls	r3, r3, #23
 8001640:	0011      	movs	r1, r2
 8001642:	0018      	movs	r0, r3
 8001644:	f001 fd1a 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8001648:	0021      	movs	r1, r4
 800164a:	187b      	adds	r3, r7, r1
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2201      	movs	r2, #1
 8001654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8001662:	187b      	adds	r3, r7, r1
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <MX_GPIO_Init+0x158>)
 8001666:	0019      	movs	r1, r3
 8001668:	0010      	movs	r0, r2
 800166a:	f001 fd07 	bl	800307c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b00b      	add	sp, #44	@ 0x2c
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40021000 	.word	0x40021000
 800167c:	48000800 	.word	0x48000800
 8001680:	48000400 	.word	0x48000400

08001684 <init_task>:

/* USER CODE BEGIN 4 */
// Facem OS custom aici, avem un init task dupa care vin celalalte.
void init_task(void) {
 8001684:	b5b0      	push	{r4, r5, r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af02      	add	r7, sp, #8
    test = 42;
 800168a:	4bba      	ldr	r3, [pc, #744]	@ (8001974 <init_task+0x2f0>)
 800168c:	222a      	movs	r2, #42	@ 0x2a
 800168e:	701a      	strb	r2, [r3, #0]
    st7565_init();
 8001690:	f7ff f90c 	bl	80008ac <st7565_init>
      			  st7565_backlight_enable();
 8001694:	f7ff f9b8 	bl	8000a08 <st7565_backlight_enable>
      			  st7565_clear_screen();
 8001698:	f7ff f9e8 	bl	8000a6c <st7565_clear_screen>
      			st7565_set_brightness(0);
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff f9c1 	bl	8000a24 <st7565_set_brightness>
      			//osDelay(1000);

      			//st7565_fade_in(10);


      			  st7565_clear_buffer(buffer);
 80016a2:	4bb5      	ldr	r3, [pc, #724]	@ (8001978 <init_task+0x2f4>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fa3d 	bl	8000b24 <st7565_clear_buffer>

      			    			  //Animatie jmekera de startup

      			  uint8_t spacingx=126/10; //Cat de distantate sunt liniile in animatie x
 80016aa:	230b      	movs	r3, #11
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	220c      	movs	r2, #12
 80016b0:	701a      	strb	r2, [r3, #0]
      			  uint8_t spacingy=63/6;
 80016b2:	230a      	movs	r3, #10
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	220a      	movs	r2, #10
 80016b8:	701a      	strb	r2, [r3, #0]
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 80016ba:	231e      	movs	r3, #30
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	e0b7      	b.n	8001834 <init_task+0x1b0>
      				  //spacing=5+i/10;
      				  if(i%4==0)st7565_set_brightness(i/4);
 80016c4:	211e      	movs	r1, #30
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2203      	movs	r2, #3
 80016cc:	4013      	ands	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <init_task+0x60>
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff f9a0 	bl	8000a24 <st7565_set_brightness>
      				  uint16_t j=i/2;
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	221e      	movs	r2, #30
 80016e8:	18ba      	adds	r2, r7, r2
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	0852      	lsrs	r2, r2, #1
 80016ee:	801a      	strh	r2, [r3, #0]
      				  st7565_clear_buffer(buffer);
 80016f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001978 <init_task+0x2f4>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff fa16 	bl	8000b24 <st7565_clear_buffer>
      				  //Linie de la i,j la marginea dreapta
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80016f8:	231c      	movs	r3, #28
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	e01a      	b.n	8001738 <init_task+0xb4>
      					st7565_drawline(buffer,i,j,126,j2,1);
 8001702:	231e      	movs	r3, #30
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b2d9      	uxtb	r1, r3
 800170a:	1dbb      	adds	r3, r7, #6
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	251c      	movs	r5, #28
 8001712:	197b      	adds	r3, r7, r5
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4897      	ldr	r0, [pc, #604]	@ (8001978 <init_task+0x2f4>)
 800171a:	2401      	movs	r4, #1
 800171c:	9401      	str	r4, [sp, #4]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	237e      	movs	r3, #126	@ 0x7e
 8001722:	f7ff fb27 	bl	8000d74 <st7565_drawline>
      				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b299      	uxth	r1, r3
 800172e:	197b      	adds	r3, r7, r5
 8001730:	197a      	adds	r2, r7, r5
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	188a      	adds	r2, r1, r2
 8001736:	801a      	strh	r2, [r3, #0]
 8001738:	231c      	movs	r3, #28
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001740:	d9df      	bls.n	8001702 <init_task+0x7e>
      				  }
      				//Linie de la i,j la marginea stanga
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001742:	231a      	movs	r3, #26
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	e01a      	b.n	8001782 <init_task+0xfe>
      				  					st7565_drawline(buffer,i,j,0,j2,1);
 800174c:	231e      	movs	r3, #30
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b2d9      	uxtb	r1, r3
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	251a      	movs	r5, #26
 800175c:	197b      	adds	r3, r7, r5
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4885      	ldr	r0, [pc, #532]	@ (8001978 <init_task+0x2f4>)
 8001764:	2401      	movs	r4, #1
 8001766:	9401      	str	r4, [sp, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	f7ff fb02 	bl	8000d74 <st7565_drawline>
      				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001770:	230a      	movs	r3, #10
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b299      	uxth	r1, r3
 8001778:	197b      	adds	r3, r7, r5
 800177a:	197a      	adds	r2, r7, r5
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	188a      	adds	r2, r1, r2
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	231a      	movs	r3, #26
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2b3f      	cmp	r3, #63	@ 0x3f
 800178a:	d9df      	bls.n	800174c <init_task+0xc8>
      				  				  }

      				  //Linie de la i,j la margine jos
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800178c:	2318      	movs	r3, #24
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	e01a      	b.n	80017cc <init_task+0x148>
      				  		st7565_drawline(buffer,i,j,i2,63,1);
 8001796:	231e      	movs	r3, #30
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b2d9      	uxtb	r1, r3
 800179e:	1dbb      	adds	r3, r7, #6
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	2518      	movs	r5, #24
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4872      	ldr	r0, [pc, #456]	@ (8001978 <init_task+0x2f4>)
 80017ae:	2401      	movs	r4, #1
 80017b0:	9401      	str	r4, [sp, #4]
 80017b2:	243f      	movs	r4, #63	@ 0x3f
 80017b4:	9400      	str	r4, [sp, #0]
 80017b6:	f7ff fadd 	bl	8000d74 <st7565_drawline>
      				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80017ba:	230b      	movs	r3, #11
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b299      	uxth	r1, r3
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	197a      	adds	r2, r7, r5
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	188a      	adds	r2, r1, r2
 80017ca:	801a      	strh	r2, [r3, #0]
 80017cc:	2318      	movs	r3, #24
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80017d4:	d9df      	bls.n	8001796 <init_task+0x112>
      				  				  }
      				//Linie de la i,j la margine sus
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80017d6:	2316      	movs	r3, #22
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	e01a      	b.n	8001816 <init_task+0x192>
      				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 80017e0:	231e      	movs	r3, #30
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	2516      	movs	r5, #22
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4860      	ldr	r0, [pc, #384]	@ (8001978 <init_task+0x2f4>)
 80017f8:	2401      	movs	r4, #1
 80017fa:	9401      	str	r4, [sp, #4]
 80017fc:	2400      	movs	r4, #0
 80017fe:	9400      	str	r4, [sp, #0]
 8001800:	f7ff fab8 	bl	8000d74 <st7565_drawline>
      				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 8001804:	230b      	movs	r3, #11
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	197b      	adds	r3, r7, r5
 800180e:	197a      	adds	r2, r7, r5
 8001810:	8812      	ldrh	r2, [r2, #0]
 8001812:	188a      	adds	r2, r1, r2
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	2316      	movs	r3, #22
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b7e      	cmp	r3, #126	@ 0x7e
 800181e:	d9df      	bls.n	80017e0 <init_task+0x15c>
      				  				  }

      				//deseneaza frame
      				st7565_write_buffer(buffer);
 8001820:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <init_task+0x2f4>)
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe ffc0 	bl	80007a8 <st7565_write_buffer>
      			  for(uint16_t i=0;i<=63;i+=2){//i,j stanga sus->centru
 8001828:	221e      	movs	r2, #30
 800182a:	18bb      	adds	r3, r7, r2
 800182c:	18ba      	adds	r2, r7, r2
 800182e:	8812      	ldrh	r2, [r2, #0]
 8001830:	3202      	adds	r2, #2
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	231e      	movs	r3, #30
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2b3f      	cmp	r3, #63	@ 0x3f
 800183c:	d800      	bhi.n	8001840 <init_task+0x1bc>
 800183e:	e741      	b.n	80016c4 <init_task+0x40>
    				//HAL_Delay(50);

      				//osDelay(2);

      			  }
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 8001840:	2314      	movs	r3, #20
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	e0c3      	b.n	80019d2 <init_task+0x34e>
      				//spacing=11-(i-64)/10;
      				if(i%4==0)st7565_set_brightness((126-i)/4);
 800184a:	2114      	movs	r1, #20
 800184c:	187b      	adds	r3, r7, r1
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <init_task+0x1ec>
 800185a:	187b      	adds	r3, r7, r1
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	227e      	movs	r2, #126	@ 0x7e
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	d500      	bpl.n	8001866 <init_task+0x1e2>
 8001864:	3303      	adds	r3, #3
 8001866:	109b      	asrs	r3, r3, #2
 8001868:	b2db      	uxtb	r3, r3
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff f8da 	bl	8000a24 <st7565_set_brightness>
      			  				  uint16_t j=i/2;
 8001870:	2308      	movs	r3, #8
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	2214      	movs	r2, #20
 8001876:	18ba      	adds	r2, r7, r2
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	0852      	lsrs	r2, r2, #1
 800187c:	801a      	strh	r2, [r3, #0]
      			  				  st7565_clear_buffer(buffer);
 800187e:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <init_task+0x2f4>)
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff f94f 	bl	8000b24 <st7565_clear_buffer>
      			  				//Linie de la i,j la marginea dreapta
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001886:	2312      	movs	r3, #18
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	2200      	movs	r2, #0
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	e01b      	b.n	80018c8 <init_task+0x244>
      			  				  					st7565_drawline(buffer,i,j,126,j2,1);
 8001890:	2314      	movs	r3, #20
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	2308      	movs	r3, #8
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	2512      	movs	r5, #18
 80018a2:	197b      	adds	r3, r7, r5
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4833      	ldr	r0, [pc, #204]	@ (8001978 <init_task+0x2f4>)
 80018aa:	2401      	movs	r4, #1
 80018ac:	9401      	str	r4, [sp, #4]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	237e      	movs	r3, #126	@ 0x7e
 80018b2:	f7ff fa5f 	bl	8000d74 <st7565_drawline>
      			  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80018b6:	230a      	movs	r3, #10
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b299      	uxth	r1, r3
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	197a      	adds	r2, r7, r5
 80018c2:	8812      	ldrh	r2, [r2, #0]
 80018c4:	188a      	adds	r2, r1, r2
 80018c6:	801a      	strh	r2, [r3, #0]
 80018c8:	2312      	movs	r3, #18
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80018d0:	d9de      	bls.n	8001890 <init_task+0x20c>
      			  				  				  }
      			  				  				//Linie de la i,j la marginea stanga
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 80018d2:	2310      	movs	r3, #16
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2200      	movs	r2, #0
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	e01b      	b.n	8001914 <init_task+0x290>
      			  				  				  					st7565_drawline(buffer,i,j,0,j2,1);
 80018dc:	2314      	movs	r3, #20
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b2d9      	uxtb	r1, r3
 80018e4:	2308      	movs	r3, #8
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	2510      	movs	r5, #16
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4820      	ldr	r0, [pc, #128]	@ (8001978 <init_task+0x2f4>)
 80018f6:	2401      	movs	r4, #1
 80018f8:	9401      	str	r4, [sp, #4]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	f7ff fa39 	bl	8000d74 <st7565_drawline>
      			  				  				  				  for(uint16_t j2=0;j2<=63;j2+=spacingy){
 8001902:	230a      	movs	r3, #10
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b299      	uxth	r1, r3
 800190a:	197b      	adds	r3, r7, r5
 800190c:	197a      	adds	r2, r7, r5
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	188a      	adds	r2, r1, r2
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	2310      	movs	r3, #16
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2b3f      	cmp	r3, #63	@ 0x3f
 800191c:	d9de      	bls.n	80018dc <init_task+0x258>
      			  				  				  				  }

      			  				  				  //Linie de la i,j la margine jos
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800191e:	230e      	movs	r3, #14
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	e01b      	b.n	8001960 <init_task+0x2dc>
      			  				  				  		st7565_drawline(buffer,i,j,i2,63,1);
 8001928:	2314      	movs	r3, #20
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b2d9      	uxtb	r1, r3
 8001930:	2308      	movs	r3, #8
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	250e      	movs	r5, #14
 800193a:	197b      	adds	r3, r7, r5
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	480d      	ldr	r0, [pc, #52]	@ (8001978 <init_task+0x2f4>)
 8001942:	2401      	movs	r4, #1
 8001944:	9401      	str	r4, [sp, #4]
 8001946:	243f      	movs	r4, #63	@ 0x3f
 8001948:	9400      	str	r4, [sp, #0]
 800194a:	f7ff fa13 	bl	8000d74 <st7565_drawline>
      			  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800194e:	230b      	movs	r3, #11
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b299      	uxth	r1, r3
 8001956:	197b      	adds	r3, r7, r5
 8001958:	197a      	adds	r2, r7, r5
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	188a      	adds	r2, r1, r2
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	230e      	movs	r3, #14
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b7e      	cmp	r3, #126	@ 0x7e
 8001968:	d9de      	bls.n	8001928 <init_task+0x2a4>
      			  				  				  }
      			  				  				//Linie de la i,j la margine sus
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 800196a:	230c      	movs	r3, #12
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e01f      	b.n	80019b4 <init_task+0x330>
 8001974:	20000658 	.word	0x20000658
 8001978:	2000000c 	.word	0x2000000c
      			  				  				  				  		st7565_drawline(buffer,i,j,i2,0,1);
 800197c:	2314      	movs	r3, #20
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b2d9      	uxtb	r1, r3
 8001984:	2308      	movs	r3, #8
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	250c      	movs	r5, #12
 800198e:	197b      	adds	r3, r7, r5
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4815      	ldr	r0, [pc, #84]	@ (80019ec <init_task+0x368>)
 8001996:	2401      	movs	r4, #1
 8001998:	9401      	str	r4, [sp, #4]
 800199a:	2400      	movs	r4, #0
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	f7ff f9e9 	bl	8000d74 <st7565_drawline>
      			  				  				  				  for(uint16_t i2=0;i2<=126;i2+=spacingx){
 80019a2:	230b      	movs	r3, #11
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b299      	uxth	r1, r3
 80019aa:	197b      	adds	r3, r7, r5
 80019ac:	197a      	adds	r2, r7, r5
 80019ae:	8812      	ldrh	r2, [r2, #0]
 80019b0:	188a      	adds	r2, r1, r2
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	230c      	movs	r3, #12
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80019bc:	d9de      	bls.n	800197c <init_task+0x2f8>
      			  				  				  				  }

      			  				//deseneaza frame
      			  				st7565_write_buffer(buffer);
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <init_task+0x368>)
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7fe fef1 	bl	80007a8 <st7565_write_buffer>
      			for(uint16_t i=64;i<=126;i+=2){//i,j centru->dreapta jos
 80019c6:	2214      	movs	r2, #20
 80019c8:	18bb      	adds	r3, r7, r2
 80019ca:	18ba      	adds	r2, r7, r2
 80019cc:	8812      	ldrh	r2, [r2, #0]
 80019ce:	3202      	adds	r2, #2
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	2314      	movs	r3, #20
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80019da:	d800      	bhi.n	80019de <init_task+0x35a>
 80019dc:	e735      	b.n	800184a <init_task+0x1c6>


      			  //HAL_ReadPin
      			  //Trimitem comanda sa desenam

      			st7565_set_brightness(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff f820 	bl	8000a24 <st7565_set_brightness>
  }
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b008      	add	sp, #32
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <readAdcVoltFunction+0x68>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
	      HAL_ADC_Start(&hadc);
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <readAdcVoltFunction+0x68>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 ff06 	bl	8002810 <HAL_ADC_Start>
	      if(HAL_ADC_PollForConversion(&hadc, 30)==HAL_OK)
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <readAdcVoltFunction+0x68>)
 8001a06:	211e      	movs	r1, #30
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 ff95 	bl	8002938 <HAL_ADC_PollForConversion>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d108      	bne.n	8001a24 <readAdcVoltFunction+0x34>
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <readAdcVoltFunction+0x68>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 f827 	bl	8002a68 <HAL_ADC_GetValue>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <readAdcVoltFunction+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	e002      	b.n	8001a2a <readAdcVoltFunction+0x3a>
	      else voltReadRaw=0;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <readAdcVoltFunction+0x6c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]

	      HAL_ADC_Stop(&hadc);
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <readAdcVoltFunction+0x68>)
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 ff43 	bl	80028b8 <HAL_ADC_Stop>

	      voltRead = filterVolt(interpolation(voltReadRaw));
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <readAdcVoltFunction+0x6c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff faf5 	bl	8001028 <interpolation>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff fbba 	bl	80011bc <filterVolt>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <readAdcVoltFunction+0x70>)
 8001a4e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 5 */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	2000052c 	.word	0x2000052c
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	200004d0 	.word	0x200004d0

08001a64 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void)
{
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	b0b5      	sub	sp, #212	@ 0xd4
 8001a68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN displayVoltReadFunction */
  /* Infinite loop */

	  //st7565_fillrect(buffer,10,10,10,10,1);
	  if(displayMode==0){
 8001a6a:	4bb9      	ldr	r3, [pc, #740]	@ (8001d50 <displayVoltReadFunction+0x2ec>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d15d      	bne.n	8001b2e <displayVoltReadFunction+0xca>
	  st7565_clear_buffer(buffer);
 8001a72:	4bb8      	ldr	r3, [pc, #736]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff f855 	bl	8000b24 <st7565_clear_buffer>
	  st7565_drawstring(buffer,0,0,"Volt:",fontMode);
 8001a7a:	4bb7      	ldr	r3, [pc, #732]	@ (8001d58 <displayVoltReadFunction+0x2f4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8001d5c <displayVoltReadFunction+0x2f8>)
 8001a80:	48b4      	ldr	r0, [pc, #720]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	0013      	movs	r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f7ff f8c5 	bl	8000c18 <st7565_drawstring>
	    			char volt[100];
	    			itoa(voltRead,volt,10);
 8001a8e:	4bb4      	ldr	r3, [pc, #720]	@ (8001d60 <displayVoltReadFunction+0x2fc>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	0018      	movs	r0, r3
 8001a94:	003b      	movs	r3, r7
 8001a96:	220a      	movs	r2, #10
 8001a98:	0019      	movs	r1, r3
 8001a9a:	f003 feaf 	bl	80057fc <itoa>
	    			if(voltRead<10){
 8001a9e:	4bb0      	ldr	r3, [pc, #704]	@ (8001d60 <displayVoltReadFunction+0x2fc>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d810      	bhi.n	8001ac8 <displayVoltReadFunction+0x64>
	    				volt[4]='\0';
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[0];
 8001aac:	003b      	movs	r3, r7
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	003b      	movs	r3, r7
 8001ab2:	70da      	strb	r2, [r3, #3]
	    				volt[2]='0';
 8001ab4:	003b      	movs	r3, r7
 8001ab6:	2230      	movs	r2, #48	@ 0x30
 8001ab8:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001aba:	003b      	movs	r3, r7
 8001abc:	222e      	movs	r2, #46	@ 0x2e
 8001abe:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001ac0:	003b      	movs	r3, r7
 8001ac2:	2230      	movs	r2, #48	@ 0x30
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e027      	b.n	8001b18 <displayVoltReadFunction+0xb4>
	    			}
	    			else if(voltRead>=10&&voltRead<100){
 8001ac8:	4ba5      	ldr	r3, [pc, #660]	@ (8001d60 <displayVoltReadFunction+0x2fc>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d915      	bls.n	8001afc <displayVoltReadFunction+0x98>
 8001ad0:	4ba3      	ldr	r3, [pc, #652]	@ (8001d60 <displayVoltReadFunction+0x2fc>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b63      	cmp	r3, #99	@ 0x63
 8001ad6:	d811      	bhi.n	8001afc <displayVoltReadFunction+0x98>
	    				volt[4]='\0';
 8001ad8:	003b      	movs	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[1];
 8001ade:	003b      	movs	r3, r7
 8001ae0:	785a      	ldrb	r2, [r3, #1]
 8001ae2:	003b      	movs	r3, r7
 8001ae4:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[0];
 8001ae6:	003b      	movs	r3, r7
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	003b      	movs	r3, r7
 8001aec:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001aee:	003b      	movs	r3, r7
 8001af0:	222e      	movs	r2, #46	@ 0x2e
 8001af2:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001af4:	003b      	movs	r3, r7
 8001af6:	2230      	movs	r2, #48	@ 0x30
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e00d      	b.n	8001b18 <displayVoltReadFunction+0xb4>
	    			}
	    			else{
	    				volt[4]='\0';
 8001afc:	003b      	movs	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[2];
 8001b02:	003b      	movs	r3, r7
 8001b04:	789a      	ldrb	r2, [r3, #2]
 8001b06:	003b      	movs	r3, r7
 8001b08:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[1];
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	785a      	ldrb	r2, [r3, #1]
 8001b0e:	003b      	movs	r3, r7
 8001b10:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001b12:	003b      	movs	r3, r7
 8001b14:	222e      	movs	r2, #46	@ 0x2e
 8001b16:	705a      	strb	r2, [r3, #1]
	    				//volt[0]=volt[0];
	    			}
	    			st7565_drawstring(buffer,0,1,volt,fontMode);
 8001b18:	4b8f      	ldr	r3, [pc, #572]	@ (8001d58 <displayVoltReadFunction+0x2f4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	003a      	movs	r2, r7
 8001b1e:	488d      	ldr	r0, [pc, #564]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	0013      	movs	r3, r2
 8001b24:	2201      	movs	r2, #1
 8001b26:	2100      	movs	r1, #0
 8001b28:	f7ff f876 	bl	8000c18 <st7565_drawstring>
 8001b2c:	e1d1      	b.n	8001ed2 <displayVoltReadFunction+0x46e>

	  }

	  else if(displayMode==1){
 8001b2e:	4b88      	ldr	r3, [pc, #544]	@ (8001d50 <displayVoltReadFunction+0x2ec>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d000      	beq.n	8001b38 <displayVoltReadFunction+0xd4>
 8001b36:	e1ba      	b.n	8001eae <displayVoltReadFunction+0x44a>
      st7565_clear_buffer(buffer);
 8001b38:	4b86      	ldr	r3, [pc, #536]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fff2 	bl	8000b24 <st7565_clear_buffer>
      st7565_drawstring(buffer,30,2,"Volt Range",fontMode);
 8001b40:	4b85      	ldr	r3, [pc, #532]	@ (8001d58 <displayVoltReadFunction+0x2f4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4a87      	ldr	r2, [pc, #540]	@ (8001d64 <displayVoltReadFunction+0x300>)
 8001b46:	4883      	ldr	r0, [pc, #524]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	211e      	movs	r1, #30
 8001b50:	f7ff f862 	bl	8000c18 <st7565_drawstring>
      int bar_x0 = 5;
 8001b54:	2305      	movs	r3, #5
 8001b56:	22b4      	movs	r2, #180	@ 0xb4
 8001b58:	18b9      	adds	r1, r7, r2
 8001b5a:	600b      	str	r3, [r1, #0]
      int bar_x1 = 121;
 8001b5c:	2379      	movs	r3, #121	@ 0x79
 8001b5e:	20b0      	movs	r0, #176	@ 0xb0
 8001b60:	1839      	adds	r1, r7, r0
 8001b62:	600b      	str	r3, [r1, #0]
      int bar_y0 = 30;
 8001b64:	231e      	movs	r3, #30
 8001b66:	24ac      	movs	r4, #172	@ 0xac
 8001b68:	1939      	adds	r1, r7, r4
 8001b6a:	600b      	str	r3, [r1, #0]
      int bar_y1 = 37;
 8001b6c:	2325      	movs	r3, #37	@ 0x25
 8001b6e:	26a8      	movs	r6, #168	@ 0xa8
 8001b70:	19b9      	adds	r1, r7, r6
 8001b72:	600b      	str	r3, [r1, #0]
      int squares = 10;
 8001b74:	230a      	movs	r3, #10
 8001b76:	21a4      	movs	r1, #164	@ 0xa4
 8001b78:	187d      	adds	r5, r7, r1
 8001b7a:	602b      	str	r3, [r5, #0]
      int inner_x0 = bar_x0 + 1;
 8001b7c:	18bb      	adds	r3, r7, r2
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	25a0      	movs	r5, #160	@ 0xa0
 8001b84:	197a      	adds	r2, r7, r5
 8001b86:	6013      	str	r3, [r2, #0]
      int inner_x1 = bar_x1 - 1;
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	229c      	movs	r2, #156	@ 0x9c
 8001b90:	18b8      	adds	r0, r7, r2
 8001b92:	6003      	str	r3, [r0, #0]
      int inner_y0 = bar_y0 + 1;
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	2098      	movs	r0, #152	@ 0x98
 8001b9c:	1838      	adds	r0, r7, r0
 8001b9e:	6003      	str	r3, [r0, #0]
      int inner_y1 = bar_y1 - 1;
 8001ba0:	19bb      	adds	r3, r7, r6
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	2094      	movs	r0, #148	@ 0x94
 8001ba8:	1838      	adds	r0, r7, r0
 8001baa:	6003      	str	r3, [r0, #0]
      int inner_width = inner_x1 - inner_x0 + 1;
 8001bac:	18bb      	adds	r3, r7, r2
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2690      	movs	r6, #144	@ 0x90
 8001bba:	19ba      	adds	r2, r7, r6
 8001bbc:	6013      	str	r3, [r2, #0]
      int square_width = inner_width / squares;
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	19bb      	adds	r3, r7, r6
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f7fe fb32 	bl	8000230 <__divsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	228c      	movs	r2, #140	@ 0x8c
 8001bd0:	18b9      	adds	r1, r7, r2
 8001bd2:	600b      	str	r3, [r1, #0]
      int remainder = inner_width - square_width * squares;
 8001bd4:	18bb      	adds	r3, r7, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0021      	movs	r1, r4
 8001bda:	187a      	adds	r2, r7, r1
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4353      	muls	r3, r2
 8001be0:	19ba      	adds	r2, r7, r6
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2288      	movs	r2, #136	@ 0x88
 8001be8:	18ba      	adds	r2, r7, r2
 8001bea:	6013      	str	r3, [r2, #0]
      int volt_step = 330 / squares;
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	23a5      	movs	r3, #165	@ 0xa5
 8001bf2:	0058      	lsls	r0, r3, #1
 8001bf4:	f7fe fb1c 	bl	8000230 <__divsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	2284      	movs	r2, #132	@ 0x84
 8001bfc:	18ba      	adds	r2, r7, r2
 8001bfe:	6013      	str	r3, [r2, #0]
      int x = inner_x0;
 8001c00:	197b      	adds	r3, r7, r5
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	22c4      	movs	r2, #196	@ 0xc4
 8001c06:	18ba      	adds	r2, r7, r2
 8001c08:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	22c0      	movs	r2, #192	@ 0xc0
 8001c0e:	18ba      	adds	r2, r7, r2
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e050      	b.n	8001cb6 <displayVoltReadFunction+0x252>
          int w = square_width + (i < remainder ? 1 : 0);
 8001c14:	2301      	movs	r3, #1
 8001c16:	1c19      	adds	r1, r3, #0
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2388      	movs	r3, #136	@ 0x88
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	db01      	blt.n	8001c2c <displayVoltReadFunction+0x1c8>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	1c19      	adds	r1, r3, #0
 8001c2c:	b2cb      	uxtb	r3, r1
 8001c2e:	001a      	movs	r2, r3
 8001c30:	238c      	movs	r3, #140	@ 0x8c
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	2080      	movs	r0, #128	@ 0x80
 8001c3a:	183a      	adds	r2, r7, r0
 8001c3c:	6013      	str	r3, [r2, #0]
          int threshold = (i + 1) * volt_step;
 8001c3e:	23c0      	movs	r3, #192	@ 0xc0
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	2384      	movs	r3, #132	@ 0x84
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4353      	muls	r3, r2
 8001c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
          if(voltRead >= threshold) {
 8001c50:	4b43      	ldr	r3, [pc, #268]	@ (8001d60 <displayVoltReadFunction+0x2fc>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	001a      	movs	r2, r3
 8001c56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	dc1d      	bgt.n	8001c98 <displayVoltReadFunction+0x234>
              st7565_fillrect(buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 8001c5c:	23c4      	movs	r3, #196	@ 0xc4
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b2d9      	uxtb	r1, r3
 8001c64:	2698      	movs	r6, #152	@ 0x98
 8001c66:	19bb      	adds	r3, r7, r6
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2dc      	uxtb	r4, r3
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b2dd      	uxtb	r5, r3
 8001c72:	2394      	movs	r3, #148	@ 0x94
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	19bb      	adds	r3, r7, r6
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4832      	ldr	r0, [pc, #200]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	9201      	str	r2, [sp, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	002b      	movs	r3, r5
 8001c92:	0022      	movs	r2, r4
 8001c94:	f7ff f979 	bl	8000f8a <st7565_fillrect>
          }
          x += w;
 8001c98:	21c4      	movs	r1, #196	@ 0xc4
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	18d3      	adds	r3, r2, r3
 8001ca6:	187a      	adds	r2, r7, r1
 8001ca8:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001caa:	22c0      	movs	r2, #192	@ 0xc0
 8001cac:	18bb      	adds	r3, r7, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	18ba      	adds	r2, r7, r2
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	23c0      	movs	r3, #192	@ 0xc0
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	23a4      	movs	r3, #164	@ 0xa4
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dba6      	blt.n	8001c14 <displayVoltReadFunction+0x1b0>
      }
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001cc6:	23b4      	movs	r3, #180	@ 0xb4
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	22bc      	movs	r2, #188	@ 0xbc
 8001cd0:	18ba      	adds	r2, r7, r2
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e02c      	b.n	8001d30 <displayVoltReadFunction+0x2cc>
          if(px != bar_x0 + 1 && px != bar_x1 - 1) {
 8001cd6:	23b4      	movs	r3, #180	@ 0xb4
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	24bc      	movs	r4, #188	@ 0xbc
 8001ce0:	193a      	adds	r2, r7, r4
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d01d      	beq.n	8001d24 <displayVoltReadFunction+0x2c0>
 8001ce8:	23b0      	movs	r3, #176	@ 0xb0
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	193a      	adds	r2, r7, r4
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d015      	beq.n	8001d24 <displayVoltReadFunction+0x2c0>
              st7565_setpixel(buffer, px, bar_y0, 1);
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	23ac      	movs	r3, #172	@ 0xac
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f7fe ff1a 	bl	8000b42 <st7565_setpixel>
              st7565_setpixel(buffer, px, bar_y1, 1);
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	23a8      	movs	r3, #168	@ 0xa8
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <displayVoltReadFunction+0x2f0>)
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f7fe ff0f 	bl	8000b42 <st7565_setpixel>
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001d24:	22bc      	movs	r2, #188	@ 0xbc
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	18ba      	adds	r2, r7, r2
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	23bc      	movs	r3, #188	@ 0xbc
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	23b0      	movs	r3, #176	@ 0xb0
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbca      	blt.n	8001cd6 <displayVoltReadFunction+0x272>
          }
      }
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001d40:	23ac      	movs	r3, #172	@ 0xac
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	22b8      	movs	r2, #184	@ 0xb8
 8001d4a:	18ba      	adds	r2, r7, r2
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e038      	b.n	8001dc2 <displayVoltReadFunction+0x35e>
 8001d50:	20000008 	.word	0x20000008
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	200004d8 	.word	0x200004d8
 8001d5c:	0800624c 	.word	0x0800624c
 8001d60:	200004d0 	.word	0x200004d0
 8001d64:	08006254 	.word	0x08006254
          if(py != bar_y0 + 1 && py != bar_y1 - 1) {
 8001d68:	23ac      	movs	r3, #172	@ 0xac
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	24b8      	movs	r4, #184	@ 0xb8
 8001d72:	193a      	adds	r2, r7, r4
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d01d      	beq.n	8001db6 <displayVoltReadFunction+0x352>
 8001d7a:	23a8      	movs	r3, #168	@ 0xa8
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	193a      	adds	r2, r7, r4
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d015      	beq.n	8001db6 <displayVoltReadFunction+0x352>
              st7565_setpixel(buffer, bar_x0, py, 1);
 8001d8a:	23b4      	movs	r3, #180	@ 0xb4
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d9      	uxtb	r1, r3
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	48ad      	ldr	r0, [pc, #692]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f7fe fed1 	bl	8000b42 <st7565_setpixel>
              st7565_setpixel(buffer, bar_x1, py, 1);
 8001da0:	23b0      	movs	r3, #176	@ 0xb0
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b2d9      	uxtb	r1, r3
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	48a8      	ldr	r0, [pc, #672]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001db0:	2301      	movs	r3, #1
 8001db2:	f7fe fec6 	bl	8000b42 <st7565_setpixel>
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001db6:	22b8      	movs	r2, #184	@ 0xb8
 8001db8:	18bb      	adds	r3, r7, r2
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	18ba      	adds	r2, r7, r2
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	23b8      	movs	r3, #184	@ 0xb8
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	24a8      	movs	r4, #168	@ 0xa8
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbca      	blt.n	8001d68 <displayVoltReadFunction+0x304>
          }
      }
      st7565_setpixel(buffer, bar_x0 +1, bar_y0+1, 1);
 8001dd2:	25b4      	movs	r5, #180	@ 0xb4
 8001dd4:	197b      	adds	r3, r7, r5
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2d9      	uxtb	r1, r3
 8001dde:	26ac      	movs	r6, #172	@ 0xac
 8001de0:	19bb      	adds	r3, r7, r6
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4899      	ldr	r0, [pc, #612]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001dec:	2301      	movs	r3, #1
 8001dee:	f7fe fea8 	bl	8000b42 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x0 +1, bar_y1-1, 1);
 8001df2:	197b      	adds	r3, r7, r5
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4892      	ldr	r0, [pc, #584]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f7fe fe9a 	bl	8000b42 <st7565_setpixel>

      st7565_setpixel(buffer, bar_x1 -1, bar_y0+1, 1);
 8001e0e:	25b0      	movs	r5, #176	@ 0xb0
 8001e10:	197b      	adds	r3, r7, r5
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b2d9      	uxtb	r1, r3
 8001e1a:	19bb      	adds	r3, r7, r6
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	488a      	ldr	r0, [pc, #552]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e26:	2301      	movs	r3, #1
 8001e28:	f7fe fe8b 	bl	8000b42 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x1 -1, bar_y1-1, 1);
 8001e2c:	197b      	adds	r3, r7, r5
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b2d9      	uxtb	r1, r3
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4883      	ldr	r0, [pc, #524]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e42:	2301      	movs	r3, #1
 8001e44:	f7fe fe7d 	bl	8000b42 <st7565_setpixel>
      st7565_drawstring(buffer, 0, 5, "0",fontMode);
 8001e48:	4b82      	ldr	r3, [pc, #520]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4a82      	ldr	r2, [pc, #520]	@ (8002058 <displayVoltReadFunction+0x5f4>)
 8001e4e:	4880      	ldr	r0, [pc, #512]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	0013      	movs	r3, r2
 8001e54:	2205      	movs	r2, #5
 8001e56:	2100      	movs	r1, #0
 8001e58:	f7fe fede 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 20, 5, "0.8",fontMode);
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4a7e      	ldr	r2, [pc, #504]	@ (800205c <displayVoltReadFunction+0x5f8>)
 8001e62:	487b      	ldr	r0, [pc, #492]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	0013      	movs	r3, r2
 8001e68:	2205      	movs	r2, #5
 8001e6a:	2114      	movs	r1, #20
 8001e6c:	f7fe fed4 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 45, 5, "1.6",fontMode);
 8001e70:	4b78      	ldr	r3, [pc, #480]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4a7a      	ldr	r2, [pc, #488]	@ (8002060 <displayVoltReadFunction+0x5fc>)
 8001e76:	4876      	ldr	r0, [pc, #472]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	212d      	movs	r1, #45	@ 0x2d
 8001e80:	f7fe feca 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 75, 5, "2.5",fontMode);
 8001e84:	4b73      	ldr	r3, [pc, #460]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4a76      	ldr	r2, [pc, #472]	@ (8002064 <displayVoltReadFunction+0x600>)
 8001e8a:	4871      	ldr	r0, [pc, #452]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	0013      	movs	r3, r2
 8001e90:	2205      	movs	r2, #5
 8001e92:	214b      	movs	r1, #75	@ 0x4b
 8001e94:	f7fe fec0 	bl	8000c18 <st7565_drawstring>
      st7565_drawstring(buffer, 108, 5, "3.3",fontMode);
 8001e98:	4b6e      	ldr	r3, [pc, #440]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4a72      	ldr	r2, [pc, #456]	@ (8002068 <displayVoltReadFunction+0x604>)
 8001e9e:	486c      	ldr	r0, [pc, #432]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	216c      	movs	r1, #108	@ 0x6c
 8001ea8:	f7fe feb6 	bl	8000c18 <st7565_drawstring>
 8001eac:	e011      	b.n	8001ed2 <displayVoltReadFunction+0x46e>

  }
	  else if(displayMode==100){
 8001eae:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <displayVoltReadFunction+0x608>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d10d      	bne.n	8001ed2 <displayVoltReadFunction+0x46e>

      //st7565_drawstring(buffer, 0, 0, "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",fontMode);
		st7565_clear_buffer(buffer);
 8001eb6:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7fe fe33 	bl	8000b24 <st7565_clear_buffer>
		st7565_drawstring(buffer, 0, 0, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F",fontMode);
 8001ebe:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8002070 <displayVoltReadFunction+0x60c>)
 8001ec4:	4862      	ldr	r0, [pc, #392]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	0013      	movs	r3, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f7fe fea3 	bl	8000c18 <st7565_drawstring>
	  }
  //Mesaj temporar dreapta jos de schimbare mod, suprascrie ce este sub el
  if(showDisplayModeOverlay) {
 8001ed2:	4b68      	ldr	r3, [pc, #416]	@ (8002074 <displayVoltReadFunction+0x610>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d100      	bne.n	8001edc <displayVoltReadFunction+0x478>
 8001eda:	e0b1      	b.n	8002040 <displayVoltReadFunction+0x5dc>
      if((HAL_GetTick() - displayModeChangeTime) >= 1250) {
 8001edc:	f000 fb2a 	bl	8002534 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <displayVoltReadFunction+0x614>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4a64      	ldr	r2, [pc, #400]	@ (800207c <displayVoltReadFunction+0x618>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d903      	bls.n	8001ef6 <displayVoltReadFunction+0x492>
          showDisplayModeOverlay = 0;
 8001eee:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <displayVoltReadFunction+0x610>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e0a4      	b.n	8002040 <displayVoltReadFunction+0x5dc>
      } else {
          uint8_t rect_x = 80;
 8001ef6:	217b      	movs	r1, #123	@ 0x7b
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2250      	movs	r2, #80	@ 0x50
 8001efc:	701a      	strb	r2, [r3, #0]
          uint8_t rect_y = 45;
 8001efe:	267a      	movs	r6, #122	@ 0x7a
 8001f00:	19bb      	adds	r3, r7, r6
 8001f02:	222d      	movs	r2, #45	@ 0x2d
 8001f04:	701a      	strb	r2, [r3, #0]
          uint8_t rect_w = 47;
 8001f06:	2479      	movs	r4, #121	@ 0x79
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	222f      	movs	r2, #47	@ 0x2f
 8001f0c:	701a      	strb	r2, [r3, #0]
          uint8_t rect_h = 18;
 8001f0e:	2378      	movs	r3, #120	@ 0x78
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2212      	movs	r2, #18
 8001f14:	701a      	strb	r2, [r3, #0]
          
          st7565_fillrect(buffer, rect_x, rect_y, rect_w, rect_h, 0);
 8001f16:	193b      	adds	r3, r7, r4
 8001f18:	781c      	ldrb	r4, [r3, #0]
 8001f1a:	19bb      	adds	r3, r7, r6
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	000d      	movs	r5, r1
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	484a      	ldr	r0, [pc, #296]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001f26:	2300      	movs	r3, #0
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2378      	movs	r3, #120	@ 0x78
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	0023      	movs	r3, r4
 8001f34:	f7ff f829 	bl	8000f8a <st7565_fillrect>
          
          st7565_drawline(buffer, rect_x, rect_y, rect_x + rect_w, rect_y, 1);
 8001f38:	197a      	adds	r2, r7, r5
 8001f3a:	2479      	movs	r4, #121	@ 0x79
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	b2dc      	uxtb	r4, r3
 8001f46:	19bb      	adds	r3, r7, r6
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	197b      	adds	r3, r7, r5
 8001f4c:	7819      	ldrb	r1, [r3, #0]
 8001f4e:	4840      	ldr	r0, [pc, #256]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001f50:	2301      	movs	r3, #1
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	19bb      	adds	r3, r7, r6
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	0023      	movs	r3, r4
 8001f5c:	f7fe ff0a 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x, rect_y, rect_x, rect_y + rect_h, 1);
 8001f60:	0031      	movs	r1, r6
 8001f62:	19ba      	adds	r2, r7, r6
 8001f64:	2378      	movs	r3, #120	@ 0x78
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	002e      	movs	r6, r5
 8001f72:	19ba      	adds	r2, r7, r6
 8001f74:	7815      	ldrb	r5, [r2, #0]
 8001f76:	187a      	adds	r2, r7, r1
 8001f78:	7814      	ldrb	r4, [r2, #0]
 8001f7a:	19ba      	adds	r2, r7, r6
 8001f7c:	7811      	ldrb	r1, [r2, #0]
 8001f7e:	4834      	ldr	r0, [pc, #208]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	002b      	movs	r3, r5
 8001f88:	0022      	movs	r2, r4
 8001f8a:	f7fe fef3 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x + rect_w, rect_y, rect_x + rect_w, rect_y + rect_h, 1);
 8001f8e:	19ba      	adds	r2, r7, r6
 8001f90:	2479      	movs	r4, #121	@ 0x79
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	b2d9      	uxtb	r1, r3
 8001f9c:	19ba      	adds	r2, r7, r6
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	b2dc      	uxtb	r4, r3
 8001fa8:	207a      	movs	r0, #122	@ 0x7a
 8001faa:	183a      	adds	r2, r7, r0
 8001fac:	2578      	movs	r5, #120	@ 0x78
 8001fae:	197b      	adds	r3, r7, r5
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	183a      	adds	r2, r7, r0
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	4824      	ldr	r0, [pc, #144]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001fbe:	2501      	movs	r5, #1
 8001fc0:	9501      	str	r5, [sp, #4]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	0023      	movs	r3, r4
 8001fc6:	f7fe fed5 	bl	8000d74 <st7565_drawline>
          st7565_drawline(buffer, rect_x, rect_y + rect_h, rect_x + rect_w, rect_y + rect_h, 1);
 8001fca:	217a      	movs	r1, #122	@ 0x7a
 8001fcc:	187a      	adds	r2, r7, r1
 8001fce:	2078      	movs	r0, #120	@ 0x78
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	18d3      	adds	r3, r2, r3
 8001fd8:	b2dc      	uxtb	r4, r3
 8001fda:	19ba      	adds	r2, r7, r6
 8001fdc:	2379      	movs	r3, #121	@ 0x79
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	b2dd      	uxtb	r5, r3
 8001fe8:	187a      	adds	r2, r7, r1
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	19ba      	adds	r2, r7, r6
 8001ff6:	7811      	ldrb	r1, [r2, #0]
 8001ff8:	4815      	ldr	r0, [pc, #84]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	002b      	movs	r3, r5
 8002002:	0022      	movs	r2, r4
 8002004:	f7fe feb6 	bl	8000d74 <st7565_drawline>
          
          uint8_t overlay_text[20];
          sprintf(overlay_text, "Mode %d", displayMode);
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <displayVoltReadFunction+0x608>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	491c      	ldr	r1, [pc, #112]	@ (8002080 <displayVoltReadFunction+0x61c>)
 8002010:	2464      	movs	r4, #100	@ 0x64
 8002012:	193b      	adds	r3, r7, r4
 8002014:	0018      	movs	r0, r3
 8002016:	f003 fc29 	bl	800586c <siprintf>
          st7565_drawstring(buffer, rect_x + 2, rect_y/8 + 1, overlay_text, fontMode);
 800201a:	19bb      	adds	r3, r7, r6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	3302      	adds	r3, #2
 8002020:	b2d9      	uxtb	r1, r3
 8002022:	237a      	movs	r3, #122	@ 0x7a
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <displayVoltReadFunction+0x5f0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	193c      	adds	r4, r7, r4
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	0023      	movs	r3, r4
 800203c:	f7fe fdec 	bl	8000c18 <st7565_drawstring>

      }
  }
  st7565_write_buffer(buffer);
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <displayVoltReadFunction+0x5ec>)
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe fbb0 	bl	80007a8 <st7565_write_buffer>
    //osDelay(10);

  /* USER CODE END displayVoltReadFunction */
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b033      	add	sp, #204	@ 0xcc
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	2000000c 	.word	0x2000000c
 8002054:	200004d8 	.word	0x200004d8
 8002058:	08006260 	.word	0x08006260
 800205c:	08006264 	.word	0x08006264
 8002060:	08006268 	.word	0x08006268
 8002064:	0800626c 	.word	0x0800626c
 8002068:	08006270 	.word	0x08006270
 800206c:	20000008 	.word	0x20000008
 8002070:	08006274 	.word	0x08006274
 8002074:	200004e8 	.word	0x200004e8
 8002078:	200004e4 	.word	0x200004e4
 800207c:	000004e1 	.word	0x000004e1
 8002080:	080062d8 	.word	0x080062d8

08002084 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */

    hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 800208a:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <readButtonFunction+0x228>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_ADC_Start(&hadc) == HAL_OK) {
 8002092:	4b86      	ldr	r3, [pc, #536]	@ (80022ac <readButtonFunction+0x228>)
 8002094:	0018      	movs	r0, r3
 8002096:	f000 fbbb 	bl	8002810 <HAL_ADC_Start>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d113      	bne.n	80020c6 <readButtonFunction+0x42>
      if (HAL_ADC_PollForConversion(&hadc, 4) == HAL_OK) {
 800209e:	4b83      	ldr	r3, [pc, #524]	@ (80022ac <readButtonFunction+0x228>)
 80020a0:	2104      	movs	r1, #4
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fc48 	bl	8002938 <HAL_ADC_PollForConversion>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d108      	bne.n	80020be <readButtonFunction+0x3a>
        buttonReadRaw = HAL_ADC_GetValue(&hadc);
 80020ac:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <readButtonFunction+0x228>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 fcda 	bl	8002a68 <HAL_ADC_GetValue>
 80020b4:	0003      	movs	r3, r0
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b7d      	ldr	r3, [pc, #500]	@ (80022b0 <readButtonFunction+0x22c>)
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	e006      	b.n	80020cc <readButtonFunction+0x48>
      } else {
        buttonReadRaw = 666;
 80020be:	4b7c      	ldr	r3, [pc, #496]	@ (80022b0 <readButtonFunction+0x22c>)
 80020c0:	4a7c      	ldr	r2, [pc, #496]	@ (80022b4 <readButtonFunction+0x230>)
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e002      	b.n	80020cc <readButtonFunction+0x48>
      }
    } else {
      buttonReadRaw = 666;
 80020c6:	4b7a      	ldr	r3, [pc, #488]	@ (80022b0 <readButtonFunction+0x22c>)
 80020c8:	4a7a      	ldr	r2, [pc, #488]	@ (80022b4 <readButtonFunction+0x230>)
 80020ca:	801a      	strh	r2, [r3, #0]
    }
    buttonRead[0]=buttonRead[1];
 80020cc:	4b7a      	ldr	r3, [pc, #488]	@ (80022b8 <readButtonFunction+0x234>)
 80020ce:	885a      	ldrh	r2, [r3, #2]
 80020d0:	4b79      	ldr	r3, [pc, #484]	@ (80022b8 <readButtonFunction+0x234>)
 80020d2:	801a      	strh	r2, [r3, #0]
    buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 80020d4:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <readButtonFunction+0x22c>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	0018      	movs	r0, r3
 80020dc:	f7fe ffa4 	bl	8001028 <interpolation>
 80020e0:	0003      	movs	r3, r0
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff f825 	bl	8001134 <filterButton>
 80020ea:	0003      	movs	r3, r0
 80020ec:	001a      	movs	r2, r3
 80020ee:	4b72      	ldr	r3, [pc, #456]	@ (80022b8 <readButtonFunction+0x234>)
 80020f0:	805a      	strh	r2, [r3, #2]
    
    uint8_t rawButtonState = 0;
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    if(buttonRead[1] <= 50) {
 80020f8:	4b6f      	ldr	r3, [pc, #444]	@ (80022b8 <readButtonFunction+0x234>)
 80020fa:	885b      	ldrh	r3, [r3, #2]
 80020fc:	2b32      	cmp	r3, #50	@ 0x32
 80020fe:	d803      	bhi.n	8002108 <readButtonFunction+0x84>
        rawButtonState = 1;
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e026      	b.n	8002156 <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 290 && buttonRead[1] < 315) {
 8002108:	4b6b      	ldr	r3, [pc, #428]	@ (80022b8 <readButtonFunction+0x234>)
 800210a:	885a      	ldrh	r2, [r3, #2]
 800210c:	2391      	movs	r3, #145	@ 0x91
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	429a      	cmp	r2, r3
 8002112:	d909      	bls.n	8002128 <readButtonFunction+0xa4>
 8002114:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <readButtonFunction+0x234>)
 8002116:	885a      	ldrh	r2, [r3, #2]
 8002118:	239d      	movs	r3, #157	@ 0x9d
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	429a      	cmp	r2, r3
 800211e:	d803      	bhi.n	8002128 <readButtonFunction+0xa4>
        rawButtonState = 2;
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e016      	b.n	8002156 <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 186 && buttonRead[1] < 206) {
 8002128:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <readButtonFunction+0x234>)
 800212a:	885b      	ldrh	r3, [r3, #2]
 800212c:	2bba      	cmp	r3, #186	@ 0xba
 800212e:	d907      	bls.n	8002140 <readButtonFunction+0xbc>
 8002130:	4b61      	ldr	r3, [pc, #388]	@ (80022b8 <readButtonFunction+0x234>)
 8002132:	885b      	ldrh	r3, [r3, #2]
 8002134:	2bcd      	cmp	r3, #205	@ 0xcd
 8002136:	d803      	bhi.n	8002140 <readButtonFunction+0xbc>
        rawButtonState = 3;
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e00a      	b.n	8002156 <readButtonFunction+0xd2>
    } else if(buttonRead[1] > 86 && buttonRead[1] < 108) {
 8002140:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <readButtonFunction+0x234>)
 8002142:	885b      	ldrh	r3, [r3, #2]
 8002144:	2b56      	cmp	r3, #86	@ 0x56
 8002146:	d906      	bls.n	8002156 <readButtonFunction+0xd2>
 8002148:	4b5b      	ldr	r3, [pc, #364]	@ (80022b8 <readButtonFunction+0x234>)
 800214a:	885b      	ldrh	r3, [r3, #2]
 800214c:	2b6b      	cmp	r3, #107	@ 0x6b
 800214e:	d802      	bhi.n	8002156 <readButtonFunction+0xd2>
        rawButtonState = 4;
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	2204      	movs	r2, #4
 8002154:	701a      	strb	r2, [r3, #0]
    }
    
    if(rawButtonState != buttonState) {
 8002156:	4b59      	ldr	r3, [pc, #356]	@ (80022bc <readButtonFunction+0x238>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	1dfa      	adds	r2, r7, #7
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d100      	bne.n	8002164 <readButtonFunction+0xe0>
 8002162:	e098      	b.n	8002296 <readButtonFunction+0x212>
        if(!buttonTransitionFlag) {
 8002164:	4b56      	ldr	r3, [pc, #344]	@ (80022c0 <readButtonFunction+0x23c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <readButtonFunction+0xf4>
            buttonTransitionFlag = 1;
 800216c:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <readButtonFunction+0x23c>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 8002172:	4b54      	ldr	r3, [pc, #336]	@ (80022c4 <readButtonFunction+0x240>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
        }
        buttonDebounceTimer += 5;
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <readButtonFunction+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1d5a      	adds	r2, r3, #5
 800217e:	4b51      	ldr	r3, [pc, #324]	@ (80022c4 <readButtonFunction+0x240>)
 8002180:	601a      	str	r2, [r3, #0]
        
        if(buttonDebounceTimer >= 15) {
 8002182:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <readButtonFunction+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b0e      	cmp	r3, #14
 8002188:	d800      	bhi.n	800218c <readButtonFunction+0x108>
 800218a:	e08b      	b.n	80022a4 <readButtonFunction+0x220>
            buttonStatePrev = buttonState;
 800218c:	4b4b      	ldr	r3, [pc, #300]	@ (80022bc <readButtonFunction+0x238>)
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <readButtonFunction+0x244>)
 8002192:	701a      	strb	r2, [r3, #0]
            buttonState = rawButtonState;
 8002194:	4b49      	ldr	r3, [pc, #292]	@ (80022bc <readButtonFunction+0x238>)
 8002196:	1dfa      	adds	r2, r7, #7
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	701a      	strb	r2, [r3, #0]
            buttonTransitionFlag = 0;
 800219c:	4b48      	ldr	r3, [pc, #288]	@ (80022c0 <readButtonFunction+0x23c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
            buttonDebounceTimer = 0;
 80021a2:	4b48      	ldr	r3, [pc, #288]	@ (80022c4 <readButtonFunction+0x240>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
            
            if(!buttonTransitionFlag) {
 80021a8:	4b45      	ldr	r3, [pc, #276]	@ (80022c0 <readButtonFunction+0x23c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d000      	beq.n	80021b2 <readButtonFunction+0x12e>
 80021b0:	e078      	b.n	80022a4 <readButtonFunction+0x220>
                if(buttonState == 1 && buttonStatePrev == 0) {
 80021b2:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <readButtonFunction+0x238>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d11b      	bne.n	80021f2 <readButtonFunction+0x16e>
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <readButtonFunction+0x244>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d117      	bne.n	80021f2 <readButtonFunction+0x16e>
                    if(displayMode==0)displayMode=displayModeMax;
 80021c2:	4b42      	ldr	r3, [pc, #264]	@ (80022cc <readButtonFunction+0x248>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d104      	bne.n	80021d4 <readButtonFunction+0x150>
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <readButtonFunction+0x24c>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <readButtonFunction+0x248>)
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e005      	b.n	80021e0 <readButtonFunction+0x15c>
                    else displayMode--;
 80021d4:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <readButtonFunction+0x248>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <readButtonFunction+0x248>)
 80021de:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 80021e0:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <readButtonFunction+0x250>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 80021e6:	f000 f9a5 	bl	8002534 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <readButtonFunction+0x254>)
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e058      	b.n	80022a4 <readButtonFunction+0x220>
                }
                else if(buttonState == 2 && buttonStatePrev == 0) {
 80021f2:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <readButtonFunction+0x238>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d11c      	bne.n	8002234 <readButtonFunction+0x1b0>
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <readButtonFunction+0x244>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <readButtonFunction+0x1b0>
                    if(displayMode==displayModeMax)displayMode=0;
 8002202:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <readButtonFunction+0x248>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <readButtonFunction+0x24c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d103      	bne.n	8002216 <readButtonFunction+0x192>
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <readButtonFunction+0x248>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e005      	b.n	8002222 <readButtonFunction+0x19e>
                    else displayMode++;
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <readButtonFunction+0x248>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <readButtonFunction+0x248>)
 8002220:	701a      	strb	r2, [r3, #0]
                    showDisplayModeOverlay = 1;
 8002222:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <readButtonFunction+0x250>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
                    displayModeChangeTime = HAL_GetTick();
 8002228:	f000 f984 	bl	8002534 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <readButtonFunction+0x254>)
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e037      	b.n	80022a4 <readButtonFunction+0x220>
                }
                else if(buttonState == 3 && buttonStatePrev == 0) {//apas jos
 8002234:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <readButtonFunction+0x238>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d113      	bne.n	8002264 <readButtonFunction+0x1e0>
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <readButtonFunction+0x244>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10f      	bne.n	8002264 <readButtonFunction+0x1e0>
                	if(fontMode==0)fontMode=fontModeMax;
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <readButtonFunction+0x258>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <readButtonFunction+0x1d2>
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <readButtonFunction+0x25c>)
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <readButtonFunction+0x258>)
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e026      	b.n	80022a4 <readButtonFunction+0x220>
                	else fontMode--;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <readButtonFunction+0x258>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <readButtonFunction+0x258>)
 8002260:	701a      	strb	r2, [r3, #0]
                	if(fontMode==0)fontMode=fontModeMax;
 8002262:	e01f      	b.n	80022a4 <readButtonFunction+0x220>
                }
                else if(buttonState == 4 && buttonStatePrev == 0) {//apas sus
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <readButtonFunction+0x238>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <readButtonFunction+0x220>
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <readButtonFunction+0x244>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d117      	bne.n	80022a4 <readButtonFunction+0x220>
                	if(fontMode==fontModeMax)fontMode=0;
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <readButtonFunction+0x258>)
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <readButtonFunction+0x25c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d103      	bne.n	8002288 <readButtonFunction+0x204>
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <readButtonFunction+0x258>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    } else {
        buttonTransitionFlag = 0;
        buttonDebounceTimer = 0;
    }
  /* USER CODE END readButtonFunction */
}
 8002286:	e00d      	b.n	80022a4 <readButtonFunction+0x220>
                	else fontMode++;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <readButtonFunction+0x258>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <readButtonFunction+0x258>)
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	e006      	b.n	80022a4 <readButtonFunction+0x220>
        buttonTransitionFlag = 0;
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <readButtonFunction+0x23c>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
        buttonDebounceTimer = 0;
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <readButtonFunction+0x240>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	e7ff      	b.n	80022a4 <readButtonFunction+0x220>
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000052c 	.word	0x2000052c
 80022b0:	20000006 	.word	0x20000006
 80022b4:	0000029a 	.word	0x0000029a
 80022b8:	200004d4 	.word	0x200004d4
 80022bc:	200004d9 	.word	0x200004d9
 80022c0:	200004e0 	.word	0x200004e0
 80022c4:	200004dc 	.word	0x200004dc
 80022c8:	200004da 	.word	0x200004da
 80022cc:	20000008 	.word	0x20000008
 80022d0:	20000009 	.word	0x20000009
 80022d4:	200004e8 	.word	0x200004e8
 80022d8:	200004e4 	.word	0x200004e4
 80022dc:	200004d8 	.word	0x200004d8
 80022e0:	2000000a 	.word	0x2000000a

080022e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022f6:	f000 f90b 	bl	8002510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	40000400 	.word	0x40000400

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	46c0      	nop			@ (mov r8, r8)
 8002312:	e7fd      	b.n	8002310 <Error_Handler+0x8>

08002314 <OS_Init>:
static const SimpleTask *os_tasks = 0;
static uint8_t os_num_tasks = 0;
static void (*os_init_task)(void) = 0;
static uint32_t os_init_max_time_ms = 0;

void OS_Init(const SimpleTask *tasks, uint8_t num_tasks, void (*init_task)(void), uint32_t init_max_time_ms) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	200b      	movs	r0, #11
 8002322:	183b      	adds	r3, r7, r0
 8002324:	1c0a      	adds	r2, r1, #0
 8002326:	701a      	strb	r2, [r3, #0]
    os_tasks = tasks;
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <OS_Init+0x38>)
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]
    os_num_tasks = num_tasks;
 800232e:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <OS_Init+0x3c>)
 8002330:	183a      	adds	r2, r7, r0
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	701a      	strb	r2, [r3, #0]
    os_init_task = init_task;
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <OS_Init+0x40>)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
    os_init_max_time_ms = init_max_time_ms;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <OS_Init+0x44>)
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b004      	add	sp, #16
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	2000065c 	.word	0x2000065c
 8002350:	20000660 	.word	0x20000660
 8002354:	20000664 	.word	0x20000664
 8002358:	20000668 	.word	0x20000668

0800235c <OS_Run>:

void OS_Run(void) {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
    if (os_init_task) {
 8002362:	4b40      	ldr	r3, [pc, #256]	@ (8002464 <OS_Run+0x108>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d024      	beq.n	80023b4 <OS_Run+0x58>
        uint32_t start = HAL_GetTick();
 800236a:	f000 f8e3 	bl	8002534 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	613b      	str	r3, [r7, #16]
        os_init_task();
 8002372:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <OS_Run+0x108>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick() - start;
 8002378:	f000 f8dc 	bl	8002534 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	60fb      	str	r3, [r7, #12]
        if (elapsed > os_init_max_time_ms) {
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <OS_Run+0x10c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d908      	bls.n	80023a0 <OS_Run+0x44>
            os_task_overrun_count[0]++;
 800238e:	4b37      	ldr	r3, [pc, #220]	@ (800246c <OS_Run+0x110>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4b35      	ldr	r3, [pc, #212]	@ (800246c <OS_Run+0x110>)
 8002396:	601a      	str	r2, [r3, #0]
            os_task_overrun_time=elapsed;
 8002398:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <OS_Run+0x114>)
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e009      	b.n	80023b4 <OS_Run+0x58>
        } else {
            while ((HAL_GetTick() - start) < os_init_max_time_ms) {}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	f000 f8c7 	bl	8002534 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <OS_Run+0x10c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3f6      	bcc.n	80023a2 <OS_Run+0x46>
        }
    }
    uint8_t i = 0;
 80023b4:	2317      	movs	r3, #23
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    while (1) {
        uint32_t start = HAL_GetTick();
 80023bc:	f000 f8ba 	bl	8002534 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	60bb      	str	r3, [r7, #8]
        os_tasks[i].task_func();
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <OS_Run+0x118>)
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	2417      	movs	r4, #23
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	0013      	movs	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	189b      	adds	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	18cb      	adds	r3, r1, r3
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick() - start;
 80023dc:	f000 f8aa 	bl	8002534 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	607b      	str	r3, [r7, #4]
        if (elapsed > os_tasks[i].max_time_ms) {
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <OS_Run+0x118>)
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	0013      	movs	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18cb      	adds	r3, r1, r3
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d90d      	bls.n	800241e <OS_Run+0xc2>
            os_task_overrun_count[i+1]++;
 8002402:	193b      	adds	r3, r7, r4
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	4a18      	ldr	r2, [pc, #96]	@ (800246c <OS_Run+0x110>)
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	588a      	ldr	r2, [r1, r2]
 800240e:	1c51      	adds	r1, r2, #1
 8002410:	4a16      	ldr	r2, [pc, #88]	@ (800246c <OS_Run+0x110>)
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	5099      	str	r1, [r3, r2]
            os_task_overrun_time=elapsed;
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <OS_Run+0x114>)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e012      	b.n	8002444 <OS_Run+0xe8>
        } else {
            while ((HAL_GetTick() - start) < os_tasks[i].max_time_ms) {}//bucla de asteptare pana la urmatorul task
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	f000 f888 	bl	8002534 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad1      	subs	r1, r2, r3
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <OS_Run+0x118>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	2317      	movs	r3, #23
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	0013      	movs	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	189b      	adds	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	18c3      	adds	r3, r0, r3
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4299      	cmp	r1, r3
 8002442:	d3ed      	bcc.n	8002420 <OS_Run+0xc4>
        }
        i++;
 8002444:	2117      	movs	r1, #23
 8002446:	187b      	adds	r3, r7, r1
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	187b      	adds	r3, r7, r1
 800244c:	3201      	adds	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
        if (i >= os_num_tasks) i = 0;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <OS_Run+0x11c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	187a      	adds	r2, r7, r1
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d3af      	bcc.n	80023bc <OS_Run+0x60>
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    while (1) {
 8002462:	e7ab      	b.n	80023bc <OS_Run+0x60>
 8002464:	20000664 	.word	0x20000664
 8002468:	20000668 	.word	0x20000668
 800246c:	200004ec 	.word	0x200004ec
 8002470:	2000050c 	.word	0x2000050c
 8002474:	2000065c 	.word	0x2000065c
 8002478:	20000660 	.word	0x20000660

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f003 fa08 	bl	80058c0 <__errno>
 80024b0:	0003      	movs	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	425b      	negs	r3, r3
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	18d2      	adds	r2, r2, r3
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <_sbrk+0x64>)
 80024cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20008000 	.word	0x20008000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	2000066c 	.word	0x2000066c
 80024e4:	20000c48 	.word	0x20000c48

080024e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_Init+0x24>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_Init+0x24>)
 80024f2:	2110      	movs	r1, #16
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7fe f8b7 	bl	800066c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fe:	f7fd ffad 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_IncTick+0x1c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	001a      	movs	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_IncTick+0x20>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	18d2      	adds	r2, r2, r3
 8002520:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <HAL_IncTick+0x20>)
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	20000418 	.word	0x20000418
 8002530:	20000670 	.word	0x20000670

08002534 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b02      	ldr	r3, [pc, #8]	@ (8002544 <HAL_GetTick+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	20000670 	.word	0x20000670

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff fff0 	bl	8002534 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	001a      	movs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	189b      	adds	r3, r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	f7ff ffe0 	bl	8002534 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	46c0      	nop			@ (mov r8, r8)
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b004      	add	sp, #16
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	20000418 	.word	0x20000418

08002590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e125      	b.n	80027fa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2234      	movs	r2, #52	@ 0x34
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7fd ff72 	bl	80004b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	2210      	movs	r2, #16
 80025d2:	4013      	ands	r3, r2
 80025d4:	d000      	beq.n	80025d8 <HAL_ADC_Init+0x48>
 80025d6:	e103      	b.n	80027e0 <HAL_ADC_Init+0x250>
 80025d8:	230f      	movs	r3, #15
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d000      	beq.n	80025e4 <HAL_ADC_Init+0x54>
 80025e2:	e0fd      	b.n	80027e0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2204      	movs	r2, #4
 80025ec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80025ee:	d000      	beq.n	80025f2 <HAL_ADC_Init+0x62>
 80025f0:	e0f6      	b.n	80027e0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	4a83      	ldr	r2, [pc, #524]	@ (8002804 <HAL_ADC_Init+0x274>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	2202      	movs	r2, #2
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2203      	movs	r2, #3
 800260a:	4013      	ands	r3, r2
 800260c:	2b01      	cmp	r3, #1
 800260e:	d112      	bne.n	8002636 <HAL_ADC_Init+0xa6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	2b01      	cmp	r3, #1
 800261c:	d009      	beq.n	8002632 <HAL_ADC_Init+0xa2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	401a      	ands	r2, r3
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	429a      	cmp	r2, r3
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0xa6>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_ADC_Init+0xa8>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2218      	movs	r2, #24
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	0899      	lsrs	r1, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4964      	ldr	r1, [pc, #400]	@ (8002808 <HAL_ADC_Init+0x278>)
 8002676:	400a      	ands	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7e1b      	ldrb	r3, [r3, #24]
 800267e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e5b      	ldrb	r3, [r3, #25]
 8002684:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002686:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e9b      	ldrb	r3, [r3, #26]
 800268c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800268e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	2b01      	cmp	r3, #1
 8002696:	d002      	beq.n	800269e <HAL_ADC_Init+0x10e>
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	015b      	lsls	r3, r3, #5
 800269c:	e000      	b.n	80026a0 <HAL_ADC_Init+0x110>
 800269e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80026a6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_Init+0x124>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e000      	b.n	80026b6 <HAL_ADC_Init+0x126>
 80026b4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80026b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2124      	movs	r1, #36	@ 0x24
 80026bc:	5c5b      	ldrb	r3, [r3, r1]
 80026be:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80026c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7edb      	ldrb	r3, [r3, #27]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d115      	bne.n	80026fc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e9b      	ldrb	r3, [r3, #26]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	0252      	lsls	r2, r2, #9
 80026de:	4313      	orrs	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	e00b      	b.n	80026fc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	2220      	movs	r2, #32
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	2201      	movs	r2, #1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	23c2      	movs	r3, #194	@ 0xc2
 8002702:	33ff      	adds	r3, #255	@ 0xff
 8002704:	429a      	cmp	r2, r3
 8002706:	d007      	beq.n	8002718 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002710:	4313      	orrs	r3, r2
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	429a      	cmp	r2, r3
 8002732:	d01b      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d017      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	2b02      	cmp	r3, #2
 8002742:	d013      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	2b03      	cmp	r3, #3
 800274a:	d00f      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	2b04      	cmp	r3, #4
 8002752:	d00b      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	2b05      	cmp	r3, #5
 800275a:	d007      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	2b06      	cmp	r3, #6
 8002762:	d003      	beq.n	800276c <HAL_ADC_Init+0x1dc>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2b07      	cmp	r3, #7
 800276a:	d112      	bne.n	8002792 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2107      	movs	r1, #7
 8002778:	438a      	bics	r2, r1
 800277a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6959      	ldr	r1, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	2207      	movs	r2, #7
 8002788:	401a      	ands	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <HAL_ADC_Init+0x27c>)
 800279a:	4013      	ands	r3, r2
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d10b      	bne.n	80027ba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	2203      	movs	r2, #3
 80027ae:	4393      	bics	r3, r2
 80027b0:	2201      	movs	r2, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027b8:	e01c      	b.n	80027f4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027be:	2212      	movs	r2, #18
 80027c0:	4393      	bics	r3, r2
 80027c2:	2210      	movs	r2, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	2201      	movs	r2, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80027d6:	230f      	movs	r3, #15
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027de:	e009      	b.n	80027f4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	2210      	movs	r2, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80027ec:	230f      	movs	r3, #15
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	fffffefd 	.word	0xfffffefd
 8002808:	fffe0219 	.word	0xfffe0219
 800280c:	833fffe7 	.word	0x833fffe7

08002810 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	230f      	movs	r3, #15
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2204      	movs	r2, #4
 8002828:	4013      	ands	r3, r2
 800282a:	d138      	bne.n	800289e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2234      	movs	r2, #52	@ 0x34
 8002830:	5c9b      	ldrb	r3, [r3, r2]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Start+0x2a>
 8002836:	2302      	movs	r3, #2
 8002838:	e038      	b.n	80028ac <HAL_ADC_Start+0x9c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2234      	movs	r2, #52	@ 0x34
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7e5b      	ldrb	r3, [r3, #25]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d007      	beq.n	800285a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800284a:	230f      	movs	r3, #15
 800284c:	18fc      	adds	r4, r7, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fa23 	bl	8002c9c <ADC_Enable>
 8002856:	0003      	movs	r3, r0
 8002858:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800285a:	230f      	movs	r3, #15
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_ADC_Start+0xa4>)
 800286a:	4013      	ands	r3, r2
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	0052      	lsls	r2, r2, #1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2234      	movs	r2, #52	@ 0x34
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	221c      	movs	r2, #28
 800288a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2104      	movs	r1, #4
 8002898:	430a      	orrs	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	e003      	b.n	80028a6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800289e:	230f      	movs	r3, #15
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b005      	add	sp, #20
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	fffff0fe 	.word	0xfffff0fe

080028b8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	230f      	movs	r3, #15
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2234      	movs	r2, #52	@ 0x34
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Stop+0x1e>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e029      	b.n	800292a <HAL_ADC_Stop+0x72>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2234      	movs	r2, #52	@ 0x34
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80028de:	250f      	movs	r5, #15
 80028e0:	197c      	adds	r4, r7, r5
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 face 	bl	8002e86 <ADC_ConversionStop>
 80028ea:	0003      	movs	r3, r0
 80028ec:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ee:	197b      	adds	r3, r7, r5
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d112      	bne.n	800291c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028f6:	197c      	adds	r4, r7, r5
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fa52 	bl	8002da4 <ADC_Disable>
 8002900:	0003      	movs	r3, r0
 8002902:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002904:	197b      	adds	r3, r7, r5
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_ADC_Stop+0x7c>)
 8002912:	4013      	ands	r3, r2
 8002914:	2201      	movs	r2, #1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2234      	movs	r2, #52	@ 0x34
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002924:	230f      	movs	r3, #15
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bdb0      	pop	{r4, r5, r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	fffffefe 	.word	0xfffffefe

08002938 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d102      	bne.n	8002950 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800294a:	2308      	movs	r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e014      	b.n	800297a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10b      	bne.n	8002976 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	2220      	movs	r2, #32
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2234      	movs	r2, #52	@ 0x34
 800296e:	2100      	movs	r1, #0
 8002970:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e071      	b.n	8002a5a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002976:	230c      	movs	r3, #12
 8002978:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800297a:	f7ff fddb 	bl	8002534 <HAL_GetTick>
 800297e:	0003      	movs	r3, r0
 8002980:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002982:	e01f      	b.n	80029c4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	d01c      	beq.n	80029c4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x68>
 8002990:	f7ff fdd0 	bl	8002534 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d211      	bcs.n	80029c4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	2204      	movs	r2, #4
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2234      	movs	r2, #52	@ 0x34
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e04a      	b.n	8002a5a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	d0d9      	beq.n	8002984 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	d12d      	bne.n	8002a48 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d129      	bne.n	8002a48 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2208      	movs	r2, #8
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d122      	bne.n	8002a48 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d110      	bne.n	8002a30 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	210c      	movs	r1, #12
 8002a1a:	438a      	bics	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	4a10      	ldr	r2, [pc, #64]	@ (8002a64 <HAL_ADC_PollForConversion+0x12c>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	2201      	movs	r2, #1
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a2e:	e00b      	b.n	8002a48 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	2220      	movs	r2, #32
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	2201      	movs	r2, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e1b      	ldrb	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	220c      	movs	r2, #12
 8002a56:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	fffffefe 	.word	0xfffffefe

08002a68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	055b      	lsls	r3, r3, #21
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d011      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x46>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x46>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x46>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d005      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x46>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d001      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x46>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2234      	movs	r2, #52	@ 0x34
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x54>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0d0      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x1f6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2234      	movs	r2, #52	@ 0x34
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d000      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x6a>
 8002ae8:	e0b4      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a64      	ldr	r2, [pc, #400]	@ (8002c80 <HAL_ADC_ConfigChannel+0x200>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x76>
 8002af4:	e082      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d037      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d033      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d02f      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d02b      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d027      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d023      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d01f      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2b07      	cmp	r3, #7
 8002b4e:	d01b      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d012      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2107      	movs	r1, #7
 8002b6e:	438a      	bics	r2, r1
 8002b70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6959      	ldr	r1, [r3, #20]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d007      	beq.n	8002ba0 <HAL_ADC_ConfigChannel+0x120>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b11      	cmp	r3, #17
 8002b96:	d003      	beq.n	8002ba0 <HAL_ADC_ConfigChannel+0x120>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b12      	cmp	r3, #18
 8002b9e:	d163      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ba0:	4b38      	ldr	r3, [pc, #224]	@ (8002c84 <HAL_ADC_ConfigChannel+0x204>)
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d009      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x140>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b11      	cmp	r3, #17
 8002bb2:	d102      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x13a>
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	03db      	lsls	r3, r3, #15
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x144>
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	045b      	lsls	r3, r3, #17
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x144>
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c84 <HAL_ADC_ConfigChannel+0x204>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d14a      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c88 <HAL_ADC_ConfigChannel+0x208>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	492d      	ldr	r1, [pc, #180]	@ (8002c8c <HAL_ADC_ConfigChannel+0x20c>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7fd fa9f 	bl	800011c <__udivsi3>
 8002bde:	0003      	movs	r3, r0
 8002be0:	001a      	movs	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x16e>
 8002bfa:	e035      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	4099      	lsls	r1, r3
 8002c0a:	000b      	movs	r3, r1
 8002c0c:	43d9      	mvns	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x1ae>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b11      	cmp	r3, #17
 8002c24:	d003      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x1ae>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b12      	cmp	r3, #18
 8002c2c:	d11c      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_ADC_ConfigChannel+0x204>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d007      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x1ca>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1c6>
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_ADC_ConfigChannel+0x210>)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
 8002c46:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <HAL_ADC_ConfigChannel+0x214>)
 8002c48:	e000      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
 8002c4a:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <HAL_ADC_ConfigChannel+0x218>)
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <HAL_ADC_ConfigChannel+0x204>)
 8002c4e:	400b      	ands	r3, r1
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e009      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	2220      	movs	r2, #32
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c60:	230f      	movs	r3, #15
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2234      	movs	r2, #52	@ 0x34
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c70:	230f      	movs	r3, #15
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	781b      	ldrb	r3, [r3, #0]
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	00001001 	.word	0x00001001
 8002c84:	40012708 	.word	0x40012708
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	000f4240 	.word	0x000f4240
 8002c90:	ffbfffff 	.word	0xffbfffff
 8002c94:	feffffff 	.word	0xfeffffff
 8002c98:	ff7fffff 	.word	0xff7fffff

08002c9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d112      	bne.n	8002ce0 <ADC_Enable+0x44>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d009      	beq.n	8002cdc <ADC_Enable+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d101      	bne.n	8002ce0 <ADC_Enable+0x44>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <ADC_Enable+0x46>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d152      	bne.n	8002d8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <ADC_Enable+0xfc>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d02:	2201      	movs	r2, #1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e03f      	b.n	8002d8e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d9c <ADC_Enable+0x100>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	491f      	ldr	r1, [pc, #124]	@ (8002da0 <ADC_Enable+0x104>)
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fd f9f9 	bl	800011c <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d2e:	e002      	b.n	8002d36 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff fbfa 	bl	8002534 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d44:	e01b      	b.n	8002d7e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d46:	f7ff fbf5 	bl	8002534 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d914      	bls.n	8002d7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d00d      	beq.n	8002d7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	2210      	movs	r2, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	2201      	movs	r2, #1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d1dc      	bne.n	8002d46 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	80000017 	.word	0x80000017
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	000f4240 	.word	0x000f4240

08002da4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2203      	movs	r2, #3
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d112      	bne.n	8002de4 <ADC_Disable+0x40>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d009      	beq.n	8002de0 <ADC_Disable+0x3c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d101      	bne.n	8002de4 <ADC_Disable+0x40>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <ADC_Disable+0x42>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d048      	beq.n	8002e7c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2205      	movs	r2, #5
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d110      	bne.n	8002e1a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2102      	movs	r1, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e10:	f7ff fb90 	bl	8002534 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e18:	e029      	b.n	8002e6e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	2210      	movs	r2, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e023      	b.n	8002e7e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e36:	f7ff fb7d 	bl	8002534 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	2210      	movs	r2, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	2201      	movs	r2, #1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d0dc      	beq.n	8002e36 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d03a      	beq.n	8002f14 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d10d      	bne.n	8002ec8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002eb6:	d107      	bne.n	8002ec8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ec8:	f7ff fb34 	bl	8002534 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002ed0:	e01a      	b.n	8002f08 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ed2:	f7ff fb2f 	bl	8002534 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d913      	bls.n	8002f08 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d00d      	beq.n	8002f08 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	2201      	movs	r2, #1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e006      	b.n	8002f16 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4013      	ands	r3, r2
 8002f12:	d1de      	bne.n	8002ed2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	0002      	movs	r2, r0
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f32:	d809      	bhi.n	8002f48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	001a      	movs	r2, r3
 8002f3a:	231f      	movs	r3, #31
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_EnableIRQ+0x30>)
 8002f40:	2101      	movs	r1, #1
 8002f42:	4091      	lsls	r1, r2
 8002f44:	000a      	movs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
  }
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f68:	d828      	bhi.n	8002fbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <__NVIC_SetPriority+0xd4>)
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	33c0      	adds	r3, #192	@ 0xc0
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	589b      	ldr	r3, [r3, r2]
 8002f7a:	1dfa      	adds	r2, r7, #7
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	0011      	movs	r1, r2
 8002f80:	2203      	movs	r2, #3
 8002f82:	400a      	ands	r2, r1
 8002f84:	00d2      	lsls	r2, r2, #3
 8002f86:	21ff      	movs	r1, #255	@ 0xff
 8002f88:	4091      	lsls	r1, r2
 8002f8a:	000a      	movs	r2, r1
 8002f8c:	43d2      	mvns	r2, r2
 8002f8e:	401a      	ands	r2, r3
 8002f90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	401a      	ands	r2, r3
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	4003      	ands	r3, r0
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa8:	481f      	ldr	r0, [pc, #124]	@ (8003028 <__NVIC_SetPriority+0xd4>)
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b25b      	sxtb	r3, r3
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	33c0      	adds	r3, #192	@ 0xc0
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fba:	e031      	b.n	8003020 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800302c <__NVIC_SetPriority+0xd8>)
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	3b08      	subs	r3, #8
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3306      	adds	r3, #6
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1dfa      	adds	r2, r7, #7
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	0011      	movs	r1, r2
 8002fdc:	2203      	movs	r2, #3
 8002fde:	400a      	ands	r2, r1
 8002fe0:	00d2      	lsls	r2, r2, #3
 8002fe2:	21ff      	movs	r1, #255	@ 0xff
 8002fe4:	4091      	lsls	r1, r2
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	43d2      	mvns	r2, r2
 8002fea:	401a      	ands	r2, r3
 8002fec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	22ff      	movs	r2, #255	@ 0xff
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	4003      	ands	r3, r0
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003004:	4809      	ldr	r0, [pc, #36]	@ (800302c <__NVIC_SetPriority+0xd8>)
 8003006:	1dfb      	adds	r3, r7, #7
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	001c      	movs	r4, r3
 800300c:	230f      	movs	r3, #15
 800300e:	4023      	ands	r3, r4
 8003010:	3b08      	subs	r3, #8
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	430a      	orrs	r2, r1
 8003016:	3306      	adds	r3, #6
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	18c3      	adds	r3, r0, r3
 800301c:	3304      	adds	r3, #4
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b003      	add	sp, #12
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	e000e100 	.word	0xe000e100
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	210f      	movs	r1, #15
 800303c:	187b      	adds	r3, r7, r1
 800303e:	1c02      	adds	r2, r0, #0
 8003040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	187b      	adds	r3, r7, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b25b      	sxtb	r3, r3
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff ff81 	bl	8002f54 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	0002      	movs	r2, r0
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b25b      	sxtb	r3, r3
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ff57 	bl	8002f20 <__NVIC_EnableIRQ>
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	e155      	b.n	8003338 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4091      	lsls	r1, r2
 8003096:	000a      	movs	r2, r1
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d100      	bne.n	80030a4 <HAL_GPIO_Init+0x28>
 80030a2:	e146      	b.n	8003332 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	2201      	movs	r2, #1
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b03      	cmp	r3, #3
 8003128:	d017      	beq.n	800315a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	43da      	mvns	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d123      	bne.n	80031ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	58d3      	ldr	r3, [r2, r3]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	409a      	lsls	r2, r3
 8003180:	0013      	movs	r3, r2
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2107      	movs	r1, #7
 8003192:	400b      	ands	r3, r1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	409a      	lsls	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	401a      	ands	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	23c0      	movs	r3, #192	@ 0xc0
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d100      	bne.n	80031f0 <HAL_GPIO_Init+0x174>
 80031ee:	e0a0      	b.n	8003332 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HAL_GPIO_Init+0x2d4>)
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b56      	ldr	r3, [pc, #344]	@ (8003350 <HAL_GPIO_Init+0x2d4>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HAL_GPIO_Init+0x2d4>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003208:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_GPIO_Init+0x2d8>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	589b      	ldr	r3, [r3, r2]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2203      	movs	r2, #3
 800321a:	4013      	ands	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	43da      	mvns	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	2390      	movs	r3, #144	@ 0x90
 8003230:	05db      	lsls	r3, r3, #23
 8003232:	429a      	cmp	r2, r3
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x1ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a47      	ldr	r2, [pc, #284]	@ (8003358 <HAL_GPIO_Init+0x2dc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x1ea>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a46      	ldr	r2, [pc, #280]	@ (800335c <HAL_GPIO_Init+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x1e6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a45      	ldr	r2, [pc, #276]	@ (8003360 <HAL_GPIO_Init+0x2e4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x1e2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a44      	ldr	r2, [pc, #272]	@ (8003364 <HAL_GPIO_Init+0x2e8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x1de>
 8003256:	2304      	movs	r3, #4
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800325a:	2305      	movs	r3, #5
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800326a:	2300      	movs	r3, #0
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	2103      	movs	r1, #3
 8003270:	400a      	ands	r2, r1
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800327c:	4935      	ldr	r1, [pc, #212]	@ (8003354 <HAL_GPIO_Init+0x2d8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43da      	mvns	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	035b      	lsls	r3, r3, #13
 80032a2:	4013      	ands	r3, r2
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43da      	mvns	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	2380      	movs	r3, #128	@ 0x80
 80032ca:	039b      	lsls	r3, r3, #14
 80032cc:	4013      	ands	r3, r2
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032d8:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032de:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	029b      	lsls	r3, r3, #10
 80032f6:	4013      	ands	r3, r2
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003302:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43da      	mvns	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	4013      	ands	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_GPIO_Init+0x2ec>)
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	40da      	lsrs	r2, r3
 8003340:	1e13      	subs	r3, r2, #0
 8003342:	d000      	beq.n	8003346 <HAL_GPIO_Init+0x2ca>
 8003344:	e6a2      	b.n	800308c <HAL_GPIO_Init+0x10>
  } 
}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000
 8003358:	48000400 	.word	0x48000400
 800335c:	48000800 	.word	0x48000800
 8003360:	48000c00 	.word	0x48000c00
 8003364:	48001000 	.word	0x48001000
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	0008      	movs	r0, r1
 8003376:	0011      	movs	r1, r2
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	1c02      	adds	r2, r0, #0
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	1c7b      	adds	r3, r7, #1
 8003380:	1c0a      	adds	r2, r1, #0
 8003382:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003384:	1c7b      	adds	r3, r7, #1
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338c:	1cbb      	adds	r3, r7, #2
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003396:	1cbb      	adds	r3, r7, #2
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b002      	add	sp, #8
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f000 fb76 	bl	8003aa8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d100      	bne.n	80033c8 <HAL_RCC_OscConfig+0x20>
 80033c6:	e08e      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033c8:	4bc5      	ldr	r3, [pc, #788]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	220c      	movs	r2, #12
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00e      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d4:	4bc2      	ldr	r3, [pc, #776]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	220c      	movs	r2, #12
 80033da:	4013      	ands	r3, r2
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d117      	bne.n	8003410 <HAL_RCC_OscConfig+0x68>
 80033e0:	4bbf      	ldr	r3, [pc, #764]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	025b      	lsls	r3, r3, #9
 80033e8:	401a      	ands	r2, r3
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10e      	bne.n	8003410 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4bbb      	ldr	r3, [pc, #748]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	4013      	ands	r3, r2
 80033fc:	d100      	bne.n	8003400 <HAL_RCC_OscConfig+0x58>
 80033fe:	e071      	b.n	80034e4 <HAL_RCC_OscConfig+0x13c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d000      	beq.n	800340a <HAL_RCC_OscConfig+0x62>
 8003408:	e06c      	b.n	80034e4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f000 fb4c 	bl	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x80>
 8003418:	4bb1      	ldr	r3, [pc, #708]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4bb0      	ldr	r3, [pc, #704]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	0249      	lsls	r1, r1, #9
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e02f      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCC_OscConfig+0xa2>
 8003430:	4bab      	ldr	r3, [pc, #684]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4baa      	ldr	r3, [pc, #680]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003436:	49ab      	ldr	r1, [pc, #684]	@ (80036e4 <HAL_RCC_OscConfig+0x33c>)
 8003438:	400a      	ands	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	4ba8      	ldr	r3, [pc, #672]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4ba7      	ldr	r3, [pc, #668]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003442:	49a9      	ldr	r1, [pc, #676]	@ (80036e8 <HAL_RCC_OscConfig+0x340>)
 8003444:	400a      	ands	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e01e      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10e      	bne.n	8003470 <HAL_RCC_OscConfig+0xc8>
 8003452:	4ba3      	ldr	r3, [pc, #652]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4ba2      	ldr	r3, [pc, #648]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003458:	2180      	movs	r1, #128	@ 0x80
 800345a:	02c9      	lsls	r1, r1, #11
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b9f      	ldr	r3, [pc, #636]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b9e      	ldr	r3, [pc, #632]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	0249      	lsls	r1, r1, #9
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xe0>
 8003470:	4b9b      	ldr	r3, [pc, #620]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b9a      	ldr	r3, [pc, #616]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003476:	499b      	ldr	r1, [pc, #620]	@ (80036e4 <HAL_RCC_OscConfig+0x33c>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4b98      	ldr	r3, [pc, #608]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b97      	ldr	r3, [pc, #604]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003482:	4999      	ldr	r1, [pc, #612]	@ (80036e8 <HAL_RCC_OscConfig+0x340>)
 8003484:	400a      	ands	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d014      	beq.n	80034ba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff f850 	bl	8002534 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349a:	f7ff f84b 	bl	8002534 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e2fd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	4b8c      	ldr	r3, [pc, #560]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0xf2>
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7ff f83b 	bl	8002534 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff f836 	bl	8002534 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	@ 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2e8      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b82      	ldr	r3, [pc, #520]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	@ 0x80
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	4013      	ands	r3, r2
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x11c>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d100      	bne.n	80034f2 <HAL_RCC_OscConfig+0x14a>
 80034f0:	e06c      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034f2:	4b7b      	ldr	r3, [pc, #492]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	220c      	movs	r2, #12
 80034f8:	4013      	ands	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034fc:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	220c      	movs	r2, #12
 8003502:	4013      	ands	r3, r2
 8003504:	2b08      	cmp	r3, #8
 8003506:	d11f      	bne.n	8003548 <HAL_RCC_OscConfig+0x1a0>
 8003508:	4b75      	ldr	r3, [pc, #468]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	23c0      	movs	r3, #192	@ 0xc0
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	401a      	ands	r2, r3
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	429a      	cmp	r2, r3
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b71      	ldr	r3, [pc, #452]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d005      	beq.n	8003530 <HAL_RCC_OscConfig+0x188>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e2bb      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b6b      	ldr	r3, [pc, #428]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	22f8      	movs	r2, #248	@ 0xf8
 8003536:	4393      	bics	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00da      	lsls	r2, r3, #3
 8003540:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e041      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d024      	beq.n	800359a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b62      	ldr	r3, [pc, #392]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe ffea 	bl	8002534 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7fe ffe5 	bl	8002534 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e297      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b59      	ldr	r3, [pc, #356]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b57      	ldr	r3, [pc, #348]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	22f8      	movs	r2, #248	@ 0xf8
 8003588:	4393      	bics	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00da      	lsls	r2, r3, #3
 8003592:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e018      	b.n	80035cc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b50      	ldr	r3, [pc, #320]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	438a      	bics	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fe ffc5 	bl	8002534 <HAL_GetTick>
 80035aa:	0003      	movs	r3, r0
 80035ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe ffc0 	bl	8002534 <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e272      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f1      	bne.n	80035b0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	4013      	ands	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d019      	beq.n	8003612 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035de:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe ffa3 	bl	8002534 <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe ff9e 	bl	8002534 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e250      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d0f1      	beq.n	80035f4 <HAL_RCC_OscConfig+0x24c>
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003612:	4b33      	ldr	r3, [pc, #204]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003616:	4b32      	ldr	r3, [pc, #200]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003618:	2101      	movs	r1, #1
 800361a:	438a      	bics	r2, r1
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe ff89 	bl	8002534 <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe ff84 	bl	8002534 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e236      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363a:	4b29      	ldr	r3, [pc, #164]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d1f1      	bne.n	8003628 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2204      	movs	r2, #4
 800364a:	4013      	ands	r3, r2
 800364c:	d100      	bne.n	8003650 <HAL_RCC_OscConfig+0x2a8>
 800364e:	e0b5      	b.n	80037bc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	201f      	movs	r0, #31
 8003652:	183b      	adds	r3, r7, r0
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003658:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	4013      	ands	r3, r2
 8003662:	d110      	bne.n	8003686 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	0549      	lsls	r1, r1, #21
 800366e:	430a      	orrs	r2, r1
 8003670:	61da      	str	r2, [r3, #28]
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	055b      	lsls	r3, r3, #21
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003680:	183b      	adds	r3, r7, r0
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	0049      	lsls	r1, r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a0:	f7fe ff48 	bl	8002534 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe ff43 	bl	8002534 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1f5      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_OscConfig+0x344>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10f      	bne.n	80036f0 <HAL_RCC_OscConfig+0x348>
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	4b02      	ldr	r3, [pc, #8]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	430a      	orrs	r2, r1
 80036da:	621a      	str	r2, [r3, #32]
 80036dc:	e036      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	40021000 	.word	0x40021000
 80036e4:	fffeffff 	.word	0xfffeffff
 80036e8:	fffbffff 	.word	0xfffbffff
 80036ec:	40007000 	.word	0x40007000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x36a>
 80036f8:	4bca      	ldr	r3, [pc, #808]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	4bc9      	ldr	r3, [pc, #804]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	4bc7      	ldr	r3, [pc, #796]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	4bc6      	ldr	r3, [pc, #792]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800370a:	2104      	movs	r1, #4
 800370c:	438a      	bics	r2, r1
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b05      	cmp	r3, #5
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x38c>
 800371a:	4bc2      	ldr	r3, [pc, #776]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	4bc1      	ldr	r3, [pc, #772]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003720:	2104      	movs	r1, #4
 8003722:	430a      	orrs	r2, r1
 8003724:	621a      	str	r2, [r3, #32]
 8003726:	4bbf      	ldr	r3, [pc, #764]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	4bbe      	ldr	r3, [pc, #760]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800372c:	2101      	movs	r1, #1
 800372e:	430a      	orrs	r2, r1
 8003730:	621a      	str	r2, [r3, #32]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x3a4>
 8003734:	4bbb      	ldr	r3, [pc, #748]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4bba      	ldr	r3, [pc, #744]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
 8003740:	4bb8      	ldr	r3, [pc, #736]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	4bb7      	ldr	r3, [pc, #732]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003746:	2104      	movs	r1, #4
 8003748:	438a      	bics	r2, r1
 800374a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d014      	beq.n	800377e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003754:	f7fe feee 	bl	8002534 <HAL_GetTick>
 8003758:	0003      	movs	r3, r0
 800375a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e009      	b.n	8003772 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fee9 	bl	8002534 <HAL_GetTick>
 8003762:	0002      	movs	r2, r0
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	4aaf      	ldr	r2, [pc, #700]	@ (8003a28 <HAL_RCC_OscConfig+0x680>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e19a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	4bac      	ldr	r3, [pc, #688]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x3b6>
 800377c:	e013      	b.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fe fed9 	bl	8002534 <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	e009      	b.n	800379c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe fed4 	bl	8002534 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	4aa5      	ldr	r2, [pc, #660]	@ (8003a28 <HAL_RCC_OscConfig+0x680>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e185      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4ba1      	ldr	r3, [pc, #644]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	2202      	movs	r2, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b9c      	ldr	r3, [pc, #624]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037b6:	499d      	ldr	r1, [pc, #628]	@ (8003a2c <HAL_RCC_OscConfig+0x684>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2210      	movs	r2, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d12a      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037ce:	4b95      	ldr	r3, [pc, #596]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d2:	4b94      	ldr	r3, [pc, #592]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037d4:	2104      	movs	r1, #4
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80037da:	4b92      	ldr	r3, [pc, #584]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037de:	4b91      	ldr	r3, [pc, #580]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	430a      	orrs	r2, r1
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fea5 	bl	8002534 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037f0:	f7fe fea0 	bl	8002534 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e152      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d0f1      	beq.n	80037f0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800380c:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800380e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003810:	22f8      	movs	r2, #248	@ 0xf8
 8003812:	4393      	bics	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	4b81      	ldr	r3, [pc, #516]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800381e:	430a      	orrs	r2, r1
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34
 8003822:	e034      	b.n	800388e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	3305      	adds	r3, #5
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800382c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800382e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003830:	4b7c      	ldr	r3, [pc, #496]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003832:	2104      	movs	r1, #4
 8003834:	438a      	bics	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003838:	4b7a      	ldr	r3, [pc, #488]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800383a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383c:	22f8      	movs	r2, #248	@ 0xf8
 800383e:	4393      	bics	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	4b76      	ldr	r3, [pc, #472]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800384a:	430a      	orrs	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34
 800384e:	e01e      	b.n	800388e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003850:	4b74      	ldr	r3, [pc, #464]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003854:	4b73      	ldr	r3, [pc, #460]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003856:	2104      	movs	r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800385c:	4b71      	ldr	r3, [pc, #452]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800385e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003860:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003862:	2101      	movs	r1, #1
 8003864:	438a      	bics	r2, r1
 8003866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fe fe64 	bl	8002534 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003872:	f7fe fe5f 	bl	8002534 <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e111      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003884:	4b67      	ldr	r3, [pc, #412]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003888:	2202      	movs	r2, #2
 800388a:	4013      	ands	r3, r2
 800388c:	d1f1      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2220      	movs	r2, #32
 8003894:	4013      	ands	r3, r2
 8003896:	d05c      	beq.n	8003952 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003898:	4b62      	ldr	r3, [pc, #392]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	220c      	movs	r2, #12
 800389e:	4013      	ands	r3, r2
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d00e      	beq.n	80038c2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	220c      	movs	r2, #12
 80038aa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d114      	bne.n	80038da <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	23c0      	movs	r3, #192	@ 0xc0
 80038b6:	025b      	lsls	r3, r3, #9
 80038b8:	401a      	ands	r2, r3
 80038ba:	23c0      	movs	r3, #192	@ 0xc0
 80038bc:	025b      	lsls	r3, r3, #9
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80038c2:	4b58      	ldr	r3, [pc, #352]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c6:	2380      	movs	r3, #128	@ 0x80
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	4013      	ands	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_RCC_OscConfig+0x5a8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d03c      	beq.n	8003950 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0e6      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01b      	beq.n	800391a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80038e2:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80038e8:	2180      	movs	r1, #128	@ 0x80
 80038ea:	0249      	lsls	r1, r1, #9
 80038ec:	430a      	orrs	r2, r1
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fe20 	bl	8002534 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fa:	f7fe fe1b 	bl	8002534 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0cd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800390c:	4b45      	ldr	r3, [pc, #276]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800390e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4013      	ands	r3, r2
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x552>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800391a:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800391c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003920:	4943      	ldr	r1, [pc, #268]	@ (8003a30 <HAL_RCC_OscConfig+0x688>)
 8003922:	400a      	ands	r2, r1
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fe05 	bl	8002534 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003930:	f7fe fe00 	bl	8002534 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0b2      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003942:	4b38      	ldr	r3, [pc, #224]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4013      	ands	r3, r2
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x588>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003950:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x5b4>
 800395a:	e0a4      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	220c      	movs	r2, #12
 8003962:	4013      	ands	r3, r2
 8003964:	2b08      	cmp	r3, #8
 8003966:	d100      	bne.n	800396a <HAL_RCC_OscConfig+0x5c2>
 8003968:	e078      	b.n	8003a5c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	2b02      	cmp	r3, #2
 8003970:	d14c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003978:	492e      	ldr	r1, [pc, #184]	@ (8003a34 <HAL_RCC_OscConfig+0x68c>)
 800397a:	400a      	ands	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fdd9 	bl	8002534 <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe fdd4 	bl	8002534 <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e086      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399a:	4b22      	ldr	r3, [pc, #136]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	4013      	ands	r3, r2
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	220f      	movs	r2, #15
 80039ac:	4393      	bics	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <HAL_RCC_OscConfig+0x690>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	431a      	orrs	r2, r3
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	0449      	lsls	r1, r1, #17
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe fda7 	bl	8002534 <HAL_GetTick>
 80039e6:	0003      	movs	r3, r0
 80039e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe fda2 	bl	8002534 <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e054      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fe:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	049b      	lsls	r3, r3, #18
 8003a06:	4013      	ands	r3, r2
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x644>
 8003a0a:	e04c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <HAL_RCC_OscConfig+0x67c>)
 8003a12:	4908      	ldr	r1, [pc, #32]	@ (8003a34 <HAL_RCC_OscConfig+0x68c>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fd8c 	bl	8002534 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	40021000 	.word	0x40021000
 8003a28:	00001388 	.word	0x00001388
 8003a2c:	efffffff 	.word	0xefffffff
 8003a30:	fffeffff 	.word	0xfffeffff
 8003a34:	feffffff 	.word	0xfeffffff
 8003a38:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fd7a 	bl	8002534 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e02c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	4b18      	ldr	r3, [pc, #96]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	049b      	lsls	r3, r3, #18
 8003a56:	4013      	ands	r3, r2
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x694>
 8003a5a:	e024      	b.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e01f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x708>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	23c0      	movs	r3, #192	@ 0xc0
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d10e      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	220f      	movs	r2, #15
 8003a88:	401a      	ands	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	23f0      	movs	r3, #240	@ 0xf0
 8003a96:	039b      	lsls	r3, r3, #14
 8003a98:	401a      	ands	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b008      	add	sp, #32
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0bf      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2201      	movs	r2, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d911      	bls.n	8003afa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0a6      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d006      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b0e:	4b51      	ldr	r3, [pc, #324]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4b50      	ldr	r3, [pc, #320]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b14:	21e0      	movs	r1, #224	@ 0xe0
 8003b16:	00c9      	lsls	r1, r1, #3
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	22f0      	movs	r2, #240	@ 0xf0
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	d04c      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b44      	ldr	r3, [pc, #272]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d120      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07a      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	049b      	lsls	r3, r3, #18
 8003b62:	4013      	ands	r3, r2
 8003b64:	d114      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06e      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e062      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e05b      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b90:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4393      	bics	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fcc6 	bl	8002534 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bae:	f7fe fcc1 	bl	8002534 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <HAL_RCC_ClockConfig+0x1a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e042      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	401a      	ands	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1ec      	bne.n	8003bae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d211      	bcs.n	8003c06 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4393      	bics	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf4:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e020      	b.n	8003c48 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a11      	ldr	r2, [pc, #68]	@ (8003c5c <HAL_RCC_ClockConfig+0x1a8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c24:	f000 f820 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003c28:	0001      	movs	r1, r0
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1a0>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	220f      	movs	r2, #15
 8003c32:	4013      	ands	r3, r2
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <HAL_RCC_ClockConfig+0x1ac>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	000a      	movs	r2, r1
 8003c3a:	40da      	lsrs	r2, r3
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c40:	2003      	movs	r0, #3
 8003c42:	f7fc fd13 	bl	800066c <HAL_InitTick>
  
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b004      	add	sp, #16
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40021000 	.word	0x40021000
 8003c58:	00001388 	.word	0x00001388
 8003c5c:	fffff8ff 	.word	0xfffff8ff
 8003c60:	080062e0 	.word	0x080062e0
 8003c64:	20000000 	.word	0x20000000

08003c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c82:	4b2d      	ldr	r3, [pc, #180]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d046      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0xb8>
 8003c92:	d848      	bhi.n	8003d26 <HAL_RCC_GetSysClockFreq+0xbe>
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d002      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x36>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003c9c:	e043      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ca0:	613b      	str	r3, [r7, #16]
      break;
 8003ca2:	e043      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	220f      	movs	r2, #15
 8003caa:	4013      	ands	r3, r2
 8003cac:	4a24      	ldr	r2, [pc, #144]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cb2:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	4013      	ands	r3, r2
 8003cba:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	23c0      	movs	r3, #192	@ 0xc0
 8003cc4:	025b      	lsls	r3, r3, #9
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	481a      	ldr	r0, [pc, #104]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cd4:	f7fc fa22 	bl	800011c <__udivsi3>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	001a      	movs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4353      	muls	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e01a      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	23c0      	movs	r3, #192	@ 0xc0
 8003ce8:	025b      	lsls	r3, r3, #9
 8003cea:	401a      	ands	r2, r3
 8003cec:	23c0      	movs	r3, #192	@ 0xc0
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d109      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4814      	ldr	r0, [pc, #80]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003cf8:	f7fc fa10 	bl	800011c <__udivsi3>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	001a      	movs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4353      	muls	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	480c      	ldr	r0, [pc, #48]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d0c:	f7fc fa06 	bl	800011c <__udivsi3>
 8003d10:	0003      	movs	r3, r0
 8003d12:	001a      	movs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4353      	muls	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
      break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003d22:	613b      	str	r3, [r7, #16]
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d28:	613b      	str	r3, [r7, #16]
      break;
 8003d2a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d2c:	693b      	ldr	r3, [r7, #16]
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	08006cfc 	.word	0x08006cfc
 8003d44:	08006d0c 	.word	0x08006d0c
 8003d48:	02dc6c00 	.word	0x02dc6c00

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b02      	ldr	r3, [pc, #8]	@ (8003d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	20000000 	.word	0x20000000

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d64:	f7ff fff2 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d68:	0001      	movs	r1, r0
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	2207      	movs	r2, #7
 8003d72:	4013      	ands	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	40d9      	lsrs	r1, r3
 8003d7a:	000b      	movs	r3, r1
}    
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	40021000 	.word	0x40021000
 8003d88:	080062f0 	.word	0x080062f0

08003d8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x4c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2203      	movs	r2, #3
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x4c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	22f0      	movs	r2, #240	@ 0xf0
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003db4:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x4c>)
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	23e0      	movs	r3, #224	@ 0xe0
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_GetClockConfig+0x50>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	401a      	ands	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40022000 	.word	0x40022000

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	025b      	lsls	r3, r3, #9
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003dfc:	e08e      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2017      	movs	r0, #23
 8003e00:	183b      	adds	r3, r7, r0
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b6e      	ldr	r3, [pc, #440]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	2380      	movs	r3, #128	@ 0x80
 8003e0c:	055b      	lsls	r3, r3, #21
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d110      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e18:	2180      	movs	r1, #128	@ 0x80
 8003e1a:	0549      	lsls	r1, r1, #21
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	61da      	str	r2, [r3, #28]
 8003e20:	4b67      	ldr	r3, [pc, #412]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	055b      	lsls	r3, r3, #21
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b63      	ldr	r3, [pc, #396]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	@ 0x80
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d11a      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e40:	4b60      	ldr	r3, [pc, #384]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	0049      	lsls	r1, r1, #1
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fb71 	bl	8002534 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e58:	f7fe fb6c 	bl	8002534 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0a6      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	4b56      	ldr	r3, [pc, #344]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e76:	4b52      	ldr	r3, [pc, #328]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	23c0      	movs	r3, #192	@ 0xc0
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d034      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	23c0      	movs	r3, #192	@ 0xc0
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4013      	ands	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d02c      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e98:	4b49      	ldr	r3, [pc, #292]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea2:	4b47      	ldr	r3, [pc, #284]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ea4:	6a1a      	ldr	r2, [r3, #32]
 8003ea6:	4b46      	ldr	r3, [pc, #280]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ea8:	2180      	movs	r1, #128	@ 0x80
 8003eaa:	0249      	lsls	r1, r1, #9
 8003eac:	430a      	orrs	r2, r1
 8003eae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb0:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	4b42      	ldr	r3, [pc, #264]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eb6:	4945      	ldr	r1, [pc, #276]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ebc:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fb33 	bl	8002534 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fe fb2e 	bl	8002534 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e067      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef2:	4b33      	ldr	r3, [pc, #204]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a34      	ldr	r2, [pc, #208]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f02:	430a      	orrs	r2, r1
 8003f04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f06:	2317      	movs	r3, #23
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f16:	492f      	ldr	r1, [pc, #188]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003f18:	400a      	ands	r2, r1
 8003f1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f26:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f36:	430a      	orrs	r2, r1
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	4a23      	ldr	r2, [pc, #140]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f54:	430a      	orrs	r2, r1
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	02db      	lsls	r3, r3, #11
 8003f60:	4013      	ands	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f64:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f82:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	2210      	movs	r2, #16
 8003f88:	4393      	bics	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f92:	430a      	orrs	r2, r1
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fa2:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	2240      	movs	r2, #64	@ 0x40
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b006      	add	sp, #24
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	fffffcff 	.word	0xfffffcff
 8003fcc:	fffeffff 	.word	0xfffeffff
 8003fd0:	00001388 	.word	0x00001388
 8003fd4:	efffffff 	.word	0xefffffff
 8003fd8:	fffcffff 	.word	0xfffcffff
 8003fdc:	fff3ffff 	.word	0xfff3ffff

08003fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0a8      	b.n	8004144 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	2382      	movs	r3, #130	@ 0x82
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	429a      	cmp	r2, r3
 8004004:	d009      	beq.n	800401a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	61da      	str	r2, [r3, #28]
 800400c:	e005      	b.n	800401a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	225d      	movs	r2, #93	@ 0x5d
 8004024:	5c9b      	ldrb	r3, [r3, r2]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d107      	bne.n	800403c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	225c      	movs	r2, #92	@ 0x5c
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f7fc fa80 	bl	800053c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	225d      	movs	r2, #93	@ 0x5d
 8004040:	2102      	movs	r1, #2
 8004042:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2140      	movs	r1, #64	@ 0x40
 8004050:	438a      	bics	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	23e0      	movs	r3, #224	@ 0xe0
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	429a      	cmp	r2, r3
 800405e:	d902      	bls.n	8004066 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e002      	b.n	800406c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	015b      	lsls	r3, r3, #5
 800406a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	23f0      	movs	r3, #240	@ 0xf0
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	429a      	cmp	r2, r3
 8004076:	d008      	beq.n	800408a <HAL_SPI_Init+0xaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	23e0      	movs	r3, #224	@ 0xe0
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	429a      	cmp	r2, r3
 8004082:	d002      	beq.n	800408a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	2382      	movs	r3, #130	@ 0x82
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	401a      	ands	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	2384      	movs	r3, #132	@ 0x84
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	400b      	ands	r3, r1
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2102      	movs	r1, #2
 80040a6:	400b      	ands	r3, r1
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	2101      	movs	r1, #1
 80040b0:	400b      	ands	r3, r1
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6999      	ldr	r1, [r3, #24]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	400b      	ands	r3, r1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2138      	movs	r1, #56	@ 0x38
 80040c6:	400b      	ands	r3, r1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	2180      	movs	r1, #128	@ 0x80
 80040d0:	400b      	ands	r3, r1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	0011      	movs	r1, r2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	401a      	ands	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	2204      	movs	r2, #4
 80040f0:	401a      	ands	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2110      	movs	r1, #16
 80040f8:	400b      	ands	r3, r1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004100:	2108      	movs	r1, #8
 8004102:	400b      	ands	r3, r1
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68d9      	ldr	r1, [r3, #12]
 800410a:	23f0      	movs	r3, #240	@ 0xf0
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	400b      	ands	r3, r1
 8004110:	431a      	orrs	r2, r3
 8004112:	0011      	movs	r1, r2
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4907      	ldr	r1, [pc, #28]	@ (800414c <HAL_SPI_Init+0x16c>)
 8004130:	400a      	ands	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	225d      	movs	r2, #93	@ 0x5d
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b004      	add	sp, #16
 800414a:	bd80      	pop	{r7, pc}
 800414c:	fffff7ff 	.word	0xfffff7ff

08004150 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004160:	231f      	movs	r3, #31
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	225c      	movs	r2, #92	@ 0x5c
 800416c:	5c9b      	ldrb	r3, [r3, r2]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Transmit+0x26>
 8004172:	2302      	movs	r3, #2
 8004174:	e147      	b.n	8004406 <HAL_SPI_Transmit+0x2b6>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	225c      	movs	r2, #92	@ 0x5c
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fe f9d9 	bl	8002534 <HAL_GetTick>
 8004182:	0003      	movs	r3, r0
 8004184:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004186:	2316      	movs	r3, #22
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	1dba      	adds	r2, r7, #6
 800418c:	8812      	ldrh	r2, [r2, #0]
 800418e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	225d      	movs	r2, #93	@ 0x5d
 8004194:	5c9b      	ldrb	r3, [r3, r2]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d004      	beq.n	80041a6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800419c:	231f      	movs	r3, #31
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80041a4:	e128      	b.n	80043f8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_SPI_Transmit+0x64>
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80041b4:	231f      	movs	r3, #31
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80041bc:	e11c      	b.n	80043f8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	225d      	movs	r2, #93	@ 0x5d
 80041c2:	2103      	movs	r1, #3
 80041c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1dba      	adds	r2, r7, #6
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1dba      	adds	r2, r7, #6
 80041de:	8812      	ldrh	r2, [r2, #0]
 80041e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2244      	movs	r2, #68	@ 0x44
 80041ec:	2100      	movs	r1, #0
 80041ee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2246      	movs	r2, #70	@ 0x46
 80041f4:	2100      	movs	r1, #0
 80041f6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	429a      	cmp	r2, r3
 800420e:	d110      	bne.n	8004232 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2140      	movs	r1, #64	@ 0x40
 800421c:	438a      	bics	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	01c9      	lsls	r1, r1, #7
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2240      	movs	r2, #64	@ 0x40
 800423a:	4013      	ands	r3, r2
 800423c:	2b40      	cmp	r3, #64	@ 0x40
 800423e:	d007      	beq.n	8004250 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2140      	movs	r1, #64	@ 0x40
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	23e0      	movs	r3, #224	@ 0xe0
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	429a      	cmp	r2, r3
 800425a:	d952      	bls.n	8004302 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_SPI_Transmit+0x11e>
 8004264:	2316      	movs	r3, #22
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d143      	bne.n	80042f6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004292:	e030      	b.n	80042f6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2202      	movs	r2, #2
 800429c:	4013      	ands	r3, r2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d112      	bne.n	80042c8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042c6:	e016      	b.n	80042f6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c8:	f7fe f934 	bl	8002534 <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d802      	bhi.n	80042de <HAL_SPI_Transmit+0x18e>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Transmit+0x194>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	231f      	movs	r3, #31
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2203      	movs	r2, #3
 80042ea:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	225d      	movs	r2, #93	@ 0x5d
 80042f0:	2101      	movs	r1, #1
 80042f2:	5499      	strb	r1, [r3, r2]
          goto error;
 80042f4:	e080      	b.n	80043f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1c9      	bne.n	8004294 <HAL_SPI_Transmit+0x144>
 8004300:	e053      	b.n	80043aa <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_SPI_Transmit+0x1c4>
 800430a:	2316      	movs	r3, #22
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d145      	bne.n	80043a0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800433a:	e031      	b.n	80043a0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d113      	bne.n	8004372 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004370:	e016      	b.n	80043a0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004372:	f7fe f8df 	bl	8002534 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d802      	bhi.n	8004388 <HAL_SPI_Transmit+0x238>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x23e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800438e:	231f      	movs	r3, #31
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2203      	movs	r2, #3
 8004394:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	225d      	movs	r2, #93	@ 0x5d
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
          goto error;
 800439e:	e02b      	b.n	80043f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1c8      	bne.n	800433c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 f95d 	bl	8004670 <SPI_EndRxTxTransaction>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80043e6:	231f      	movs	r3, #31
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e003      	b.n	80043f8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	225d      	movs	r2, #93	@ 0x5d
 80043f4:	2101      	movs	r1, #1
 80043f6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	225c      	movs	r2, #92	@ 0x5c
 80043fc:	2100      	movs	r1, #0
 80043fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004400:	231f      	movs	r3, #31
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	781b      	ldrb	r3, [r3, #0]
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b008      	add	sp, #32
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	1dfb      	adds	r3, r7, #7
 800441e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004420:	f7fe f888 	bl	8002534 <HAL_GetTick>
 8004424:	0002      	movs	r2, r0
 8004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004430:	f7fe f880 	bl	8002534 <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004438:	4b3a      	ldr	r3, [pc, #232]	@ (8004524 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	015b      	lsls	r3, r3, #5
 800443e:	0d1b      	lsrs	r3, r3, #20
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	4353      	muls	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004446:	e058      	b.n	80044fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	d055      	beq.n	80044fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444e:	f7fe f871 	bl	8002534 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	429a      	cmp	r2, r3
 800445c:	d902      	bls.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x54>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d142      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	21e0      	movs	r1, #224	@ 0xe0
 8004470:	438a      	bics	r2, r1
 8004472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	2382      	movs	r3, #130	@ 0x82
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	429a      	cmp	r2, r3
 800447e:	d113      	bne.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	429a      	cmp	r2, r3
 800448a:	d005      	beq.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	2380      	movs	r3, #128	@ 0x80
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2140      	movs	r1, #64	@ 0x40
 80044a4:	438a      	bics	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	019b      	lsls	r3, r3, #6
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d110      	bne.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	491a      	ldr	r1, [pc, #104]	@ (8004528 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	0189      	lsls	r1, r1, #6
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	225d      	movs	r2, #93	@ 0x5d
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	225c      	movs	r2, #92	@ 0x5c
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e017      	b.n	800451a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	425a      	negs	r2, r3
 800450a:	4153      	adcs	r3, r2
 800450c:	b2db      	uxtb	r3, r3
 800450e:	001a      	movs	r2, r3
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d197      	bne.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b008      	add	sp, #32
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	20000000 	.word	0x20000000
 8004528:	ffffdfff 	.word	0xffffdfff

0800452c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800453a:	2317      	movs	r3, #23
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004542:	f7fd fff7 	bl	8002534 <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004552:	f7fd ffef 	bl	8002534 <HAL_GetTick>
 8004556:	0003      	movs	r3, r0
 8004558:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004562:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	0013      	movs	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	189b      	adds	r3, r3, r2
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	4353      	muls	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004578:	e068      	b.n	800464c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	23c0      	movs	r3, #192	@ 0xc0
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	429a      	cmp	r2, r3
 8004582:	d10a      	bne.n	800459a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	2117      	movs	r1, #23
 8004592:	187b      	adds	r3, r7, r1
 8004594:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004596:	187b      	adds	r3, r7, r1
 8004598:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	d055      	beq.n	800464c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a0:	f7fd ffc8 	bl	8002534 <HAL_GetTick>
 80045a4:	0002      	movs	r2, r0
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d142      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	21e0      	movs	r1, #224	@ 0xe0
 80045c2:	438a      	bics	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	2382      	movs	r3, #130	@ 0x82
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d113      	bne.n	80045fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	429a      	cmp	r2, r3
 80045dc:	d005      	beq.n	80045ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d107      	bne.n	80045fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2140      	movs	r1, #64	@ 0x40
 80045f6:	438a      	bics	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	429a      	cmp	r2, r3
 8004604:	d110      	bne.n	8004628 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4916      	ldr	r1, [pc, #88]	@ (800466c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	0189      	lsls	r1, r1, #6
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	225d      	movs	r2, #93	@ 0x5d
 800462c:	2101      	movs	r1, #1
 800462e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	225c      	movs	r2, #92	@ 0x5c
 8004634:	2100      	movs	r1, #0
 8004636:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e010      	b.n	800465e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3b01      	subs	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d18e      	bne.n	800457a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b00a      	add	sp, #40	@ 0x28
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	20000000 	.word	0x20000000
 800466c:	ffffdfff 	.word	0xffffdfff

08004670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	23c0      	movs	r3, #192	@ 0xc0
 8004680:	0159      	lsls	r1, r3, #5
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	f7ff ff4e 	bl	800452c <SPI_WaitFifoStateUntilTimeout>
 8004690:	1e03      	subs	r3, r0, #0
 8004692:	d007      	beq.n	80046a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004698:	2220      	movs	r2, #32
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e027      	b.n	80046f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	0013      	movs	r3, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	@ 0x80
 80046b2:	f7ff fead 	bl	8004410 <SPI_WaitFlagStateUntilTimeout>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d007      	beq.n	80046ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046be:	2220      	movs	r2, #32
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e014      	b.n	80046f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	23c0      	movs	r3, #192	@ 0xc0
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	0013      	movs	r3, r2
 80046d8:	2200      	movs	r2, #0
 80046da:	f7ff ff27 	bl	800452c <SPI_WaitFifoStateUntilTimeout>
 80046de:	1e03      	subs	r3, r0, #0
 80046e0:	d007      	beq.n	80046f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e6:	2220      	movs	r2, #32
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e000      	b.n	80046f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b004      	add	sp, #16
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e042      	b.n	8004794 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	223d      	movs	r2, #61	@ 0x3d
 8004712:	5c9b      	ldrb	r3, [r3, r2]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	223c      	movs	r2, #60	@ 0x3c
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f000 f839 	bl	800479c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	223d      	movs	r2, #61	@ 0x3d
 800472e:	2102      	movs	r1, #2
 8004730:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	0019      	movs	r1, r3
 800473c:	0010      	movs	r0, r2
 800473e:	f000 f995 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2246      	movs	r2, #70	@ 0x46
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	223e      	movs	r2, #62	@ 0x3e
 800474e:	2101      	movs	r1, #1
 8004750:	5499      	strb	r1, [r3, r2]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	223f      	movs	r2, #63	@ 0x3f
 8004756:	2101      	movs	r1, #1
 8004758:	5499      	strb	r1, [r3, r2]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	2101      	movs	r1, #1
 8004760:	5499      	strb	r1, [r3, r2]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2241      	movs	r2, #65	@ 0x41
 8004766:	2101      	movs	r1, #1
 8004768:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2242      	movs	r2, #66	@ 0x42
 800476e:	2101      	movs	r1, #1
 8004770:	5499      	strb	r1, [r3, r2]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2243      	movs	r2, #67	@ 0x43
 8004776:	2101      	movs	r1, #1
 8004778:	5499      	strb	r1, [r3, r2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2244      	movs	r2, #68	@ 0x44
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2245      	movs	r2, #69	@ 0x45
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	223d      	movs	r2, #61	@ 0x3d
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	223d      	movs	r2, #61	@ 0x3d
 80047b8:	5c9b      	ldrb	r3, [r3, r2]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e03b      	b.n	800483c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	223d      	movs	r2, #61	@ 0x3d
 80047c8:	2102      	movs	r1, #2
 80047ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2101      	movs	r1, #1
 80047d8:	430a      	orrs	r2, r1
 80047da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_TIM_Base_Start_IT+0x98>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <HAL_TIM_Base_Start_IT+0x5a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	05db      	lsls	r3, r3, #23
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d009      	beq.n	8004806 <HAL_TIM_Base_Start_IT+0x5a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a14      	ldr	r2, [pc, #80]	@ (8004848 <HAL_TIM_Base_Start_IT+0x9c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIM_Base_Start_IT+0x5a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a12      	ldr	r2, [pc, #72]	@ (800484c <HAL_TIM_Base_Start_IT+0xa0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2207      	movs	r2, #7
 800480e:	4013      	ands	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b06      	cmp	r3, #6
 8004816:	d010      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2101      	movs	r1, #1
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	e007      	b.n	800483a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	b004      	add	sp, #16
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40014000 	.word	0x40014000

08004850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2202      	movs	r2, #2
 800486c:	4013      	ands	r3, r2
 800486e:	d021      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2202      	movs	r2, #2
 8004874:	4013      	ands	r3, r2
 8004876:	d01d      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2203      	movs	r2, #3
 800487e:	4252      	negs	r2, r2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2203      	movs	r2, #3
 8004890:	4013      	ands	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0018      	movs	r0, r3
 8004898:	f000 f8d0 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 800489c:	e007      	b.n	80048ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f8c3 	bl	8004a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 f8cf 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2204      	movs	r2, #4
 80048b8:	4013      	ands	r3, r2
 80048ba:	d022      	beq.n	8004902 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2204      	movs	r2, #4
 80048c0:	4013      	ands	r3, r2
 80048c2:	d01e      	beq.n	8004902 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2205      	movs	r2, #5
 80048ca:	4252      	negs	r2, r2
 80048cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	23c0      	movs	r3, #192	@ 0xc0
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 f8a9 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 80048ea:	e007      	b.n	80048fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 f89c 	bl	8004a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 f8a8 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2208      	movs	r2, #8
 8004906:	4013      	ands	r3, r2
 8004908:	d021      	beq.n	800494e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2208      	movs	r2, #8
 800490e:	4013      	ands	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2209      	movs	r2, #9
 8004918:	4252      	negs	r2, r2
 800491a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2204      	movs	r2, #4
 8004920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2203      	movs	r2, #3
 800492a:	4013      	ands	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f883 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 8004936:	e007      	b.n	8004948 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f876 	bl	8004a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	0018      	movs	r0, r3
 8004944:	f000 f882 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2210      	movs	r2, #16
 8004952:	4013      	ands	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2210      	movs	r2, #16
 800495a:	4013      	ands	r3, r2
 800495c:	d01e      	beq.n	800499c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2211      	movs	r2, #17
 8004964:	4252      	negs	r2, r2
 8004966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2208      	movs	r2, #8
 800496c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	23c0      	movs	r3, #192	@ 0xc0
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4013      	ands	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f85c 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 8004984:	e007      	b.n	8004996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f84f 	bl	8004a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f85b 	bl	8004a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d00c      	beq.n	80049be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d008      	beq.n	80049be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2202      	movs	r2, #2
 80049b2:	4252      	negs	r2, r2
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fd fc93 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2280      	movs	r2, #128	@ 0x80
 80049c2:	4013      	ands	r3, r2
 80049c4:	d00c      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2280      	movs	r2, #128	@ 0x80
 80049ca:	4013      	ands	r3, r2
 80049cc:	d008      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2281      	movs	r2, #129	@ 0x81
 80049d4:	4252      	negs	r2, r2
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 f8dc 	bl	8004b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	4013      	ands	r3, r2
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2240      	movs	r2, #64	@ 0x40
 80049ec:	4013      	ands	r3, r2
 80049ee:	d008      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2241      	movs	r2, #65	@ 0x41
 80049f6:	4252      	negs	r2, r2
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f82d 	bl	8004a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2220      	movs	r2, #32
 8004a06:	4013      	ands	r3, r2
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d008      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2221      	movs	r2, #33	@ 0x21
 8004a18:	4252      	negs	r2, r2
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f8b2 	bl	8004b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b004      	add	sp, #16
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a64:	46c0      	nop			@ (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b6c <TIM_Base_SetConfig+0x100>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d008      	beq.n	8004a96 <TIM_Base_SetConfig+0x2a>
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	05db      	lsls	r3, r3, #23
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0x2a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a37      	ldr	r2, [pc, #220]	@ (8004b70 <TIM_Base_SetConfig+0x104>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2270      	movs	r2, #112	@ 0x70
 8004a9a:	4393      	bics	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a30      	ldr	r2, [pc, #192]	@ (8004b6c <TIM_Base_SetConfig+0x100>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d013      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b70 <TIM_Base_SetConfig+0x104>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00f      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b74 <TIM_Base_SetConfig+0x108>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b78 <TIM_Base_SetConfig+0x10c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a29      	ldr	r2, [pc, #164]	@ (8004b7c <TIM_Base_SetConfig+0x110>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0x76>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a28      	ldr	r2, [pc, #160]	@ (8004b80 <TIM_Base_SetConfig+0x114>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a27      	ldr	r2, [pc, #156]	@ (8004b84 <TIM_Base_SetConfig+0x118>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2280      	movs	r2, #128	@ 0x80
 8004af8:	4393      	bics	r3, r2
 8004afa:	001a      	movs	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <TIM_Base_SetConfig+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_Base_SetConfig+0xce>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <TIM_Base_SetConfig+0x10c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_Base_SetConfig+0xce>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <TIM_Base_SetConfig+0x110>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_Base_SetConfig+0xce>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <TIM_Base_SetConfig+0x114>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d103      	bne.n	8004b42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4393      	bics	r3, r2
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]
  }
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40002000 	.word	0x40002000
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800
 8004b84:	fffffcff 	.word	0xfffffcff

08004b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e044      	b.n	8004c44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2278      	movs	r2, #120	@ 0x78
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb fd01 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2224      	movs	r2, #36	@ 0x24
 8004bd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fa14 	bl	8005020 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 f828 	bl	8004c50 <UART_SetConfig>
 8004c00:	0003      	movs	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01c      	b.n	8004c44 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <HAL_UART_Init+0xa4>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	212a      	movs	r1, #42	@ 0x2a
 8004c26:	438a      	bics	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 faa3 	bl	8005188 <UART_CheckIdleState>
 8004c42:	0003      	movs	r3, r0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	ffffb7ff 	.word	0xffffb7ff

08004c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c58:	231e      	movs	r3, #30
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4abe      	ldr	r2, [pc, #760]	@ (8004f78 <UART_SetConfig+0x328>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	0019      	movs	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4ab9      	ldr	r2, [pc, #740]	@ (8004f7c <UART_SetConfig+0x32c>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4ab0      	ldr	r2, [pc, #704]	@ (8004f80 <UART_SetConfig+0x330>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4aac      	ldr	r2, [pc, #688]	@ (8004f84 <UART_SetConfig+0x334>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d127      	bne.n	8004d26 <UART_SetConfig+0xd6>
 8004cd6:	4bac      	ldr	r3, [pc, #688]	@ (8004f88 <UART_SetConfig+0x338>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	2203      	movs	r2, #3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d00d      	beq.n	8004cfe <UART_SetConfig+0xae>
 8004ce2:	d81b      	bhi.n	8004d1c <UART_SetConfig+0xcc>
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d014      	beq.n	8004d12 <UART_SetConfig+0xc2>
 8004ce8:	d818      	bhi.n	8004d1c <UART_SetConfig+0xcc>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <UART_SetConfig+0xa4>
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d00a      	beq.n	8004d08 <UART_SetConfig+0xb8>
 8004cf2:	e013      	b.n	8004d1c <UART_SetConfig+0xcc>
 8004cf4:	231f      	movs	r3, #31
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e0bd      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004cfe:	231f      	movs	r3, #31
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e0b8      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d08:	231f      	movs	r3, #31
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e0b3      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d12:	231f      	movs	r3, #31
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	2208      	movs	r2, #8
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e0ae      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d1c:	231f      	movs	r3, #31
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2210      	movs	r2, #16
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e0a9      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a98      	ldr	r2, [pc, #608]	@ (8004f8c <UART_SetConfig+0x33c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d134      	bne.n	8004d9a <UART_SetConfig+0x14a>
 8004d30:	4b95      	ldr	r3, [pc, #596]	@ (8004f88 <UART_SetConfig+0x338>)
 8004d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d34:	23c0      	movs	r3, #192	@ 0xc0
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	4013      	ands	r3, r2
 8004d3a:	22c0      	movs	r2, #192	@ 0xc0
 8004d3c:	0292      	lsls	r2, r2, #10
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d017      	beq.n	8004d72 <UART_SetConfig+0x122>
 8004d42:	22c0      	movs	r2, #192	@ 0xc0
 8004d44:	0292      	lsls	r2, r2, #10
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d822      	bhi.n	8004d90 <UART_SetConfig+0x140>
 8004d4a:	2280      	movs	r2, #128	@ 0x80
 8004d4c:	0292      	lsls	r2, r2, #10
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d019      	beq.n	8004d86 <UART_SetConfig+0x136>
 8004d52:	2280      	movs	r2, #128	@ 0x80
 8004d54:	0292      	lsls	r2, r2, #10
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d81a      	bhi.n	8004d90 <UART_SetConfig+0x140>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <UART_SetConfig+0x118>
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	0252      	lsls	r2, r2, #9
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00a      	beq.n	8004d7c <UART_SetConfig+0x12c>
 8004d66:	e013      	b.n	8004d90 <UART_SetConfig+0x140>
 8004d68:	231f      	movs	r3, #31
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e083      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d72:	231f      	movs	r3, #31
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e07e      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d7c:	231f      	movs	r3, #31
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2204      	movs	r2, #4
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e079      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d86:	231f      	movs	r3, #31
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e074      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d90:	231f      	movs	r3, #31
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2210      	movs	r2, #16
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e06f      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f90 <UART_SetConfig+0x340>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d134      	bne.n	8004e0e <UART_SetConfig+0x1be>
 8004da4:	4b78      	ldr	r3, [pc, #480]	@ (8004f88 <UART_SetConfig+0x338>)
 8004da6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da8:	23c0      	movs	r3, #192	@ 0xc0
 8004daa:	031b      	lsls	r3, r3, #12
 8004dac:	4013      	ands	r3, r2
 8004dae:	22c0      	movs	r2, #192	@ 0xc0
 8004db0:	0312      	lsls	r2, r2, #12
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d017      	beq.n	8004de6 <UART_SetConfig+0x196>
 8004db6:	22c0      	movs	r2, #192	@ 0xc0
 8004db8:	0312      	lsls	r2, r2, #12
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d822      	bhi.n	8004e04 <UART_SetConfig+0x1b4>
 8004dbe:	2280      	movs	r2, #128	@ 0x80
 8004dc0:	0312      	lsls	r2, r2, #12
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d019      	beq.n	8004dfa <UART_SetConfig+0x1aa>
 8004dc6:	2280      	movs	r2, #128	@ 0x80
 8004dc8:	0312      	lsls	r2, r2, #12
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d81a      	bhi.n	8004e04 <UART_SetConfig+0x1b4>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <UART_SetConfig+0x18c>
 8004dd2:	2280      	movs	r2, #128	@ 0x80
 8004dd4:	02d2      	lsls	r2, r2, #11
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00a      	beq.n	8004df0 <UART_SetConfig+0x1a0>
 8004dda:	e013      	b.n	8004e04 <UART_SetConfig+0x1b4>
 8004ddc:	231f      	movs	r3, #31
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e049      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004de6:	231f      	movs	r3, #31
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	2202      	movs	r2, #2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e044      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004df0:	231f      	movs	r3, #31
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	2204      	movs	r2, #4
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e03f      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004dfa:	231f      	movs	r3, #31
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2208      	movs	r2, #8
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e03a      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e04:	231f      	movs	r3, #31
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2210      	movs	r2, #16
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e035      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a60      	ldr	r2, [pc, #384]	@ (8004f94 <UART_SetConfig+0x344>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d104      	bne.n	8004e22 <UART_SetConfig+0x1d2>
 8004e18:	231f      	movs	r3, #31
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e02b      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5c      	ldr	r2, [pc, #368]	@ (8004f98 <UART_SetConfig+0x348>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d104      	bne.n	8004e36 <UART_SetConfig+0x1e6>
 8004e2c:	231f      	movs	r3, #31
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e021      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a58      	ldr	r2, [pc, #352]	@ (8004f9c <UART_SetConfig+0x34c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d104      	bne.n	8004e4a <UART_SetConfig+0x1fa>
 8004e40:	231f      	movs	r3, #31
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	e017      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a54      	ldr	r2, [pc, #336]	@ (8004fa0 <UART_SetConfig+0x350>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d104      	bne.n	8004e5e <UART_SetConfig+0x20e>
 8004e54:	231f      	movs	r3, #31
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e00d      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a50      	ldr	r2, [pc, #320]	@ (8004fa4 <UART_SetConfig+0x354>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d104      	bne.n	8004e72 <UART_SetConfig+0x222>
 8004e68:	231f      	movs	r3, #31
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	e003      	b.n	8004e7a <UART_SetConfig+0x22a>
 8004e72:	231f      	movs	r3, #31
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	2210      	movs	r2, #16
 8004e78:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d15c      	bne.n	8004f40 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8004e86:	231f      	movs	r3, #31
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d015      	beq.n	8004ebc <UART_SetConfig+0x26c>
 8004e90:	dc18      	bgt.n	8004ec4 <UART_SetConfig+0x274>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d00d      	beq.n	8004eb2 <UART_SetConfig+0x262>
 8004e96:	dc15      	bgt.n	8004ec4 <UART_SetConfig+0x274>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <UART_SetConfig+0x252>
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d005      	beq.n	8004eac <UART_SetConfig+0x25c>
 8004ea0:	e010      	b.n	8004ec4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea2:	f7fe ff5d 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	61bb      	str	r3, [r7, #24]
        break;
 8004eaa:	e012      	b.n	8004ed2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa8 <UART_SetConfig+0x358>)
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e00f      	b.n	8004ed2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fed9 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	61bb      	str	r3, [r7, #24]
        break;
 8004eba:	e00a      	b.n	8004ed2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ebc:	2380      	movs	r3, #128	@ 0x80
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	61bb      	str	r3, [r7, #24]
        break;
 8004ec2:	e006      	b.n	8004ed2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec8:	231e      	movs	r3, #30
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
        break;
 8004ed0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d100      	bne.n	8004eda <UART_SetConfig+0x28a>
 8004ed8:	e095      	b.n	8005006 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	005a      	lsls	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	18d2      	adds	r2, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	0019      	movs	r1, r3
 8004eec:	0010      	movs	r0, r2
 8004eee:	f7fb f915 	bl	800011c <__udivsi3>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d91c      	bls.n	8004f36 <UART_SetConfig+0x2e6>
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d217      	bcs.n	8004f36 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	200e      	movs	r0, #14
 8004f0c:	183b      	adds	r3, r7, r0
 8004f0e:	210f      	movs	r1, #15
 8004f10:	438a      	bics	r2, r1
 8004f12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2207      	movs	r2, #7
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b299      	uxth	r1, r3
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	183a      	adds	r2, r7, r0
 8004f24:	8812      	ldrh	r2, [r2, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	183a      	adds	r2, r7, r0
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	e067      	b.n	8005006 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f36:	231e      	movs	r3, #30
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e062      	b.n	8005006 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f40:	231f      	movs	r3, #31
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d030      	beq.n	8004fac <UART_SetConfig+0x35c>
 8004f4a:	dc33      	bgt.n	8004fb4 <UART_SetConfig+0x364>
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d00d      	beq.n	8004f6c <UART_SetConfig+0x31c>
 8004f50:	dc30      	bgt.n	8004fb4 <UART_SetConfig+0x364>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <UART_SetConfig+0x30c>
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d005      	beq.n	8004f66 <UART_SetConfig+0x316>
 8004f5a:	e02b      	b.n	8004fb4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fe ff00 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8004f60:	0003      	movs	r3, r0
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e02d      	b.n	8004fc2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f66:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <UART_SetConfig+0x358>)
 8004f68:	61bb      	str	r3, [r7, #24]
        break;
 8004f6a:	e02a      	b.n	8004fc2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6c:	f7fe fe7c 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8004f70:	0003      	movs	r3, r0
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e025      	b.n	8004fc2 <UART_SetConfig+0x372>
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	efff69f3 	.word	0xefff69f3
 8004f7c:	ffffcfff 	.word	0xffffcfff
 8004f80:	fffff4ff 	.word	0xfffff4ff
 8004f84:	40013800 	.word	0x40013800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40004400 	.word	0x40004400
 8004f90:	40004800 	.word	0x40004800
 8004f94:	40004c00 	.word	0x40004c00
 8004f98:	40005000 	.word	0x40005000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	40011800 	.word	0x40011800
 8004fa4:	40011c00 	.word	0x40011c00
 8004fa8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	61bb      	str	r3, [r7, #24]
        break;
 8004fb2:	e006      	b.n	8004fc2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fb8:	231e      	movs	r3, #30
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
        break;
 8004fc0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	18d2      	adds	r2, r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	0010      	movs	r0, r2
 8004fda:	f7fb f89f 	bl	800011c <__udivsi3>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b0f      	cmp	r3, #15
 8004fe6:	d90a      	bls.n	8004ffe <UART_SetConfig+0x3ae>
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	025b      	lsls	r3, r3, #9
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d205      	bcs.n	8004ffe <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	e003      	b.n	8005006 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffe:	231e      	movs	r3, #30
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005012:	231e      	movs	r3, #30
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b008      	add	sp, #32
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	2208      	movs	r2, #8
 800502e:	4013      	ands	r3, r2
 8005030:	d00b      	beq.n	800504a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a4a      	ldr	r2, [pc, #296]	@ (8005164 <UART_AdvFeatureConfig+0x144>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d00b      	beq.n	800506c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4a43      	ldr	r2, [pc, #268]	@ (8005168 <UART_AdvFeatureConfig+0x148>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	2202      	movs	r2, #2
 8005072:	4013      	ands	r3, r2
 8005074:	d00b      	beq.n	800508e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a3b      	ldr	r2, [pc, #236]	@ (800516c <UART_AdvFeatureConfig+0x14c>)
 800507e:	4013      	ands	r3, r2
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	2204      	movs	r2, #4
 8005094:	4013      	ands	r3, r2
 8005096:	d00b      	beq.n	80050b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4a34      	ldr	r2, [pc, #208]	@ (8005170 <UART_AdvFeatureConfig+0x150>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2210      	movs	r2, #16
 80050b6:	4013      	ands	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <UART_AdvFeatureConfig+0x154>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	2220      	movs	r2, #32
 80050d8:	4013      	ands	r3, r2
 80050da:	d00b      	beq.n	80050f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a25      	ldr	r2, [pc, #148]	@ (8005178 <UART_AdvFeatureConfig+0x158>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	2240      	movs	r2, #64	@ 0x40
 80050fa:	4013      	ands	r3, r2
 80050fc:	d01d      	beq.n	800513a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <UART_AdvFeatureConfig+0x15c>)
 8005106:	4013      	ands	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	035b      	lsls	r3, r3, #13
 800511e:	429a      	cmp	r2, r3
 8005120:	d10b      	bne.n	800513a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <UART_AdvFeatureConfig+0x160>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	2280      	movs	r2, #128	@ 0x80
 8005140:	4013      	ands	r3, r2
 8005142:	d00b      	beq.n	800515c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a0e      	ldr	r2, [pc, #56]	@ (8005184 <UART_AdvFeatureConfig+0x164>)
 800514c:	4013      	ands	r3, r2
 800514e:	0019      	movs	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }
}
 800515c:	46c0      	nop			@ (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}
 8005164:	ffff7fff 	.word	0xffff7fff
 8005168:	fffdffff 	.word	0xfffdffff
 800516c:	fffeffff 	.word	0xfffeffff
 8005170:	fffbffff 	.word	0xfffbffff
 8005174:	ffffefff 	.word	0xffffefff
 8005178:	ffffdfff 	.word	0xffffdfff
 800517c:	ffefffff 	.word	0xffefffff
 8005180:	ff9fffff 	.word	0xff9fffff
 8005184:	fff7ffff 	.word	0xfff7ffff

08005188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b092      	sub	sp, #72	@ 0x48
 800518c:	af02      	add	r7, sp, #8
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2284      	movs	r2, #132	@ 0x84
 8005194:	2100      	movs	r1, #0
 8005196:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005198:	f7fd f9cc 	bl	8002534 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2208      	movs	r2, #8
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d12c      	bne.n	8005208 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	2280      	movs	r2, #128	@ 0x80
 80051b2:	0391      	lsls	r1, r2, #14
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4a46      	ldr	r2, [pc, #280]	@ (80052d0 <UART_CheckIdleState+0x148>)
 80051b8:	9200      	str	r2, [sp, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f000 f88c 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 80051c0:	1e03      	subs	r3, r0, #0
 80051c2:	d021      	beq.n	8005208 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ce:	2301      	movs	r3, #1
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2180      	movs	r1, #128	@ 0x80
 80051e6:	438a      	bics	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2278      	movs	r2, #120	@ 0x78
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e05f      	b.n	80052c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2204      	movs	r2, #4
 8005210:	4013      	ands	r3, r2
 8005212:	2b04      	cmp	r3, #4
 8005214:	d146      	bne.n	80052a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005218:	2280      	movs	r2, #128	@ 0x80
 800521a:	03d1      	lsls	r1, r2, #15
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4a2c      	ldr	r2, [pc, #176]	@ (80052d0 <UART_CheckIdleState+0x148>)
 8005220:	9200      	str	r2, [sp, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	f000 f858 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 8005228:	1e03      	subs	r3, r0, #0
 800522a:	d03b      	beq.n	80052a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522c:	f3ef 8310 	mrs	r3, PRIMASK
 8005230:	60fb      	str	r3, [r7, #12]
  return(result);
 8005232:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005234:	637b      	str	r3, [r7, #52]	@ 0x34
 8005236:	2301      	movs	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4921      	ldr	r1, [pc, #132]	@ (80052d4 <UART_CheckIdleState+0x14c>)
 800524e:	400a      	ands	r2, r1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525e:	f3ef 8310 	mrs	r3, PRIMASK
 8005262:	61bb      	str	r3, [r7, #24]
  return(result);
 8005264:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
 8005268:	2301      	movs	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2101      	movs	r1, #1
 8005280:	438a      	bics	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2280      	movs	r2, #128	@ 0x80
 8005294:	2120      	movs	r1, #32
 8005296:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2278      	movs	r2, #120	@ 0x78
 800529c:	2100      	movs	r1, #0
 800529e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e011      	b.n	80052c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2280      	movs	r2, #128	@ 0x80
 80052ae:	2120      	movs	r1, #32
 80052b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2278      	movs	r2, #120	@ 0x78
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b010      	add	sp, #64	@ 0x40
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	01ffffff 	.word	0x01ffffff
 80052d4:	fffffedf 	.word	0xfffffedf

080052d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	e051      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	3301      	adds	r3, #1
 80052ee:	d04e      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7fd f920 	bl	8002534 <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e051      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2204      	movs	r2, #4
 8005312:	4013      	ands	r3, r2
 8005314:	d03b      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b80      	cmp	r3, #128	@ 0x80
 800531a:	d038      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b40      	cmp	r3, #64	@ 0x40
 8005320:	d035      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	2208      	movs	r2, #8
 800532a:	4013      	ands	r3, r2
 800532c:	2b08      	cmp	r3, #8
 800532e:	d111      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2208      	movs	r2, #8
 8005336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 f83c 	bl	80053b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2284      	movs	r2, #132	@ 0x84
 8005344:	2108      	movs	r1, #8
 8005346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2278      	movs	r2, #120	@ 0x78
 800534c:	2100      	movs	r1, #0
 800534e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e02c      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	401a      	ands	r2, r3
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	429a      	cmp	r2, r3
 8005366:	d112      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2280      	movs	r2, #128	@ 0x80
 800536e:	0112      	lsls	r2, r2, #4
 8005370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	0018      	movs	r0, r3
 8005376:	f000 f81f 	bl	80053b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2284      	movs	r2, #132	@ 0x84
 800537e:	2120      	movs	r1, #32
 8005380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2278      	movs	r2, #120	@ 0x78
 8005386:	2100      	movs	r1, #0
 8005388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	425a      	negs	r2, r3
 800539e:	4153      	adcs	r3, r2
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	001a      	movs	r2, r3
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d09e      	beq.n	80052ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	617b      	str	r3, [r7, #20]
  return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ca:	2301      	movs	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			@ (mov r8, r8)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4926      	ldr	r1, [pc, #152]	@ (800547c <UART_EndRxTransfer+0xc4>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f2:	f3ef 8310 	mrs	r3, PRIMASK
 80053f6:	623b      	str	r3, [r7, #32]
  return(result);
 80053f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80053fc:	2301      	movs	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	438a      	bics	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005428:	2b01      	cmp	r3, #1
 800542a:	d118      	bne.n	800545e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542c:	f3ef 8310 	mrs	r3, PRIMASK
 8005430:	60bb      	str	r3, [r7, #8]
  return(result);
 8005432:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005436:	2301      	movs	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f383 8810 	msr	PRIMASK, r3
}
 8005440:	46c0      	nop			@ (mov r8, r8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2110      	movs	r1, #16
 800544e:	438a      	bics	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2280      	movs	r2, #128	@ 0x80
 8005462:	2120      	movs	r1, #32
 8005464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b00e      	add	sp, #56	@ 0x38
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	fffffedf 	.word	0xfffffedf

08005480 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
}
 80054bc:	46c0      	nop			@ (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b004      	add	sp, #16
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6892      	ldr	r2, [r2, #8]
 80054da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6852      	ldr	r2, [r2, #4]
 80054e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d103      	bne.n	80054f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}

08005514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <xTaskIncrementTick+0x104>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d000      	beq.n	8005528 <xTaskIncrementTick+0x14>
 8005526:	e06d      	b.n	8005604 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005528:	4b3c      	ldr	r3, [pc, #240]	@ (800561c <xTaskIncrementTick+0x108>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005530:	4b3a      	ldr	r3, [pc, #232]	@ (800561c <xTaskIncrementTick+0x108>)
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d118      	bne.n	800556e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800553c:	4b38      	ldr	r3, [pc, #224]	@ (8005620 <xTaskIncrementTick+0x10c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <xTaskIncrementTick+0x38>
 8005546:	b672      	cpsid	i
 8005548:	46c0      	nop			@ (mov r8, r8)
 800554a:	e7fd      	b.n	8005548 <xTaskIncrementTick+0x34>
 800554c:	4b34      	ldr	r3, [pc, #208]	@ (8005620 <xTaskIncrementTick+0x10c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <xTaskIncrementTick+0x110>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b32      	ldr	r3, [pc, #200]	@ (8005620 <xTaskIncrementTick+0x10c>)
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	4b32      	ldr	r3, [pc, #200]	@ (8005624 <xTaskIncrementTick+0x110>)
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	4b31      	ldr	r3, [pc, #196]	@ (8005628 <xTaskIncrementTick+0x114>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	4b30      	ldr	r3, [pc, #192]	@ (8005628 <xTaskIncrementTick+0x114>)
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f000 f8b9 	bl	80056e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800556e:	4b2f      	ldr	r3, [pc, #188]	@ (800562c <xTaskIncrementTick+0x118>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	429a      	cmp	r2, r3
 8005576:	d34a      	bcc.n	800560e <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005578:	4b29      	ldr	r3, [pc, #164]	@ (8005620 <xTaskIncrementTick+0x10c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <xTaskIncrementTick+0x72>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <xTaskIncrementTick+0x74>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558c:	4b27      	ldr	r3, [pc, #156]	@ (800562c <xTaskIncrementTick+0x118>)
 800558e:	2201      	movs	r2, #1
 8005590:	4252      	negs	r2, r2
 8005592:	601a      	str	r2, [r3, #0]
					break;
 8005594:	e03b      	b.n	800560e <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005596:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <xTaskIncrementTick+0x10c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d203      	bcs.n	80055b6 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ae:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <xTaskIncrementTick+0x118>)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	601a      	str	r2, [r3, #0]
						break;
 80055b4:	e02b      	b.n	800560e <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3304      	adds	r3, #4
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7ff ff82 	bl	80054c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3318      	adds	r3, #24
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7ff ff79 	bl	80054c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d6:	4b16      	ldr	r3, [pc, #88]	@ (8005630 <xTaskIncrementTick+0x11c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d903      	bls.n	80055e6 <xTaskIncrementTick+0xd2>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <xTaskIncrementTick+0x11c>)
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ea:	0013      	movs	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4a10      	ldr	r2, [pc, #64]	@ (8005634 <xTaskIncrementTick+0x120>)
 80055f4:	189a      	adds	r2, r3, r2
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3304      	adds	r3, #4
 80055fa:	0019      	movs	r1, r3
 80055fc:	0010      	movs	r0, r2
 80055fe:	f7ff ff3f 	bl	8005480 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005602:	e7b9      	b.n	8005578 <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005604:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <xTaskIncrementTick+0x124>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <xTaskIncrementTick+0x124>)
 800560c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800560e:	697b      	ldr	r3, [r7, #20]
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b006      	add	sp, #24
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000af8 	.word	0x20000af8
 800561c:	20000ae0 	.word	0x20000ae0
 8005620:	20000ad8 	.word	0x20000ad8
 8005624:	20000adc 	.word	0x20000adc
 8005628:	20000af0 	.word	0x20000af0
 800562c:	20000af4 	.word	0x20000af4
 8005630:	20000ae4 	.word	0x20000ae4
 8005634:	20000678 	.word	0x20000678
 8005638:	20000ae8 	.word	0x20000ae8

0800563c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005642:	4b22      	ldr	r3, [pc, #136]	@ (80056cc <vTaskSwitchContext+0x90>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800564a:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <vTaskSwitchContext+0x94>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005650:	e038      	b.n	80056c4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8005652:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <vTaskSwitchContext+0x94>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005658:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <vTaskSwitchContext+0x98>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	e008      	b.n	8005672 <vTaskSwitchContext+0x36>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <vTaskSwitchContext+0x30>
 8005666:	b672      	cpsid	i
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	e7fd      	b.n	8005668 <vTaskSwitchContext+0x2c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3b01      	subs	r3, #1
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	4919      	ldr	r1, [pc, #100]	@ (80056d8 <vTaskSwitchContext+0x9c>)
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	0013      	movs	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	189b      	adds	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	585b      	ldr	r3, [r3, r1]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ed      	beq.n	8005660 <vTaskSwitchContext+0x24>
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	0013      	movs	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	189b      	adds	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <vTaskSwitchContext+0x9c>)
 8005690:	189b      	adds	r3, r3, r2
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d104      	bne.n	80056b4 <vTaskSwitchContext+0x78>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <vTaskSwitchContext+0xa0>)
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <vTaskSwitchContext+0x98>)
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	46c0      	nop			@ (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000af8 	.word	0x20000af8
 80056d0:	20000aec 	.word	0x20000aec
 80056d4:	20000ae4 	.word	0x20000ae4
 80056d8:	20000678 	.word	0x20000678
 80056dc:	20000674 	.word	0x20000674

080056e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005720 <prvResetNextTaskUnblockTime+0x40>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <prvResetNextTaskUnblockTime+0x14>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <prvResetNextTaskUnblockTime+0x16>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <prvResetNextTaskUnblockTime+0x44>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	4252      	negs	r2, r2
 8005700:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005702:	e008      	b.n	8005716 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <prvResetNextTaskUnblockTime+0x40>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <prvResetNextTaskUnblockTime+0x44>)
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	46bd      	mov	sp, r7
 800571a:	b002      	add	sp, #8
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	20000ad8 	.word	0x20000ad8
 8005724:	20000af4 	.word	0x20000af4

08005728 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800572c:	46c0      	nop			@ (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005732:	f3ef 8010 	mrs	r0, PRIMASK
 8005736:	b672      	cpsid	i
 8005738:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	0018      	movs	r0, r3

0800573e <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800573e:	f380 8810 	msr	PRIMASK, r0
 8005742:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005744:	46c0      	nop			@ (mov r8, r8)
	...

08005750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005750:	f3ef 8009 	mrs	r0, PSP
 8005754:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <pxCurrentTCBConst>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	3820      	subs	r0, #32
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800575e:	4644      	mov	r4, r8
 8005760:	464d      	mov	r5, r9
 8005762:	4656      	mov	r6, sl
 8005764:	465f      	mov	r7, fp
 8005766:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005768:	b508      	push	{r3, lr}
 800576a:	b672      	cpsid	i
 800576c:	f7ff ff66 	bl	800563c <vTaskSwitchContext>
 8005770:	b662      	cpsie	i
 8005772:	bc0c      	pop	{r2, r3}
 8005774:	6811      	ldr	r1, [r2, #0]
 8005776:	6808      	ldr	r0, [r1, #0]
 8005778:	3010      	adds	r0, #16
 800577a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800577c:	46a0      	mov	r8, r4
 800577e:	46a9      	mov	r9, r5
 8005780:	46b2      	mov	sl, r6
 8005782:	46bb      	mov	fp, r7
 8005784:	f380 8809 	msr	PSP, r0
 8005788:	3820      	subs	r0, #32
 800578a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800578c:	4718      	bx	r3
 800578e:	46c0      	nop			@ (mov r8, r8)

08005790 <pxCurrentTCBConst>:
 8005790:	20000674 	.word	0x20000674
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	46c0      	nop			@ (mov r8, r8)

08005798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800579e:	f7ff ffc8 	bl	8005732 <ulSetInterruptMaskFromISR>
 80057a2:	0003      	movs	r3, r0
 80057a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057a6:	f7ff feb5 	bl	8005514 <xTaskIncrementTick>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d003      	beq.n	80057b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <SysTick_Handler+0x30>)
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	0552      	lsls	r2, r2, #21
 80057b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7ff ffc0 	bl	800573e <vClearInterruptMaskFromISR>
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <__itoa>:
 80057cc:	1e93      	subs	r3, r2, #2
 80057ce:	b510      	push	{r4, lr}
 80057d0:	000c      	movs	r4, r1
 80057d2:	2b22      	cmp	r3, #34	@ 0x22
 80057d4:	d904      	bls.n	80057e0 <__itoa+0x14>
 80057d6:	2300      	movs	r3, #0
 80057d8:	001c      	movs	r4, r3
 80057da:	700b      	strb	r3, [r1, #0]
 80057dc:	0020      	movs	r0, r4
 80057de:	bd10      	pop	{r4, pc}
 80057e0:	2a0a      	cmp	r2, #10
 80057e2:	d109      	bne.n	80057f8 <__itoa+0x2c>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	da07      	bge.n	80057f8 <__itoa+0x2c>
 80057e8:	232d      	movs	r3, #45	@ 0x2d
 80057ea:	700b      	strb	r3, [r1, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	4240      	negs	r0, r0
 80057f0:	1861      	adds	r1, r4, r1
 80057f2:	f000 f807 	bl	8005804 <__utoa>
 80057f6:	e7f1      	b.n	80057dc <__itoa+0x10>
 80057f8:	2100      	movs	r1, #0
 80057fa:	e7f9      	b.n	80057f0 <__itoa+0x24>

080057fc <itoa>:
 80057fc:	b510      	push	{r4, lr}
 80057fe:	f7ff ffe5 	bl	80057cc <__itoa>
 8005802:	bd10      	pop	{r4, pc}

08005804 <__utoa>:
 8005804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005806:	000c      	movs	r4, r1
 8005808:	0016      	movs	r6, r2
 800580a:	b08d      	sub	sp, #52	@ 0x34
 800580c:	2225      	movs	r2, #37	@ 0x25
 800580e:	0007      	movs	r7, r0
 8005810:	4915      	ldr	r1, [pc, #84]	@ (8005868 <__utoa+0x64>)
 8005812:	a802      	add	r0, sp, #8
 8005814:	f000 f880 	bl	8005918 <memcpy>
 8005818:	1e62      	subs	r2, r4, #1
 800581a:	1eb3      	subs	r3, r6, #2
 800581c:	2500      	movs	r5, #0
 800581e:	9201      	str	r2, [sp, #4]
 8005820:	2b22      	cmp	r3, #34	@ 0x22
 8005822:	d904      	bls.n	800582e <__utoa+0x2a>
 8005824:	7025      	strb	r5, [r4, #0]
 8005826:	002c      	movs	r4, r5
 8005828:	0020      	movs	r0, r4
 800582a:	b00d      	add	sp, #52	@ 0x34
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582e:	0038      	movs	r0, r7
 8005830:	0031      	movs	r1, r6
 8005832:	f7fa fcf9 	bl	8000228 <__aeabi_uidivmod>
 8005836:	000b      	movs	r3, r1
 8005838:	aa02      	add	r2, sp, #8
 800583a:	5cd3      	ldrb	r3, [r2, r3]
 800583c:	9a01      	ldr	r2, [sp, #4]
 800583e:	0029      	movs	r1, r5
 8005840:	3501      	adds	r5, #1
 8005842:	5553      	strb	r3, [r2, r5]
 8005844:	003b      	movs	r3, r7
 8005846:	0007      	movs	r7, r0
 8005848:	429e      	cmp	r6, r3
 800584a:	d9f0      	bls.n	800582e <__utoa+0x2a>
 800584c:	2300      	movs	r3, #0
 800584e:	0022      	movs	r2, r4
 8005850:	5563      	strb	r3, [r4, r5]
 8005852:	000b      	movs	r3, r1
 8005854:	1ac8      	subs	r0, r1, r3
 8005856:	4283      	cmp	r3, r0
 8005858:	dde6      	ble.n	8005828 <__utoa+0x24>
 800585a:	7810      	ldrb	r0, [r2, #0]
 800585c:	5ce5      	ldrb	r5, [r4, r3]
 800585e:	7015      	strb	r5, [r2, #0]
 8005860:	54e0      	strb	r0, [r4, r3]
 8005862:	3201      	adds	r2, #1
 8005864:	3b01      	subs	r3, #1
 8005866:	e7f5      	b.n	8005854 <__utoa+0x50>
 8005868:	08006d1c 	.word	0x08006d1c

0800586c <siprintf>:
 800586c:	b40e      	push	{r1, r2, r3}
 800586e:	b510      	push	{r4, lr}
 8005870:	2400      	movs	r4, #0
 8005872:	490c      	ldr	r1, [pc, #48]	@ (80058a4 <siprintf+0x38>)
 8005874:	b09d      	sub	sp, #116	@ 0x74
 8005876:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005878:	9002      	str	r0, [sp, #8]
 800587a:	9006      	str	r0, [sp, #24]
 800587c:	9107      	str	r1, [sp, #28]
 800587e:	9104      	str	r1, [sp, #16]
 8005880:	4809      	ldr	r0, [pc, #36]	@ (80058a8 <siprintf+0x3c>)
 8005882:	490a      	ldr	r1, [pc, #40]	@ (80058ac <siprintf+0x40>)
 8005884:	cb04      	ldmia	r3!, {r2}
 8005886:	9105      	str	r1, [sp, #20]
 8005888:	6800      	ldr	r0, [r0, #0]
 800588a:	a902      	add	r1, sp, #8
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005890:	f000 f9a8 	bl	8005be4 <_svfiprintf_r>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	701c      	strb	r4, [r3, #0]
 8005898:	b01d      	add	sp, #116	@ 0x74
 800589a:	bc10      	pop	{r4}
 800589c:	bc08      	pop	{r3}
 800589e:	b003      	add	sp, #12
 80058a0:	4718      	bx	r3
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	7fffffff 	.word	0x7fffffff
 80058a8:	2000041c 	.word	0x2000041c
 80058ac:	ffff0208 	.word	0xffff0208

080058b0 <memset>:
 80058b0:	0003      	movs	r3, r0
 80058b2:	1882      	adds	r2, r0, r2
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	7019      	strb	r1, [r3, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <__errno>:
 80058c0:	4b01      	ldr	r3, [pc, #4]	@ (80058c8 <__errno+0x8>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	4770      	bx	lr
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	2000041c 	.word	0x2000041c

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	2600      	movs	r6, #0
 80058d0:	4c0c      	ldr	r4, [pc, #48]	@ (8005904 <__libc_init_array+0x38>)
 80058d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005908 <__libc_init_array+0x3c>)
 80058d4:	1b64      	subs	r4, r4, r5
 80058d6:	10a4      	asrs	r4, r4, #2
 80058d8:	42a6      	cmp	r6, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	2600      	movs	r6, #0
 80058de:	f000 fc63 	bl	80061a8 <_init>
 80058e2:	4c0a      	ldr	r4, [pc, #40]	@ (800590c <__libc_init_array+0x40>)
 80058e4:	4d0a      	ldr	r5, [pc, #40]	@ (8005910 <__libc_init_array+0x44>)
 80058e6:	1b64      	subs	r4, r4, r5
 80058e8:	10a4      	asrs	r4, r4, #2
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	00b3      	lsls	r3, r6, #2
 80058f2:	58eb      	ldr	r3, [r5, r3]
 80058f4:	4798      	blx	r3
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	00b3      	lsls	r3, r6, #2
 80058fc:	58eb      	ldr	r3, [r5, r3]
 80058fe:	4798      	blx	r3
 8005900:	3601      	adds	r6, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	08006d74 	.word	0x08006d74
 8005908:	08006d74 	.word	0x08006d74
 800590c:	08006d78 	.word	0x08006d78
 8005910:	08006d74 	.word	0x08006d74

08005914 <__retarget_lock_acquire_recursive>:
 8005914:	4770      	bx	lr

08005916 <__retarget_lock_release_recursive>:
 8005916:	4770      	bx	lr

08005918 <memcpy>:
 8005918:	2300      	movs	r3, #0
 800591a:	b510      	push	{r4, lr}
 800591c:	429a      	cmp	r2, r3
 800591e:	d100      	bne.n	8005922 <memcpy+0xa>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	5ccc      	ldrb	r4, [r1, r3]
 8005924:	54c4      	strb	r4, [r0, r3]
 8005926:	3301      	adds	r3, #1
 8005928:	e7f8      	b.n	800591c <memcpy+0x4>
	...

0800592c <_free_r>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	0005      	movs	r5, r0
 8005930:	1e0c      	subs	r4, r1, #0
 8005932:	d010      	beq.n	8005956 <_free_r+0x2a>
 8005934:	3c04      	subs	r4, #4
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	da00      	bge.n	800593e <_free_r+0x12>
 800593c:	18e4      	adds	r4, r4, r3
 800593e:	0028      	movs	r0, r5
 8005940:	f000 f8e0 	bl	8005b04 <__malloc_lock>
 8005944:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <_free_r+0x90>)
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <_free_r+0x2c>
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	6014      	str	r4, [r2, #0]
 8005950:	0028      	movs	r0, r5
 8005952:	f000 f8df 	bl	8005b14 <__malloc_unlock>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	42a3      	cmp	r3, r4
 800595a:	d908      	bls.n	800596e <_free_r+0x42>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	1821      	adds	r1, r4, r0
 8005960:	428b      	cmp	r3, r1
 8005962:	d1f3      	bne.n	800594c <_free_r+0x20>
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	1809      	adds	r1, r1, r0
 800596a:	6021      	str	r1, [r4, #0]
 800596c:	e7ee      	b.n	800594c <_free_r+0x20>
 800596e:	001a      	movs	r2, r3
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <_free_r+0x4e>
 8005976:	42a3      	cmp	r3, r4
 8005978:	d9f9      	bls.n	800596e <_free_r+0x42>
 800597a:	6811      	ldr	r1, [r2, #0]
 800597c:	1850      	adds	r0, r2, r1
 800597e:	42a0      	cmp	r0, r4
 8005980:	d10b      	bne.n	800599a <_free_r+0x6e>
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	1809      	adds	r1, r1, r0
 8005986:	1850      	adds	r0, r2, r1
 8005988:	6011      	str	r1, [r2, #0]
 800598a:	4283      	cmp	r3, r0
 800598c:	d1e0      	bne.n	8005950 <_free_r+0x24>
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	1841      	adds	r1, r0, r1
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	6053      	str	r3, [r2, #4]
 8005998:	e7da      	b.n	8005950 <_free_r+0x24>
 800599a:	42a0      	cmp	r0, r4
 800599c:	d902      	bls.n	80059a4 <_free_r+0x78>
 800599e:	230c      	movs	r3, #12
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	e7d5      	b.n	8005950 <_free_r+0x24>
 80059a4:	6820      	ldr	r0, [r4, #0]
 80059a6:	1821      	adds	r1, r4, r0
 80059a8:	428b      	cmp	r3, r1
 80059aa:	d103      	bne.n	80059b4 <_free_r+0x88>
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	1809      	adds	r1, r1, r0
 80059b2:	6021      	str	r1, [r4, #0]
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6054      	str	r4, [r2, #4]
 80059b8:	e7ca      	b.n	8005950 <_free_r+0x24>
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	20000c40 	.word	0x20000c40

080059c0 <sbrk_aligned>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a00 <sbrk_aligned+0x40>)
 80059c4:	000d      	movs	r5, r1
 80059c6:	6831      	ldr	r1, [r6, #0]
 80059c8:	0004      	movs	r4, r0
 80059ca:	2900      	cmp	r1, #0
 80059cc:	d102      	bne.n	80059d4 <sbrk_aligned+0x14>
 80059ce:	f000 fb95 	bl	80060fc <_sbrk_r>
 80059d2:	6030      	str	r0, [r6, #0]
 80059d4:	0029      	movs	r1, r5
 80059d6:	0020      	movs	r0, r4
 80059d8:	f000 fb90 	bl	80060fc <_sbrk_r>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d103      	bne.n	80059e8 <sbrk_aligned+0x28>
 80059e0:	2501      	movs	r5, #1
 80059e2:	426d      	negs	r5, r5
 80059e4:	0028      	movs	r0, r5
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	2303      	movs	r3, #3
 80059ea:	1cc5      	adds	r5, r0, #3
 80059ec:	439d      	bics	r5, r3
 80059ee:	42a8      	cmp	r0, r5
 80059f0:	d0f8      	beq.n	80059e4 <sbrk_aligned+0x24>
 80059f2:	1a29      	subs	r1, r5, r0
 80059f4:	0020      	movs	r0, r4
 80059f6:	f000 fb81 	bl	80060fc <_sbrk_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d1f2      	bne.n	80059e4 <sbrk_aligned+0x24>
 80059fe:	e7ef      	b.n	80059e0 <sbrk_aligned+0x20>
 8005a00:	20000c3c 	.word	0x20000c3c

08005a04 <_malloc_r>:
 8005a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a06:	2203      	movs	r2, #3
 8005a08:	1ccb      	adds	r3, r1, #3
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	0005      	movs	r5, r0
 8005a10:	001f      	movs	r7, r3
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d234      	bcs.n	8005a80 <_malloc_r+0x7c>
 8005a16:	270c      	movs	r7, #12
 8005a18:	42b9      	cmp	r1, r7
 8005a1a:	d833      	bhi.n	8005a84 <_malloc_r+0x80>
 8005a1c:	0028      	movs	r0, r5
 8005a1e:	f000 f871 	bl	8005b04 <__malloc_lock>
 8005a22:	4e37      	ldr	r6, [pc, #220]	@ (8005b00 <_malloc_r+0xfc>)
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	001c      	movs	r4, r3
 8005a28:	2c00      	cmp	r4, #0
 8005a2a:	d12f      	bne.n	8005a8c <_malloc_r+0x88>
 8005a2c:	0039      	movs	r1, r7
 8005a2e:	0028      	movs	r0, r5
 8005a30:	f7ff ffc6 	bl	80059c0 <sbrk_aligned>
 8005a34:	0004      	movs	r4, r0
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d15f      	bne.n	8005afa <_malloc_r+0xf6>
 8005a3a:	6834      	ldr	r4, [r6, #0]
 8005a3c:	9400      	str	r4, [sp, #0]
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d14a      	bne.n	8005ada <_malloc_r+0xd6>
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	d052      	beq.n	8005aee <_malloc_r+0xea>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	0028      	movs	r0, r5
 8005a4c:	18e3      	adds	r3, r4, r3
 8005a4e:	9900      	ldr	r1, [sp, #0]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	f000 fb53 	bl	80060fc <_sbrk_r>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	4283      	cmp	r3, r0
 8005a5a:	d148      	bne.n	8005aee <_malloc_r+0xea>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	0028      	movs	r0, r5
 8005a60:	1aff      	subs	r7, r7, r3
 8005a62:	0039      	movs	r1, r7
 8005a64:	f7ff ffac 	bl	80059c0 <sbrk_aligned>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d040      	beq.n	8005aee <_malloc_r+0xea>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	6833      	ldr	r3, [r6, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d133      	bne.n	8005ae2 <_malloc_r+0xde>
 8005a7a:	9b00      	ldr	r3, [sp, #0]
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	e019      	b.n	8005ab4 <_malloc_r+0xb0>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dac9      	bge.n	8005a18 <_malloc_r+0x14>
 8005a84:	230c      	movs	r3, #12
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	2000      	movs	r0, #0
 8005a8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	1bc9      	subs	r1, r1, r7
 8005a90:	d420      	bmi.n	8005ad4 <_malloc_r+0xd0>
 8005a92:	290b      	cmp	r1, #11
 8005a94:	d90a      	bls.n	8005aac <_malloc_r+0xa8>
 8005a96:	19e2      	adds	r2, r4, r7
 8005a98:	6027      	str	r7, [r4, #0]
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	d104      	bne.n	8005aa8 <_malloc_r+0xa4>
 8005a9e:	6032      	str	r2, [r6, #0]
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	6011      	str	r1, [r2, #0]
 8005aa4:	6053      	str	r3, [r2, #4]
 8005aa6:	e005      	b.n	8005ab4 <_malloc_r+0xb0>
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	e7f9      	b.n	8005aa0 <_malloc_r+0x9c>
 8005aac:	6862      	ldr	r2, [r4, #4]
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	d10e      	bne.n	8005ad0 <_malloc_r+0xcc>
 8005ab2:	6032      	str	r2, [r6, #0]
 8005ab4:	0028      	movs	r0, r5
 8005ab6:	f000 f82d 	bl	8005b14 <__malloc_unlock>
 8005aba:	0020      	movs	r0, r4
 8005abc:	2207      	movs	r2, #7
 8005abe:	300b      	adds	r0, #11
 8005ac0:	1d23      	adds	r3, r4, #4
 8005ac2:	4390      	bics	r0, r2
 8005ac4:	1ac2      	subs	r2, r0, r3
 8005ac6:	4298      	cmp	r0, r3
 8005ac8:	d0df      	beq.n	8005a8a <_malloc_r+0x86>
 8005aca:	1a1b      	subs	r3, r3, r0
 8005acc:	50a3      	str	r3, [r4, r2]
 8005ace:	e7dc      	b.n	8005a8a <_malloc_r+0x86>
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	e7ef      	b.n	8005ab4 <_malloc_r+0xb0>
 8005ad4:	0023      	movs	r3, r4
 8005ad6:	6864      	ldr	r4, [r4, #4]
 8005ad8:	e7a6      	b.n	8005a28 <_malloc_r+0x24>
 8005ada:	9c00      	ldr	r4, [sp, #0]
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	e7ad      	b.n	8005a3e <_malloc_r+0x3a>
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	d1fb      	bne.n	8005ae2 <_malloc_r+0xde>
 8005aea:	2300      	movs	r3, #0
 8005aec:	e7da      	b.n	8005aa4 <_malloc_r+0xa0>
 8005aee:	230c      	movs	r3, #12
 8005af0:	0028      	movs	r0, r5
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f000 f80e 	bl	8005b14 <__malloc_unlock>
 8005af8:	e7c6      	b.n	8005a88 <_malloc_r+0x84>
 8005afa:	6007      	str	r7, [r0, #0]
 8005afc:	e7da      	b.n	8005ab4 <_malloc_r+0xb0>
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	20000c40 	.word	0x20000c40

08005b04 <__malloc_lock>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4802      	ldr	r0, [pc, #8]	@ (8005b10 <__malloc_lock+0xc>)
 8005b08:	f7ff ff04 	bl	8005914 <__retarget_lock_acquire_recursive>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	20000c38 	.word	0x20000c38

08005b14 <__malloc_unlock>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4802      	ldr	r0, [pc, #8]	@ (8005b20 <__malloc_unlock+0xc>)
 8005b18:	f7ff fefd 	bl	8005916 <__retarget_lock_release_recursive>
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	20000c38 	.word	0x20000c38

08005b24 <__ssputs_r>:
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	688e      	ldr	r6, [r1, #8]
 8005b28:	b085      	sub	sp, #20
 8005b2a:	001f      	movs	r7, r3
 8005b2c:	000c      	movs	r4, r1
 8005b2e:	680b      	ldr	r3, [r1, #0]
 8005b30:	9002      	str	r0, [sp, #8]
 8005b32:	9203      	str	r2, [sp, #12]
 8005b34:	42be      	cmp	r6, r7
 8005b36:	d830      	bhi.n	8005b9a <__ssputs_r+0x76>
 8005b38:	210c      	movs	r1, #12
 8005b3a:	5e62      	ldrsh	r2, [r4, r1]
 8005b3c:	2190      	movs	r1, #144	@ 0x90
 8005b3e:	00c9      	lsls	r1, r1, #3
 8005b40:	420a      	tst	r2, r1
 8005b42:	d028      	beq.n	8005b96 <__ssputs_r+0x72>
 8005b44:	2003      	movs	r0, #3
 8005b46:	6921      	ldr	r1, [r4, #16]
 8005b48:	1a5b      	subs	r3, r3, r1
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	6963      	ldr	r3, [r4, #20]
 8005b4e:	4343      	muls	r3, r0
 8005b50:	9801      	ldr	r0, [sp, #4]
 8005b52:	0fdd      	lsrs	r5, r3, #31
 8005b54:	18ed      	adds	r5, r5, r3
 8005b56:	1c7b      	adds	r3, r7, #1
 8005b58:	181b      	adds	r3, r3, r0
 8005b5a:	106d      	asrs	r5, r5, #1
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	d900      	bls.n	8005b62 <__ssputs_r+0x3e>
 8005b60:	001d      	movs	r5, r3
 8005b62:	0552      	lsls	r2, r2, #21
 8005b64:	d528      	bpl.n	8005bb8 <__ssputs_r+0x94>
 8005b66:	0029      	movs	r1, r5
 8005b68:	9802      	ldr	r0, [sp, #8]
 8005b6a:	f7ff ff4b 	bl	8005a04 <_malloc_r>
 8005b6e:	1e06      	subs	r6, r0, #0
 8005b70:	d02c      	beq.n	8005bcc <__ssputs_r+0xa8>
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	6921      	ldr	r1, [r4, #16]
 8005b76:	f7ff fecf 	bl	8005918 <memcpy>
 8005b7a:	89a2      	ldrh	r2, [r4, #12]
 8005b7c:	4b18      	ldr	r3, [pc, #96]	@ (8005be0 <__ssputs_r+0xbc>)
 8005b7e:	401a      	ands	r2, r3
 8005b80:	2380      	movs	r3, #128	@ 0x80
 8005b82:	4313      	orrs	r3, r2
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	9b01      	ldr	r3, [sp, #4]
 8005b88:	6126      	str	r6, [r4, #16]
 8005b8a:	18f6      	adds	r6, r6, r3
 8005b8c:	6026      	str	r6, [r4, #0]
 8005b8e:	003e      	movs	r6, r7
 8005b90:	6165      	str	r5, [r4, #20]
 8005b92:	1aed      	subs	r5, r5, r3
 8005b94:	60a5      	str	r5, [r4, #8]
 8005b96:	42be      	cmp	r6, r7
 8005b98:	d900      	bls.n	8005b9c <__ssputs_r+0x78>
 8005b9a:	003e      	movs	r6, r7
 8005b9c:	0032      	movs	r2, r6
 8005b9e:	9903      	ldr	r1, [sp, #12]
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	f000 fa99 	bl	80060d8 <memmove>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	1b9b      	subs	r3, r3, r6
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	199b      	adds	r3, r3, r6
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	b005      	add	sp, #20
 8005bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb8:	002a      	movs	r2, r5
 8005bba:	9802      	ldr	r0, [sp, #8]
 8005bbc:	f000 fabb 	bl	8006136 <_realloc_r>
 8005bc0:	1e06      	subs	r6, r0, #0
 8005bc2:	d1e0      	bne.n	8005b86 <__ssputs_r+0x62>
 8005bc4:	6921      	ldr	r1, [r4, #16]
 8005bc6:	9802      	ldr	r0, [sp, #8]
 8005bc8:	f7ff feb0 	bl	800592c <_free_r>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	2001      	movs	r0, #1
 8005bd0:	9a02      	ldr	r2, [sp, #8]
 8005bd2:	4240      	negs	r0, r0
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	89a2      	ldrh	r2, [r4, #12]
 8005bd8:	3334      	adds	r3, #52	@ 0x34
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7e9      	b.n	8005bb4 <__ssputs_r+0x90>
 8005be0:	fffffb7f 	.word	0xfffffb7f

08005be4 <_svfiprintf_r>:
 8005be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be6:	b0a1      	sub	sp, #132	@ 0x84
 8005be8:	9003      	str	r0, [sp, #12]
 8005bea:	001d      	movs	r5, r3
 8005bec:	898b      	ldrh	r3, [r1, #12]
 8005bee:	000f      	movs	r7, r1
 8005bf0:	0016      	movs	r6, r2
 8005bf2:	061b      	lsls	r3, r3, #24
 8005bf4:	d511      	bpl.n	8005c1a <_svfiprintf_r+0x36>
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10e      	bne.n	8005c1a <_svfiprintf_r+0x36>
 8005bfc:	2140      	movs	r1, #64	@ 0x40
 8005bfe:	f7ff ff01 	bl	8005a04 <_malloc_r>
 8005c02:	6038      	str	r0, [r7, #0]
 8005c04:	6138      	str	r0, [r7, #16]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d105      	bne.n	8005c16 <_svfiprintf_r+0x32>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	9a03      	ldr	r2, [sp, #12]
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	2001      	movs	r0, #1
 8005c12:	4240      	negs	r0, r0
 8005c14:	e0cf      	b.n	8005db6 <_svfiprintf_r+0x1d2>
 8005c16:	2340      	movs	r3, #64	@ 0x40
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	ac08      	add	r4, sp, #32
 8005c1e:	6163      	str	r3, [r4, #20]
 8005c20:	3320      	adds	r3, #32
 8005c22:	7663      	strb	r3, [r4, #25]
 8005c24:	3310      	adds	r3, #16
 8005c26:	76a3      	strb	r3, [r4, #26]
 8005c28:	9507      	str	r5, [sp, #28]
 8005c2a:	0035      	movs	r5, r6
 8005c2c:	782b      	ldrb	r3, [r5, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <_svfiprintf_r+0x52>
 8005c32:	2b25      	cmp	r3, #37	@ 0x25
 8005c34:	d148      	bne.n	8005cc8 <_svfiprintf_r+0xe4>
 8005c36:	1bab      	subs	r3, r5, r6
 8005c38:	9305      	str	r3, [sp, #20]
 8005c3a:	42b5      	cmp	r5, r6
 8005c3c:	d00b      	beq.n	8005c56 <_svfiprintf_r+0x72>
 8005c3e:	0032      	movs	r2, r6
 8005c40:	0039      	movs	r1, r7
 8005c42:	9803      	ldr	r0, [sp, #12]
 8005c44:	f7ff ff6e 	bl	8005b24 <__ssputs_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d100      	bne.n	8005c4e <_svfiprintf_r+0x6a>
 8005c4c:	e0ae      	b.n	8005dac <_svfiprintf_r+0x1c8>
 8005c4e:	6963      	ldr	r3, [r4, #20]
 8005c50:	9a05      	ldr	r2, [sp, #20]
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	6163      	str	r3, [r4, #20]
 8005c56:	782b      	ldrb	r3, [r5, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d100      	bne.n	8005c5e <_svfiprintf_r+0x7a>
 8005c5c:	e0a6      	b.n	8005dac <_svfiprintf_r+0x1c8>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2300      	movs	r3, #0
 8005c62:	4252      	negs	r2, r2
 8005c64:	6062      	str	r2, [r4, #4]
 8005c66:	a904      	add	r1, sp, #16
 8005c68:	3254      	adds	r2, #84	@ 0x54
 8005c6a:	1852      	adds	r2, r2, r1
 8005c6c:	1c6e      	adds	r6, r5, #1
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	60e3      	str	r3, [r4, #12]
 8005c72:	60a3      	str	r3, [r4, #8]
 8005c74:	7013      	strb	r3, [r2, #0]
 8005c76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005c78:	4b54      	ldr	r3, [pc, #336]	@ (8005dcc <_svfiprintf_r+0x1e8>)
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	7831      	ldrb	r1, [r6, #0]
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f000 fa4d 	bl	8006120 <memchr>
 8005c86:	1c75      	adds	r5, r6, #1
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d11f      	bne.n	8005ccc <_svfiprintf_r+0xe8>
 8005c8c:	6822      	ldr	r2, [r4, #0]
 8005c8e:	06d3      	lsls	r3, r2, #27
 8005c90:	d504      	bpl.n	8005c9c <_svfiprintf_r+0xb8>
 8005c92:	2353      	movs	r3, #83	@ 0x53
 8005c94:	a904      	add	r1, sp, #16
 8005c96:	185b      	adds	r3, r3, r1
 8005c98:	2120      	movs	r1, #32
 8005c9a:	7019      	strb	r1, [r3, #0]
 8005c9c:	0713      	lsls	r3, r2, #28
 8005c9e:	d504      	bpl.n	8005caa <_svfiprintf_r+0xc6>
 8005ca0:	2353      	movs	r3, #83	@ 0x53
 8005ca2:	a904      	add	r1, sp, #16
 8005ca4:	185b      	adds	r3, r3, r1
 8005ca6:	212b      	movs	r1, #43	@ 0x2b
 8005ca8:	7019      	strb	r1, [r3, #0]
 8005caa:	7833      	ldrb	r3, [r6, #0]
 8005cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cae:	d016      	beq.n	8005cde <_svfiprintf_r+0xfa>
 8005cb0:	0035      	movs	r5, r6
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	200a      	movs	r0, #10
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	782a      	ldrb	r2, [r5, #0]
 8005cba:	1c6e      	adds	r6, r5, #1
 8005cbc:	3a30      	subs	r2, #48	@ 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d950      	bls.n	8005d64 <_svfiprintf_r+0x180>
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d111      	bne.n	8005cea <_svfiprintf_r+0x106>
 8005cc6:	e017      	b.n	8005cf8 <_svfiprintf_r+0x114>
 8005cc8:	3501      	adds	r5, #1
 8005cca:	e7af      	b.n	8005c2c <_svfiprintf_r+0x48>
 8005ccc:	9b05      	ldr	r3, [sp, #20]
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	1ac0      	subs	r0, r0, r3
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4083      	lsls	r3, r0
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	002e      	movs	r6, r5
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	e7cc      	b.n	8005c78 <_svfiprintf_r+0x94>
 8005cde:	9b07      	ldr	r3, [sp, #28]
 8005ce0:	1d19      	adds	r1, r3, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	9107      	str	r1, [sp, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	db01      	blt.n	8005cee <_svfiprintf_r+0x10a>
 8005cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cec:	e004      	b.n	8005cf8 <_svfiprintf_r+0x114>
 8005cee:	425b      	negs	r3, r3
 8005cf0:	60e3      	str	r3, [r4, #12]
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	782b      	ldrb	r3, [r5, #0]
 8005cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cfc:	d10c      	bne.n	8005d18 <_svfiprintf_r+0x134>
 8005cfe:	786b      	ldrb	r3, [r5, #1]
 8005d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d02:	d134      	bne.n	8005d6e <_svfiprintf_r+0x18a>
 8005d04:	9b07      	ldr	r3, [sp, #28]
 8005d06:	3502      	adds	r5, #2
 8005d08:	1d1a      	adds	r2, r3, #4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	9207      	str	r2, [sp, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da01      	bge.n	8005d16 <_svfiprintf_r+0x132>
 8005d12:	2301      	movs	r3, #1
 8005d14:	425b      	negs	r3, r3
 8005d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d18:	4e2d      	ldr	r6, [pc, #180]	@ (8005dd0 <_svfiprintf_r+0x1ec>)
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	0030      	movs	r0, r6
 8005d1e:	7829      	ldrb	r1, [r5, #0]
 8005d20:	f000 f9fe 	bl	8006120 <memchr>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d006      	beq.n	8005d36 <_svfiprintf_r+0x152>
 8005d28:	2340      	movs	r3, #64	@ 0x40
 8005d2a:	1b80      	subs	r0, r0, r6
 8005d2c:	4083      	lsls	r3, r0
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	3501      	adds	r5, #1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	7829      	ldrb	r1, [r5, #0]
 8005d38:	2206      	movs	r2, #6
 8005d3a:	4826      	ldr	r0, [pc, #152]	@ (8005dd4 <_svfiprintf_r+0x1f0>)
 8005d3c:	1c6e      	adds	r6, r5, #1
 8005d3e:	7621      	strb	r1, [r4, #24]
 8005d40:	f000 f9ee 	bl	8006120 <memchr>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d038      	beq.n	8005dba <_svfiprintf_r+0x1d6>
 8005d48:	4b23      	ldr	r3, [pc, #140]	@ (8005dd8 <_svfiprintf_r+0x1f4>)
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d122      	bne.n	8005d94 <_svfiprintf_r+0x1b0>
 8005d4e:	2207      	movs	r2, #7
 8005d50:	9b07      	ldr	r3, [sp, #28]
 8005d52:	3307      	adds	r3, #7
 8005d54:	4393      	bics	r3, r2
 8005d56:	3308      	adds	r3, #8
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	6963      	ldr	r3, [r4, #20]
 8005d5c:	9a04      	ldr	r2, [sp, #16]
 8005d5e:	189b      	adds	r3, r3, r2
 8005d60:	6163      	str	r3, [r4, #20]
 8005d62:	e762      	b.n	8005c2a <_svfiprintf_r+0x46>
 8005d64:	4343      	muls	r3, r0
 8005d66:	0035      	movs	r5, r6
 8005d68:	2101      	movs	r1, #1
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	e7a4      	b.n	8005cb8 <_svfiprintf_r+0xd4>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	200a      	movs	r0, #10
 8005d72:	0019      	movs	r1, r3
 8005d74:	3501      	adds	r5, #1
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	782a      	ldrb	r2, [r5, #0]
 8005d7a:	1c6e      	adds	r6, r5, #1
 8005d7c:	3a30      	subs	r2, #48	@ 0x30
 8005d7e:	2a09      	cmp	r2, #9
 8005d80:	d903      	bls.n	8005d8a <_svfiprintf_r+0x1a6>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0c8      	beq.n	8005d18 <_svfiprintf_r+0x134>
 8005d86:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d88:	e7c6      	b.n	8005d18 <_svfiprintf_r+0x134>
 8005d8a:	4341      	muls	r1, r0
 8005d8c:	0035      	movs	r5, r6
 8005d8e:	2301      	movs	r3, #1
 8005d90:	1889      	adds	r1, r1, r2
 8005d92:	e7f1      	b.n	8005d78 <_svfiprintf_r+0x194>
 8005d94:	aa07      	add	r2, sp, #28
 8005d96:	9200      	str	r2, [sp, #0]
 8005d98:	0021      	movs	r1, r4
 8005d9a:	003a      	movs	r2, r7
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ddc <_svfiprintf_r+0x1f8>)
 8005d9e:	9803      	ldr	r0, [sp, #12]
 8005da0:	e000      	b.n	8005da4 <_svfiprintf_r+0x1c0>
 8005da2:	bf00      	nop
 8005da4:	9004      	str	r0, [sp, #16]
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	3301      	adds	r3, #1
 8005daa:	d1d6      	bne.n	8005d5a <_svfiprintf_r+0x176>
 8005dac:	89bb      	ldrh	r3, [r7, #12]
 8005dae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005db0:	065b      	lsls	r3, r3, #25
 8005db2:	d500      	bpl.n	8005db6 <_svfiprintf_r+0x1d2>
 8005db4:	e72c      	b.n	8005c10 <_svfiprintf_r+0x2c>
 8005db6:	b021      	add	sp, #132	@ 0x84
 8005db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dba:	aa07      	add	r2, sp, #28
 8005dbc:	9200      	str	r2, [sp, #0]
 8005dbe:	0021      	movs	r1, r4
 8005dc0:	003a      	movs	r2, r7
 8005dc2:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <_svfiprintf_r+0x1f8>)
 8005dc4:	9803      	ldr	r0, [sp, #12]
 8005dc6:	f000 f87b 	bl	8005ec0 <_printf_i>
 8005dca:	e7eb      	b.n	8005da4 <_svfiprintf_r+0x1c0>
 8005dcc:	08006d41 	.word	0x08006d41
 8005dd0:	08006d47 	.word	0x08006d47
 8005dd4:	08006d4b 	.word	0x08006d4b
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	08005b25 	.word	0x08005b25

08005de0 <_printf_common>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	0016      	movs	r6, r2
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	688a      	ldr	r2, [r1, #8]
 8005de8:	690b      	ldr	r3, [r1, #16]
 8005dea:	000c      	movs	r4, r1
 8005dec:	9000      	str	r0, [sp, #0]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	da00      	bge.n	8005df4 <_printf_common+0x14>
 8005df2:	0013      	movs	r3, r2
 8005df4:	0022      	movs	r2, r4
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	3243      	adds	r2, #67	@ 0x43
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d001      	beq.n	8005e04 <_printf_common+0x24>
 8005e00:	3301      	adds	r3, #1
 8005e02:	6033      	str	r3, [r6, #0]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	069b      	lsls	r3, r3, #26
 8005e08:	d502      	bpl.n	8005e10 <_printf_common+0x30>
 8005e0a:	6833      	ldr	r3, [r6, #0]
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	2306      	movs	r3, #6
 8005e14:	0015      	movs	r5, r2
 8005e16:	401d      	ands	r5, r3
 8005e18:	421a      	tst	r2, r3
 8005e1a:	d027      	beq.n	8005e6c <_printf_common+0x8c>
 8005e1c:	0023      	movs	r3, r4
 8005e1e:	3343      	adds	r3, #67	@ 0x43
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	4193      	sbcs	r3, r2
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d430      	bmi.n	8005e8e <_printf_common+0xae>
 8005e2c:	0022      	movs	r2, r4
 8005e2e:	9901      	ldr	r1, [sp, #4]
 8005e30:	9800      	ldr	r0, [sp, #0]
 8005e32:	9d08      	ldr	r5, [sp, #32]
 8005e34:	3243      	adds	r2, #67	@ 0x43
 8005e36:	47a8      	blx	r5
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d025      	beq.n	8005e88 <_printf_common+0xa8>
 8005e3c:	2206      	movs	r2, #6
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	2500      	movs	r5, #0
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d105      	bne.n	8005e54 <_printf_common+0x74>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	68e5      	ldr	r5, [r4, #12]
 8005e4c:	1aed      	subs	r5, r5, r3
 8005e4e:	43eb      	mvns	r3, r5
 8005e50:	17db      	asrs	r3, r3, #31
 8005e52:	401d      	ands	r5, r3
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	6922      	ldr	r2, [r4, #16]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	dd01      	ble.n	8005e60 <_printf_common+0x80>
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	18ed      	adds	r5, r5, r3
 8005e60:	2600      	movs	r6, #0
 8005e62:	42b5      	cmp	r5, r6
 8005e64:	d120      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e66:	2000      	movs	r0, #0
 8005e68:	e010      	b.n	8005e8c <_printf_common+0xac>
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	6832      	ldr	r2, [r6, #0]
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	ddd2      	ble.n	8005e1c <_printf_common+0x3c>
 8005e76:	0022      	movs	r2, r4
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9901      	ldr	r1, [sp, #4]
 8005e7c:	9800      	ldr	r0, [sp, #0]
 8005e7e:	9f08      	ldr	r7, [sp, #32]
 8005e80:	3219      	adds	r2, #25
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	d1f0      	bne.n	8005e6a <_printf_common+0x8a>
 8005e88:	2001      	movs	r0, #1
 8005e8a:	4240      	negs	r0, r0
 8005e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e8e:	2030      	movs	r0, #48	@ 0x30
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	3143      	adds	r1, #67	@ 0x43
 8005e94:	7008      	strb	r0, [r1, #0]
 8005e96:	0021      	movs	r1, r4
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	3145      	adds	r1, #69	@ 0x45
 8005e9c:	7809      	ldrb	r1, [r1, #0]
 8005e9e:	18a2      	adds	r2, r4, r2
 8005ea0:	3243      	adds	r2, #67	@ 0x43
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	7011      	strb	r1, [r2, #0]
 8005ea6:	e7c1      	b.n	8005e2c <_printf_common+0x4c>
 8005ea8:	0022      	movs	r2, r4
 8005eaa:	2301      	movs	r3, #1
 8005eac:	9901      	ldr	r1, [sp, #4]
 8005eae:	9800      	ldr	r0, [sp, #0]
 8005eb0:	9f08      	ldr	r7, [sp, #32]
 8005eb2:	321a      	adds	r2, #26
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa8>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d1      	b.n	8005e62 <_printf_common+0x82>
	...

08005ec0 <_printf_i>:
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b08b      	sub	sp, #44	@ 0x2c
 8005ec4:	9206      	str	r2, [sp, #24]
 8005ec6:	000a      	movs	r2, r1
 8005ec8:	3243      	adds	r2, #67	@ 0x43
 8005eca:	9307      	str	r3, [sp, #28]
 8005ecc:	9005      	str	r0, [sp, #20]
 8005ece:	9203      	str	r2, [sp, #12]
 8005ed0:	7e0a      	ldrb	r2, [r1, #24]
 8005ed2:	000c      	movs	r4, r1
 8005ed4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ed6:	2a78      	cmp	r2, #120	@ 0x78
 8005ed8:	d809      	bhi.n	8005eee <_printf_i+0x2e>
 8005eda:	2a62      	cmp	r2, #98	@ 0x62
 8005edc:	d80b      	bhi.n	8005ef6 <_printf_i+0x36>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	d100      	bne.n	8005ee4 <_printf_i+0x24>
 8005ee2:	e0ba      	b.n	800605a <_printf_i+0x19a>
 8005ee4:	497a      	ldr	r1, [pc, #488]	@ (80060d0 <_printf_i+0x210>)
 8005ee6:	9104      	str	r1, [sp, #16]
 8005ee8:	2a58      	cmp	r2, #88	@ 0x58
 8005eea:	d100      	bne.n	8005eee <_printf_i+0x2e>
 8005eec:	e08e      	b.n	800600c <_printf_i+0x14c>
 8005eee:	0025      	movs	r5, r4
 8005ef0:	3542      	adds	r5, #66	@ 0x42
 8005ef2:	702a      	strb	r2, [r5, #0]
 8005ef4:	e022      	b.n	8005f3c <_printf_i+0x7c>
 8005ef6:	0010      	movs	r0, r2
 8005ef8:	3863      	subs	r0, #99	@ 0x63
 8005efa:	2815      	cmp	r0, #21
 8005efc:	d8f7      	bhi.n	8005eee <_printf_i+0x2e>
 8005efe:	f7fa f903 	bl	8000108 <__gnu_thumb1_case_shi>
 8005f02:	0016      	.short	0x0016
 8005f04:	fff6001f 	.word	0xfff6001f
 8005f08:	fff6fff6 	.word	0xfff6fff6
 8005f0c:	001ffff6 	.word	0x001ffff6
 8005f10:	fff6fff6 	.word	0xfff6fff6
 8005f14:	fff6fff6 	.word	0xfff6fff6
 8005f18:	0036009f 	.word	0x0036009f
 8005f1c:	fff6007e 	.word	0xfff6007e
 8005f20:	00b0fff6 	.word	0x00b0fff6
 8005f24:	0036fff6 	.word	0x0036fff6
 8005f28:	fff6fff6 	.word	0xfff6fff6
 8005f2c:	0082      	.short	0x0082
 8005f2e:	0025      	movs	r5, r4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	3542      	adds	r5, #66	@ 0x42
 8005f34:	1d11      	adds	r1, r2, #4
 8005f36:	6019      	str	r1, [r3, #0]
 8005f38:	6813      	ldr	r3, [r2, #0]
 8005f3a:	702b      	strb	r3, [r5, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e09e      	b.n	800607e <_printf_i+0x1be>
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	6809      	ldr	r1, [r1, #0]
 8005f44:	1d02      	adds	r2, r0, #4
 8005f46:	060d      	lsls	r5, r1, #24
 8005f48:	d50b      	bpl.n	8005f62 <_printf_i+0xa2>
 8005f4a:	6806      	ldr	r6, [r0, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	da03      	bge.n	8005f5a <_printf_i+0x9a>
 8005f52:	232d      	movs	r3, #45	@ 0x2d
 8005f54:	9a03      	ldr	r2, [sp, #12]
 8005f56:	4276      	negs	r6, r6
 8005f58:	7013      	strb	r3, [r2, #0]
 8005f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80060d0 <_printf_i+0x210>)
 8005f5c:	270a      	movs	r7, #10
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	e018      	b.n	8005f94 <_printf_i+0xd4>
 8005f62:	6806      	ldr	r6, [r0, #0]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	0649      	lsls	r1, r1, #25
 8005f68:	d5f1      	bpl.n	8005f4e <_printf_i+0x8e>
 8005f6a:	b236      	sxth	r6, r6
 8005f6c:	e7ef      	b.n	8005f4e <_printf_i+0x8e>
 8005f6e:	6808      	ldr	r0, [r1, #0]
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	c940      	ldmia	r1!, {r6}
 8005f74:	0605      	lsls	r5, r0, #24
 8005f76:	d402      	bmi.n	8005f7e <_printf_i+0xbe>
 8005f78:	0640      	lsls	r0, r0, #25
 8005f7a:	d500      	bpl.n	8005f7e <_printf_i+0xbe>
 8005f7c:	b2b6      	uxth	r6, r6
 8005f7e:	6019      	str	r1, [r3, #0]
 8005f80:	4b53      	ldr	r3, [pc, #332]	@ (80060d0 <_printf_i+0x210>)
 8005f82:	270a      	movs	r7, #10
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	2a6f      	cmp	r2, #111	@ 0x6f
 8005f88:	d100      	bne.n	8005f8c <_printf_i+0xcc>
 8005f8a:	3f02      	subs	r7, #2
 8005f8c:	0023      	movs	r3, r4
 8005f8e:	2200      	movs	r2, #0
 8005f90:	3343      	adds	r3, #67	@ 0x43
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6863      	ldr	r3, [r4, #4]
 8005f96:	60a3      	str	r3, [r4, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db06      	blt.n	8005faa <_printf_i+0xea>
 8005f9c:	2104      	movs	r1, #4
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	9d03      	ldr	r5, [sp, #12]
 8005fa2:	438a      	bics	r2, r1
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	4333      	orrs	r3, r6
 8005fa8:	d00c      	beq.n	8005fc4 <_printf_i+0x104>
 8005faa:	9d03      	ldr	r5, [sp, #12]
 8005fac:	0030      	movs	r0, r6
 8005fae:	0039      	movs	r1, r7
 8005fb0:	f7fa f93a 	bl	8000228 <__aeabi_uidivmod>
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	3d01      	subs	r5, #1
 8005fb8:	5c5b      	ldrb	r3, [r3, r1]
 8005fba:	702b      	strb	r3, [r5, #0]
 8005fbc:	0033      	movs	r3, r6
 8005fbe:	0006      	movs	r6, r0
 8005fc0:	429f      	cmp	r7, r3
 8005fc2:	d9f3      	bls.n	8005fac <_printf_i+0xec>
 8005fc4:	2f08      	cmp	r7, #8
 8005fc6:	d109      	bne.n	8005fdc <_printf_i+0x11c>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07db      	lsls	r3, r3, #31
 8005fcc:	d506      	bpl.n	8005fdc <_printf_i+0x11c>
 8005fce:	6862      	ldr	r2, [r4, #4]
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	dc02      	bgt.n	8005fdc <_printf_i+0x11c>
 8005fd6:	2330      	movs	r3, #48	@ 0x30
 8005fd8:	3d01      	subs	r5, #1
 8005fda:	702b      	strb	r3, [r5, #0]
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	1b5b      	subs	r3, r3, r5
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	9b07      	ldr	r3, [sp, #28]
 8005fe4:	0021      	movs	r1, r4
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	9805      	ldr	r0, [sp, #20]
 8005fea:	9b06      	ldr	r3, [sp, #24]
 8005fec:	aa09      	add	r2, sp, #36	@ 0x24
 8005fee:	f7ff fef7 	bl	8005de0 <_printf_common>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d148      	bne.n	8006088 <_printf_i+0x1c8>
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	4240      	negs	r0, r0
 8005ffa:	b00b      	add	sp, #44	@ 0x2c
 8005ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffe:	2220      	movs	r2, #32
 8006000:	6809      	ldr	r1, [r1, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	6022      	str	r2, [r4, #0]
 8006006:	2278      	movs	r2, #120	@ 0x78
 8006008:	4932      	ldr	r1, [pc, #200]	@ (80060d4 <_printf_i+0x214>)
 800600a:	9104      	str	r1, [sp, #16]
 800600c:	0021      	movs	r1, r4
 800600e:	3145      	adds	r1, #69	@ 0x45
 8006010:	700a      	strb	r2, [r1, #0]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	c940      	ldmia	r1!, {r6}
 8006018:	0610      	lsls	r0, r2, #24
 800601a:	d402      	bmi.n	8006022 <_printf_i+0x162>
 800601c:	0650      	lsls	r0, r2, #25
 800601e:	d500      	bpl.n	8006022 <_printf_i+0x162>
 8006020:	b2b6      	uxth	r6, r6
 8006022:	6019      	str	r1, [r3, #0]
 8006024:	07d3      	lsls	r3, r2, #31
 8006026:	d502      	bpl.n	800602e <_printf_i+0x16e>
 8006028:	2320      	movs	r3, #32
 800602a:	4313      	orrs	r3, r2
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	2e00      	cmp	r6, #0
 8006030:	d001      	beq.n	8006036 <_printf_i+0x176>
 8006032:	2710      	movs	r7, #16
 8006034:	e7aa      	b.n	8005f8c <_printf_i+0xcc>
 8006036:	2220      	movs	r2, #32
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	4393      	bics	r3, r2
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	e7f8      	b.n	8006032 <_printf_i+0x172>
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	680d      	ldr	r5, [r1, #0]
 8006044:	1d10      	adds	r0, r2, #4
 8006046:	6949      	ldr	r1, [r1, #20]
 8006048:	6018      	str	r0, [r3, #0]
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	062e      	lsls	r6, r5, #24
 800604e:	d501      	bpl.n	8006054 <_printf_i+0x194>
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0x19a>
 8006054:	066d      	lsls	r5, r5, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0x190>
 8006058:	8019      	strh	r1, [r3, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	9d03      	ldr	r5, [sp, #12]
 800605e:	6123      	str	r3, [r4, #16]
 8006060:	e7bf      	b.n	8005fe2 <_printf_i+0x122>
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	1d11      	adds	r1, r2, #4
 8006066:	6019      	str	r1, [r3, #0]
 8006068:	6815      	ldr	r5, [r2, #0]
 800606a:	2100      	movs	r1, #0
 800606c:	0028      	movs	r0, r5
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	f000 f856 	bl	8006120 <memchr>
 8006074:	2800      	cmp	r0, #0
 8006076:	d001      	beq.n	800607c <_printf_i+0x1bc>
 8006078:	1b40      	subs	r0, r0, r5
 800607a:	6060      	str	r0, [r4, #4]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	2300      	movs	r3, #0
 8006082:	9a03      	ldr	r2, [sp, #12]
 8006084:	7013      	strb	r3, [r2, #0]
 8006086:	e7ac      	b.n	8005fe2 <_printf_i+0x122>
 8006088:	002a      	movs	r2, r5
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	9906      	ldr	r1, [sp, #24]
 800608e:	9805      	ldr	r0, [sp, #20]
 8006090:	9d07      	ldr	r5, [sp, #28]
 8006092:	47a8      	blx	r5
 8006094:	3001      	adds	r0, #1
 8006096:	d0ae      	beq.n	8005ff6 <_printf_i+0x136>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	079b      	lsls	r3, r3, #30
 800609c:	d415      	bmi.n	80060ca <_printf_i+0x20a>
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	68e0      	ldr	r0, [r4, #12]
 80060a2:	4298      	cmp	r0, r3
 80060a4:	daa9      	bge.n	8005ffa <_printf_i+0x13a>
 80060a6:	0018      	movs	r0, r3
 80060a8:	e7a7      	b.n	8005ffa <_printf_i+0x13a>
 80060aa:	0022      	movs	r2, r4
 80060ac:	2301      	movs	r3, #1
 80060ae:	9906      	ldr	r1, [sp, #24]
 80060b0:	9805      	ldr	r0, [sp, #20]
 80060b2:	9e07      	ldr	r6, [sp, #28]
 80060b4:	3219      	adds	r2, #25
 80060b6:	47b0      	blx	r6
 80060b8:	3001      	adds	r0, #1
 80060ba:	d09c      	beq.n	8005ff6 <_printf_i+0x136>
 80060bc:	3501      	adds	r5, #1
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dcf0      	bgt.n	80060aa <_printf_i+0x1ea>
 80060c8:	e7e9      	b.n	800609e <_printf_i+0x1de>
 80060ca:	2500      	movs	r5, #0
 80060cc:	e7f7      	b.n	80060be <_printf_i+0x1fe>
 80060ce:	46c0      	nop			@ (mov r8, r8)
 80060d0:	08006d52 	.word	0x08006d52
 80060d4:	08006d63 	.word	0x08006d63

080060d8 <memmove>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	4288      	cmp	r0, r1
 80060dc:	d902      	bls.n	80060e4 <memmove+0xc>
 80060de:	188b      	adds	r3, r1, r2
 80060e0:	4298      	cmp	r0, r3
 80060e2:	d308      	bcc.n	80060f6 <memmove+0x1e>
 80060e4:	2300      	movs	r3, #0
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d007      	beq.n	80060fa <memmove+0x22>
 80060ea:	5ccc      	ldrb	r4, [r1, r3]
 80060ec:	54c4      	strb	r4, [r0, r3]
 80060ee:	3301      	adds	r3, #1
 80060f0:	e7f9      	b.n	80060e6 <memmove+0xe>
 80060f2:	5c8b      	ldrb	r3, [r1, r2]
 80060f4:	5483      	strb	r3, [r0, r2]
 80060f6:	3a01      	subs	r2, #1
 80060f8:	d2fb      	bcs.n	80060f2 <memmove+0x1a>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <_sbrk_r>:
 80060fc:	2300      	movs	r3, #0
 80060fe:	b570      	push	{r4, r5, r6, lr}
 8006100:	4d06      	ldr	r5, [pc, #24]	@ (800611c <_sbrk_r+0x20>)
 8006102:	0004      	movs	r4, r0
 8006104:	0008      	movs	r0, r1
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	f7fc f9b8 	bl	800247c <_sbrk>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d103      	bne.n	8006118 <_sbrk_r+0x1c>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d000      	beq.n	8006118 <_sbrk_r+0x1c>
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	20000c34 	.word	0x20000c34

08006120 <memchr>:
 8006120:	b2c9      	uxtb	r1, r1
 8006122:	1882      	adds	r2, r0, r2
 8006124:	4290      	cmp	r0, r2
 8006126:	d101      	bne.n	800612c <memchr+0xc>
 8006128:	2000      	movs	r0, #0
 800612a:	4770      	bx	lr
 800612c:	7803      	ldrb	r3, [r0, #0]
 800612e:	428b      	cmp	r3, r1
 8006130:	d0fb      	beq.n	800612a <memchr+0xa>
 8006132:	3001      	adds	r0, #1
 8006134:	e7f6      	b.n	8006124 <memchr+0x4>

08006136 <_realloc_r>:
 8006136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006138:	0006      	movs	r6, r0
 800613a:	000c      	movs	r4, r1
 800613c:	0015      	movs	r5, r2
 800613e:	2900      	cmp	r1, #0
 8006140:	d105      	bne.n	800614e <_realloc_r+0x18>
 8006142:	0011      	movs	r1, r2
 8006144:	f7ff fc5e 	bl	8005a04 <_malloc_r>
 8006148:	0004      	movs	r4, r0
 800614a:	0020      	movs	r0, r4
 800614c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800614e:	2a00      	cmp	r2, #0
 8006150:	d103      	bne.n	800615a <_realloc_r+0x24>
 8006152:	f7ff fbeb 	bl	800592c <_free_r>
 8006156:	002c      	movs	r4, r5
 8006158:	e7f7      	b.n	800614a <_realloc_r+0x14>
 800615a:	f000 f81c 	bl	8006196 <_malloc_usable_size_r>
 800615e:	0007      	movs	r7, r0
 8006160:	4285      	cmp	r5, r0
 8006162:	d802      	bhi.n	800616a <_realloc_r+0x34>
 8006164:	0843      	lsrs	r3, r0, #1
 8006166:	42ab      	cmp	r3, r5
 8006168:	d3ef      	bcc.n	800614a <_realloc_r+0x14>
 800616a:	0029      	movs	r1, r5
 800616c:	0030      	movs	r0, r6
 800616e:	f7ff fc49 	bl	8005a04 <_malloc_r>
 8006172:	9001      	str	r0, [sp, #4]
 8006174:	2800      	cmp	r0, #0
 8006176:	d101      	bne.n	800617c <_realloc_r+0x46>
 8006178:	9c01      	ldr	r4, [sp, #4]
 800617a:	e7e6      	b.n	800614a <_realloc_r+0x14>
 800617c:	002a      	movs	r2, r5
 800617e:	42bd      	cmp	r5, r7
 8006180:	d900      	bls.n	8006184 <_realloc_r+0x4e>
 8006182:	003a      	movs	r2, r7
 8006184:	0021      	movs	r1, r4
 8006186:	9801      	ldr	r0, [sp, #4]
 8006188:	f7ff fbc6 	bl	8005918 <memcpy>
 800618c:	0021      	movs	r1, r4
 800618e:	0030      	movs	r0, r6
 8006190:	f7ff fbcc 	bl	800592c <_free_r>
 8006194:	e7f0      	b.n	8006178 <_realloc_r+0x42>

08006196 <_malloc_usable_size_r>:
 8006196:	1f0b      	subs	r3, r1, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1f18      	subs	r0, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	da01      	bge.n	80061a4 <_malloc_usable_size_r+0xe>
 80061a0:	580b      	ldr	r3, [r1, r0]
 80061a2:	18c0      	adds	r0, r0, r3
 80061a4:	4770      	bx	lr
	...

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
