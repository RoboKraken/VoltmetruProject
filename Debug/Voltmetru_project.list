
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  00009420  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007b0c  08007b0c  00009420  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007b0c  08007b0c  00009420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b10  08007b10  00008b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08007b14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f14  20000420  08007f34  00009420  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002334  08007f34  0000a334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001b4fb  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  00024943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00018c5e  00000000  00000000  000249ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000378c  00000000  00000000  0003d60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f8  00000000  00000000  00040d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b754b  00000000  00000000  00042490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011e6  00000000  00000000  000f99db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001d53d  00000000  00000000  000fabc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001180fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b0  00000000  00000000  00118144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007470 	.word	0x08007470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08007470 	.word	0x08007470

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f000 f9c6 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f006 fff7 	bl	8007414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f001 f8ab 	bl	8001580 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8000438:	08007b14 	.word	0x08007b14
  ldr r2, =_sbss
 800043c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000440:	20002334 	.word	0x20002334

08000444 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_COMP_IRQHandler>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_MspInit+0x50>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <HAL_MspInit+0x50>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x50>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x50>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <HAL_MspInit+0x50>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <HAL_MspInit+0x50>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000482:	2302      	movs	r3, #2
 8000484:	425b      	negs	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	2103      	movs	r1, #3
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fb36 	bl	8002afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	@ 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f006 ffa8 	bl	8007404 <memset>
  if(hadc->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <HAL_ADC_MspInit+0x84>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d12b      	bne.n	8000516 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <HAL_ADC_MspInit+0x88>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	193a      	adds	r2, r7, r4
 800050a:	2390      	movs	r3, #144	@ 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fb19 	bl	8002b48 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b00b      	add	sp, #44	@ 0x2c
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	40012400 	.word	0x40012400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b08b      	sub	sp, #44	@ 0x2c
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	2414      	movs	r4, #20
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f006 ff62 	bl	8007404 <memset>
  if(hspi->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <HAL_SPI_MspInit+0x90>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d132      	bne.n	80005b0 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0149      	lsls	r1, r1, #5
 8000554:	430a      	orrs	r2, r1
 8000556:	619a      	str	r2, [r3, #24]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <HAL_SPI_MspInit+0x94>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	22a0      	movs	r2, #160	@ 0xa0
 8000588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2203      	movs	r2, #3
 800059a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	2390      	movs	r3, #144	@ 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 facc 	bl	8002b48 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00b      	add	sp, #44	@ 0x2c
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40013000 	.word	0x40013000
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2414      	movs	r4, #20
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f006 ff16 	bl	8007404 <memset>
  if(huart->Instance==USART2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <HAL_UART_MspInit+0x90>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d132      	bne.n	8000648 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0289      	lsls	r1, r1, #10
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <HAL_UART_MspInit+0x94>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	029b      	lsls	r3, r3, #10
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_UART_MspInit+0x94>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_UART_MspInit+0x94>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	187a      	adds	r2, r7, r1
 800063c:	2390      	movs	r3, #144	@ 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f002 fa80 	bl	8002b48 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b00b      	add	sp, #44	@ 0x2c
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40004400 	.word	0x40004400
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000668:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <HAL_InitTick+0xf0>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <HAL_InitTick+0xf0>)
 800066e:	2102      	movs	r1, #2
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <HAL_InitTick+0xf0>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2202      	movs	r2, #2
 800067a:	4013      	ands	r3, r2
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000680:	230c      	movs	r3, #12
 8000682:	18fa      	adds	r2, r7, r3
 8000684:	2410      	movs	r4, #16
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f003 f8e4 	bl	8003858 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800069c:	f003 f8c6 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 80006a0:	0003      	movs	r3, r0
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006a4:	e004      	b.n	80006b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006a6:	f003 f8c1 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 80006aa:	0003      	movs	r3, r0
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b2:	4926      	ldr	r1, [pc, #152]	@ (800074c <HAL_InitTick+0xf4>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fd27 	bl	8000108 <__udivsi3>
 80006ba:	0003      	movs	r3, r0
 80006bc:	3b01      	subs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <HAL_InitTick+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <HAL_InitTick+0xf8>)
 80006c8:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <HAL_InitTick+0x100>)
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ce:	6a3a      	ldr	r2, [r7, #32]
 80006d0:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_InitTick+0xf8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <HAL_InitTick+0xf8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_InitTick+0xf8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006e4:	252b      	movs	r5, #43	@ 0x2b
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_InitTick+0xf8>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fd6c 	bl	80041c8 <HAL_TIM_Base_Init>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11e      	bne.n	800073a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006fc:	197c      	adds	r4, r7, r5
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_InitTick+0xf8>)
 8000700:	0018      	movs	r0, r3
 8000702:	f003 fdb9 	bl	8004278 <HAL_TIM_Base_Start_IT>
 8000706:	0003      	movs	r3, r0
 8000708:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800070a:	197b      	adds	r3, r7, r5
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d113      	bne.n	800073a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000712:	2010      	movs	r0, #16
 8000714:	f002 fa07 	bl	8002b26 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d809      	bhi.n	8000732 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	0019      	movs	r1, r3
 8000724:	2010      	movs	r0, #16
 8000726:	f002 f9e9 	bl	8002afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_InitTick+0x104>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e003      	b.n	800073a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000732:	232b      	movs	r3, #43	@ 0x2b
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800073a:	232b      	movs	r3, #43	@ 0x2b
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b00c      	add	sp, #48	@ 0x30
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	000f4240 	.word	0x000f4240
 8000750:	2000043c 	.word	0x2000043c
 8000754:	40000400 	.word	0x40000400
 8000758:	000003e7 	.word	0x000003e7
 800075c:	20000414 	.word	0x20000414

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <TIM3_IRQHandler+0x14>)
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fdd0 	bl	800431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	2000043c 	.word	0x2000043c

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <st7565_write_buffer>:
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
#if ST7565_ASINCRON_TRANSMIT == ST7565_TRUE
void st7565_write_buffer(uint8_t *buffer)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0a6      	sub	sp, #152	@ 0x98
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    static PageType page = Page0;
    static uint8_t Data[16*64] = {0};
    uint8_t DataToSend[128] = {0};
 800079c:	230c      	movs	r3, #12
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	0018      	movs	r0, r3
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f006 fe2c 	bl	8007404 <memset>
    if(hspi1.State == HAL_SPI_STATE_READY)
 80007ac:	4bd9      	ldr	r3, [pc, #868]	@ (8000b14 <st7565_write_buffer+0x380>)
 80007ae:	225d      	movs	r2, #93	@ 0x5d
 80007b0:	5c9b      	ldrb	r3, [r3, r2]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d000      	beq.n	80007ba <st7565_write_buffer+0x26>
 80007b8:	e340      	b.n	8000e3c <st7565_write_buffer+0x6a8>
    {
        switch(page)
 80007ba:	4bd7      	ldr	r3, [pc, #860]	@ (8000b18 <st7565_write_buffer+0x384>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d900      	bls.n	80007c4 <st7565_write_buffer+0x30>
 80007c2:	e33b      	b.n	8000e3c <st7565_write_buffer+0x6a8>
 80007c4:	009a      	lsls	r2, r3, #2
 80007c6:	4bd5      	ldr	r3, [pc, #852]	@ (8000b1c <st7565_write_buffer+0x388>)
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	469f      	mov	pc, r3
        {
            case Page0:
            {
                for(uint16_t i = 0; i< sizeof(Data); i++)    //update all the display content
 80007ce:	2396      	movs	r3, #150	@ 0x96
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	2200      	movs	r2, #0
 80007d4:	801a      	strh	r2, [r3, #0]
 80007d6:	e00e      	b.n	80007f6 <st7565_write_buffer+0x62>
                {
                    Data[i] = buffer[i];
 80007d8:	2096      	movs	r0, #150	@ 0x96
 80007da:	183b      	adds	r3, r7, r0
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	18d2      	adds	r2, r2, r3
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	7811      	ldrb	r1, [r2, #0]
 80007e8:	4acd      	ldr	r2, [pc, #820]	@ (8000b20 <st7565_write_buffer+0x38c>)
 80007ea:	54d1      	strb	r1, [r2, r3]
                for(uint16_t i = 0; i< sizeof(Data); i++)    //update all the display content
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	3201      	adds	r2, #1
 80007f4:	801a      	strh	r2, [r3, #0]
 80007f6:	2396      	movs	r3, #150	@ 0x96
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	2380      	movs	r3, #128	@ 0x80
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	429a      	cmp	r2, r3
 8000802:	d3e9      	bcc.n	80007d8 <st7565_write_buffer+0x44>
                }
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000804:	4bc7      	ldr	r3, [pc, #796]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fb14 	bl	8002e38 <HAL_GPIO_WritePin>
 8000810:	4bc1      	ldr	r3, [pc, #772]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	001a      	movs	r2, r3
 8000816:	4bc4      	ldr	r3, [pc, #784]	@ (8000b28 <st7565_write_buffer+0x394>)
 8000818:	5c9b      	ldrb	r3, [r3, r2]
 800081a:	2250      	movs	r2, #80	@ 0x50
 800081c:	4252      	negs	r2, r2
 800081e:	4313      	orrs	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fb18 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000828:	4bbe      	ldr	r3, [pc, #760]	@ (8000b24 <st7565_write_buffer+0x390>)
 800082a:	2200      	movs	r2, #0
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0018      	movs	r0, r3
 8000830:	f002 fb02 	bl	8002e38 <HAL_GPIO_WritePin>
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fb0f 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 800083a:	4bba      	ldr	r3, [pc, #744]	@ (8000b24 <st7565_write_buffer+0x390>)
 800083c:	2200      	movs	r2, #0
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	0018      	movs	r0, r3
 8000842:	f002 faf9 	bl	8002e38 <HAL_GPIO_WritePin>
 8000846:	2010      	movs	r0, #16
 8000848:	f000 fb06 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 800084c:	4bb5      	ldr	r3, [pc, #724]	@ (8000b24 <st7565_write_buffer+0x390>)
 800084e:	2200      	movs	r2, #0
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	0018      	movs	r0, r3
 8000854:	f002 faf0 	bl	8002e38 <HAL_GPIO_WritePin>
 8000858:	20e0      	movs	r0, #224	@ 0xe0
 800085a:	f000 fafd 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 800085e:	4bb1      	ldr	r3, [pc, #708]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000860:	2201      	movs	r2, #1
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fae7 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 800086a:	48aa      	ldr	r0, [pc, #680]	@ (8000b14 <st7565_write_buffer+0x380>)
 800086c:	2364      	movs	r3, #100	@ 0x64
 800086e:	2201      	movs	r2, #1
 8000870:	21ff      	movs	r1, #255	@ 0xff
 8000872:	f003 f9d3 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint16_t i = 0; i< 128; i++)    //update page
 8000876:	2394      	movs	r3, #148	@ 0x94
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	2200      	movs	r2, #0
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	e012      	b.n	80008a6 <st7565_write_buffer+0x112>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000880:	4ba5      	ldr	r3, [pc, #660]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	01da      	lsls	r2, r3, #7
 8000886:	2094      	movs	r0, #148	@ 0x94
 8000888:	183b      	adds	r3, r7, r0
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	18d2      	adds	r2, r2, r3
 800088e:	183b      	adds	r3, r7, r0
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	49a3      	ldr	r1, [pc, #652]	@ (8000b20 <st7565_write_buffer+0x38c>)
 8000894:	5c89      	ldrb	r1, [r1, r2]
 8000896:	220c      	movs	r2, #12
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	54d1      	strb	r1, [r2, r3]
                for(uint16_t i = 0; i< 128; i++)    //update page
 800089c:	183b      	adds	r3, r7, r0
 800089e:	881a      	ldrh	r2, [r3, #0]
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	3201      	adds	r2, #1
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	2394      	movs	r3, #148	@ 0x94
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ae:	d9e7      	bls.n	8000880 <st7565_write_buffer+0xec>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 80008b0:	230c      	movs	r3, #12
 80008b2:	18f9      	adds	r1, r7, r3
 80008b4:	4897      	ldr	r0, [pc, #604]	@ (8000b14 <st7565_write_buffer+0x380>)
 80008b6:	2364      	movs	r3, #100	@ 0x64
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	f003 f9af 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page1;
 80008be:	4b96      	ldr	r3, [pc, #600]	@ (8000b18 <st7565_write_buffer+0x384>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
                break;
 80008c4:	e2ba      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page1:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 80008c6:	4b97      	ldr	r3, [pc, #604]	@ (8000b24 <st7565_write_buffer+0x390>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 fab3 	bl	8002e38 <HAL_GPIO_WritePin>
 80008d2:	4b91      	ldr	r3, [pc, #580]	@ (8000b18 <st7565_write_buffer+0x384>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001a      	movs	r2, r3
 80008d8:	4b93      	ldr	r3, [pc, #588]	@ (8000b28 <st7565_write_buffer+0x394>)
 80008da:	5c9b      	ldrb	r3, [r3, r2]
 80008dc:	2250      	movs	r2, #80	@ 0x50
 80008de:	4252      	negs	r2, r2
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fab7 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80008ea:	4b8e      	ldr	r3, [pc, #568]	@ (8000b24 <st7565_write_buffer+0x390>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 faa1 	bl	8002e38 <HAL_GPIO_WritePin>
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 faae 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80008fc:	4b89      	ldr	r3, [pc, #548]	@ (8000b24 <st7565_write_buffer+0x390>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	0018      	movs	r0, r3
 8000904:	f002 fa98 	bl	8002e38 <HAL_GPIO_WritePin>
 8000908:	2010      	movs	r0, #16
 800090a:	f000 faa5 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 800090e:	4b85      	ldr	r3, [pc, #532]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000910:	2200      	movs	r2, #0
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	0018      	movs	r0, r3
 8000916:	f002 fa8f 	bl	8002e38 <HAL_GPIO_WritePin>
 800091a:	20e0      	movs	r0, #224	@ 0xe0
 800091c:	f000 fa9c 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000920:	4b80      	ldr	r3, [pc, #512]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000922:	2201      	movs	r2, #1
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fa86 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 800092c:	4879      	ldr	r0, [pc, #484]	@ (8000b14 <st7565_write_buffer+0x380>)
 800092e:	2364      	movs	r3, #100	@ 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	21ff      	movs	r1, #255	@ 0xff
 8000934:	f003 f972 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000938:	2393      	movs	r3, #147	@ 0x93
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e012      	b.n	8000968 <st7565_write_buffer+0x1d4>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000942:	4b75      	ldr	r3, [pc, #468]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	01da      	lsls	r2, r3, #7
 8000948:	2093      	movs	r0, #147	@ 0x93
 800094a:	183b      	adds	r3, r7, r0
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	18d2      	adds	r2, r2, r3
 8000950:	183b      	adds	r3, r7, r0
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4972      	ldr	r1, [pc, #456]	@ (8000b20 <st7565_write_buffer+0x38c>)
 8000956:	5c89      	ldrb	r1, [r1, r2]
 8000958:	220c      	movs	r2, #12
 800095a:	18ba      	adds	r2, r7, r2
 800095c:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 800095e:	183b      	adds	r3, r7, r0
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	183b      	adds	r3, r7, r0
 8000964:	3201      	adds	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	2393      	movs	r3, #147	@ 0x93
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	dae6      	bge.n	8000942 <st7565_write_buffer+0x1ae>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000974:	230c      	movs	r3, #12
 8000976:	18f9      	adds	r1, r7, r3
 8000978:	4866      	ldr	r0, [pc, #408]	@ (8000b14 <st7565_write_buffer+0x380>)
 800097a:	2364      	movs	r3, #100	@ 0x64
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	f003 f94d 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page2;
 8000982:	4b65      	ldr	r3, [pc, #404]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000984:	2202      	movs	r2, #2
 8000986:	701a      	strb	r2, [r3, #0]
                break;
 8000988:	e258      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page2:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 800098a:	4b66      	ldr	r3, [pc, #408]	@ (8000b24 <st7565_write_buffer+0x390>)
 800098c:	2200      	movs	r2, #0
 800098e:	2180      	movs	r1, #128	@ 0x80
 8000990:	0018      	movs	r0, r3
 8000992:	f002 fa51 	bl	8002e38 <HAL_GPIO_WritePin>
 8000996:	4b60      	ldr	r3, [pc, #384]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	4b62      	ldr	r3, [pc, #392]	@ (8000b28 <st7565_write_buffer+0x394>)
 800099e:	5c9b      	ldrb	r3, [r3, r2]
 80009a0:	2250      	movs	r2, #80	@ 0x50
 80009a2:	4252      	negs	r2, r2
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fa55 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 80009ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000b24 <st7565_write_buffer+0x390>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fa3f 	bl	8002e38 <HAL_GPIO_WritePin>
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fa4c 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 80009c0:	4b58      	ldr	r3, [pc, #352]	@ (8000b24 <st7565_write_buffer+0x390>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fa36 	bl	8002e38 <HAL_GPIO_WritePin>
 80009cc:	2010      	movs	r0, #16
 80009ce:	f000 fa43 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 80009d2:	4b54      	ldr	r3, [pc, #336]	@ (8000b24 <st7565_write_buffer+0x390>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fa2d 	bl	8002e38 <HAL_GPIO_WritePin>
 80009de:	20e0      	movs	r0, #224	@ 0xe0
 80009e0:	f000 fa3a 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 80009e4:	4b4f      	ldr	r3, [pc, #316]	@ (8000b24 <st7565_write_buffer+0x390>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 fa24 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 80009f0:	4848      	ldr	r0, [pc, #288]	@ (8000b14 <st7565_write_buffer+0x380>)
 80009f2:	2364      	movs	r3, #100	@ 0x64
 80009f4:	2201      	movs	r2, #1
 80009f6:	21ff      	movs	r1, #255	@ 0xff
 80009f8:	f003 f910 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 80009fc:	2392      	movs	r3, #146	@ 0x92
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e012      	b.n	8000a2c <st7565_write_buffer+0x298>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	01da      	lsls	r2, r3, #7
 8000a0c:	2092      	movs	r0, #146	@ 0x92
 8000a0e:	183b      	adds	r3, r7, r0
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	18d2      	adds	r2, r2, r3
 8000a14:	183b      	adds	r3, r7, r0
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4941      	ldr	r1, [pc, #260]	@ (8000b20 <st7565_write_buffer+0x38c>)
 8000a1a:	5c89      	ldrb	r1, [r1, r2]
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000a22:	183b      	adds	r3, r7, r0
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	183b      	adds	r3, r7, r0
 8000a28:	3201      	adds	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	2392      	movs	r3, #146	@ 0x92
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dae6      	bge.n	8000a06 <st7565_write_buffer+0x272>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000a38:	230c      	movs	r3, #12
 8000a3a:	18f9      	adds	r1, r7, r3
 8000a3c:	4835      	ldr	r0, [pc, #212]	@ (8000b14 <st7565_write_buffer+0x380>)
 8000a3e:	2364      	movs	r3, #100	@ 0x64
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	f003 f8eb 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page3;
 8000a46:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	701a      	strb	r2, [r3, #0]
                break;
 8000a4c:	e1f6      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page3:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 f9ef 	bl	8002e38 <HAL_GPIO_WritePin>
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001a      	movs	r2, r3
 8000a60:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <st7565_write_buffer+0x394>)
 8000a62:	5c9b      	ldrb	r3, [r3, r2]
 8000a64:	2250      	movs	r2, #80	@ 0x50
 8000a66:	4252      	negs	r2, r2
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 f9f3 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000a72:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 f9dd 	bl	8002e38 <HAL_GPIO_WritePin>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f9ea 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	2180      	movs	r1, #128	@ 0x80
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 f9d4 	bl	8002e38 <HAL_GPIO_WritePin>
 8000a90:	2010      	movs	r0, #16
 8000a92:	f000 f9e1 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 8000a96:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2180      	movs	r1, #128	@ 0x80
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 f9cb 	bl	8002e38 <HAL_GPIO_WritePin>
 8000aa2:	20e0      	movs	r0, #224	@ 0xe0
 8000aa4:	f000 f9d8 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <st7565_write_buffer+0x390>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 f9c2 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 8000ab4:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <st7565_write_buffer+0x380>)
 8000ab6:	2364      	movs	r3, #100	@ 0x64
 8000ab8:	2201      	movs	r2, #1
 8000aba:	21ff      	movs	r1, #255	@ 0xff
 8000abc:	f003 f8ae 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000ac0:	2391      	movs	r3, #145	@ 0x91
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e012      	b.n	8000af0 <st7565_write_buffer+0x35c>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	01da      	lsls	r2, r3, #7
 8000ad0:	2091      	movs	r0, #145	@ 0x91
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	18d2      	adds	r2, r2, r3
 8000ad8:	183b      	adds	r3, r7, r0
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4910      	ldr	r1, [pc, #64]	@ (8000b20 <st7565_write_buffer+0x38c>)
 8000ade:	5c89      	ldrb	r1, [r1, r2]
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	18ba      	adds	r2, r7, r2
 8000ae4:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000ae6:	183b      	adds	r3, r7, r0
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	3201      	adds	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	2391      	movs	r3, #145	@ 0x91
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dae6      	bge.n	8000aca <st7565_write_buffer+0x336>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000afc:	230c      	movs	r3, #12
 8000afe:	18f9      	adds	r1, r7, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <st7565_write_buffer+0x380>)
 8000b02:	2364      	movs	r3, #100	@ 0x64
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	f003 f889 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page4;
 8000b0a:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <st7565_write_buffer+0x384>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	701a      	strb	r2, [r3, #0]
                break;
 8000b10:	e194      	b.n	8000e3c <st7565_write_buffer+0x6a8>
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	200008f8 	.word	0x200008f8
 8000b18:	2000048d 	.word	0x2000048d
 8000b1c:	08007a04 	.word	0x08007a04
 8000b20:	20000490 	.word	0x20000490
 8000b24:	48000800 	.word	0x48000800
 8000b28:	2000040c 	.word	0x2000040c
            }
            case Page4:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000b2c:	4bc5      	ldr	r3, [pc, #788]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 f980 	bl	8002e38 <HAL_GPIO_WritePin>
 8000b38:	4bc3      	ldr	r3, [pc, #780]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4bc3      	ldr	r3, [pc, #780]	@ (8000e4c <st7565_write_buffer+0x6b8>)
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	2250      	movs	r2, #80	@ 0x50
 8000b44:	4252      	negs	r2, r2
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f984 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000b50:	4bbc      	ldr	r3, [pc, #752]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f96e 	bl	8002e38 <HAL_GPIO_WritePin>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f97b 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000b62:	4bb8      	ldr	r3, [pc, #736]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	2180      	movs	r1, #128	@ 0x80
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 f965 	bl	8002e38 <HAL_GPIO_WritePin>
 8000b6e:	2010      	movs	r0, #16
 8000b70:	f000 f972 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 8000b74:	4bb3      	ldr	r3, [pc, #716]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 f95c 	bl	8002e38 <HAL_GPIO_WritePin>
 8000b80:	20e0      	movs	r0, #224	@ 0xe0
 8000b82:	f000 f969 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000b86:	4baf      	ldr	r3, [pc, #700]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f002 f953 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 8000b92:	48af      	ldr	r0, [pc, #700]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	2201      	movs	r2, #1
 8000b98:	21ff      	movs	r1, #255	@ 0xff
 8000b9a:	f003 f83f 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000b9e:	2390      	movs	r3, #144	@ 0x90
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e012      	b.n	8000bce <st7565_write_buffer+0x43a>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000ba8:	4ba7      	ldr	r3, [pc, #668]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	01da      	lsls	r2, r3, #7
 8000bae:	2090      	movs	r0, #144	@ 0x90
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	183b      	adds	r3, r7, r0
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	49a6      	ldr	r1, [pc, #664]	@ (8000e54 <st7565_write_buffer+0x6c0>)
 8000bbc:	5c89      	ldrb	r1, [r1, r2]
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	18ba      	adds	r2, r7, r2
 8000bc2:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000bc4:	183b      	adds	r3, r7, r0
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	3201      	adds	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	2390      	movs	r3, #144	@ 0x90
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dae6      	bge.n	8000ba8 <st7565_write_buffer+0x414>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000bda:	230c      	movs	r3, #12
 8000bdc:	18f9      	adds	r1, r7, r3
 8000bde:	489c      	ldr	r0, [pc, #624]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	f003 f81a 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page5;
 8000be8:	4b97      	ldr	r3, [pc, #604]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000bea:	2205      	movs	r2, #5
 8000bec:	701a      	strb	r2, [r3, #0]
                break;
 8000bee:	e125      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page5:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000bf0:	4b94      	ldr	r3, [pc, #592]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2180      	movs	r1, #128	@ 0x80
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 f91e 	bl	8002e38 <HAL_GPIO_WritePin>
 8000bfc:	4b92      	ldr	r3, [pc, #584]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b92      	ldr	r3, [pc, #584]	@ (8000e4c <st7565_write_buffer+0x6b8>)
 8000c04:	5c9b      	ldrb	r3, [r3, r2]
 8000c06:	2250      	movs	r2, #80	@ 0x50
 8000c08:	4252      	negs	r2, r2
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f922 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000c14:	4b8b      	ldr	r3, [pc, #556]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 f90c 	bl	8002e38 <HAL_GPIO_WritePin>
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f919 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000c26:	4b87      	ldr	r3, [pc, #540]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 f903 	bl	8002e38 <HAL_GPIO_WritePin>
 8000c32:	2010      	movs	r0, #16
 8000c34:	f000 f910 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 8000c38:	4b82      	ldr	r3, [pc, #520]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	@ 0x80
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f002 f8fa 	bl	8002e38 <HAL_GPIO_WritePin>
 8000c44:	20e0      	movs	r0, #224	@ 0xe0
 8000c46:	f000 f907 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000c4a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	@ 0x80
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 f8f1 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 8000c56:	487e      	ldr	r0, [pc, #504]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	21ff      	movs	r1, #255	@ 0xff
 8000c5e:	f002 ffdd 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000c62:	238f      	movs	r3, #143	@ 0x8f
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e012      	b.n	8000c92 <st7565_write_buffer+0x4fe>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000c6c:	4b76      	ldr	r3, [pc, #472]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	01da      	lsls	r2, r3, #7
 8000c72:	208f      	movs	r0, #143	@ 0x8f
 8000c74:	183b      	adds	r3, r7, r0
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	18d2      	adds	r2, r2, r3
 8000c7a:	183b      	adds	r3, r7, r0
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4975      	ldr	r1, [pc, #468]	@ (8000e54 <st7565_write_buffer+0x6c0>)
 8000c80:	5c89      	ldrb	r1, [r1, r2]
 8000c82:	220c      	movs	r2, #12
 8000c84:	18ba      	adds	r2, r7, r2
 8000c86:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	3201      	adds	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	238f      	movs	r3, #143	@ 0x8f
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dae6      	bge.n	8000c6c <st7565_write_buffer+0x4d8>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	18f9      	adds	r1, r7, r3
 8000ca2:	486b      	ldr	r0, [pc, #428]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000ca4:	2364      	movs	r3, #100	@ 0x64
 8000ca6:	2280      	movs	r2, #128	@ 0x80
 8000ca8:	f002 ffb8 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page6;
 8000cac:	4b66      	ldr	r3, [pc, #408]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000cae:	2206      	movs	r2, #6
 8000cb0:	701a      	strb	r2, [r3, #0]
                break;
 8000cb2:	e0c3      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page6:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000cb4:	4b63      	ldr	r3, [pc, #396]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 f8bc 	bl	8002e38 <HAL_GPIO_WritePin>
 8000cc0:	4b61      	ldr	r3, [pc, #388]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b61      	ldr	r3, [pc, #388]	@ (8000e4c <st7565_write_buffer+0x6b8>)
 8000cc8:	5c9b      	ldrb	r3, [r3, r2]
 8000cca:	2250      	movs	r2, #80	@ 0x50
 8000ccc:	4252      	negs	r2, r2
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f8c0 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f002 f8aa 	bl	8002e38 <HAL_GPIO_WritePin>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f8b7 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000cea:	4b56      	ldr	r3, [pc, #344]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 f8a1 	bl	8002e38 <HAL_GPIO_WritePin>
 8000cf6:	2010      	movs	r0, #16
 8000cf8:	f000 f8ae 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 8000cfc:	4b51      	ldr	r3, [pc, #324]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 f898 	bl	8002e38 <HAL_GPIO_WritePin>
 8000d08:	20e0      	movs	r0, #224	@ 0xe0
 8000d0a:	f000 f8a5 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 f88f 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 8000d1a:	484d      	ldr	r0, [pc, #308]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000d1c:	2364      	movs	r3, #100	@ 0x64
 8000d1e:	2201      	movs	r2, #1
 8000d20:	21ff      	movs	r1, #255	@ 0xff
 8000d22:	f002 ff7b 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000d26:	238e      	movs	r3, #142	@ 0x8e
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e012      	b.n	8000d56 <st7565_write_buffer+0x5c2>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000d30:	4b45      	ldr	r3, [pc, #276]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	01da      	lsls	r2, r3, #7
 8000d36:	208e      	movs	r0, #142	@ 0x8e
 8000d38:	183b      	adds	r3, r7, r0
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	18d2      	adds	r2, r2, r3
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4944      	ldr	r1, [pc, #272]	@ (8000e54 <st7565_write_buffer+0x6c0>)
 8000d44:	5c89      	ldrb	r1, [r1, r2]
 8000d46:	220c      	movs	r2, #12
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000d4c:	183b      	adds	r3, r7, r0
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	183b      	adds	r3, r7, r0
 8000d52:	3201      	adds	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	238e      	movs	r3, #142	@ 0x8e
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dae6      	bge.n	8000d30 <st7565_write_buffer+0x59c>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000d62:	230c      	movs	r3, #12
 8000d64:	18f9      	adds	r1, r7, r3
 8000d66:	483a      	ldr	r0, [pc, #232]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000d68:	2364      	movs	r3, #100	@ 0x64
 8000d6a:	2280      	movs	r2, #128	@ 0x80
 8000d6c:	f002 ff56 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page7;
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	701a      	strb	r2, [r3, #0]
                break;
 8000d76:	e061      	b.n	8000e3c <st7565_write_buffer+0x6a8>
            }
            case Page7:
            {
                CMD(ST7565_CMD_SET_PAGE | pagemap[page]);
 8000d78:	4b32      	ldr	r3, [pc, #200]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 f85a 	bl	8002e38 <HAL_GPIO_WritePin>
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b30      	ldr	r3, [pc, #192]	@ (8000e4c <st7565_write_buffer+0x6b8>)
 8000d8c:	5c9b      	ldrb	r3, [r3, r2]
 8000d8e:	2250      	movs	r2, #80	@ 0x50
 8000d90:	4252      	negs	r2, r2
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f85e 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 f848 	bl	8002e38 <HAL_GPIO_WritePin>
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f855 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000dae:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	@ 0x80
 8000db4:	0018      	movs	r0, r3
 8000db6:	f002 f83f 	bl	8002e38 <HAL_GPIO_WritePin>
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f000 f84c 	bl	8000e58 <st7565_sendbyte>
                CMD(ST7565_CMD_RMW);
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f002 f836 	bl	8002e38 <HAL_GPIO_WritePin>
 8000dcc:	20e0      	movs	r0, #224	@ 0xe0
 8000dce:	f000 f843 	bl	8000e58 <st7565_sendbyte>
                HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 );
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <st7565_write_buffer+0x6b0>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	@ 0x80
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f002 f82d 	bl	8002e38 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit(&hspi1, (uint8_t *)0xff, 1, 100);
 8000dde:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000de0:	2364      	movs	r3, #100	@ 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	21ff      	movs	r1, #255	@ 0xff
 8000de6:	f002 ff19 	bl	8003c1c <HAL_SPI_Transmit>
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000dea:	238d      	movs	r3, #141	@ 0x8d
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e012      	b.n	8000e1a <st7565_write_buffer+0x686>
                {
                    DataToSend[i]=Data[(128 * page) + i];
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	01da      	lsls	r2, r3, #7
 8000dfa:	208d      	movs	r0, #141	@ 0x8d
 8000dfc:	183b      	adds	r3, r7, r0
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	18d2      	adds	r2, r2, r3
 8000e02:	183b      	adds	r3, r7, r0
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	4913      	ldr	r1, [pc, #76]	@ (8000e54 <st7565_write_buffer+0x6c0>)
 8000e08:	5c89      	ldrb	r1, [r1, r2]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	18ba      	adds	r2, r7, r2
 8000e0e:	54d1      	strb	r1, [r2, r3]
                for(uint8_t i = 0; i< 128; i++)    //update page
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	3201      	adds	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	238d      	movs	r3, #141	@ 0x8d
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	dae6      	bge.n	8000df4 <st7565_write_buffer+0x660>
                }
                HAL_SPI_Transmit(&hspi1, (uint8_t *)DataToSend, 128, 100);
 8000e26:	230c      	movs	r3, #12
 8000e28:	18f9      	adds	r1, r7, r3
 8000e2a:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <st7565_write_buffer+0x6bc>)
 8000e2c:	2364      	movs	r3, #100	@ 0x64
 8000e2e:	2280      	movs	r2, #128	@ 0x80
 8000e30:	f002 fef4 	bl	8003c1c <HAL_SPI_Transmit>
                page = Page0;
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <st7565_write_buffer+0x6b4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
                break;
 8000e3a:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b026      	add	sp, #152	@ 0x98
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	48000800 	.word	0x48000800
 8000e48:	2000048d 	.word	0x2000048d
 8000e4c:	2000040c 	.word	0x2000040c
 8000e50:	200008f8 	.word	0x200008f8
 8000e54:	20000490 	.word	0x20000490

08000e58 <st7565_sendbyte>:
}
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000e64:	1df9      	adds	r1, r7, #7
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <st7565_sendbyte+0x20>)
 8000e68:	2364      	movs	r3, #100	@ 0x64
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f002 fed6 	bl	8003c1c <HAL_SPI_Transmit>
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200008f8 	.word	0x200008f8

08000e7c <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	0059      	lsls	r1, r3, #1
 8000e84:	2390      	movs	r3, #144	@ 0x90
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	2201      	movs	r2, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 ffd4 	bl	8002e38 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000e90:	4b4e      	ldr	r3, [pc, #312]	@ (8000fcc <st7565_init+0x150>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 ffce 	bl	8002e38 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	0099      	lsls	r1, r3, #2
 8000ea0:	2390      	movs	r3, #144	@ 0x90
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 ffc6 	bl	8002e38 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000eac:	4b48      	ldr	r3, [pc, #288]	@ (8000fd0 <st7565_init+0x154>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 ffc0 	bl	8002e38 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000eb8:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <st7565_init+0x154>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 ffba 	bl	8002e38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	2390      	movs	r3, #144	@ 0x90
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 ffb2 	bl	8002e38 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000ed4:	23fa      	movs	r3, #250	@ 0xfa
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f89b 	bl	8002014 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000ede:	2380      	movs	r3, #128	@ 0x80
 8000ee0:	0099      	lsls	r1, r3, #2
 8000ee2:	2390      	movs	r3, #144	@ 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 ffa5 	bl	8002e38 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <st7565_init+0x150>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 ff9f 	bl	8002e38 <HAL_GPIO_WritePin>
 8000efa:	20a3      	movs	r0, #163	@ 0xa3
 8000efc:	f7ff ffac 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000f00:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <st7565_init+0x150>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 ff96 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f0c:	20a0      	movs	r0, #160	@ 0xa0
 8000f0e:	f7ff ffa3 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000f12:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <st7565_init+0x150>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 ff8d 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f1e:	20c0      	movs	r0, #192	@ 0xc0
 8000f20:	f7ff ff9a 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <st7565_init+0x150>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 ff84 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f30:	2040      	movs	r0, #64	@ 0x40
 8000f32:	f7ff ff91 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <st7565_init+0x150>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 ff7b 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f42:	202c      	movs	r0, #44	@ 0x2c
 8000f44:	f7ff ff88 	bl	8000e58 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000f48:	2032      	movs	r0, #50	@ 0x32
 8000f4a:	f001 f863 	bl	8002014 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <st7565_init+0x150>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 ff6f 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f5a:	202e      	movs	r0, #46	@ 0x2e
 8000f5c:	f7ff ff7c 	bl	8000e58 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000f60:	2032      	movs	r0, #50	@ 0x32
 8000f62:	f001 f857 	bl	8002014 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <st7565_init+0x150>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2180      	movs	r1, #128	@ 0x80
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 ff63 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f72:	202f      	movs	r0, #47	@ 0x2f
 8000f74:	f7ff ff70 	bl	8000e58 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f001 f84b 	bl	8002014 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <st7565_init+0x150>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 ff57 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f8a:	2026      	movs	r0, #38	@ 0x26
 8000f8c:	f7ff ff64 	bl	8000e58 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <st7565_init+0x150>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	2180      	movs	r1, #128	@ 0x80
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 ff4e 	bl	8002e38 <HAL_GPIO_WritePin>
 8000f9c:	20af      	movs	r0, #175	@ 0xaf
 8000f9e:	f7ff ff5b 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <st7565_init+0x150>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f001 ff45 	bl	8002e38 <HAL_GPIO_WritePin>
 8000fae:	20a4      	movs	r0, #164	@ 0xa4
 8000fb0:	f7ff ff52 	bl	8000e58 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f81d 	bl	8000ff4 <st7565_set_brightness>
 	st7565_clear_screen();
 8000fba:	f000 f83f 	bl	800103c <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <st7565_init+0x158>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f897 	bl	80010f4 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	0059      	lsls	r1, r3, #1
 8000fe0:	2390      	movs	r3, #144	@ 0x90
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 ff26 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <st7565_set_brightness+0x44>)
 8001002:	2200      	movs	r2, #0
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0018      	movs	r0, r3
 8001008:	f001 ff16 	bl	8002e38 <HAL_GPIO_WritePin>
 800100c:	2081      	movs	r0, #129	@ 0x81
 800100e:	f7ff ff23 	bl	8000e58 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <st7565_set_brightness+0x44>)
 8001014:	2200      	movs	r2, #0
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	0018      	movs	r0, r3
 800101a:	f001 ff0d 	bl	8002e38 <HAL_GPIO_WritePin>
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	223f      	movs	r2, #63	@ 0x3f
 8001024:	4013      	ands	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff15 	bl	8000e58 <st7565_sendbyte>
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	48000800 	.word	0x48000800

0800103c <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e049      	b.n	80010de <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <st7565_clear_screen+0xb4>)
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fef1 	bl	8002e38 <HAL_GPIO_WritePin>
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2250      	movs	r2, #80	@ 0x50
 800105c:	4252      	negs	r2, r2
 800105e:	4313      	orrs	r3, r2
 8001060:	b2db      	uxtb	r3, r3
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fef8 	bl	8000e58 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e02d      	b.n	80010cc <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <st7565_clear_screen+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	2180      	movs	r1, #128	@ 0x80
 8001076:	0018      	movs	r0, r3
 8001078:	f001 fede 	bl	8002e38 <HAL_GPIO_WritePin>
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	220f      	movs	r2, #15
 8001082:	4013      	ands	r3, r2
 8001084:	b2db      	uxtb	r3, r3
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fee6 	bl	8000e58 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <st7565_clear_screen+0xb4>)
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	0018      	movs	r0, r3
 8001094:	f001 fed0 	bl	8002e38 <HAL_GPIO_WritePin>
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	2210      	movs	r2, #16
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fed4 	bl	8000e58 <st7565_sendbyte>
			DATA(0x0);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <st7565_clear_screen+0xb4>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 febe 	bl	8002e38 <HAL_GPIO_WritePin>
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fecb 	bl	8000e58 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	3201      	adds	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	1dbb      	adds	r3, r7, #6
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b80      	cmp	r3, #128	@ 0x80
 80010d2:	d9cd      	bls.n	8001070 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	3201      	adds	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d9b1      	bls.n	800104a <st7565_clear_screen+0xe>
		}
	}
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	48000800 	.word	0x48000800

080010f4 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	00da      	lsls	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2100      	movs	r1, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f006 f97d 	bl	8007404 <memset>
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8001112:	b590      	push	{r4, r7, lr}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	000c      	movs	r4, r1
 800111c:	0010      	movs	r0, r2
 800111e:	0019      	movs	r1, r3
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	1c22      	adds	r2, r4, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	1c02      	adds	r2, r0, #0
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	1c7b      	adds	r3, r7, #1
 800112e:	1c0a      	adds	r2, r1, #0
 8001130:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8001132:	1cfb      	adds	r3, r7, #3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	db51      	blt.n	80011e0 <st7565_setpixel+0xce>
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b3f      	cmp	r3, #63	@ 0x3f
 8001142:	d84d      	bhi.n	80011e0 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 800114c:	1cfb      	adds	r3, r7, #3
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	1cbb      	adds	r3, r7, #2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	0003      	movs	r3, r0
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	001a      	movs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	189b      	adds	r3, r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b25a      	sxtb	r2, r3
 8001168:	1cbb      	adds	r3, r7, #2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	43db      	mvns	r3, r3
 800116e:	2107      	movs	r1, #7
 8001170:	400b      	ands	r3, r1
 8001172:	2101      	movs	r1, #1
 8001174:	4099      	lsls	r1, r3
 8001176:	000b      	movs	r3, r1
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b259      	sxtb	r1, r3
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	0003      	movs	r3, r0
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	18d3      	adds	r3, r2, r3
 8001188:	001a      	movs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	189b      	adds	r3, r3, r2
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e026      	b.n	80011e2 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8001194:	1cfb      	adds	r3, r7, #3
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	1cbb      	adds	r3, r7, #2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	0003      	movs	r3, r0
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	001a      	movs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	189b      	adds	r3, r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	1cba      	adds	r2, r7, #2
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	43d2      	mvns	r2, r2
 80011b6:	2107      	movs	r1, #7
 80011b8:	400a      	ands	r2, r1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	b252      	sxtb	r2, r2
 80011c2:	43d2      	mvns	r2, r2
 80011c4:	b252      	sxtb	r2, r2
 80011c6:	4013      	ands	r3, r2
 80011c8:	b259      	sxtb	r1, r3
 80011ca:	1cfb      	adds	r3, r7, #3
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	0003      	movs	r3, r0
 80011d0:	01db      	lsls	r3, r3, #7
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	001a      	movs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	189b      	adds	r3, r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e000      	b.n	80011e2 <st7565_setpixel+0xd0>
		return;
 80011e0:	46c0      	nop			@ (mov r8, r8)
}
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	0008      	movs	r0, r1
 80011f2:	0011      	movs	r1, r2
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	230b      	movs	r3, #11
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	230a      	movs	r3, #10
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	1c0a      	adds	r2, r1, #0
 8001204:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8001206:	e025      	b.n	8001254 <st7565_drawstring+0x6c>
		st7565_drawchar(buff, x, line, c[0]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781c      	ldrb	r4, [r3, #0]
 800120c:	260a      	movs	r6, #10
 800120e:	19bb      	adds	r3, r7, r6
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	250b      	movs	r5, #11
 8001214:	197b      	adds	r3, r7, r5
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	0023      	movs	r3, r4
 800121c:	f000 f824 	bl	8001268 <st7565_drawchar>
		c++;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3301      	adds	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8001226:	0029      	movs	r1, r5
 8001228:	187b      	adds	r3, r7, r1
 800122a:	187a      	adds	r2, r7, r1
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	3206      	adds	r2, #6
 8001230:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8001232:	187b      	adds	r3, r7, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b79      	cmp	r3, #121	@ 0x79
 8001238:	d907      	bls.n	800124a <st7565_drawstring+0x62>
			x = 0; // ran out of this line
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			line++;
 8001240:	19bb      	adds	r3, r7, r6
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	19bb      	adds	r3, r7, r6
 8001246:	3201      	adds	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 800124a:	230a      	movs	r3, #10
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b07      	cmp	r3, #7
 8001252:	d804      	bhi.n	800125e <st7565_drawstring+0x76>
	while (c[0] != 0) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1d5      	bne.n	8001208 <st7565_drawstring+0x20>
 800125c:	e000      	b.n	8001260 <st7565_drawstring+0x78>
			return; // ran out of space :(
 800125e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001260:	46bd      	mov	sp, r7
 8001262:	b005      	add	sp, #20
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001268 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	000c      	movs	r4, r1
 8001272:	0010      	movs	r0, r2
 8001274:	0019      	movs	r1, r3
 8001276:	1cfb      	adds	r3, r7, #3
 8001278:	1c22      	adds	r2, r4, #0
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	1cbb      	adds	r3, r7, #2
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	1c7b      	adds	r3, r7, #1
 8001284:	1c0a      	adds	r2, r1, #0
 8001286:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e020      	b.n	80012d4 <st7565_drawchar+0x6c>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8001292:	1c7b      	adds	r3, r7, #1
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	0013      	movs	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	189b      	adds	r3, r3, r2
 800129c:	001a      	movs	r2, r3
 800129e:	200f      	movs	r0, #15
 80012a0:	183b      	adds	r3, r7, r0
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	18d2      	adds	r2, r2, r3
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <st7565_drawchar+0x80>)
 80012a8:	18d2      	adds	r2, r2, r3
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	7819      	ldrb	r1, [r3, #0]
 80012ae:	1cbb      	adds	r3, r7, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	01db      	lsls	r3, r3, #7
 80012b4:	18cb      	adds	r3, r1, r3
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	185b      	adds	r3, r3, r1
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	701a      	strb	r2, [r3, #0]
		x++;
 80012c0:	1cfb      	adds	r3, r7, #3
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	1cfb      	adds	r3, r7, #3
 80012c6:	3201      	adds	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	3201      	adds	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d9d9      	bls.n	8001292 <st7565_drawchar+0x2a>
	}
}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b005      	add	sp, #20
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	08007508 	.word	0x08007508

080012ec <st7565_fillrect>:
	}
}

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		uint8_t color) {
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	000c      	movs	r4, r1
 80012f6:	0010      	movs	r0, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	1c22      	adds	r2, r4, #0
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	1c7b      	adds	r3, r7, #1
 8001308:	1c0a      	adds	r2, r1, #0
 800130a:	701a      	strb	r2, [r3, #0]
// stupidest version - just pixels - but fast with internal buffer!
	uint8_t i, j;
	for (i = x; i < x + w; i++) {
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	1cfa      	adds	r2, r7, #3
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e028      	b.n	800136a <st7565_fillrect+0x7e>
		for (j = y; j < y + h; j++) {
 8001318:	230e      	movs	r3, #14
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	1cba      	adds	r2, r7, #2
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e011      	b.n	8001348 <st7565_fillrect+0x5c>
			st7565_setpixel(buff, i, j, color);
 8001324:	2324      	movs	r3, #36	@ 0x24
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781c      	ldrb	r4, [r3, #0]
 800132a:	250e      	movs	r5, #14
 800132c:	197b      	adds	r3, r7, r5
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	7819      	ldrb	r1, [r3, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	0023      	movs	r3, r4
 800133a:	f7ff feea 	bl	8001112 <st7565_setpixel>
		for (j = y; j < y + h; j++) {
 800133e:	197b      	adds	r3, r7, r5
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	197b      	adds	r3, r7, r5
 8001344:	3201      	adds	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	230e      	movs	r3, #14
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	1cbb      	adds	r3, r7, #2
 8001350:	7819      	ldrb	r1, [r3, #0]
 8001352:	2320      	movs	r3, #32
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	18cb      	adds	r3, r1, r3
 800135a:	429a      	cmp	r2, r3
 800135c:	dbe2      	blt.n	8001324 <st7565_fillrect+0x38>
	for (i = x; i < x + w; i++) {
 800135e:	210f      	movs	r1, #15
 8001360:	187b      	adds	r3, r7, r1
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	187b      	adds	r3, r7, r1
 8001366:	3201      	adds	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	1c7b      	adds	r3, r7, #1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	18cb      	adds	r3, r1, r3
 800137a:	429a      	cmp	r2, r3
 800137c:	dbcc      	blt.n	8001318 <st7565_fillrect+0x2c>
		}
	}
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46c0      	nop			@ (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b004      	add	sp, #16
 8001386:	bdb0      	pop	{r4, r5, r7, pc}

08001388 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	801a      	strh	r2, [r3, #0]
        {2400, 200},
        {4000, 330}
    };

    //if (input <= pts[0].x) return pts[0].y;
    if (input >= pts[2].x) return pts[2].y;
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <interpolation+0xd4>)
 8001396:	2208      	movs	r2, #8
 8001398:	5e9b      	ldrsh	r3, [r3, r2]
 800139a:	1dba      	adds	r2, r7, #6
 800139c:	2100      	movs	r1, #0
 800139e:	5e52      	ldrsh	r2, [r2, r1]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	db03      	blt.n	80013ac <interpolation+0x24>
 80013a4:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <interpolation+0xd4>)
 80013a6:	220a      	movs	r2, #10
 80013a8:	5e9b      	ldrsh	r3, [r3, r2]
 80013aa:	e052      	b.n	8001452 <interpolation+0xca>
    if (input <= pts[1].x) {
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <interpolation+0xd4>)
 80013ae:	2204      	movs	r2, #4
 80013b0:	5e9b      	ldrsh	r3, [r3, r2]
 80013b2:	1dba      	adds	r2, r7, #6
 80013b4:	2100      	movs	r1, #0
 80013b6:	5e52      	ldrsh	r2, [r2, r1]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dc25      	bgt.n	8001408 <interpolation+0x80>
        return pts[0].y +
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <interpolation+0xd4>)
 80013be:	2202      	movs	r2, #2
 80013c0:	5e9b      	ldrsh	r3, [r3, r2]
 80013c2:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 80013c4:	4b25      	ldr	r3, [pc, #148]	@ (800145c <interpolation+0xd4>)
 80013c6:	2206      	movs	r2, #6
 80013c8:	5e9b      	ldrsh	r3, [r3, r2]
 80013ca:	001a      	movs	r2, r3
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <interpolation+0xd4>)
 80013ce:	2102      	movs	r1, #2
 80013d0:	5e5b      	ldrsh	r3, [r3, r1]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	1dba      	adds	r2, r7, #6
 80013d6:	2100      	movs	r1, #0
 80013d8:	5e52      	ldrsh	r2, [r2, r1]
 80013da:	4920      	ldr	r1, [pc, #128]	@ (800145c <interpolation+0xd4>)
 80013dc:	2000      	movs	r0, #0
 80013de:	5e09      	ldrsh	r1, [r1, r0]
 80013e0:	1a52      	subs	r2, r2, r1
 80013e2:	435a      	muls	r2, r3
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <interpolation+0xd4>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	5e5b      	ldrsh	r3, [r3, r1]
 80013ea:	0019      	movs	r1, r3
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <interpolation+0xd4>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	5e1b      	ldrsh	r3, [r3, r0]
 80013f2:	1acb      	subs	r3, r1, r3
 80013f4:	0019      	movs	r1, r3
 80013f6:	0010      	movs	r0, r2
 80013f8:	f7fe ff10 	bl	800021c <__divsi3>
 80013fc:	0003      	movs	r3, r0
        return pts[0].y +
 80013fe:	b29b      	uxth	r3, r3
 8001400:	18e3      	adds	r3, r4, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21b      	sxth	r3, r3
 8001406:	e024      	b.n	8001452 <interpolation+0xca>
    } else {

        return pts[1].y +
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <interpolation+0xd4>)
 800140a:	2206      	movs	r2, #6
 800140c:	5e9b      	ldrsh	r3, [r3, r2]
 800140e:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <interpolation+0xd4>)
 8001412:	220a      	movs	r2, #10
 8001414:	5e9b      	ldrsh	r3, [r3, r2]
 8001416:	001a      	movs	r2, r3
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <interpolation+0xd4>)
 800141a:	2106      	movs	r1, #6
 800141c:	5e5b      	ldrsh	r3, [r3, r1]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	1dba      	adds	r2, r7, #6
 8001422:	2100      	movs	r1, #0
 8001424:	5e52      	ldrsh	r2, [r2, r1]
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <interpolation+0xd4>)
 8001428:	2004      	movs	r0, #4
 800142a:	5e09      	ldrsh	r1, [r1, r0]
 800142c:	1a52      	subs	r2, r2, r1
 800142e:	435a      	muls	r2, r3
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <interpolation+0xd4>)
 8001432:	2108      	movs	r1, #8
 8001434:	5e5b      	ldrsh	r3, [r3, r1]
 8001436:	0019      	movs	r1, r3
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <interpolation+0xd4>)
 800143a:	2004      	movs	r0, #4
 800143c:	5e1b      	ldrsh	r3, [r3, r0]
 800143e:	1acb      	subs	r3, r1, r3
 8001440:	0019      	movs	r1, r3
 8001442:	0010      	movs	r0, r2
 8001444:	f7fe feea 	bl	800021c <__divsi3>
 8001448:	0003      	movs	r3, r0
        return pts[1].y +
 800144a:	b29b      	uxth	r3, r3
 800144c:	18e3      	adds	r3, r4, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	b21b      	sxth	r3, r3
    }
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b003      	add	sp, #12
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	08007a90 	.word	0x08007a90

08001460 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[10];

static uint16_t filterButton(uint16_t voltIn){
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	1dbb      	adds	r3, r7, #6
 800146a:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 800146c:	230e      	movs	r3, #14
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	1dba      	adds	r2, r7, #6
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 8001476:	230d      	movs	r3, #13
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e01c      	b.n	80014ba <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 8001480:	200d      	movs	r0, #13
 8001482:	183b      	adds	r3, r7, r0
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <filterButton+0x8c>)
 800148a:	0052      	lsls	r2, r2, #1
 800148c:	5ad1      	ldrh	r1, [r2, r3]
 800148e:	220e      	movs	r2, #14
 8001490:	18bb      	adds	r3, r7, r2
 8001492:	18ba      	adds	r2, r7, r2
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	188a      	adds	r2, r1, r2
 8001498:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 800149a:	183b      	adds	r3, r7, r0
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	1c59      	adds	r1, r3, #1
 80014a0:	183b      	adds	r3, r7, r0
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <filterButton+0x8c>)
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	5ac9      	ldrh	r1, [r1, r3]
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <filterButton+0x8c>)
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 80014b0:	183b      	adds	r3, r7, r0
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	183b      	adds	r3, r7, r0
 80014b6:	3201      	adds	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	230d      	movs	r3, #13
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d9dd      	bls.n	8001480 <filterButton+0x20>
	}
	MAVectorButton[9]=voltIn;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <filterButton+0x8c>)
 80014c6:	1dba      	adds	r2, r7, #6
 80014c8:	8812      	ldrh	r2, [r2, #0]
 80014ca:	825a      	strh	r2, [r3, #18]
	media/=10;
 80014cc:	250e      	movs	r5, #14
 80014ce:	197c      	adds	r4, r7, r5
 80014d0:	197b      	adds	r3, r7, r5
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	210a      	movs	r1, #10
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7fe fe16 	bl	8000108 <__udivsi3>
 80014dc:	0003      	movs	r3, r0
 80014de:	8023      	strh	r3, [r4, #0]
	return media;
 80014e0:	197b      	adds	r3, r7, r5
 80014e2:	881b      	ldrh	r3, [r3, #0]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	20000890 	.word	0x20000890

080014f0 <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 80014fc:	230e      	movs	r3, #14
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	1dba      	adds	r2, r7, #6
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 8001506:	230d      	movs	r3, #13
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e01c      	b.n	800154a <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 8001510:	200d      	movs	r0, #13
 8001512:	183b      	adds	r3, r7, r0
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <filterVolt+0x8c>)
 800151a:	0052      	lsls	r2, r2, #1
 800151c:	5ad1      	ldrh	r1, [r2, r3]
 800151e:	220e      	movs	r2, #14
 8001520:	18bb      	adds	r3, r7, r2
 8001522:	18ba      	adds	r2, r7, r2
 8001524:	8812      	ldrh	r2, [r2, #0]
 8001526:	188a      	adds	r2, r1, r2
 8001528:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 800152a:	183b      	adds	r3, r7, r0
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	1c59      	adds	r1, r3, #1
 8001530:	183b      	adds	r3, r7, r0
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <filterVolt+0x8c>)
 8001536:	0049      	lsls	r1, r1, #1
 8001538:	5ac9      	ldrh	r1, [r1, r3]
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <filterVolt+0x8c>)
 800153c:	0052      	lsls	r2, r2, #1
 800153e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001540:	183b      	adds	r3, r7, r0
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	183b      	adds	r3, r7, r0
 8001546:	3201      	adds	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	230d      	movs	r3, #13
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d9dd      	bls.n	8001510 <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <filterVolt+0x8c>)
 8001556:	1dba      	adds	r2, r7, #6
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	825a      	strh	r2, [r3, #18]
	media/=10;
 800155c:	250e      	movs	r5, #14
 800155e:	197c      	adds	r4, r7, r5
 8001560:	197b      	adds	r3, r7, r5
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	210a      	movs	r1, #10
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe fdce 	bl	8000108 <__udivsi3>
 800156c:	0003      	movs	r3, r0
 800156e:	8023      	strh	r3, [r4, #0]
	return media;
 8001570:	197b      	adds	r3, r7, r5
 8001572:	881b      	ldrh	r3, [r3, #0]
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	b004      	add	sp, #16
 800157a:	bdb0      	pop	{r4, r5, r7, pc}
 800157c:	200008a4 	.word	0x200008a4

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f000 fd16 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001588:	f000 f83c 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158c:	f000 f978 	bl	8001880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001590:	f000 f946 	bl	8001820 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001594:	f000 f89e 	bl	80016d4 <MX_ADC_Init>
  MX_SPI1_Init();
 8001598:	f000 f904 	bl	80017a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800159c:	f003 fcd6 	bl	8004f4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readAdcVolt */
  readAdcVoltHandle = osThreadNew(readAdcVoltFunction, NULL, &readAdcVolt_attributes);
 80015a0:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <main+0x60>)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <main+0x64>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f003 fd2a 	bl	8005000 <osThreadNew>
 80015ac:	0002      	movs	r2, r0
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <main+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]

  /* creation of displayVoltRead */
  displayVoltReadHandle = osThreadNew(displayVoltReadFunction, NULL, &displayVoltRead_attributes);
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <main+0x6c>)
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <main+0x70>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 fd21 	bl	8005000 <osThreadNew>
 80015be:	0002      	movs	r2, r0
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <main+0x74>)
 80015c2:	601a      	str	r2, [r3, #0]

  /* creation of readButton */
  readButtonHandle = osThreadNew(readButtonFunction, NULL, &readButton_attributes);
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <main+0x78>)
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <main+0x7c>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	0018      	movs	r0, r3
 80015cc:	f003 fd18 	bl	8005000 <osThreadNew>
 80015d0:	0002      	movs	r2, r0
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <main+0x80>)
 80015d4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015d6:	f003 fce5 	bl	8004fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	e7fd      	b.n	80015da <main+0x5a>
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	08007a24 	.word	0x08007a24
 80015e4:	080019dd 	.word	0x080019dd
 80015e8:	200009e4 	.word	0x200009e4
 80015ec:	08007a48 	.word	0x08007a48
 80015f0:	08001a55 	.word	0x08001a55
 80015f4:	200009e8 	.word	0x200009e8
 80015f8:	08007a6c 	.word	0x08007a6c
 80015fc:	08001e85 	.word	0x08001e85
 8001600:	200009ec 	.word	0x200009ec

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b099      	sub	sp, #100	@ 0x64
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	242c      	movs	r4, #44	@ 0x2c
 800160c:	193b      	adds	r3, r7, r4
 800160e:	0018      	movs	r0, r3
 8001610:	2334      	movs	r3, #52	@ 0x34
 8001612:	001a      	movs	r2, r3
 8001614:	2100      	movs	r1, #0
 8001616:	f005 fef5 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161a:	231c      	movs	r3, #28
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	0018      	movs	r0, r3
 8001620:	2310      	movs	r3, #16
 8001622:	001a      	movs	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f005 feed 	bl	8007404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162a:	003b      	movs	r3, r7
 800162c:	0018      	movs	r0, r3
 800162e:	231c      	movs	r3, #28
 8001630:	001a      	movs	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	f005 fee6 	bl	8007404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2212      	movs	r2, #18
 800163e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2201      	movs	r2, #1
 8001644:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2201      	movs	r2, #1
 800164a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2210      	movs	r2, #16
 8001650:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2210      	movs	r2, #16
 8001656:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2202      	movs	r2, #2
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	0212      	lsls	r2, r2, #8
 8001664:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	22a0      	movs	r2, #160	@ 0xa0
 800166a:	0392      	lsls	r2, r2, #14
 800166c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2201      	movs	r2, #1
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001674:	187b      	adds	r3, r7, r1
 8001676:	0018      	movs	r0, r3
 8001678:	f001 fbfc 	bl	8002e74 <HAL_RCC_OscConfig>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001680:	f000 fc92 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	211c      	movs	r1, #28
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2202      	movs	r2, #2
 8001690:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2101      	movs	r1, #1
 80016a2:	0018      	movs	r0, r3
 80016a4:	f001 ff6c 	bl	8003580 <HAL_RCC_ClockConfig>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80016ac:	f000 fc7c 	bl	8001fa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b0:	003b      	movs	r3, r7
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b6:	003b      	movs	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	003b      	movs	r3, r7
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 f8f4 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016c8:	f000 fc6e 	bl	8001fa8 <Error_Handler>
  }
}
 80016cc:	46c0      	nop			@ (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b019      	add	sp, #100	@ 0x64
 80016d2:	bd90      	pop	{r4, r7, pc}

080016d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	0018      	movs	r0, r3
 80016de:	230c      	movs	r3, #12
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f005 fe8e 	bl	8007404 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <MX_ADC_Init+0xc8>)
 80016ea:	4a2d      	ldr	r2, [pc, #180]	@ (80017a0 <MX_ADC_Init+0xcc>)
 80016ec:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <MX_ADC_Init+0xc8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <MX_ADC_Init+0xc8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <MX_ADC_Init+0xc8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <MX_ADC_Init+0xc8>)
 8001702:	2201      	movs	r2, #1
 8001704:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <MX_ADC_Init+0xc8>)
 8001708:	2204      	movs	r2, #4
 800170a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800170c:	4b23      	ldr	r3, [pc, #140]	@ (800179c <MX_ADC_Init+0xc8>)
 800170e:	2200      	movs	r2, #0
 8001710:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_ADC_Init+0xc8>)
 8001714:	2200      	movs	r2, #0
 8001716:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_ADC_Init+0xc8>)
 800171a:	2200      	movs	r2, #0
 800171c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_ADC_Init+0xc8>)
 8001720:	2200      	movs	r2, #0
 8001722:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_ADC_Init+0xc8>)
 8001726:	22c2      	movs	r2, #194	@ 0xc2
 8001728:	32ff      	adds	r2, #255	@ 0xff
 800172a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_ADC_Init+0xc8>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_ADC_Init+0xc8>)
 8001734:	2224      	movs	r2, #36	@ 0x24
 8001736:	2100      	movs	r1, #0
 8001738:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_ADC_Init+0xc8>)
 800173c:	2201      	movs	r2, #1
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_ADC_Init+0xc8>)
 8001742:	0018      	movs	r0, r3
 8001744:	f000 fc8a 	bl	800205c <HAL_ADC_Init>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 fc2c 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	0152      	lsls	r2, r2, #5
 800175c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;;
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2202      	movs	r2, #2
 8001762:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <MX_ADC_Init+0xc8>)
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 feee 	bl	800254c <HAL_ADC_ConfigChannel>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001774:	f000 fc18 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800177e:	1d3a      	adds	r2, r7, #4
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_ADC_Init+0xc8>)
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fee1 	bl	800254c <HAL_ADC_ConfigChannel>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800178e:	f000 fc0b 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	200008b8 	.word	0x200008b8
 80017a0:	40012400 	.word	0x40012400

080017a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	@ (800181c <MX_SPI1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017b0:	2282      	movs	r2, #130	@ 0x82
 80017b2:	0052      	lsls	r2, r2, #1
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017be:	22e0      	movs	r2, #224	@ 0xe0
 80017c0:	00d2      	lsls	r2, r2, #3
 80017c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017da:	2218      	movs	r2, #24
 80017dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_SPI1_Init+0x74>)
 80017fe:	2208      	movs	r2, #8
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <MX_SPI1_Init+0x74>)
 8001804:	0018      	movs	r0, r3
 8001806:	f002 f951 	bl	8003aac <HAL_SPI_Init>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 fbcb 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200008f8 	.word	0x200008f8
 800181c:	40013000 	.word	0x40013000

08001820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	@ (800187c <MX_USART2_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 800182c:	22e1      	movs	r2, #225	@ 0xe1
 800182e:	0252      	lsls	r2, r2, #9
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <MX_USART2_UART_Init+0x58>)
 8001864:	0018      	movs	r0, r3
 8001866:	f002 ff05 	bl	8004674 <HAL_UART_Init>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f000 fb9b 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000095c 	.word	0x2000095c
 800187c:	40004400 	.word	0x40004400

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	2414      	movs	r4, #20
 8001888:	193b      	adds	r3, r7, r4
 800188a:	0018      	movs	r0, r3
 800188c:	2314      	movs	r3, #20
 800188e:	001a      	movs	r2, r3
 8001890:	2100      	movs	r1, #0
 8001892:	f005 fdb7 	bl	8007404 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <MX_GPIO_Init+0x150>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <MX_GPIO_Init+0x150>)
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0309      	lsls	r1, r1, #12
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	031b      	lsls	r3, r3, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	03c9      	lsls	r1, r1, #15
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	03db      	lsls	r3, r3, #15
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	0289      	lsls	r1, r1, #10
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	02c9      	lsls	r1, r1, #11
 80018f4:	430a      	orrs	r2, r1
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	02db      	lsls	r3, r3, #11
 8001900:	4013      	ands	r3, r2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <MX_GPIO_Init+0x154>)
 8001908:	2200      	movs	r2, #0
 800190a:	2180      	movs	r1, #128	@ 0x80
 800190c:	0018      	movs	r0, r3
 800190e:	f001 fa93 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8001912:	23c0      	movs	r3, #192	@ 0xc0
 8001914:	0099      	lsls	r1, r3, #2
 8001916:	2390      	movs	r3, #144	@ 0x90
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	2200      	movs	r2, #0
 800191c:	0018      	movs	r0, r3
 800191e:	f001 fa8b 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <MX_GPIO_Init+0x158>)
 8001924:	2200      	movs	r2, #0
 8001926:	2140      	movs	r1, #64	@ 0x40
 8001928:	0018      	movs	r0, r3
 800192a:	f001 fa85 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800192e:	193b      	adds	r3, r7, r4
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	0192      	lsls	r2, r2, #6
 8001934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001936:	193b      	adds	r3, r7, r4
 8001938:	2284      	movs	r2, #132	@ 0x84
 800193a:	0392      	lsls	r2, r2, #14
 800193c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	193b      	adds	r3, r7, r4
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001944:	193b      	adds	r3, r7, r4
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <MX_GPIO_Init+0x154>)
 8001948:	0019      	movs	r1, r3
 800194a:	0010      	movs	r0, r2
 800194c:	f001 f8fc 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8001950:	193b      	adds	r3, r7, r4
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	193b      	adds	r3, r7, r4
 8001958:	2201      	movs	r2, #1
 800195a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	193b      	adds	r3, r7, r4
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	193b      	adds	r3, r7, r4
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8001968:	193b      	adds	r3, r7, r4
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <MX_GPIO_Init+0x154>)
 800196c:	0019      	movs	r1, r3
 800196e:	0010      	movs	r0, r2
 8001970:	f001 f8ea 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8001974:	0021      	movs	r1, r4
 8001976:	187b      	adds	r3, r7, r1
 8001978:	22c0      	movs	r2, #192	@ 0xc0
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	000c      	movs	r4, r1
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2201      	movs	r2, #1
 8001984:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	193b      	adds	r3, r7, r4
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	193a      	adds	r2, r7, r4
 8001994:	2390      	movs	r3, #144	@ 0x90
 8001996:	05db      	lsls	r3, r3, #23
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f001 f8d4 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 80019a0:	0021      	movs	r1, r4
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2240      	movs	r2, #64	@ 0x40
 80019a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2201      	movs	r2, #1
 80019ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <MX_GPIO_Init+0x158>)
 80019be:	0019      	movs	r1, r3
 80019c0:	0010      	movs	r0, r2
 80019c2:	f001 f8c1 	bl	8002b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b00b      	add	sp, #44	@ 0x2c
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000400 	.word	0x48000400

080019dc <readAdcVoltFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void *argument)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <readAdcVoltFunction+0x6c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
	      HAL_ADC_Start(&hadc);
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <readAdcVoltFunction+0x6c>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 fc74 	bl	80022dc <HAL_ADC_Start>
	      if(HAL_ADC_PollForConversion(&hadc, 30)==HAL_OK)
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <readAdcVoltFunction+0x6c>)
 80019f6:	211e      	movs	r1, #30
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 fd03 	bl	8002404 <HAL_ADC_PollForConversion>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d108      	bne.n	8001a14 <readAdcVoltFunction+0x38>
	      voltReadRaw = HAL_ADC_GetValue(&hadc);
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <readAdcVoltFunction+0x6c>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fd95 	bl	8002534 <HAL_ADC_GetValue>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <readAdcVoltFunction+0x70>)
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	e002      	b.n	8001a1a <readAdcVoltFunction+0x3e>
	      else voltReadRaw=0;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <readAdcVoltFunction+0x70>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]

	      HAL_ADC_Stop(&hadc);
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <readAdcVoltFunction+0x6c>)
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fcb1 	bl	8002384 <HAL_ADC_Stop>

	      voltRead = filterVolt(interpolation(voltReadRaw));
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <readAdcVoltFunction+0x70>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff fcad 	bl	8001388 <interpolation>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fd5c 	bl	80014f0 <filterVolt>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <readAdcVoltFunction+0x74>)
 8001a3e:	801a      	strh	r2, [r3, #0]
    osDelay(10);
 8001a40:	200a      	movs	r0, #10
 8001a42:	f003 fb85 	bl	8005150 <osDelay>
	      hadc.Instance->CHSELR = 1<<ADC_CHANNEL_1;
 8001a46:	e7cd      	b.n	80019e4 <readAdcVoltFunction+0x8>
 8001a48:	200008b8 	.word	0x200008b8
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	20000484 	.word	0x20000484

08001a54 <displayVoltReadFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void *argument)
{
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b0b1      	sub	sp, #196	@ 0xc4
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayVoltReadFunction */
  /* Infinite loop */
  st7565_init();
 8001a5c:	f7ff fa0e 	bl	8000e7c <st7565_init>
  			  st7565_backlight_enable();
 8001a60:	f7ff faba 	bl	8000fd8 <st7565_backlight_enable>
  			  st7565_clear_screen();
 8001a64:	f7ff faea 	bl	800103c <st7565_clear_screen>
  			  //st7565_fade_out(64);
  			  st7565_clear_buffer(buffer);
 8001a68:	4bb0      	ldr	r3, [pc, #704]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fb42 	bl	80010f4 <st7565_clear_buffer>
  			  //Trimitem comanda sa desenam

  for(;;)
  {
	  //st7565_fillrect(buffer,10,10,10,10,1);
	  if(displayMode==0){
 8001a70:	4baf      	ldr	r3, [pc, #700]	@ (8001d30 <displayVoltReadFunction+0x2dc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d15e      	bne.n	8001b36 <displayVoltReadFunction+0xe2>
	  st7565_clear_buffer(buffer);
 8001a78:	4bac      	ldr	r3, [pc, #688]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fb3a 	bl	80010f4 <st7565_clear_buffer>
	  st7565_drawstring(buffer,0,0,"Volt:");
 8001a80:	4bac      	ldr	r3, [pc, #688]	@ (8001d34 <displayVoltReadFunction+0x2e0>)
 8001a82:	48aa      	ldr	r0, [pc, #680]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	f7ff fbae 	bl	80011e8 <st7565_drawstring>
	    			char volt[100];
	    			itoa(voltRead,volt,10);
 8001a8c:	4baa      	ldr	r3, [pc, #680]	@ (8001d38 <displayVoltReadFunction+0x2e4>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	2408      	movs	r4, #8
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	220a      	movs	r2, #10
 8001a98:	0019      	movs	r1, r3
 8001a9a:	f005 fc7b 	bl	8007394 <itoa>
	    			if(voltRead<10){
 8001a9e:	4ba6      	ldr	r3, [pc, #664]	@ (8001d38 <displayVoltReadFunction+0x2e4>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d811      	bhi.n	8001aca <displayVoltReadFunction+0x76>
	    				volt[4]='\0';
 8001aa6:	0021      	movs	r1, r4
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[0];
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	70da      	strb	r2, [r3, #3]
	    				volt[2]='0';
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2230      	movs	r2, #48	@ 0x30
 8001aba:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	222e      	movs	r2, #46	@ 0x2e
 8001ac0:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2230      	movs	r2, #48	@ 0x30
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e029      	b.n	8001b1e <displayVoltReadFunction+0xca>
	    			}
	    			else if(voltRead>=10&&voltRead<100){
 8001aca:	4b9b      	ldr	r3, [pc, #620]	@ (8001d38 <displayVoltReadFunction+0x2e4>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d916      	bls.n	8001b00 <displayVoltReadFunction+0xac>
 8001ad2:	4b99      	ldr	r3, [pc, #612]	@ (8001d38 <displayVoltReadFunction+0x2e4>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2b63      	cmp	r3, #99	@ 0x63
 8001ad8:	d812      	bhi.n	8001b00 <displayVoltReadFunction+0xac>
	    				volt[4]='\0';
 8001ada:	2108      	movs	r1, #8
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[1];
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	785a      	ldrb	r2, [r3, #1]
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[0];
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	222e      	movs	r2, #46	@ 0x2e
 8001af6:	705a      	strb	r2, [r3, #1]
	    				volt[0]='0';
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2230      	movs	r2, #48	@ 0x30
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e00e      	b.n	8001b1e <displayVoltReadFunction+0xca>
	    			}
	    			else{
	    				volt[4]='\0';
 8001b00:	2108      	movs	r1, #8
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	711a      	strb	r2, [r3, #4]
	    				volt[3]=volt[2];
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	789a      	ldrb	r2, [r3, #2]
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	70da      	strb	r2, [r3, #3]
	    				volt[2]=volt[1];
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	785a      	ldrb	r2, [r3, #1]
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	709a      	strb	r2, [r3, #2]
	    				volt[1]='.';
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	222e      	movs	r2, #46	@ 0x2e
 8001b1c:	705a      	strb	r2, [r3, #1]
	    				//volt[0]=volt[0];
	    			}
	    			st7565_drawstring(buffer,0,1,volt);
 8001b1e:	2308      	movs	r3, #8
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	4882      	ldr	r0, [pc, #520]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	2100      	movs	r1, #0
 8001b28:	f7ff fb5e 	bl	80011e8 <st7565_drawstring>
	  st7565_write_buffer(buffer);}
 8001b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7fe fe30 	bl	8000794 <st7565_write_buffer>
 8001b34:	e196      	b.n	8001e64 <displayVoltReadFunction+0x410>
	  else if(displayMode==1){
 8001b36:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <displayVoltReadFunction+0x2dc>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d000      	beq.n	8001b40 <displayVoltReadFunction+0xec>
 8001b3e:	e191      	b.n	8001e64 <displayVoltReadFunction+0x410>
      st7565_clear_buffer(buffer);
 8001b40:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7ff fad6 	bl	80010f4 <st7565_clear_buffer>
      st7565_drawstring(buffer,30,2,"Volt Range");
 8001b48:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <displayVoltReadFunction+0x2e8>)
 8001b4a:	4878      	ldr	r0, [pc, #480]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	211e      	movs	r1, #30
 8001b50:	f7ff fb4a 	bl	80011e8 <st7565_drawstring>
      int bar_x0 = 5;
 8001b54:	2305      	movs	r3, #5
 8001b56:	22a4      	movs	r2, #164	@ 0xa4
 8001b58:	18b9      	adds	r1, r7, r2
 8001b5a:	600b      	str	r3, [r1, #0]
      int bar_x1 = 121;
 8001b5c:	2379      	movs	r3, #121	@ 0x79
 8001b5e:	20a0      	movs	r0, #160	@ 0xa0
 8001b60:	1839      	adds	r1, r7, r0
 8001b62:	600b      	str	r3, [r1, #0]
      int bar_y0 = 30;
 8001b64:	231e      	movs	r3, #30
 8001b66:	249c      	movs	r4, #156	@ 0x9c
 8001b68:	1939      	adds	r1, r7, r4
 8001b6a:	600b      	str	r3, [r1, #0]
      int bar_y1 = 37;
 8001b6c:	2325      	movs	r3, #37	@ 0x25
 8001b6e:	2698      	movs	r6, #152	@ 0x98
 8001b70:	19b9      	adds	r1, r7, r6
 8001b72:	600b      	str	r3, [r1, #0]
      int squares = 10;
 8001b74:	230a      	movs	r3, #10
 8001b76:	2194      	movs	r1, #148	@ 0x94
 8001b78:	187d      	adds	r5, r7, r1
 8001b7a:	602b      	str	r3, [r5, #0]
      int inner_x0 = bar_x0 + 1;
 8001b7c:	18bb      	adds	r3, r7, r2
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	2590      	movs	r5, #144	@ 0x90
 8001b84:	197a      	adds	r2, r7, r5
 8001b86:	6013      	str	r3, [r2, #0]
      int inner_x1 = bar_x1 - 1;
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	228c      	movs	r2, #140	@ 0x8c
 8001b90:	18b8      	adds	r0, r7, r2
 8001b92:	6003      	str	r3, [r0, #0]
      int inner_y0 = bar_y0 + 1;
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	2088      	movs	r0, #136	@ 0x88
 8001b9c:	1838      	adds	r0, r7, r0
 8001b9e:	6003      	str	r3, [r0, #0]
      int inner_y1 = bar_y1 - 1;
 8001ba0:	19bb      	adds	r3, r7, r6
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	2084      	movs	r0, #132	@ 0x84
 8001ba8:	1838      	adds	r0, r7, r0
 8001baa:	6003      	str	r3, [r0, #0]
      int inner_width = inner_x1 - inner_x0 + 1;
 8001bac:	18bb      	adds	r3, r7, r2
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2680      	movs	r6, #128	@ 0x80
 8001bba:	19ba      	adds	r2, r7, r6
 8001bbc:	6013      	str	r3, [r2, #0]
      int square_width = inner_width / squares;
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	19bb      	adds	r3, r7, r6
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f7fe fb28 	bl	800021c <__divsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      int remainder = inner_width - square_width * squares;
 8001bd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bd2:	0021      	movs	r1, r4
 8001bd4:	187a      	adds	r2, r7, r1
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4353      	muls	r3, r2
 8001bda:	19ba      	adds	r2, r7, r6
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	67bb      	str	r3, [r7, #120]	@ 0x78
      int volt_step = 330 / squares;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	23a5      	movs	r3, #165	@ 0xa5
 8001be8:	0058      	lsls	r0, r3, #1
 8001bea:	f7fe fb17 	bl	800021c <__divsi3>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	677b      	str	r3, [r7, #116]	@ 0x74
      int x = inner_x0;
 8001bf2:	197b      	adds	r3, r7, r5
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	22b4      	movs	r2, #180	@ 0xb4
 8001bf8:	18ba      	adds	r2, r7, r2
 8001bfa:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	22b0      	movs	r2, #176	@ 0xb0
 8001c00:	18ba      	adds	r2, r7, r2
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e045      	b.n	8001c92 <displayVoltReadFunction+0x23e>
          int w = square_width + (i < remainder ? 1 : 0);
 8001c06:	2301      	movs	r3, #1
 8001c08:	1c19      	adds	r1, r3, #0
 8001c0a:	23b0      	movs	r3, #176	@ 0xb0
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c12:	429a      	cmp	r2, r3
 8001c14:	db01      	blt.n	8001c1a <displayVoltReadFunction+0x1c6>
 8001c16:	2300      	movs	r3, #0
 8001c18:	1c19      	adds	r1, r3, #0
 8001c1a:	b2cb      	uxtb	r3, r1
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c20:	189b      	adds	r3, r3, r2
 8001c22:	673b      	str	r3, [r7, #112]	@ 0x70
          int threshold = (i + 1) * volt_step;
 8001c24:	23b0      	movs	r3, #176	@ 0xb0
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c2e:	4353      	muls	r3, r2
 8001c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if(voltRead >= threshold) {
 8001c32:	4b41      	ldr	r3, [pc, #260]	@ (8001d38 <displayVoltReadFunction+0x2e4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	001a      	movs	r2, r3
 8001c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	dc1c      	bgt.n	8001c78 <displayVoltReadFunction+0x224>
              st7565_fillrect(buffer, x, inner_y0, w, inner_y1 - inner_y0 + 1, 1);
 8001c3e:	23b4      	movs	r3, #180	@ 0xb4
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	2088      	movs	r0, #136	@ 0x88
 8001c48:	183b      	adds	r3, r7, r0
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b2dc      	uxtb	r4, r3
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c50:	b2dd      	uxtb	r5, r3
 8001c52:	2384      	movs	r3, #132	@ 0x84
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4830      	ldr	r0, [pc, #192]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	9201      	str	r2, [sp, #4]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	002b      	movs	r3, r5
 8001c72:	0022      	movs	r2, r4
 8001c74:	f7ff fb3a 	bl	80012ec <st7565_fillrect>
          }
          x += w;
 8001c78:	21b4      	movs	r1, #180	@ 0xb4
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	187a      	adds	r2, r7, r1
 8001c84:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < squares; i++) {
 8001c86:	22b0      	movs	r2, #176	@ 0xb0
 8001c88:	18bb      	adds	r3, r7, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	18ba      	adds	r2, r7, r2
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	23b0      	movs	r3, #176	@ 0xb0
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2394      	movs	r3, #148	@ 0x94
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbb1      	blt.n	8001c06 <displayVoltReadFunction+0x1b2>
      }
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001ca2:	23a4      	movs	r3, #164	@ 0xa4
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	22ac      	movs	r2, #172	@ 0xac
 8001cac:	18ba      	adds	r2, r7, r2
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e02c      	b.n	8001d0c <displayVoltReadFunction+0x2b8>
          if(px != bar_x0 + 1 && px != bar_x1 - 1) {
 8001cb2:	23a4      	movs	r3, #164	@ 0xa4
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	24ac      	movs	r4, #172	@ 0xac
 8001cbc:	193a      	adds	r2, r7, r4
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d01d      	beq.n	8001d00 <displayVoltReadFunction+0x2ac>
 8001cc4:	23a0      	movs	r3, #160	@ 0xa0
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	193a      	adds	r2, r7, r4
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d015      	beq.n	8001d00 <displayVoltReadFunction+0x2ac>
              st7565_setpixel(buffer, px, bar_y0, 1);
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2d9      	uxtb	r1, r3
 8001cda:	239c      	movs	r3, #156	@ 0x9c
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4812      	ldr	r0, [pc, #72]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f7ff fa14 	bl	8001112 <st7565_setpixel>
              st7565_setpixel(buffer, px, bar_y1, 1);
 8001cea:	193b      	adds	r3, r7, r4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b2d9      	uxtb	r1, r3
 8001cf0:	2398      	movs	r3, #152	@ 0x98
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <displayVoltReadFunction+0x2d8>)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f7ff fa09 	bl	8001112 <st7565_setpixel>
      for(int px = bar_x0 + 1; px < bar_x1; px++) {
 8001d00:	22ac      	movs	r2, #172	@ 0xac
 8001d02:	18bb      	adds	r3, r7, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	18ba      	adds	r2, r7, r2
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	23ac      	movs	r3, #172	@ 0xac
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	23a0      	movs	r3, #160	@ 0xa0
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbca      	blt.n	8001cb2 <displayVoltReadFunction+0x25e>
          }
      }
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001d1c:	239c      	movs	r3, #156	@ 0x9c
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	22a8      	movs	r2, #168	@ 0xa8
 8001d26:	18ba      	adds	r2, r7, r2
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e036      	b.n	8001d9a <displayVoltReadFunction+0x346>
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	2000048c 	.word	0x2000048c
 8001d34:	080074b0 	.word	0x080074b0
 8001d38:	20000484 	.word	0x20000484
 8001d3c:	080074b8 	.word	0x080074b8
          if(py != bar_y0 + 1 && py != bar_y1 - 1) {
 8001d40:	239c      	movs	r3, #156	@ 0x9c
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	24a8      	movs	r4, #168	@ 0xa8
 8001d4a:	193a      	adds	r2, r7, r4
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d01d      	beq.n	8001d8e <displayVoltReadFunction+0x33a>
 8001d52:	2398      	movs	r3, #152	@ 0x98
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	193a      	adds	r2, r7, r4
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d015      	beq.n	8001d8e <displayVoltReadFunction+0x33a>
              st7565_setpixel(buffer, bar_x0, py, 1);
 8001d62:	23a4      	movs	r3, #164	@ 0xa4
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	483e      	ldr	r0, [pc, #248]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001d72:	2301      	movs	r3, #1
 8001d74:	f7ff f9cd 	bl	8001112 <st7565_setpixel>
              st7565_setpixel(buffer, bar_x1, py, 1);
 8001d78:	23a0      	movs	r3, #160	@ 0xa0
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	193b      	adds	r3, r7, r4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4839      	ldr	r0, [pc, #228]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f7ff f9c2 	bl	8001112 <st7565_setpixel>
      for(int py = bar_y0 + 1; py < bar_y1; py++) {
 8001d8e:	22a8      	movs	r2, #168	@ 0xa8
 8001d90:	18bb      	adds	r3, r7, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	18ba      	adds	r2, r7, r2
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	23a8      	movs	r3, #168	@ 0xa8
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2498      	movs	r4, #152	@ 0x98
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbca      	blt.n	8001d40 <displayVoltReadFunction+0x2ec>
          }
      }
      st7565_setpixel(buffer, bar_x0 +1, bar_y0+1, 1);
 8001daa:	25a4      	movs	r5, #164	@ 0xa4
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2d9      	uxtb	r1, r3
 8001db6:	269c      	movs	r6, #156	@ 0x9c
 8001db8:	19bb      	adds	r3, r7, r6
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	482a      	ldr	r0, [pc, #168]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f7ff f9a4 	bl	8001112 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x0 +1, bar_y1-1, 1);
 8001dca:	197b      	adds	r3, r7, r5
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b2d9      	uxtb	r1, r3
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4823      	ldr	r0, [pc, #140]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001de0:	2301      	movs	r3, #1
 8001de2:	f7ff f996 	bl	8001112 <st7565_setpixel>

      st7565_setpixel(buffer, bar_x1 -1, bar_y0+1, 1);
 8001de6:	25a0      	movs	r5, #160	@ 0xa0
 8001de8:	197b      	adds	r3, r7, r5
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	19bb      	adds	r3, r7, r6
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	481b      	ldr	r0, [pc, #108]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f7ff f987 	bl	8001112 <st7565_setpixel>
      st7565_setpixel(buffer, bar_x1 -1, bar_y1-1, 1);
 8001e04:	197b      	adds	r3, r7, r5
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4814      	ldr	r0, [pc, #80]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f7ff f979 	bl	8001112 <st7565_setpixel>
      st7565_drawstring(buffer, 0, 5, "0");
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <displayVoltReadFunction+0x41c>)
 8001e22:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e24:	2205      	movs	r2, #5
 8001e26:	2100      	movs	r1, #0
 8001e28:	f7ff f9de 	bl	80011e8 <st7565_drawstring>
      st7565_drawstring(buffer, 20, 5, "0.8");
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <displayVoltReadFunction+0x420>)
 8001e2e:	480f      	ldr	r0, [pc, #60]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e30:	2205      	movs	r2, #5
 8001e32:	2114      	movs	r1, #20
 8001e34:	f7ff f9d8 	bl	80011e8 <st7565_drawstring>
      st7565_drawstring(buffer, 45, 5, "1.6");
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <displayVoltReadFunction+0x424>)
 8001e3a:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	212d      	movs	r1, #45	@ 0x2d
 8001e40:	f7ff f9d2 	bl	80011e8 <st7565_drawstring>
      st7565_drawstring(buffer, 75, 5, "2.5");
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <displayVoltReadFunction+0x428>)
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e48:	2205      	movs	r2, #5
 8001e4a:	214b      	movs	r1, #75	@ 0x4b
 8001e4c:	f7ff f9cc 	bl	80011e8 <st7565_drawstring>
      st7565_drawstring(buffer, 108, 5, "3.3");
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <displayVoltReadFunction+0x42c>)
 8001e52:	4806      	ldr	r0, [pc, #24]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e54:	2205      	movs	r2, #5
 8001e56:	216c      	movs	r1, #108	@ 0x6c
 8001e58:	f7ff f9c6 	bl	80011e8 <st7565_drawstring>
      st7565_write_buffer(buffer);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <displayVoltReadFunction+0x418>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7fe fc98 	bl	8000794 <st7565_write_buffer>
  }
    osDelay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f003 f973 	bl	8005150 <osDelay>
	  if(displayMode==0){
 8001e6a:	e601      	b.n	8001a70 <displayVoltReadFunction+0x1c>
 8001e6c:	2000000c 	.word	0x2000000c
 8001e70:	080074c4 	.word	0x080074c4
 8001e74:	080074c8 	.word	0x080074c8
 8001e78:	080074cc 	.word	0x080074cc
 8001e7c:	080074d0 	.word	0x080074d0
 8001e80:	080074d4 	.word	0x080074d4

08001e84 <readButtonFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void *argument)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readButtonFunction */
  /* Infinite loop */

  for(;;)
  {
	  hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 8001e8c:	4b38      	ldr	r3, [pc, #224]	@ (8001f70 <readButtonFunction+0xec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28
	  	      HAL_ADC_Start(&hadc);
 8001e94:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <readButtonFunction+0xec>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fa20 	bl	80022dc <HAL_ADC_Start>

	  	      if(HAL_ADC_PollForConversion(&hadc, 4)==HAL_OK){
 8001e9c:	4b34      	ldr	r3, [pc, #208]	@ (8001f70 <readButtonFunction+0xec>)
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 faaf 	bl	8002404 <HAL_ADC_PollForConversion>
 8001ea6:	1e03      	subs	r3, r0, #0
 8001ea8:	d108      	bne.n	8001ebc <readButtonFunction+0x38>
	  	      buttonReadRaw = HAL_ADC_GetValue(&hadc);
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <readButtonFunction+0xec>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 fb41 	bl	8002534 <HAL_ADC_GetValue>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <readButtonFunction+0xf0>)
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	e002      	b.n	8001ec2 <readButtonFunction+0x3e>
	  	      }
	  	      else buttonReadRaw=0;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <readButtonFunction+0xf0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
	  	      buttonRead[0]=buttonRead[1];
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <readButtonFunction+0xf4>)
 8001ec4:	885a      	ldrh	r2, [r3, #2]
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f78 <readButtonFunction+0xf4>)
 8001ec8:	801a      	strh	r2, [r3, #0]
	  	      buttonRead[1]=filterButton(interpolation(buttonReadRaw));
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <readButtonFunction+0xf0>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff fa59 	bl	8001388 <interpolation>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fac0 	bl	8001460 <filterButton>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <readButtonFunction+0xf4>)
 8001ee6:	805a      	strh	r2, [r3, #2]

	  	      if(buttonRead[1]<=50&&buttonRead[0]>50){
 8001ee8:	4b23      	ldr	r3, [pc, #140]	@ (8001f78 <readButtonFunction+0xf4>)
 8001eea:	885b      	ldrh	r3, [r3, #2]
 8001eec:	2b32      	cmp	r3, #50	@ 0x32
 8001eee:	d813      	bhi.n	8001f18 <readButtonFunction+0x94>
 8001ef0:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <readButtonFunction+0xf4>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b32      	cmp	r3, #50	@ 0x32
 8001ef6:	d90f      	bls.n	8001f18 <readButtonFunction+0x94>
	  	    	  if(displayMode==0)displayMode=displayModeMax;
 8001ef8:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <readButtonFunction+0xf8>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <readButtonFunction+0x86>
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <readButtonFunction+0xfc>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e02e      	b.n	8001f68 <readButtonFunction+0xe4>
	  	    	  else displayMode--;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f14:	701a      	strb	r2, [r3, #0]
	  	    	  if(displayMode==0)displayMode=displayModeMax;
 8001f16:	e027      	b.n	8001f68 <readButtonFunction+0xe4>
	  	      }
	  	      else if(buttonRead[1]>300&&buttonRead[1]<315&&(buttonRead[0]>=315||buttonRead[0]<=300)){
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <readButtonFunction+0xf4>)
 8001f1a:	885a      	ldrh	r2, [r3, #2]
 8001f1c:	2396      	movs	r3, #150	@ 0x96
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d921      	bls.n	8001f68 <readButtonFunction+0xe4>
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <readButtonFunction+0xf4>)
 8001f26:	885a      	ldrh	r2, [r3, #2]
 8001f28:	239d      	movs	r3, #157	@ 0x9d
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d81b      	bhi.n	8001f68 <readButtonFunction+0xe4>
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <readButtonFunction+0xf4>)
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	239d      	movs	r3, #157	@ 0x9d
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d805      	bhi.n	8001f48 <readButtonFunction+0xc4>
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <readButtonFunction+0xf4>)
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	2396      	movs	r3, #150	@ 0x96
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d80f      	bhi.n	8001f68 <readButtonFunction+0xe4>
	  	    	  if(displayMode==displayModeMax)displayMode=0;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <readButtonFunction+0xfc>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d103      	bne.n	8001f5c <readButtonFunction+0xd8>
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e005      	b.n	8001f68 <readButtonFunction+0xe4>
	  	    	  else displayMode++;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <readButtonFunction+0xf8>)
 8001f66:	701a      	strb	r2, [r3, #0]

	  	      }


    osDelay(10);
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f003 f8f1 	bl	8005150 <osDelay>
	  hadc.Instance->CHSELR = 1<<ADC_CHANNEL_0;
 8001f6e:	e78d      	b.n	8001e8c <readButtonFunction+0x8>
 8001f70:	200008b8 	.word	0x200008b8
 8001f74:	20000006 	.word	0x20000006
 8001f78:	20000488 	.word	0x20000488
 8001f7c:	2000048c 	.word	0x2000048c
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f96:	f000 f821 	bl	8001fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	46c0      	nop			@ (mov r8, r8)
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_Init+0x24>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_Init+0x24>)
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f7fe fb47 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fca:	f7fe fa3d 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	18d2      	adds	r2, r2, r3
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fee:	601a      	str	r2, [r3, #0]
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	20000418 	.word	0x20000418
 8001ffc:	200009f0 	.word	0x200009f0

08002000 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b02      	ldr	r3, [pc, #8]	@ (8002010 <HAL_GetTick+0x10>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	200009f0 	.word	0x200009f0

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fff0 	bl	8002000 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	001a      	movs	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	189b      	adds	r3, r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	f7ff ffe0 	bl	8002000 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	20000418 	.word	0x20000418

0800205c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	230f      	movs	r3, #15
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e125      	b.n	80022c6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2234      	movs	r2, #52	@ 0x34
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe fa02 	bl	800049c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	2210      	movs	r2, #16
 800209e:	4013      	ands	r3, r2
 80020a0:	d000      	beq.n	80020a4 <HAL_ADC_Init+0x48>
 80020a2:	e103      	b.n	80022ac <HAL_ADC_Init+0x250>
 80020a4:	230f      	movs	r3, #15
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d000      	beq.n	80020b0 <HAL_ADC_Init+0x54>
 80020ae:	e0fd      	b.n	80022ac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80020ba:	d000      	beq.n	80020be <HAL_ADC_Init+0x62>
 80020bc:	e0f6      	b.n	80022ac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c2:	4a83      	ldr	r2, [pc, #524]	@ (80022d0 <HAL_ADC_Init+0x274>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	2202      	movs	r2, #2
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d112      	bne.n	8002102 <HAL_ADC_Init+0xa6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d009      	beq.n	80020fe <HAL_ADC_Init+0xa2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	401a      	ands	r2, r3
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Init+0xa6>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_ADC_Init+0xa8>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d116      	bne.n	8002136 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2218      	movs	r2, #24
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	0899      	lsrs	r1, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4964      	ldr	r1, [pc, #400]	@ (80022d4 <HAL_ADC_Init+0x278>)
 8002142:	400a      	ands	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7e1b      	ldrb	r3, [r3, #24]
 800214a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e5b      	ldrb	r3, [r3, #25]
 8002150:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002152:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e9b      	ldrb	r3, [r3, #26]
 8002158:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800215a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	2b01      	cmp	r3, #1
 8002162:	d002      	beq.n	800216a <HAL_ADC_Init+0x10e>
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	e000      	b.n	800216c <HAL_ADC_Init+0x110>
 800216a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800216c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002172:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d101      	bne.n	8002180 <HAL_ADC_Init+0x124>
 800217c:	2304      	movs	r3, #4
 800217e:	e000      	b.n	8002182 <HAL_ADC_Init+0x126>
 8002180:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002182:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2124      	movs	r1, #36	@ 0x24
 8002188:	5c5b      	ldrb	r3, [r3, r1]
 800218a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800218c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	4313      	orrs	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7edb      	ldrb	r3, [r3, #27]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d115      	bne.n	80021c8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e9b      	ldrb	r3, [r3, #26]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2280      	movs	r2, #128	@ 0x80
 80021a8:	0252      	lsls	r2, r2, #9
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	e00b      	b.n	80021c8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	2220      	movs	r2, #32
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	2201      	movs	r2, #1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	23c2      	movs	r3, #194	@ 0xc2
 80021ce:	33ff      	adds	r3, #255	@ 0xff
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d007      	beq.n	80021e4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021dc:	4313      	orrs	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d01b      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d017      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	2b02      	cmp	r3, #2
 800220e:	d013      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	2b03      	cmp	r3, #3
 8002216:	d00f      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	2b04      	cmp	r3, #4
 800221e:	d00b      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	2b05      	cmp	r3, #5
 8002226:	d007      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	2b06      	cmp	r3, #6
 800222e:	d003      	beq.n	8002238 <HAL_ADC_Init+0x1dc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	2b07      	cmp	r3, #7
 8002236:	d112      	bne.n	800225e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2107      	movs	r1, #7
 8002244:	438a      	bics	r2, r1
 8002246:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6959      	ldr	r1, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	2207      	movs	r2, #7
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_ADC_Init+0x27c>)
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002278:	2203      	movs	r2, #3
 800227a:	4393      	bics	r3, r2
 800227c:	2201      	movs	r2, #1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002284:	e01c      	b.n	80022c0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	2212      	movs	r2, #18
 800228c:	4393      	bics	r3, r2
 800228e:	2210      	movs	r2, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229a:	2201      	movs	r2, #1
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022aa:	e009      	b.n	80022c0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	2210      	movs	r2, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	fffffefd 	.word	0xfffffefd
 80022d4:	fffe0219 	.word	0xfffe0219
 80022d8:	833fffe7 	.word	0x833fffe7

080022dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e4:	230f      	movs	r3, #15
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2204      	movs	r2, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d138      	bne.n	800236a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2234      	movs	r2, #52	@ 0x34
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Start+0x2a>
 8002302:	2302      	movs	r3, #2
 8002304:	e038      	b.n	8002378 <HAL_ADC_Start+0x9c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2234      	movs	r2, #52	@ 0x34
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7e5b      	ldrb	r3, [r3, #25]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d007      	beq.n	8002326 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002316:	230f      	movs	r3, #15
 8002318:	18fc      	adds	r4, r7, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 fa23 	bl	8002768 <ADC_Enable>
 8002322:	0003      	movs	r3, r0
 8002324:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002326:	230f      	movs	r3, #15
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d120      	bne.n	8002372 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_ADC_Start+0xa4>)
 8002336:	4013      	ands	r3, r2
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	0052      	lsls	r2, r2, #1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2234      	movs	r2, #52	@ 0x34
 800234c:	2100      	movs	r1, #0
 800234e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	221c      	movs	r2, #28
 8002356:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2104      	movs	r1, #4
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e003      	b.n	8002372 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800236a:	230f      	movs	r3, #15
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b005      	add	sp, #20
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	fffff0fe 	.word	0xfffff0fe

08002384 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2234      	movs	r2, #52	@ 0x34
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Stop+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e029      	b.n	80023f6 <HAL_ADC_Stop+0x72>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2234      	movs	r2, #52	@ 0x34
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80023aa:	250f      	movs	r5, #15
 80023ac:	197c      	adds	r4, r7, r5
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 face 	bl	8002952 <ADC_ConversionStop>
 80023b6:	0003      	movs	r3, r0
 80023b8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023ba:	197b      	adds	r3, r7, r5
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023c2:	197c      	adds	r4, r7, r5
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 fa52 	bl	8002870 <ADC_Disable>
 80023cc:	0003      	movs	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023d0:	197b      	adds	r3, r7, r5
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023dc:	4a08      	ldr	r2, [pc, #32]	@ (8002400 <HAL_ADC_Stop+0x7c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	2201      	movs	r2, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2234      	movs	r2, #52	@ 0x34
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	fffffefe 	.word	0xfffffefe

08002404 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d102      	bne.n	800241c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002416:	2308      	movs	r3, #8
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e014      	b.n	8002446 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	4013      	ands	r3, r2
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10b      	bne.n	8002442 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242e:	2220      	movs	r2, #32
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2234      	movs	r2, #52	@ 0x34
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e071      	b.n	8002526 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002442:	230c      	movs	r3, #12
 8002444:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002446:	f7ff fddb 	bl	8002000 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800244e:	e01f      	b.n	8002490 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	d01c      	beq.n	8002490 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_ADC_PollForConversion+0x68>
 800245c:	f7ff fdd0 	bl	8002000 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d211      	bcs.n	8002490 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	d10b      	bne.n	8002490 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247c:	2204      	movs	r2, #4
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2234      	movs	r2, #52	@ 0x34
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e04a      	b.n	8002526 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	d0d9      	beq.n	8002450 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	23c0      	movs	r3, #192	@ 0xc0
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d12d      	bne.n	8002514 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d129      	bne.n	8002514 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2208      	movs	r2, #8
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d122      	bne.n	8002514 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2204      	movs	r2, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d110      	bne.n	80024fc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	210c      	movs	r1, #12
 80024e6:	438a      	bics	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	4a10      	ldr	r2, [pc, #64]	@ (8002530 <HAL_ADC_PollForConversion+0x12c>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	2201      	movs	r2, #1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80024fa:	e00b      	b.n	8002514 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	2220      	movs	r2, #32
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e1b      	ldrb	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	220c      	movs	r2, #12
 8002522:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	fffffefe 	.word	0xfffffefe

08002534 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	230f      	movs	r3, #15
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	055b      	lsls	r3, r3, #21
 800256a:	429a      	cmp	r2, r3
 800256c:	d011      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x46>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00d      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x46>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	2b02      	cmp	r3, #2
 800257c:	d009      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x46>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	2b03      	cmp	r3, #3
 8002584:	d005      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x46>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	2b04      	cmp	r3, #4
 800258c:	d001      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x46>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2234      	movs	r2, #52	@ 0x34
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x54>
 800259c:	2302      	movs	r3, #2
 800259e:	e0d0      	b.n	8002742 <HAL_ADC_ConfigChannel+0x1f6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2234      	movs	r2, #52	@ 0x34
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d000      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x6a>
 80025b4:	e0b4      	b.n	8002720 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a64      	ldr	r2, [pc, #400]	@ (800274c <HAL_ADC_ConfigChannel+0x200>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x76>
 80025c0:	e082      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	409a      	lsls	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	055b      	lsls	r3, r3, #21
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d037      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d033      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d02f      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d02b      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	2b04      	cmp	r3, #4
 8002602:	d027      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	2b05      	cmp	r3, #5
 800260a:	d023      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	2b06      	cmp	r3, #6
 8002612:	d01f      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	2b07      	cmp	r3, #7
 800261a:	d01b      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2107      	movs	r1, #7
 8002628:	400b      	ands	r3, r1
 800262a:	429a      	cmp	r2, r3
 800262c:	d012      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2107      	movs	r1, #7
 800263a:	438a      	bics	r2, r1
 800263c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6959      	ldr	r1, [r3, #20]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2207      	movs	r2, #7
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b10      	cmp	r3, #16
 800265a:	d007      	beq.n	800266c <HAL_ADC_ConfigChannel+0x120>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b11      	cmp	r3, #17
 8002662:	d003      	beq.n	800266c <HAL_ADC_ConfigChannel+0x120>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b12      	cmp	r3, #18
 800266a:	d163      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800266c:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_ADC_ConfigChannel+0x204>)
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b10      	cmp	r3, #16
 8002676:	d009      	beq.n	800268c <HAL_ADC_ConfigChannel+0x140>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b11      	cmp	r3, #17
 800267e:	d102      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x13a>
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	03db      	lsls	r3, r3, #15
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x144>
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	045b      	lsls	r3, r3, #17
 800268a:	e001      	b.n	8002690 <HAL_ADC_ConfigChannel+0x144>
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	4a2f      	ldr	r2, [pc, #188]	@ (8002750 <HAL_ADC_ConfigChannel+0x204>)
 8002692:	430b      	orrs	r3, r1
 8002694:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b10      	cmp	r3, #16
 800269c:	d14a      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800269e:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_ADC_ConfigChannel+0x208>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	492d      	ldr	r1, [pc, #180]	@ (8002758 <HAL_ADC_ConfigChannel+0x20c>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fd fd2f 	bl	8000108 <__udivsi3>
 80026aa:	0003      	movs	r3, r0
 80026ac:	001a      	movs	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b8:	e002      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f9      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x16e>
 80026c6:	e035      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	4099      	lsls	r1, r3
 80026d6:	000b      	movs	r3, r1
 80026d8:	43d9      	mvns	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	400a      	ands	r2, r1
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x1ae>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d003      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x1ae>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d11c      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_ADC_ConfigChannel+0x204>)
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d007      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x1ca>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b11      	cmp	r3, #17
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x1c6>
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_ADC_ConfigChannel+0x210>)
 8002710:	e002      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1cc>
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HAL_ADC_ConfigChannel+0x214>)
 8002714:	e000      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1cc>
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_ADC_ConfigChannel+0x218>)
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <HAL_ADC_ConfigChannel+0x204>)
 800271a:	400b      	ands	r3, r1
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e009      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	2220      	movs	r2, #32
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800272c:	230f      	movs	r3, #15
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2234      	movs	r2, #52	@ 0x34
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	00001001 	.word	0x00001001
 8002750:	40012708 	.word	0x40012708
 8002754:	20000000 	.word	0x20000000
 8002758:	000f4240 	.word	0x000f4240
 800275c:	ffbfffff 	.word	0xffbfffff
 8002760:	feffffff 	.word	0xfeffffff
 8002764:	ff7fffff 	.word	0xff7fffff

08002768 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b01      	cmp	r3, #1
 8002784:	d112      	bne.n	80027ac <ADC_Enable+0x44>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	2b01      	cmp	r3, #1
 8002792:	d009      	beq.n	80027a8 <ADC_Enable+0x40>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	401a      	ands	r2, r3
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d101      	bne.n	80027ac <ADC_Enable+0x44>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <ADC_Enable+0x46>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d152      	bne.n	8002858 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <ADC_Enable+0xfc>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	d00d      	beq.n	80027da <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	2210      	movs	r2, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	2201      	movs	r2, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e03f      	b.n	800285a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <ADC_Enable+0x100>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	491f      	ldr	r1, [pc, #124]	@ (800286c <ADC_Enable+0x104>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fc89 	bl	8000108 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027fa:	e002      	b.n	8002802 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3b01      	subs	r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002808:	f7ff fbfa 	bl	8002000 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002810:	e01b      	b.n	800284a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002812:	f7ff fbf5 	bl	8002000 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d914      	bls.n	800284a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	2b01      	cmp	r3, #1
 800282c:	d00d      	beq.n	800284a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	2210      	movs	r2, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283e:	2201      	movs	r2, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e007      	b.n	800285a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	2b01      	cmp	r3, #1
 8002856:	d1dc      	bne.n	8002812 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	80000017 	.word	0x80000017
 8002868:	20000000 	.word	0x20000000
 800286c:	000f4240 	.word	0x000f4240

08002870 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2203      	movs	r2, #3
 8002884:	4013      	ands	r3, r2
 8002886:	2b01      	cmp	r3, #1
 8002888:	d112      	bne.n	80028b0 <ADC_Disable+0x40>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	2b01      	cmp	r3, #1
 8002896:	d009      	beq.n	80028ac <ADC_Disable+0x3c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	401a      	ands	r2, r3
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d101      	bne.n	80028b0 <ADC_Disable+0x40>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <ADC_Disable+0x42>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d048      	beq.n	8002948 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2205      	movs	r2, #5
 80028be:	4013      	ands	r3, r2
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d110      	bne.n	80028e6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2102      	movs	r1, #2
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2203      	movs	r2, #3
 80028da:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028dc:	f7ff fb90 	bl	8002000 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028e4:	e029      	b.n	800293a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	2210      	movs	r2, #16
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	2201      	movs	r2, #1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e023      	b.n	800294a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002902:	f7ff fb7d 	bl	8002000 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d914      	bls.n	800293a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2201      	movs	r2, #1
 8002918:	4013      	ands	r3, r2
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	2210      	movs	r2, #16
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	2201      	movs	r2, #1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e007      	b.n	800294a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2201      	movs	r2, #1
 8002942:	4013      	ands	r3, r2
 8002944:	2b01      	cmp	r3, #1
 8002946:	d0dc      	beq.n	8002902 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}

08002952 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2204      	movs	r2, #4
 8002966:	4013      	ands	r3, r2
 8002968:	d03a      	beq.n	80029e0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2204      	movs	r2, #4
 8002972:	4013      	ands	r3, r2
 8002974:	2b04      	cmp	r3, #4
 8002976:	d10d      	bne.n	8002994 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2202      	movs	r2, #2
 8002980:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002982:	d107      	bne.n	8002994 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2110      	movs	r1, #16
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002994:	f7ff fb34 	bl	8002000 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800299c:	e01a      	b.n	80029d4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800299e:	f7ff fb2f 	bl	8002000 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d913      	bls.n	80029d4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d00d      	beq.n	80029d4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	2210      	movs	r2, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	2201      	movs	r2, #1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e006      	b.n	80029e2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d1de      	bne.n	800299e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	0002      	movs	r2, r0
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80029fe:	d809      	bhi.n	8002a14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	001a      	movs	r2, r3
 8002a06:	231f      	movs	r3, #31
 8002a08:	401a      	ands	r2, r3
 8002a0a:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__NVIC_EnableIRQ+0x30>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4091      	lsls	r1, r2
 8002a10:	000a      	movs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
  }
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	0002      	movs	r2, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a34:	d828      	bhi.n	8002a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a36:	4a2f      	ldr	r2, [pc, #188]	@ (8002af4 <__NVIC_SetPriority+0xd4>)
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	33c0      	adds	r3, #192	@ 0xc0
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	589b      	ldr	r3, [r3, r2]
 8002a46:	1dfa      	adds	r2, r7, #7
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	400a      	ands	r2, r1
 8002a50:	00d2      	lsls	r2, r2, #3
 8002a52:	21ff      	movs	r1, #255	@ 0xff
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	43d2      	mvns	r2, r2
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	22ff      	movs	r2, #255	@ 0xff
 8002a64:	401a      	ands	r2, r3
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	4003      	ands	r3, r0
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a74:	481f      	ldr	r0, [pc, #124]	@ (8002af4 <__NVIC_SetPriority+0xd4>)
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	33c0      	adds	r3, #192	@ 0xc0
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a86:	e031      	b.n	8002aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a88:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <__NVIC_SetPriority+0xd8>)
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	230f      	movs	r3, #15
 8002a92:	400b      	ands	r3, r1
 8002a94:	3b08      	subs	r3, #8
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3306      	adds	r3, #6
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	18d3      	adds	r3, r2, r3
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1dfa      	adds	r2, r7, #7
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	400a      	ands	r2, r1
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	21ff      	movs	r1, #255	@ 0xff
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	43d2      	mvns	r2, r2
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	22ff      	movs	r2, #255	@ 0xff
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	2303      	movs	r3, #3
 8002aca:	4003      	ands	r3, r0
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad0:	4809      	ldr	r0, [pc, #36]	@ (8002af8 <__NVIC_SetPriority+0xd8>)
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	001c      	movs	r4, r3
 8002ad8:	230f      	movs	r3, #15
 8002ada:	4023      	ands	r3, r4
 8002adc:	3b08      	subs	r3, #8
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	3306      	adds	r3, #6
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	18c3      	adds	r3, r0, r3
 8002ae8:	3304      	adds	r3, #4
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b003      	add	sp, #12
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	210f      	movs	r1, #15
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	1c02      	adds	r2, r0, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	0011      	movs	r1, r2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff ff81 	bl	8002a20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff ff57 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b56:	e155      	b.n	8002e04 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4091      	lsls	r1, r2
 8002b62:	000a      	movs	r2, r1
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d100      	bne.n	8002b70 <HAL_GPIO_Init+0x28>
 8002b6e:	e146      	b.n	8002dfe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d005      	beq.n	8002b88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d130      	bne.n	8002bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	409a      	lsls	r2, r3
 8002b96:	0013      	movs	r3, r2
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	0013      	movs	r3, r2
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	0013      	movs	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d017      	beq.n	8002c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	43da      	mvns	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	0013      	movs	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d123      	bne.n	8002c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	58d3      	ldr	r3, [r2, r3]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2207      	movs	r2, #7
 8002c44:	4013      	ands	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2107      	movs	r1, #7
 8002c5e:	400b      	ands	r3, r1
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	409a      	lsls	r2, r3
 8002c64:	0013      	movs	r3, r2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	6939      	ldr	r1, [r7, #16]
 8002c78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	0013      	movs	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	23c0      	movs	r3, #192	@ 0xc0
 8002cb4:	029b      	lsls	r3, r3, #10
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d100      	bne.n	8002cbc <HAL_GPIO_Init+0x174>
 8002cba:	e0a0      	b.n	8002dfe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <HAL_GPIO_Init+0x2d4>)
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <HAL_GPIO_Init+0x2d4>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	4b54      	ldr	r3, [pc, #336]	@ (8002e1c <HAL_GPIO_Init+0x2d4>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd4:	4a52      	ldr	r2, [pc, #328]	@ (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	589b      	ldr	r3, [r3, r2]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	409a      	lsls	r2, r3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	2390      	movs	r3, #144	@ 0x90
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d019      	beq.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a47      	ldr	r2, [pc, #284]	@ (8002e24 <HAL_GPIO_Init+0x2dc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0x1ea>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a46      	ldr	r2, [pc, #280]	@ (8002e28 <HAL_GPIO_Init+0x2e0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_GPIO_Init+0x1e6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a45      	ldr	r2, [pc, #276]	@ (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0x1e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a44      	ldr	r2, [pc, #272]	@ (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_GPIO_Init+0x1de>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e008      	b.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d36:	2300      	movs	r3, #0
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d48:	4935      	ldr	r1, [pc, #212]	@ (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d56:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	035b      	lsls	r3, r3, #13
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d80:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	039b      	lsls	r3, r3, #14
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002da4:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002daa:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dce:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	4013      	ands	r3, r2
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	40da      	lsrs	r2, r3
 8002e0c:	1e13      	subs	r3, r2, #0
 8002e0e:	d000      	beq.n	8002e12 <HAL_GPIO_Init+0x2ca>
 8002e10:	e6a2      	b.n	8002b58 <HAL_GPIO_Init+0x10>
  } 
}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b006      	add	sp, #24
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010000 	.word	0x40010000
 8002e24:	48000400 	.word	0x48000400
 8002e28:	48000800 	.word	0x48000800
 8002e2c:	48000c00 	.word	0x48000c00
 8002e30:	48001000 	.word	0x48001000
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	0008      	movs	r0, r1
 8002e42:	0011      	movs	r1, r2
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	1c02      	adds	r2, r0, #0
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	1c7b      	adds	r3, r7, #1
 8002e4c:	1c0a      	adds	r2, r1, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e50:	1c7b      	adds	r3, r7, #1
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e58:	1cbb      	adds	r3, r7, #2
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e62:	1cbb      	adds	r3, r7, #2
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f000 fb76 	bl	8003574 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x20>
 8002e92:	e08e      	b.n	8002fb2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e94:	4bc5      	ldr	r3, [pc, #788]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	220c      	movs	r2, #12
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d00e      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea0:	4bc2      	ldr	r3, [pc, #776]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	220c      	movs	r2, #12
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d117      	bne.n	8002edc <HAL_RCC_OscConfig+0x68>
 8002eac:	4bbf      	ldr	r3, [pc, #764]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	23c0      	movs	r3, #192	@ 0xc0
 8002eb2:	025b      	lsls	r3, r3, #9
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	025b      	lsls	r3, r3, #9
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10e      	bne.n	8002edc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4bbb      	ldr	r3, [pc, #748]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	029b      	lsls	r3, r3, #10
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d100      	bne.n	8002ecc <HAL_RCC_OscConfig+0x58>
 8002eca:	e071      	b.n	8002fb0 <HAL_RCC_OscConfig+0x13c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d000      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x62>
 8002ed4:	e06c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f000 fb4c 	bl	8003574 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x80>
 8002ee4:	4bb1      	ldr	r3, [pc, #708]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4bb0      	ldr	r3, [pc, #704]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	0249      	lsls	r1, r1, #9
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e02f      	b.n	8002f54 <HAL_RCC_OscConfig+0xe0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0xa2>
 8002efc:	4bab      	ldr	r3, [pc, #684]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4baa      	ldr	r3, [pc, #680]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f02:	49ab      	ldr	r1, [pc, #684]	@ (80031b0 <HAL_RCC_OscConfig+0x33c>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4ba8      	ldr	r3, [pc, #672]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4ba7      	ldr	r3, [pc, #668]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f0e:	49a9      	ldr	r1, [pc, #676]	@ (80031b4 <HAL_RCC_OscConfig+0x340>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e01e      	b.n	8002f54 <HAL_RCC_OscConfig+0xe0>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d10e      	bne.n	8002f3c <HAL_RCC_OscConfig+0xc8>
 8002f1e:	4ba3      	ldr	r3, [pc, #652]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4ba2      	ldr	r3, [pc, #648]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	02c9      	lsls	r1, r1, #11
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4b9f      	ldr	r3, [pc, #636]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b9e      	ldr	r3, [pc, #632]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	0249      	lsls	r1, r1, #9
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xe0>
 8002f3c:	4b9b      	ldr	r3, [pc, #620]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b9a      	ldr	r3, [pc, #616]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f42:	499b      	ldr	r1, [pc, #620]	@ (80031b0 <HAL_RCC_OscConfig+0x33c>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b98      	ldr	r3, [pc, #608]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b97      	ldr	r3, [pc, #604]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f4e:	4999      	ldr	r1, [pc, #612]	@ (80031b4 <HAL_RCC_OscConfig+0x340>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f850 	bl	8002000 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f66:	f7ff f84b 	bl	8002000 <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	@ 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e2fd      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f78:	4b8c      	ldr	r3, [pc, #560]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	4013      	ands	r3, r2
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0xf2>
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7ff f83b 	bl	8002000 <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff f836 	bl	8002000 <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2e8      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b82      	ldr	r3, [pc, #520]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	4013      	ands	r3, r2
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x11c>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d100      	bne.n	8002fbe <HAL_RCC_OscConfig+0x14a>
 8002fbc:	e06c      	b.n	8003098 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc8:	4b78      	ldr	r3, [pc, #480]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	220c      	movs	r2, #12
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d11f      	bne.n	8003014 <HAL_RCC_OscConfig+0x1a0>
 8002fd4:	4b75      	ldr	r3, [pc, #468]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	23c0      	movs	r3, #192	@ 0xc0
 8002fda:	025b      	lsls	r3, r3, #9
 8002fdc:	401a      	ands	r2, r3
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b71      	ldr	r3, [pc, #452]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x188>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e2bb      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	22f8      	movs	r2, #248	@ 0xf8
 8003002:	4393      	bics	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00da      	lsls	r2, r3, #3
 800300c:	4b67      	ldr	r3, [pc, #412]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e041      	b.n	8003098 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d024      	beq.n	8003066 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b63      	ldr	r3, [pc, #396]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b62      	ldr	r3, [pc, #392]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe ffea 	bl	8002000 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe ffe5 	bl	8002000 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e297      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b59      	ldr	r3, [pc, #356]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d0f1      	beq.n	8003032 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b57      	ldr	r3, [pc, #348]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	22f8      	movs	r2, #248	@ 0xf8
 8003054:	4393      	bics	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00da      	lsls	r2, r3, #3
 800305e:	4b53      	ldr	r3, [pc, #332]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b51      	ldr	r3, [pc, #324]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b50      	ldr	r3, [pc, #320]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 800306c:	2101      	movs	r1, #1
 800306e:	438a      	bics	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe ffc5 	bl	8002000 <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe ffc0 	bl	8002000 <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e272      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b47      	ldr	r3, [pc, #284]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d1f1      	bne.n	800307c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	4013      	ands	r3, r2
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d019      	beq.n	80030de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80030ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ae:	4b3f      	ldr	r3, [pc, #252]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	430a      	orrs	r2, r1
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7fe ffa3 	bl	8002000 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe ff9e 	bl	8002000 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e250      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d0f1      	beq.n	80030c0 <HAL_RCC_OscConfig+0x24c>
 80030dc:	e018      	b.n	8003110 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030de:	4b33      	ldr	r3, [pc, #204]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80030e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e2:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	438a      	bics	r2, r1
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe ff89 	bl	8002000 <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe ff84 	bl	8002000 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e236      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003106:	4b29      	ldr	r3, [pc, #164]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	2202      	movs	r2, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d1f1      	bne.n	80030f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2204      	movs	r2, #4
 8003116:	4013      	ands	r3, r2
 8003118:	d100      	bne.n	800311c <HAL_RCC_OscConfig+0x2a8>
 800311a:	e0b5      	b.n	8003288 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311c:	201f      	movs	r0, #31
 800311e:	183b      	adds	r3, r7, r0
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	055b      	lsls	r3, r3, #21
 800312c:	4013      	ands	r3, r2
 800312e:	d110      	bne.n	8003152 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b1e      	ldr	r3, [pc, #120]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	0549      	lsls	r1, r1, #21
 800313a:	430a      	orrs	r2, r1
 800313c:	61da      	str	r2, [r3, #28]
 800313e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	055b      	lsls	r3, r3, #21
 8003146:	4013      	ands	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800314c:	183b      	adds	r3, r7, r0
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCC_OscConfig+0x344>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d11a      	bne.n	8003194 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <HAL_RCC_OscConfig+0x344>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_RCC_OscConfig+0x344>)
 8003164:	2180      	movs	r1, #128	@ 0x80
 8003166:	0049      	lsls	r1, r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316c:	f7fe ff48 	bl	8002000 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe ff43 	bl	8002000 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	@ 0x64
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1f5      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_OscConfig+0x344>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10f      	bne.n	80031bc <HAL_RCC_OscConfig+0x348>
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	4b02      	ldr	r3, [pc, #8]	@ (80031ac <HAL_RCC_OscConfig+0x338>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	430a      	orrs	r2, r1
 80031a6:	621a      	str	r2, [r3, #32]
 80031a8:	e036      	b.n	8003218 <HAL_RCC_OscConfig+0x3a4>
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	40021000 	.word	0x40021000
 80031b0:	fffeffff 	.word	0xfffeffff
 80031b4:	fffbffff 	.word	0xfffbffff
 80031b8:	40007000 	.word	0x40007000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x36a>
 80031c4:	4bca      	ldr	r3, [pc, #808]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	4bc9      	ldr	r3, [pc, #804]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	4bc7      	ldr	r3, [pc, #796]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	4bc6      	ldr	r3, [pc, #792]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031d6:	2104      	movs	r1, #4
 80031d8:	438a      	bics	r2, r1
 80031da:	621a      	str	r2, [r3, #32]
 80031dc:	e01c      	b.n	8003218 <HAL_RCC_OscConfig+0x3a4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x38c>
 80031e6:	4bc2      	ldr	r3, [pc, #776]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	4bc1      	ldr	r3, [pc, #772]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031ec:	2104      	movs	r1, #4
 80031ee:	430a      	orrs	r2, r1
 80031f0:	621a      	str	r2, [r3, #32]
 80031f2:	4bbf      	ldr	r3, [pc, #764]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	4bbe      	ldr	r3, [pc, #760]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	430a      	orrs	r2, r1
 80031fc:	621a      	str	r2, [r3, #32]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0x3a4>
 8003200:	4bbb      	ldr	r3, [pc, #748]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	4bba      	ldr	r3, [pc, #744]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003206:	2101      	movs	r1, #1
 8003208:	438a      	bics	r2, r1
 800320a:	621a      	str	r2, [r3, #32]
 800320c:	4bb8      	ldr	r3, [pc, #736]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	4bb7      	ldr	r3, [pc, #732]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003212:	2104      	movs	r1, #4
 8003214:	438a      	bics	r2, r1
 8003216:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d014      	beq.n	800324a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fe feee 	bl	8002000 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e009      	b.n	800323e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fee9 	bl	8002000 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	4aaf      	ldr	r2, [pc, #700]	@ (80034f4 <HAL_RCC_OscConfig+0x680>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e19a      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	4bac      	ldr	r3, [pc, #688]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x3b6>
 8003248:	e013      	b.n	8003272 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fed9 	bl	8002000 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	e009      	b.n	8003268 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003254:	f7fe fed4 	bl	8002000 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4aa5      	ldr	r2, [pc, #660]	@ (80034f4 <HAL_RCC_OscConfig+0x680>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e185      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4ba1      	ldr	r3, [pc, #644]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	2202      	movs	r2, #2
 800326e:	4013      	ands	r3, r2
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003272:	231f      	movs	r3, #31
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	4b9c      	ldr	r3, [pc, #624]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	4b9b      	ldr	r3, [pc, #620]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003282:	499d      	ldr	r1, [pc, #628]	@ (80034f8 <HAL_RCC_OscConfig+0x684>)
 8003284:	400a      	ands	r2, r1
 8003286:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	4013      	ands	r3, r2
 8003290:	d063      	beq.n	800335a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12a      	bne.n	80032f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800329a:	4b95      	ldr	r3, [pc, #596]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800329c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800329e:	4b94      	ldr	r3, [pc, #592]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032a0:	2104      	movs	r1, #4
 80032a2:	430a      	orrs	r2, r1
 80032a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80032a6:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032aa:	4b91      	ldr	r3, [pc, #580]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fea5 	bl	8002000 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032bc:	f7fe fea0 	bl	8002000 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e152      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032ce:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	d0f1      	beq.n	80032bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032d8:	4b85      	ldr	r3, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032dc:	22f8      	movs	r2, #248	@ 0xf8
 80032de:	4393      	bics	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	4b81      	ldr	r3, [pc, #516]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80032ee:	e034      	b.n	800335a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	3305      	adds	r3, #5
 80032f6:	d111      	bne.n	800331c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032f8:	4b7d      	ldr	r3, [pc, #500]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fc:	4b7c      	ldr	r3, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80032fe:	2104      	movs	r1, #4
 8003300:	438a      	bics	r2, r1
 8003302:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003304:	4b7a      	ldr	r3, [pc, #488]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003308:	22f8      	movs	r2, #248	@ 0xf8
 800330a:	4393      	bics	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	00da      	lsls	r2, r3, #3
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003316:	430a      	orrs	r2, r1
 8003318:	635a      	str	r2, [r3, #52]	@ 0x34
 800331a:	e01e      	b.n	800335a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800331c:	4b74      	ldr	r3, [pc, #464]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800331e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003320:	4b73      	ldr	r3, [pc, #460]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003322:	2104      	movs	r1, #4
 8003324:	430a      	orrs	r2, r1
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003328:	4b71      	ldr	r3, [pc, #452]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800332a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800332c:	4b70      	ldr	r3, [pc, #448]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800332e:	2101      	movs	r1, #1
 8003330:	438a      	bics	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe fe64 	bl	8002000 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800333e:	f7fe fe5f 	bl	8002000 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e111      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003350:	4b67      	ldr	r3, [pc, #412]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	2202      	movs	r2, #2
 8003356:	4013      	ands	r3, r2
 8003358:	d1f1      	bne.n	800333e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2220      	movs	r2, #32
 8003360:	4013      	ands	r3, r2
 8003362:	d05c      	beq.n	800341e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003364:	4b62      	ldr	r3, [pc, #392]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	220c      	movs	r2, #12
 800336a:	4013      	ands	r3, r2
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d00e      	beq.n	800338e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003370:	4b5f      	ldr	r3, [pc, #380]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	220c      	movs	r2, #12
 8003376:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003378:	2b08      	cmp	r3, #8
 800337a:	d114      	bne.n	80033a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800337c:	4b5c      	ldr	r3, [pc, #368]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	23c0      	movs	r3, #192	@ 0xc0
 8003382:	025b      	lsls	r3, r3, #9
 8003384:	401a      	ands	r2, r3
 8003386:	23c0      	movs	r3, #192	@ 0xc0
 8003388:	025b      	lsls	r3, r3, #9
 800338a:	429a      	cmp	r2, r3
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800338e:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	4013      	ands	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_RCC_OscConfig+0x5a8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d03c      	beq.n	800341c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0e6      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033ae:	4b50      	ldr	r3, [pc, #320]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80033b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b2:	4b4f      	ldr	r3, [pc, #316]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80033b4:	2180      	movs	r1, #128	@ 0x80
 80033b6:	0249      	lsls	r1, r1, #9
 80033b8:	430a      	orrs	r2, r1
 80033ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fe20 	bl	8002000 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c6:	f7fe fe1b 	bl	8002000 <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0cd      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033d8:	4b45      	ldr	r3, [pc, #276]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80033da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033dc:	2380      	movs	r3, #128	@ 0x80
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x552>
 80033e4:	e01b      	b.n	800341e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033e6:	4b42      	ldr	r3, [pc, #264]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80033e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	4943      	ldr	r1, [pc, #268]	@ (80034fc <HAL_RCC_OscConfig+0x688>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fe05 	bl	8002000 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033fc:	f7fe fe00 	bl	8002000 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b2      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800340e:	4b38      	ldr	r3, [pc, #224]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	029b      	lsls	r3, r3, #10
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x588>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800341c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d100      	bne.n	8003428 <HAL_RCC_OscConfig+0x5b4>
 8003426:	e0a4      	b.n	8003572 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b31      	ldr	r3, [pc, #196]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	220c      	movs	r2, #12
 800342e:	4013      	ands	r3, r2
 8003430:	2b08      	cmp	r3, #8
 8003432:	d100      	bne.n	8003436 <HAL_RCC_OscConfig+0x5c2>
 8003434:	e078      	b.n	8003528 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b02      	cmp	r3, #2
 800343c:	d14c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b2c      	ldr	r3, [pc, #176]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003444:	492e      	ldr	r1, [pc, #184]	@ (8003500 <HAL_RCC_OscConfig+0x68c>)
 8003446:	400a      	ands	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe fdd9 	bl	8002000 <HAL_GetTick>
 800344e:	0003      	movs	r3, r0
 8003450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe fdd4 	bl	8002000 <HAL_GetTick>
 8003458:	0002      	movs	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e086      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003466:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	049b      	lsls	r3, r3, #18
 800346e:	4013      	ands	r3, r2
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	220f      	movs	r2, #15
 8003478:	4393      	bics	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003480:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003482:	430a      	orrs	r2, r1
 8003484:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003486:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_RCC_OscConfig+0x690>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	431a      	orrs	r2, r3
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b12      	ldr	r3, [pc, #72]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80034a6:	2180      	movs	r1, #128	@ 0x80
 80034a8:	0449      	lsls	r1, r1, #17
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fda7 	bl	8002000 <HAL_GetTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fda2 	bl	8002000 <HAL_GetTick>
 80034bc:	0002      	movs	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e054      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	049b      	lsls	r3, r3, #18
 80034d2:	4013      	ands	r3, r2
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x644>
 80034d6:	e04c      	b.n	8003572 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <HAL_RCC_OscConfig+0x67c>)
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <HAL_RCC_OscConfig+0x68c>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fd8c 	bl	8002000 <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x6a6>
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	40021000 	.word	0x40021000
 80034f4:	00001388 	.word	0x00001388
 80034f8:	efffffff 	.word	0xefffffff
 80034fc:	fffeffff 	.word	0xfffeffff
 8003500:	feffffff 	.word	0xfeffffff
 8003504:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fd7a 	bl	8002000 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e02c      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	4b18      	ldr	r3, [pc, #96]	@ (800357c <HAL_RCC_OscConfig+0x708>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	049b      	lsls	r3, r3, #18
 8003522:	4013      	ands	r3, r2
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x694>
 8003526:	e024      	b.n	8003572 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01f      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003534:	4b11      	ldr	r3, [pc, #68]	@ (800357c <HAL_RCC_OscConfig+0x708>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_RCC_OscConfig+0x708>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	23c0      	movs	r3, #192	@ 0xc0
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	429a      	cmp	r2, r3
 800354e:	d10e      	bne.n	800356e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	220f      	movs	r2, #15
 8003554:	401a      	ands	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d107      	bne.n	800356e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	23f0      	movs	r3, #240	@ 0xf0
 8003562:	039b      	lsls	r3, r3, #14
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b008      	add	sp, #32
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0bf      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b61      	ldr	r3, [pc, #388]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d911      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b5e      	ldr	r3, [pc, #376]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4393      	bics	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	4b59      	ldr	r3, [pc, #356]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0a6      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d006      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035da:	4b51      	ldr	r3, [pc, #324]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b50      	ldr	r3, [pc, #320]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80035e0:	21e0      	movs	r1, #224	@ 0xe0
 80035e2:	00c9      	lsls	r1, r1, #3
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	22f0      	movs	r2, #240	@ 0xf0
 80035ee:	4393      	bics	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	d04c      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	4013      	ands	r3, r2
 8003618:	d120      	bne.n	800365c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07a      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	049b      	lsls	r3, r3, #18
 800362e:	4013      	ands	r3, r2
 8003630:	d114      	bne.n	800365c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06e      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800363e:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 8003640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	4013      	ands	r3, r2
 8003648:	d108      	bne.n	800365c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e062      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	4013      	ands	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e05b      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	4393      	bics	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe fcc6 	bl	8002000 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003678:	e009      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367a:	f7fe fcc1 	bl	8002000 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <HAL_RCC_ClockConfig+0x1a4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e042      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	220c      	movs	r2, #12
 8003694:	401a      	ands	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ec      	bne.n	800367a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d211      	bcs.n	80036d2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4393      	bics	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_RCC_ClockConfig+0x19c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4013      	ands	r3, r2
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e020      	b.n	8003714 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2204      	movs	r2, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a11      	ldr	r2, [pc, #68]	@ (8003728 <HAL_RCC_ClockConfig+0x1a8>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036f0:	f000 f820 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036f4:	0001      	movs	r1, r0
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <HAL_RCC_ClockConfig+0x1a0>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	220f      	movs	r2, #15
 80036fe:	4013      	ands	r3, r2
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_RCC_ClockConfig+0x1ac>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	000a      	movs	r2, r1
 8003706:	40da      	lsrs	r2, r3
 8003708:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <HAL_RCC_ClockConfig+0x1b0>)
 800370a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800370c:	2003      	movs	r0, #3
 800370e:	f7fc ffa3 	bl	8000658 <HAL_InitTick>
  
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	00001388 	.word	0x00001388
 8003728:	fffff8ff 	.word	0xfffff8ff
 800372c:	080074f0 	.word	0x080074f0
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800374e:	4b2d      	ldr	r3, [pc, #180]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	220c      	movs	r2, #12
 8003758:	4013      	ands	r3, r2
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d046      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xb8>
 800375e:	d848      	bhi.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003760:	2b04      	cmp	r3, #4
 8003762:	d002      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x36>
 8003764:	2b08      	cmp	r3, #8
 8003766:	d003      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x3c>
 8003768:	e043      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800376a:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 800376c:	613b      	str	r3, [r7, #16]
      break;
 800376e:	e043      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	220f      	movs	r2, #15
 8003776:	4013      	ands	r3, r2
 8003778:	4a24      	ldr	r2, [pc, #144]	@ (800380c <HAL_RCC_GetSysClockFreq+0xd8>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800377e:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	220f      	movs	r2, #15
 8003784:	4013      	ands	r3, r2
 8003786:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	23c0      	movs	r3, #192	@ 0xc0
 8003790:	025b      	lsls	r3, r3, #9
 8003792:	401a      	ands	r2, r3
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	429a      	cmp	r2, r3
 800379a:	d109      	bne.n	80037b0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	481a      	ldr	r0, [pc, #104]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037a0:	f7fc fcb2 	bl	8000108 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4353      	muls	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e01a      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	23c0      	movs	r3, #192	@ 0xc0
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	401a      	ands	r2, r3
 80037b8:	23c0      	movs	r3, #192	@ 0xc0
 80037ba:	025b      	lsls	r3, r3, #9
 80037bc:	429a      	cmp	r2, r3
 80037be:	d109      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4814      	ldr	r0, [pc, #80]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xe0>)
 80037c4:	f7fc fca0 	bl	8000108 <__udivsi3>
 80037c8:	0003      	movs	r3, r0
 80037ca:	001a      	movs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4353      	muls	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	480c      	ldr	r0, [pc, #48]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037d8:	f7fc fc96 	bl	8000108 <__udivsi3>
 80037dc:	0003      	movs	r3, r0
 80037de:	001a      	movs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4353      	muls	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	613b      	str	r3, [r7, #16]
      break;
 80037ea:	e005      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xe0>)
 80037ee:	613b      	str	r3, [r7, #16]
      break;
 80037f0:	e002      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037f4:	613b      	str	r3, [r7, #16]
      break;
 80037f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037f8:	693b      	ldr	r3, [r7, #16]
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b006      	add	sp, #24
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	40021000 	.word	0x40021000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	08007a9c 	.word	0x08007a9c
 8003810:	08007aac 	.word	0x08007aac
 8003814:	02dc6c00 	.word	0x02dc6c00

08003818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800381c:	4b02      	ldr	r3, [pc, #8]	@ (8003828 <HAL_RCC_GetHCLKFreq+0x10>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000000 	.word	0x20000000

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003830:	f7ff fff2 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003834:	0001      	movs	r1, r0
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	2207      	movs	r2, #7
 800383e:	4013      	ands	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	40d9      	lsrs	r1, r3
 8003846:	000b      	movs	r3, r1
}    
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	40021000 	.word	0x40021000
 8003854:	08007500 	.word	0x08007500

08003858 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003868:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <HAL_RCC_GetClockConfig+0x4c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2203      	movs	r2, #3
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_GetClockConfig+0x4c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	22f0      	movs	r2, #240	@ 0xf0
 800387a:	401a      	ands	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003880:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <HAL_RCC_GetClockConfig+0x4c>)
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	23e0      	movs	r3, #224	@ 0xe0
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	401a      	ands	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_GetClockConfig+0x50>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	401a      	ands	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40022000 	.word	0x40022000

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	4013      	ands	r3, r2
 80038c6:	d100      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80038c8:	e08e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2017      	movs	r0, #23
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	055b      	lsls	r3, r3, #21
 80038da:	4013      	ands	r3, r2
 80038dc:	d110      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	4b6b      	ldr	r3, [pc, #428]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	0549      	lsls	r1, r1, #21
 80038e8:	430a      	orrs	r2, r1
 80038ea:	61da      	str	r2, [r3, #28]
 80038ec:	4b67      	ldr	r3, [pc, #412]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	055b      	lsls	r3, r3, #21
 80038f4:	4013      	ands	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d11a      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390c:	4b60      	ldr	r3, [pc, #384]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	0049      	lsls	r1, r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fe fb71 	bl	8002000 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fe fb6c 	bl	8002000 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0a6      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b56      	ldr	r3, [pc, #344]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d0f0      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003942:	4b52      	ldr	r3, [pc, #328]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	23c0      	movs	r3, #192	@ 0xc0
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d034      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	23c0      	movs	r3, #192	@ 0xc0
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4013      	ands	r3, r2
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d02c      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003964:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4a4a      	ldr	r2, [pc, #296]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	4b46      	ldr	r3, [pc, #280]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003974:	2180      	movs	r1, #128	@ 0x80
 8003976:	0249      	lsls	r1, r1, #9
 8003978:	430a      	orrs	r2, r1
 800397a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397c:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	4b42      	ldr	r3, [pc, #264]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003982:	4945      	ldr	r1, [pc, #276]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003984:	400a      	ands	r2, r1
 8003986:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fb33 	bl	8002000 <HAL_GetTick>
 800399a:	0003      	movs	r3, r0
 800399c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	e009      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fe fb2e 	bl	8002000 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	4a3c      	ldr	r2, [pc, #240]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e067      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	4b35      	ldr	r3, [pc, #212]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039be:	4b33      	ldr	r3, [pc, #204]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039d2:	2317      	movs	r3, #23
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039e2:	492f      	ldr	r1, [pc, #188]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2201      	movs	r2, #1
 80039ee:	4013      	ands	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	2203      	movs	r2, #3
 80039f8:	4393      	bics	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a02:	430a      	orrs	r2, r1
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a10:	4b1e      	ldr	r3, [pc, #120]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	02db      	lsls	r3, r3, #11
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	2210      	movs	r2, #16
 8003a54:	4393      	bics	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	4393      	bics	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b006      	add	sp, #24
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
 8003a94:	fffffcff 	.word	0xfffffcff
 8003a98:	fffeffff 	.word	0xfffeffff
 8003a9c:	00001388 	.word	0x00001388
 8003aa0:	efffffff 	.word	0xefffffff
 8003aa4:	fffcffff 	.word	0xfffcffff
 8003aa8:	fff3ffff 	.word	0xfff3ffff

08003aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0a8      	b.n	8003c10 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	2382      	movs	r3, #130	@ 0x82
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d009      	beq.n	8003ae6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	61da      	str	r2, [r3, #28]
 8003ad8:	e005      	b.n	8003ae6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	225d      	movs	r2, #93	@ 0x5d
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	225c      	movs	r2, #92	@ 0x5c
 8003afc:	2100      	movs	r1, #0
 8003afe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7fc fd10 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	225d      	movs	r2, #93	@ 0x5d
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2140      	movs	r1, #64	@ 0x40
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	23e0      	movs	r3, #224	@ 0xe0
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e002      	b.n	8003b38 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	23f0      	movs	r3, #240	@ 0xf0
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d008      	beq.n	8003b56 <HAL_SPI_Init+0xaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	23e0      	movs	r3, #224	@ 0xe0
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	2382      	movs	r3, #130	@ 0x82
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	2384      	movs	r3, #132	@ 0x84
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	400b      	ands	r3, r1
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2102      	movs	r1, #2
 8003b72:	400b      	ands	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6999      	ldr	r1, [r3, #24]
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	400b      	ands	r3, r1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2138      	movs	r1, #56	@ 0x38
 8003b92:	400b      	ands	r3, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	2180      	movs	r1, #128	@ 0x80
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	0011      	movs	r1, r2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	2204      	movs	r2, #4
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bcc:	2108      	movs	r1, #8
 8003bce:	400b      	ands	r3, r1
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68d9      	ldr	r1, [r3, #12]
 8003bd6:	23f0      	movs	r3, #240	@ 0xf0
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	400b      	ands	r3, r1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	0011      	movs	r1, r2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	2380      	movs	r3, #128	@ 0x80
 8003be4:	015b      	lsls	r3, r3, #5
 8003be6:	401a      	ands	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4907      	ldr	r1, [pc, #28]	@ (8003c18 <HAL_SPI_Init+0x16c>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	225d      	movs	r2, #93	@ 0x5d
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	fffff7ff 	.word	0xfffff7ff

08003c1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	1dbb      	adds	r3, r7, #6
 8003c2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c2c:	231f      	movs	r3, #31
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	225c      	movs	r2, #92	@ 0x5c
 8003c38:	5c9b      	ldrb	r3, [r3, r2]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Transmit+0x26>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e147      	b.n	8003ed2 <HAL_SPI_Transmit+0x2b6>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	225c      	movs	r2, #92	@ 0x5c
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fe f9d9 	bl	8002000 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c52:	2316      	movs	r3, #22
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	1dba      	adds	r2, r7, #6
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	225d      	movs	r2, #93	@ 0x5d
 8003c60:	5c9b      	ldrb	r3, [r3, r2]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d004      	beq.n	8003c72 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003c68:	231f      	movs	r3, #31
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c70:	e128      	b.n	8003ec4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_SPI_Transmit+0x64>
 8003c78:	1dbb      	adds	r3, r7, #6
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003c80:	231f      	movs	r3, #31
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c88:	e11c      	b.n	8003ec4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	225d      	movs	r2, #93	@ 0x5d
 8003c8e:	2103      	movs	r1, #3
 8003c90:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1dba      	adds	r2, r7, #6
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1dba      	adds	r2, r7, #6
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2244      	movs	r2, #68	@ 0x44
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2246      	movs	r2, #70	@ 0x46
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d110      	bne.n	8003cfe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2140      	movs	r1, #64	@ 0x40
 8003ce8:	438a      	bics	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2180      	movs	r1, #128	@ 0x80
 8003cf8:	01c9      	lsls	r1, r1, #7
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2240      	movs	r2, #64	@ 0x40
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b40      	cmp	r3, #64	@ 0x40
 8003d0a:	d007      	beq.n	8003d1c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2140      	movs	r1, #64	@ 0x40
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	23e0      	movs	r3, #224	@ 0xe0
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d952      	bls.n	8003dce <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_SPI_Transmit+0x11e>
 8003d30:	2316      	movs	r3, #22
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d143      	bne.n	8003dc2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d5e:	e030      	b.n	8003dc2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2202      	movs	r2, #2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d112      	bne.n	8003d94 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	881a      	ldrh	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	1c9a      	adds	r2, r3, #2
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d92:	e016      	b.n	8003dc2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d94:	f7fe f934 	bl	8002000 <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d802      	bhi.n	8003daa <HAL_SPI_Transmit+0x18e>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_SPI_Transmit+0x194>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003db0:	231f      	movs	r3, #31
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2203      	movs	r2, #3
 8003db6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	225d      	movs	r2, #93	@ 0x5d
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	5499      	strb	r1, [r3, r2]
          goto error;
 8003dc0:	e080      	b.n	8003ec4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1c9      	bne.n	8003d60 <HAL_SPI_Transmit+0x144>
 8003dcc:	e053      	b.n	8003e76 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_SPI_Transmit+0x1c4>
 8003dd6:	2316      	movs	r3, #22
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d145      	bne.n	8003e6c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003e06:	e031      	b.n	8003e6c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d113      	bne.n	8003e3e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3c:	e016      	b.n	8003e6c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3e:	f7fe f8df 	bl	8002000 <HAL_GetTick>
 8003e42:	0002      	movs	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d802      	bhi.n	8003e54 <HAL_SPI_Transmit+0x238>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x23e>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003e5a:	231f      	movs	r3, #31
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2203      	movs	r2, #3
 8003e60:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	225d      	movs	r2, #93	@ 0x5d
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e6a:	e02b      	b.n	8003ec4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1c8      	bne.n	8003e08 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f000 f95d 	bl	800413c <SPI_EndRxTxTransaction>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003eb2:	231f      	movs	r3, #31
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e003      	b.n	8003ec4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	225d      	movs	r2, #93	@ 0x5d
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	225c      	movs	r2, #92	@ 0x5c
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ecc:	231f      	movs	r3, #31
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	781b      	ldrb	r3, [r3, #0]
}
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b008      	add	sp, #32
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eec:	f7fe f888 	bl	8002000 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003efc:	f7fe f880 	bl	8002000 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	015b      	lsls	r3, r3, #5
 8003f0a:	0d1b      	lsrs	r3, r3, #20
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	4353      	muls	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	e058      	b.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	d055      	beq.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f1a:	f7fe f871 	bl	8002000 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d902      	bls.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d142      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	21e0      	movs	r1, #224	@ 0xe0
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	2382      	movs	r3, #130	@ 0x82
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d113      	bne.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d005      	beq.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2140      	movs	r1, #64	@ 0x40
 8003f70:	438a      	bics	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	019b      	lsls	r3, r3, #6
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d110      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	491a      	ldr	r1, [pc, #104]	@ (8003ff4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2180      	movs	r1, #128	@ 0x80
 8003f9c:	0189      	lsls	r1, r1, #6
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	225d      	movs	r2, #93	@ 0x5d
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	225c      	movs	r2, #92	@ 0x5c
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e017      	b.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	425a      	negs	r2, r3
 8003fd6:	4153      	adcs	r3, r2
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	001a      	movs	r2, r3
 8003fdc:	1dfb      	adds	r3, r7, #7
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d197      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b008      	add	sp, #32
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	ffffdfff 	.word	0xffffdfff

08003ff8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	@ 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004006:	2317      	movs	r3, #23
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800400e:	f7fd fff7 	bl	8002000 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	18d3      	adds	r3, r2, r3
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800401e:	f7fd ffef 	bl	8002000 <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800402e:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	0013      	movs	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	189b      	adds	r3, r3, r2
 8004038:	00da      	lsls	r2, r3, #3
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	0d1b      	lsrs	r3, r3, #20
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	4353      	muls	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004044:	e068      	b.n	8004118 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	23c0      	movs	r3, #192	@ 0xc0
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	429a      	cmp	r2, r3
 800404e:	d10a      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	2117      	movs	r1, #23
 800405e:	187b      	adds	r3, r7, r1
 8004060:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004062:	187b      	adds	r3, r7, r1
 8004064:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	d055      	beq.n	8004118 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406c:	f7fd ffc8 	bl	8002000 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004078:	429a      	cmp	r2, r3
 800407a:	d902      	bls.n	8004082 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d142      	bne.n	8004108 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	21e0      	movs	r1, #224	@ 0xe0
 800408e:	438a      	bics	r2, r1
 8004090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	2382      	movs	r3, #130	@ 0x82
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	429a      	cmp	r2, r3
 800409c:	d113      	bne.n	80040c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d005      	beq.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d107      	bne.n	80040c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2140      	movs	r1, #64	@ 0x40
 80040c2:	438a      	bics	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d110      	bne.n	80040f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4916      	ldr	r1, [pc, #88]	@ (8004138 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80040de:	400a      	ands	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2180      	movs	r1, #128	@ 0x80
 80040ee:	0189      	lsls	r1, r1, #6
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	225d      	movs	r2, #93	@ 0x5d
 80040f8:	2101      	movs	r1, #1
 80040fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	225c      	movs	r2, #92	@ 0x5c
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e010      	b.n	800412a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3b01      	subs	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d18e      	bne.n	8004046 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b00a      	add	sp, #40	@ 0x28
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	20000000 	.word	0x20000000
 8004138:	ffffdfff 	.word	0xffffdfff

0800413c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	23c0      	movs	r3, #192	@ 0xc0
 800414c:	0159      	lsls	r1, r3, #5
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	0013      	movs	r3, r2
 8004156:	2200      	movs	r2, #0
 8004158:	f7ff ff4e 	bl	8003ff8 <SPI_WaitFifoStateUntilTimeout>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d007      	beq.n	8004170 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004164:	2220      	movs	r2, #32
 8004166:	431a      	orrs	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e027      	b.n	80041c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	0013      	movs	r3, r2
 800417a:	2200      	movs	r2, #0
 800417c:	2180      	movs	r1, #128	@ 0x80
 800417e:	f7ff fead 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d007      	beq.n	8004196 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418a:	2220      	movs	r2, #32
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e014      	b.n	80041c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	23c0      	movs	r3, #192	@ 0xc0
 800419a:	00d9      	lsls	r1, r3, #3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	0013      	movs	r3, r2
 80041a4:	2200      	movs	r2, #0
 80041a6:	f7ff ff27 	bl	8003ff8 <SPI_WaitFifoStateUntilTimeout>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d007      	beq.n	80041be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	2220      	movs	r2, #32
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e000      	b.n	80041c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e042      	b.n	8004260 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223d      	movs	r2, #61	@ 0x3d
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	223c      	movs	r2, #60	@ 0x3c
 80041ea:	2100      	movs	r1, #0
 80041ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f839 	bl	8004268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	223d      	movs	r2, #61	@ 0x3d
 80041fa:	2102      	movs	r1, #2
 80041fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	0019      	movs	r1, r3
 8004208:	0010      	movs	r0, r2
 800420a:	f000 f995 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2246      	movs	r2, #70	@ 0x46
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223e      	movs	r2, #62	@ 0x3e
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	223f      	movs	r2, #63	@ 0x3f
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2240      	movs	r2, #64	@ 0x40
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2241      	movs	r2, #65	@ 0x41
 8004232:	2101      	movs	r1, #1
 8004234:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2242      	movs	r2, #66	@ 0x42
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2243      	movs	r2, #67	@ 0x43
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2244      	movs	r2, #68	@ 0x44
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2245      	movs	r2, #69	@ 0x45
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	223d      	movs	r2, #61	@ 0x3d
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b002      	add	sp, #8
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004270:	46c0      	nop			@ (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	223d      	movs	r2, #61	@ 0x3d
 8004284:	5c9b      	ldrb	r3, [r3, r2]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e03b      	b.n	8004308 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	223d      	movs	r2, #61	@ 0x3d
 8004294:	2102      	movs	r1, #2
 8004296:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <HAL_TIM_Base_Start_IT+0x98>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0x5a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	05db      	lsls	r3, r3, #23
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0x5a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <HAL_TIM_Base_Start_IT+0x9c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0x5a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <HAL_TIM_Base_Start_IT+0xa0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2207      	movs	r2, #7
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d010      	beq.n	8004306 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2101      	movs	r1, #1
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	e007      	b.n	8004306 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2101      	movs	r1, #1
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b004      	add	sp, #16
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40000400 	.word	0x40000400
 8004318:	40014000 	.word	0x40014000

0800431c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	d021      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2202      	movs	r2, #2
 8004340:	4013      	ands	r3, r2
 8004342:	d01d      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2203      	movs	r2, #3
 800434a:	4252      	negs	r2, r2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2203      	movs	r2, #3
 800435c:	4013      	ands	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0018      	movs	r0, r3
 8004364:	f000 f8d0 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 8004368:	e007      	b.n	800437a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f8c3 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f8cf 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2204      	movs	r2, #4
 8004384:	4013      	ands	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	d01e      	beq.n	80043ce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2205      	movs	r2, #5
 8004396:	4252      	negs	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	23c0      	movs	r3, #192	@ 0xc0
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 f8a9 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 80043b6:	e007      	b.n	80043c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 f89c 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 f8a8 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4013      	ands	r3, r2
 80043d4:	d021      	beq.n	800441a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2208      	movs	r2, #8
 80043da:	4013      	ands	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2209      	movs	r2, #9
 80043e4:	4252      	negs	r2, r2
 80043e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2204      	movs	r2, #4
 80043ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2203      	movs	r2, #3
 80043f6:	4013      	ands	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f883 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 8004402:	e007      	b.n	8004414 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f876 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f882 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2210      	movs	r2, #16
 800441e:	4013      	ands	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2210      	movs	r2, #16
 8004426:	4013      	ands	r3, r2
 8004428:	d01e      	beq.n	8004468 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2211      	movs	r2, #17
 8004430:	4252      	negs	r2, r2
 8004432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2208      	movs	r2, #8
 8004438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	23c0      	movs	r3, #192	@ 0xc0
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f85c 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 8004450:	e007      	b.n	8004462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f000 f84f 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f85b 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2201      	movs	r2, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d00c      	beq.n	800448a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	4013      	ands	r3, r2
 8004476:	d008      	beq.n	800448a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2202      	movs	r2, #2
 800447e:	4252      	negs	r2, r2
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f7fd fd7d 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	4013      	ands	r3, r2
 8004490:	d00c      	beq.n	80044ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2280      	movs	r2, #128	@ 0x80
 8004496:	4013      	ands	r3, r2
 8004498:	d008      	beq.n	80044ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2281      	movs	r2, #129	@ 0x81
 80044a0:	4252      	negs	r2, r2
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f000 f8dc 	bl	8004664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2240      	movs	r2, #64	@ 0x40
 80044b0:	4013      	ands	r3, r2
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2240      	movs	r2, #64	@ 0x40
 80044b8:	4013      	ands	r3, r2
 80044ba:	d008      	beq.n	80044ce <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2241      	movs	r2, #65	@ 0x41
 80044c2:	4252      	negs	r2, r2
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 f82d 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	4013      	ands	r3, r2
 80044dc:	d008      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2221      	movs	r2, #33	@ 0x21
 80044e4:	4252      	negs	r2, r2
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f8b2 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	46c0      	nop			@ (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b004      	add	sp, #16
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004510:	46c0      	nop			@ (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	b002      	add	sp, #8
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004520:	46c0      	nop			@ (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}

08004538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3b      	ldr	r2, [pc, #236]	@ (8004638 <TIM_Base_SetConfig+0x100>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d008      	beq.n	8004562 <TIM_Base_SetConfig+0x2a>
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	2380      	movs	r3, #128	@ 0x80
 8004554:	05db      	lsls	r3, r3, #23
 8004556:	429a      	cmp	r2, r3
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0x2a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a37      	ldr	r2, [pc, #220]	@ (800463c <TIM_Base_SetConfig+0x104>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2270      	movs	r2, #112	@ 0x70
 8004566:	4393      	bics	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a30      	ldr	r2, [pc, #192]	@ (8004638 <TIM_Base_SetConfig+0x100>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	05db      	lsls	r3, r3, #23
 8004582:	429a      	cmp	r2, r3
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <TIM_Base_SetConfig+0x104>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2b      	ldr	r2, [pc, #172]	@ (8004640 <TIM_Base_SetConfig+0x108>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2a      	ldr	r2, [pc, #168]	@ (8004644 <TIM_Base_SetConfig+0x10c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a29      	ldr	r2, [pc, #164]	@ (8004648 <TIM_Base_SetConfig+0x110>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x76>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a28      	ldr	r2, [pc, #160]	@ (800464c <TIM_Base_SetConfig+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <TIM_Base_SetConfig+0x118>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2280      	movs	r2, #128	@ 0x80
 80045c4:	4393      	bics	r3, r2
 80045c6:	001a      	movs	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a13      	ldr	r2, [pc, #76]	@ (8004638 <TIM_Base_SetConfig+0x100>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_Base_SetConfig+0xce>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <TIM_Base_SetConfig+0x10c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_Base_SetConfig+0xce>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <TIM_Base_SetConfig+0x110>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_Base_SetConfig+0xce>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a12      	ldr	r2, [pc, #72]	@ (800464c <TIM_Base_SetConfig+0x114>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d103      	bne.n	800460e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2201      	movs	r2, #1
 8004626:	4393      	bics	r3, r2
 8004628:	001a      	movs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]
  }
}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40002000 	.word	0x40002000
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	fffffcff 	.word	0xfffffcff

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800466c:	46c0      	nop			@ (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b002      	add	sp, #8
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e044      	b.n	8004710 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2278      	movs	r2, #120	@ 0x78
 8004692:	2100      	movs	r1, #0
 8004694:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f7fb ff91 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	@ 0x24
 80046a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	438a      	bics	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 fa14 	bl	8004aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f828 	bl	800471c <UART_SetConfig>
 80046cc:	0003      	movs	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01c      	b.n	8004710 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	490d      	ldr	r1, [pc, #52]	@ (8004718 <HAL_UART_Init+0xa4>)
 80046e2:	400a      	ands	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	212a      	movs	r1, #42	@ 0x2a
 80046f2:	438a      	bics	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2101      	movs	r1, #1
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 faa3 	bl	8004c54 <UART_CheckIdleState>
 800470e:	0003      	movs	r3, r0
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	ffffb7ff 	.word	0xffffb7ff

0800471c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004724:	231e      	movs	r3, #30
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4abe      	ldr	r2, [pc, #760]	@ (8004a44 <UART_SetConfig+0x328>)
 800474c:	4013      	ands	r3, r2
 800474e:	0019      	movs	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4ab9      	ldr	r2, [pc, #740]	@ (8004a48 <UART_SetConfig+0x32c>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4ab0      	ldr	r2, [pc, #704]	@ (8004a4c <UART_SetConfig+0x330>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4aac      	ldr	r2, [pc, #688]	@ (8004a50 <UART_SetConfig+0x334>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d127      	bne.n	80047f2 <UART_SetConfig+0xd6>
 80047a2:	4bac      	ldr	r3, [pc, #688]	@ (8004a54 <UART_SetConfig+0x338>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	2203      	movs	r2, #3
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d00d      	beq.n	80047ca <UART_SetConfig+0xae>
 80047ae:	d81b      	bhi.n	80047e8 <UART_SetConfig+0xcc>
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d014      	beq.n	80047de <UART_SetConfig+0xc2>
 80047b4:	d818      	bhi.n	80047e8 <UART_SetConfig+0xcc>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <UART_SetConfig+0xa4>
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d00a      	beq.n	80047d4 <UART_SetConfig+0xb8>
 80047be:	e013      	b.n	80047e8 <UART_SetConfig+0xcc>
 80047c0:	231f      	movs	r3, #31
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e0bd      	b.n	8004946 <UART_SetConfig+0x22a>
 80047ca:	231f      	movs	r3, #31
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2202      	movs	r2, #2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e0b8      	b.n	8004946 <UART_SetConfig+0x22a>
 80047d4:	231f      	movs	r3, #31
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2204      	movs	r2, #4
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e0b3      	b.n	8004946 <UART_SetConfig+0x22a>
 80047de:	231f      	movs	r3, #31
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2208      	movs	r2, #8
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e0ae      	b.n	8004946 <UART_SetConfig+0x22a>
 80047e8:	231f      	movs	r3, #31
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2210      	movs	r2, #16
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e0a9      	b.n	8004946 <UART_SetConfig+0x22a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a98      	ldr	r2, [pc, #608]	@ (8004a58 <UART_SetConfig+0x33c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d134      	bne.n	8004866 <UART_SetConfig+0x14a>
 80047fc:	4b95      	ldr	r3, [pc, #596]	@ (8004a54 <UART_SetConfig+0x338>)
 80047fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004800:	23c0      	movs	r3, #192	@ 0xc0
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	4013      	ands	r3, r2
 8004806:	22c0      	movs	r2, #192	@ 0xc0
 8004808:	0292      	lsls	r2, r2, #10
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <UART_SetConfig+0x122>
 800480e:	22c0      	movs	r2, #192	@ 0xc0
 8004810:	0292      	lsls	r2, r2, #10
 8004812:	4293      	cmp	r3, r2
 8004814:	d822      	bhi.n	800485c <UART_SetConfig+0x140>
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	0292      	lsls	r2, r2, #10
 800481a:	4293      	cmp	r3, r2
 800481c:	d019      	beq.n	8004852 <UART_SetConfig+0x136>
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	0292      	lsls	r2, r2, #10
 8004822:	4293      	cmp	r3, r2
 8004824:	d81a      	bhi.n	800485c <UART_SetConfig+0x140>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x118>
 800482a:	2280      	movs	r2, #128	@ 0x80
 800482c:	0252      	lsls	r2, r2, #9
 800482e:	4293      	cmp	r3, r2
 8004830:	d00a      	beq.n	8004848 <UART_SetConfig+0x12c>
 8004832:	e013      	b.n	800485c <UART_SetConfig+0x140>
 8004834:	231f      	movs	r3, #31
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e083      	b.n	8004946 <UART_SetConfig+0x22a>
 800483e:	231f      	movs	r3, #31
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2202      	movs	r2, #2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e07e      	b.n	8004946 <UART_SetConfig+0x22a>
 8004848:	231f      	movs	r3, #31
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2204      	movs	r2, #4
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e079      	b.n	8004946 <UART_SetConfig+0x22a>
 8004852:	231f      	movs	r3, #31
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2208      	movs	r2, #8
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e074      	b.n	8004946 <UART_SetConfig+0x22a>
 800485c:	231f      	movs	r3, #31
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2210      	movs	r2, #16
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e06f      	b.n	8004946 <UART_SetConfig+0x22a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a5c <UART_SetConfig+0x340>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d134      	bne.n	80048da <UART_SetConfig+0x1be>
 8004870:	4b78      	ldr	r3, [pc, #480]	@ (8004a54 <UART_SetConfig+0x338>)
 8004872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004874:	23c0      	movs	r3, #192	@ 0xc0
 8004876:	031b      	lsls	r3, r3, #12
 8004878:	4013      	ands	r3, r2
 800487a:	22c0      	movs	r2, #192	@ 0xc0
 800487c:	0312      	lsls	r2, r2, #12
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <UART_SetConfig+0x196>
 8004882:	22c0      	movs	r2, #192	@ 0xc0
 8004884:	0312      	lsls	r2, r2, #12
 8004886:	4293      	cmp	r3, r2
 8004888:	d822      	bhi.n	80048d0 <UART_SetConfig+0x1b4>
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	0312      	lsls	r2, r2, #12
 800488e:	4293      	cmp	r3, r2
 8004890:	d019      	beq.n	80048c6 <UART_SetConfig+0x1aa>
 8004892:	2280      	movs	r2, #128	@ 0x80
 8004894:	0312      	lsls	r2, r2, #12
 8004896:	4293      	cmp	r3, r2
 8004898:	d81a      	bhi.n	80048d0 <UART_SetConfig+0x1b4>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <UART_SetConfig+0x18c>
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	02d2      	lsls	r2, r2, #11
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00a      	beq.n	80048bc <UART_SetConfig+0x1a0>
 80048a6:	e013      	b.n	80048d0 <UART_SetConfig+0x1b4>
 80048a8:	231f      	movs	r3, #31
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e049      	b.n	8004946 <UART_SetConfig+0x22a>
 80048b2:	231f      	movs	r3, #31
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2202      	movs	r2, #2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e044      	b.n	8004946 <UART_SetConfig+0x22a>
 80048bc:	231f      	movs	r3, #31
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2204      	movs	r2, #4
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e03f      	b.n	8004946 <UART_SetConfig+0x22a>
 80048c6:	231f      	movs	r3, #31
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2208      	movs	r2, #8
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e03a      	b.n	8004946 <UART_SetConfig+0x22a>
 80048d0:	231f      	movs	r3, #31
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2210      	movs	r2, #16
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e035      	b.n	8004946 <UART_SetConfig+0x22a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a60      	ldr	r2, [pc, #384]	@ (8004a60 <UART_SetConfig+0x344>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d104      	bne.n	80048ee <UART_SetConfig+0x1d2>
 80048e4:	231f      	movs	r3, #31
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e02b      	b.n	8004946 <UART_SetConfig+0x22a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a64 <UART_SetConfig+0x348>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d104      	bne.n	8004902 <UART_SetConfig+0x1e6>
 80048f8:	231f      	movs	r3, #31
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e021      	b.n	8004946 <UART_SetConfig+0x22a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a58      	ldr	r2, [pc, #352]	@ (8004a68 <UART_SetConfig+0x34c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d104      	bne.n	8004916 <UART_SetConfig+0x1fa>
 800490c:	231f      	movs	r3, #31
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e017      	b.n	8004946 <UART_SetConfig+0x22a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a54      	ldr	r2, [pc, #336]	@ (8004a6c <UART_SetConfig+0x350>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d104      	bne.n	800492a <UART_SetConfig+0x20e>
 8004920:	231f      	movs	r3, #31
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x22a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a50      	ldr	r2, [pc, #320]	@ (8004a70 <UART_SetConfig+0x354>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d104      	bne.n	800493e <UART_SetConfig+0x222>
 8004934:	231f      	movs	r3, #31
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e003      	b.n	8004946 <UART_SetConfig+0x22a>
 800493e:	231f      	movs	r3, #31
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	2210      	movs	r2, #16
 8004944:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	429a      	cmp	r2, r3
 8004950:	d15c      	bne.n	8004a0c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8004952:	231f      	movs	r3, #31
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d015      	beq.n	8004988 <UART_SetConfig+0x26c>
 800495c:	dc18      	bgt.n	8004990 <UART_SetConfig+0x274>
 800495e:	2b04      	cmp	r3, #4
 8004960:	d00d      	beq.n	800497e <UART_SetConfig+0x262>
 8004962:	dc15      	bgt.n	8004990 <UART_SetConfig+0x274>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <UART_SetConfig+0x252>
 8004968:	2b02      	cmp	r3, #2
 800496a:	d005      	beq.n	8004978 <UART_SetConfig+0x25c>
 800496c:	e010      	b.n	8004990 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496e:	f7fe ff5d 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8004972:	0003      	movs	r3, r0
 8004974:	61bb      	str	r3, [r7, #24]
        break;
 8004976:	e012      	b.n	800499e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <UART_SetConfig+0x358>)
 800497a:	61bb      	str	r3, [r7, #24]
        break;
 800497c:	e00f      	b.n	800499e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fed9 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8004982:	0003      	movs	r3, r0
 8004984:	61bb      	str	r3, [r7, #24]
        break;
 8004986:	e00a      	b.n	800499e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	61bb      	str	r3, [r7, #24]
        break;
 800498e:	e006      	b.n	800499e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004994:	231e      	movs	r3, #30
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
        break;
 800499c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d100      	bne.n	80049a6 <UART_SetConfig+0x28a>
 80049a4:	e095      	b.n	8004ad2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	005a      	lsls	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	18d2      	adds	r2, r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0019      	movs	r1, r3
 80049b8:	0010      	movs	r0, r2
 80049ba:	f7fb fba5 	bl	8000108 <__udivsi3>
 80049be:	0003      	movs	r3, r0
 80049c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d91c      	bls.n	8004a02 <UART_SetConfig+0x2e6>
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d217      	bcs.n	8004a02 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	200e      	movs	r0, #14
 80049d8:	183b      	adds	r3, r7, r0
 80049da:	210f      	movs	r1, #15
 80049dc:	438a      	bics	r2, r1
 80049de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2207      	movs	r2, #7
 80049e8:	4013      	ands	r3, r2
 80049ea:	b299      	uxth	r1, r3
 80049ec:	183b      	adds	r3, r7, r0
 80049ee:	183a      	adds	r2, r7, r0
 80049f0:	8812      	ldrh	r2, [r2, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	183a      	adds	r2, r7, r0
 80049fc:	8812      	ldrh	r2, [r2, #0]
 80049fe:	60da      	str	r2, [r3, #12]
 8004a00:	e067      	b.n	8004ad2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004a02:	231e      	movs	r3, #30
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e062      	b.n	8004ad2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a0c:	231f      	movs	r3, #31
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d030      	beq.n	8004a78 <UART_SetConfig+0x35c>
 8004a16:	dc33      	bgt.n	8004a80 <UART_SetConfig+0x364>
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d00d      	beq.n	8004a38 <UART_SetConfig+0x31c>
 8004a1c:	dc30      	bgt.n	8004a80 <UART_SetConfig+0x364>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <UART_SetConfig+0x30c>
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d005      	beq.n	8004a32 <UART_SetConfig+0x316>
 8004a26:	e02b      	b.n	8004a80 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe ff00 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	61bb      	str	r3, [r7, #24]
        break;
 8004a30:	e02d      	b.n	8004a8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <UART_SetConfig+0x358>)
 8004a34:	61bb      	str	r3, [r7, #24]
        break;
 8004a36:	e02a      	b.n	8004a8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a38:	f7fe fe7c 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e025      	b.n	8004a8e <UART_SetConfig+0x372>
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	efff69f3 	.word	0xefff69f3
 8004a48:	ffffcfff 	.word	0xffffcfff
 8004a4c:	fffff4ff 	.word	0xfffff4ff
 8004a50:	40013800 	.word	0x40013800
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40004400 	.word	0x40004400
 8004a5c:	40004800 	.word	0x40004800
 8004a60:	40004c00 	.word	0x40004c00
 8004a64:	40005000 	.word	0x40005000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	40011800 	.word	0x40011800
 8004a70:	40011c00 	.word	0x40011c00
 8004a74:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	61bb      	str	r3, [r7, #24]
        break;
 8004a7e:	e006      	b.n	8004a8e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a84:	231e      	movs	r3, #30
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
        break;
 8004a8c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01e      	beq.n	8004ad2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	085a      	lsrs	r2, r3, #1
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	18d2      	adds	r2, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	0010      	movs	r0, r2
 8004aa6:	f7fb fb2f 	bl	8000108 <__udivsi3>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d90a      	bls.n	8004aca <UART_SetConfig+0x3ae>
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	2380      	movs	r3, #128	@ 0x80
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d205      	bcs.n	8004aca <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e003      	b.n	8004ad2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004aca:	231e      	movs	r3, #30
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ade:	231e      	movs	r3, #30
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b008      	add	sp, #32
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	2208      	movs	r2, #8
 8004afa:	4013      	ands	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a4a      	ldr	r2, [pc, #296]	@ (8004c30 <UART_AdvFeatureConfig+0x144>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4a43      	ldr	r2, [pc, #268]	@ (8004c34 <UART_AdvFeatureConfig+0x148>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a3b      	ldr	r2, [pc, #236]	@ (8004c38 <UART_AdvFeatureConfig+0x14c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	2204      	movs	r2, #4
 8004b60:	4013      	ands	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a34      	ldr	r2, [pc, #208]	@ (8004c3c <UART_AdvFeatureConfig+0x150>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	2210      	movs	r2, #16
 8004b82:	4013      	ands	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c40 <UART_AdvFeatureConfig+0x154>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4a25      	ldr	r2, [pc, #148]	@ (8004c44 <UART_AdvFeatureConfig+0x158>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	2240      	movs	r2, #64	@ 0x40
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <UART_AdvFeatureConfig+0x15c>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	035b      	lsls	r3, r3, #13
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10b      	bne.n	8004c06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a15      	ldr	r2, [pc, #84]	@ (8004c4c <UART_AdvFeatureConfig+0x160>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	2280      	movs	r2, #128	@ 0x80
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <UART_AdvFeatureConfig+0x164>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	ffff7fff 	.word	0xffff7fff
 8004c34:	fffdffff 	.word	0xfffdffff
 8004c38:	fffeffff 	.word	0xfffeffff
 8004c3c:	fffbffff 	.word	0xfffbffff
 8004c40:	ffffefff 	.word	0xffffefff
 8004c44:	ffffdfff 	.word	0xffffdfff
 8004c48:	ffefffff 	.word	0xffefffff
 8004c4c:	ff9fffff 	.word	0xff9fffff
 8004c50:	fff7ffff 	.word	0xfff7ffff

08004c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b092      	sub	sp, #72	@ 0x48
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2284      	movs	r2, #132	@ 0x84
 8004c60:	2100      	movs	r1, #0
 8004c62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c64:	f7fd f9cc 	bl	8002000 <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2208      	movs	r2, #8
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d12c      	bne.n	8004cd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7c:	2280      	movs	r2, #128	@ 0x80
 8004c7e:	0391      	lsls	r1, r2, #14
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4a46      	ldr	r2, [pc, #280]	@ (8004d9c <UART_CheckIdleState+0x148>)
 8004c84:	9200      	str	r2, [sp, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f000 f88c 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d021      	beq.n	8004cd4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c90:	f3ef 8310 	mrs	r3, PRIMASK
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2180      	movs	r1, #128	@ 0x80
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2278      	movs	r2, #120	@ 0x78
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e05f      	b.n	8004d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d146      	bne.n	8004d70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce4:	2280      	movs	r2, #128	@ 0x80
 8004ce6:	03d1      	lsls	r1, r2, #15
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	@ (8004d9c <UART_CheckIdleState+0x148>)
 8004cec:	9200      	str	r2, [sp, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f000 f858 	bl	8004da4 <UART_WaitOnFlagUntilTimeout>
 8004cf4:	1e03      	subs	r3, r0, #0
 8004cf6:	d03b      	beq.n	8004d70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d02:	2301      	movs	r3, #1
 8004d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f383 8810 	msr	PRIMASK, r3
}
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4921      	ldr	r1, [pc, #132]	@ (8004da0 <UART_CheckIdleState+0x14c>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d34:	2301      	movs	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	2120      	movs	r1, #32
 8004d62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2278      	movs	r2, #120	@ 0x78
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e011      	b.n	8004d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	2120      	movs	r1, #32
 8004d7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2278      	movs	r2, #120	@ 0x78
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	0018      	movs	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b010      	add	sp, #64	@ 0x40
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	01ffffff 	.word	0x01ffffff
 8004da0:	fffffedf 	.word	0xfffffedf

08004da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db4:	e051      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	3301      	adds	r3, #1
 8004dba:	d04e      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbc:	f7fd f920 	bl	8002000 <HAL_GetTick>
 8004dc0:	0002      	movs	r2, r0
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e051      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	4013      	ands	r3, r2
 8004de0:	d03b      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b80      	cmp	r3, #128	@ 0x80
 8004de6:	d038      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b40      	cmp	r3, #64	@ 0x40
 8004dec:	d035      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2208      	movs	r2, #8
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d111      	bne.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2208      	movs	r2, #8
 8004e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 f83c 	bl	8004e84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2284      	movs	r2, #132	@ 0x84
 8004e10:	2108      	movs	r1, #8
 8004e12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2278      	movs	r2, #120	@ 0x78
 8004e18:	2100      	movs	r1, #0
 8004e1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e02c      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	2380      	movs	r3, #128	@ 0x80
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d112      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2280      	movs	r2, #128	@ 0x80
 8004e3a:	0112      	lsls	r2, r2, #4
 8004e3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 f81f 	bl	8004e84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2284      	movs	r2, #132	@ 0x84
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2278      	movs	r2, #120	@ 0x78
 8004e52:	2100      	movs	r1, #0
 8004e54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00f      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	425a      	negs	r2, r3
 8004e6a:	4153      	adcs	r3, r2
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	001a      	movs	r2, r3
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d09e      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b004      	add	sp, #16
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08e      	sub	sp, #56	@ 0x38
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e90:	617b      	str	r3, [r7, #20]
  return(result);
 8004e92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e96:	2301      	movs	r3, #1
 8004e98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4926      	ldr	r1, [pc, #152]	@ (8004f48 <UART_EndRxTransfer+0xc4>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec8:	2301      	movs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2101      	movs	r1, #1
 8004ee0:	438a      	bics	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	f383 8810 	msr	PRIMASK, r3
}
 8004eee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d118      	bne.n	8004f2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004efe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f02:	2301      	movs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2110      	movs	r1, #16
 8004f1a:	438a      	bics	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2280      	movs	r2, #128	@ 0x80
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b00e      	add	sp, #56	@ 0x38
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	fffffedf 	.word	0xfffffedf

08004f4c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f52:	f3ef 8305 	mrs	r3, IPSR
 8004f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f62:	607b      	str	r3, [r7, #4]
  return(result);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <osKernelInitialize+0x2e>
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <osKernelInitialize+0x54>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d103      	bne.n	8004f7a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004f72:	2306      	movs	r3, #6
 8004f74:	425b      	negs	r3, r3
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e00c      	b.n	8004f94 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f7a:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <osKernelInitialize+0x54>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <osKernelInitialize+0x54>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e002      	b.n	8004f94 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	425b      	negs	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b004      	add	sp, #16
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	200009f4 	.word	0x200009f4

08004fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004faa:	f3ef 8305 	mrs	r3, IPSR
 8004fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	607b      	str	r3, [r7, #4]
  return(result);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <osKernelStart+0x2e>
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <osKernelStart+0x58>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d103      	bne.n	8004fd2 <osKernelStart+0x2e>
    stat = osErrorISR;
 8004fca:	2306      	movs	r3, #6
 8004fcc:	425b      	negs	r3, r3
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e00e      	b.n	8004ff0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <osKernelStart+0x58>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004fda:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <osKernelStart+0x58>)
 8004fdc:	2202      	movs	r2, #2
 8004fde:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004fe0:	f000 ff78 	bl	8005ed4 <vTaskStartScheduler>
      stat = osOK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e002      	b.n	8004ff0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004fea:	2301      	movs	r3, #1
 8004fec:	425b      	negs	r3, r3
 8004fee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b004      	add	sp, #16
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	200009f4 	.word	0x200009f4

08005000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b090      	sub	sp, #64	@ 0x40
 8005004:	af04      	add	r7, sp, #16
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005010:	f3ef 8305 	mrs	r3, IPSR
 8005014:	61fb      	str	r3, [r7, #28]
  return(result);
 8005016:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005018:	2b00      	cmp	r3, #0
 800501a:	d000      	beq.n	800501e <osThreadNew+0x1e>
 800501c:	e090      	b.n	8005140 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	61bb      	str	r3, [r7, #24]
  return(result);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <osThreadNew+0x34>
 800502a:	4b48      	ldr	r3, [pc, #288]	@ (800514c <osThreadNew+0x14c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d100      	bne.n	8005034 <osThreadNew+0x34>
 8005032:	e085      	b.n	8005140 <osThreadNew+0x140>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <osThreadNew+0x3c>
 800503a:	e081      	b.n	8005140 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005040:	2318      	movs	r3, #24
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24

    empty = '\0';
 8005044:	2117      	movs	r1, #23
 8005046:	187b      	adds	r3, r7, r1
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800504c:	187b      	adds	r3, r7, r1
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem   = -1;
 8005050:	2301      	movs	r3, #1
 8005052:	425b      	negs	r3, r3
 8005054:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d044      	beq.n	80050e6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <osThreadNew+0x6a>
        name = attr->name;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <osThreadNew+0x8e>
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	2b38      	cmp	r3, #56	@ 0x38
 8005082:	d804      	bhi.n	800508e <osThreadNew+0x8e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	4013      	ands	r3, r2
 800508c:	d001      	beq.n	8005092 <osThreadNew+0x92>
        return (NULL);
 800508e:	2300      	movs	r3, #0
 8005090:	e057      	b.n	8005142 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00e      	beq.n	80050c8 <osThreadNew+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80050b0:	d90a      	bls.n	80050c8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <osThreadNew+0xc8>
        mem = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	e010      	b.n	80050ea <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10c      	bne.n	80050ea <osThreadNew+0xea>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d108      	bne.n	80050ea <osThreadNew+0xea>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <osThreadNew+0xea>
          mem = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	e001      	b.n	80050ea <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d112      	bne.n	8005116 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050f8:	68bd      	ldr	r5, [r7, #8]
 80050fa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80050fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	9302      	str	r3, [sp, #8]
 8005102:	9201      	str	r2, [sp, #4]
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	002b      	movs	r3, r5
 800510a:	0022      	movs	r2, r4
 800510c:	f000 fd47 	bl	8005b9e <xTaskCreateStatic>
 8005110:	0003      	movs	r3, r0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e014      	b.n	8005140 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d111      	bne.n	8005140 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	b29a      	uxth	r2, r3
 8005120:	68bc      	ldr	r4, [r7, #8]
 8005122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	2310      	movs	r3, #16
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	0023      	movs	r3, r4
 8005132:	f000 fd7a 	bl	8005c2a <xTaskCreate>
 8005136:	0003      	movs	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <osThreadNew+0x140>
          hTask = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b00c      	add	sp, #48	@ 0x30
 8005148:	bdb0      	pop	{r4, r5, r7, pc}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	200009f4 	.word	0x200009f4

08005150 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005158:	f3ef 8305 	mrs	r3, IPSR
 800515c:	613b      	str	r3, [r7, #16]
  return(result);
 800515e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005164:	f3ef 8310 	mrs	r3, PRIMASK
 8005168:	60fb      	str	r3, [r7, #12]
  return(result);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <osDelay+0x30>
 8005170:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <osDelay+0x4c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d103      	bne.n	8005180 <osDelay+0x30>
    stat = osErrorISR;
 8005178:	2306      	movs	r3, #6
 800517a:	425b      	negs	r3, r3
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e008      	b.n	8005192 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <osDelay+0x42>
      vTaskDelay(ticks);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fe7b 	bl	8005e88 <vTaskDelay>
    }
  }

  return (stat);
 8005192:	697b      	ldr	r3, [r7, #20]
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b006      	add	sp, #24
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200009f4 	.word	0x200009f4

080051a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a06      	ldr	r2, [pc, #24]	@ (80051c8 <vApplicationGetIdleTaskMemory+0x28>)
 80051b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a05      	ldr	r2, [pc, #20]	@ (80051cc <vApplicationGetIdleTaskMemory+0x2c>)
 80051b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2280      	movs	r2, #128	@ 0x80
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b004      	add	sp, #16
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	200009f8 	.word	0x200009f8
 80051cc:	20000a54 	.word	0x20000a54

080051d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a06      	ldr	r2, [pc, #24]	@ (80051f8 <vApplicationGetTimerTaskMemory+0x28>)
 80051e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a05      	ldr	r2, [pc, #20]	@ (80051fc <vApplicationGetTimerTaskMemory+0x2c>)
 80051e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2280      	movs	r2, #128	@ 0x80
 80051ec:	0052      	lsls	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b004      	add	sp, #16
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000c54 	.word	0x20000c54
 80051fc:	20000cb0 	.word	0x20000cb0

08005200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3308      	adds	r3, #8
 800520c:	001a      	movs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	4252      	negs	r2, r2
 8005218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3308      	adds	r3, #8
 800521e:	001a      	movs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3308      	adds	r3, #8
 8005228:	001a      	movs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	46bd      	mov	sp, r7
 800524e:	b002      	add	sp, #8
 8005250:	bd80      	pop	{r7, pc}

08005252 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}

08005296 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3301      	adds	r3, #1
 80052aa:	d103      	bne.n	80052b4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e00c      	b.n	80052ce <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3308      	adds	r3, #8
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e002      	b.n	80052c2 <vListInsert+0x2c>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d2f6      	bcs.n	80052bc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b004      	add	sp, #16
 8005300:	bd80      	pop	{r7, pc}

08005302 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6892      	ldr	r2, [r2, #8]
 8005318:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6852      	ldr	r2, [r2, #4]
 8005322:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d103      	bne.n	8005336 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b004      	add	sp, #16
 8005350:	bd80      	pop	{r7, pc}

08005352 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericReset+0x1a>
 8005366:	b672      	cpsid	i
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	e7fd      	b.n	8005368 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800536c:	f001 fdb8 	bl	8006ee0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	434b      	muls	r3, r1
 800537e:	18d2      	adds	r2, r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539a:	1e59      	subs	r1, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	434b      	muls	r3, r1
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2244      	movs	r2, #68	@ 0x44
 80053ac:	21ff      	movs	r1, #255	@ 0xff
 80053ae:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2245      	movs	r2, #69	@ 0x45
 80053b4:	21ff      	movs	r1, #255	@ 0xff
 80053b6:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <xQueueGenericReset+0x80>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <xQueueGenericReset+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3310      	adds	r3, #16
 80053ca:	0018      	movs	r0, r3
 80053cc:	f000 ffa6 	bl	800631c <xTaskRemoveFromEventList>
 80053d0:	e009      	b.n	80053e6 <xQueueGenericReset+0x94>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3310      	adds	r3, #16
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff ff12 	bl	8005200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3324      	adds	r3, #36	@ 0x24
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7ff ff0d 	bl	8005200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053e6:	f001 fd8d 	bl	8006f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053ea:	2301      	movs	r3, #1
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b089      	sub	sp, #36	@ 0x24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericCreateStatic+0x1a>
 8005408:	b672      	cpsid	i
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	e7fd      	b.n	800540a <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <xQueueGenericCreateStatic+0x26>
 8005414:	b672      	cpsid	i
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	e7fd      	b.n	8005416 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <xQueueGenericCreateStatic+0x32>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <xQueueGenericCreateStatic+0x36>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericCreateStatic+0x38>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <xQueueGenericCreateStatic+0x42>
 8005430:	b672      	cpsid	i
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	e7fd      	b.n	8005432 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <xQueueGenericCreateStatic+0x4e>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <xQueueGenericCreateStatic+0x52>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <xQueueGenericCreateStatic+0x54>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <xQueueGenericCreateStatic+0x5e>
 800544c:	b672      	cpsid	i
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	e7fd      	b.n	800544e <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005452:	2350      	movs	r3, #80	@ 0x50
 8005454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b50      	cmp	r3, #80	@ 0x50
 800545a:	d002      	beq.n	8005462 <xQueueGenericCreateStatic+0x6e>
 800545c:	b672      	cpsid	i
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	e7fd      	b.n	800545e <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2246      	movs	r2, #70	@ 0x46
 8005470:	2101      	movs	r1, #1
 8005472:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005474:	2328      	movs	r3, #40	@ 0x28
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	781c      	ldrb	r4, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	0023      	movs	r3, r4
 8005486:	f000 f805 	bl	8005494 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800548a:	697b      	ldr	r3, [r7, #20]
	}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b007      	add	sp, #28
 8005492:	bd90      	pop	{r4, r7, pc}

08005494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	001a      	movs	r2, r3
 80054a2:	1cfb      	adds	r3, r7, #3
 80054a4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e002      	b.n	80054ba <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2101      	movs	r1, #1
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7ff ff41 	bl	8005352 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	1cfa      	adds	r2, r7, #3
 80054d4:	214c      	movs	r1, #76	@ 0x4c
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	b004      	add	sp, #16
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08a      	sub	sp, #40	@ 0x28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <xQueueGenericSend+0x22>
 80054fe:	b672      	cpsid	i
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	e7fd      	b.n	8005500 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <xQueueGenericSend+0x30>
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueGenericSend+0x34>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericSend+0x36>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueGenericSend+0x40>
 800551c:	b672      	cpsid	i
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	e7fd      	b.n	800551e <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d103      	bne.n	8005530 <xQueueGenericSend+0x4e>
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <xQueueGenericSend+0x52>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <xQueueGenericSend+0x54>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <xQueueGenericSend+0x5e>
 800553a:	b672      	cpsid	i
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	e7fd      	b.n	800553c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005540:	f001 f884 	bl	800664c <xTaskGetSchedulerState>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d102      	bne.n	800554e <xQueueGenericSend+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <xQueueGenericSend+0x70>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <xQueueGenericSend+0x72>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <xQueueGenericSend+0x7c>
 8005558:	b672      	cpsid	i
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	e7fd      	b.n	800555a <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800555e:	f001 fcbf 	bl	8006ee0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <xQueueGenericSend+0x92>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d114      	bne.n	800559e <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	0018      	movs	r0, r3
 800557c:	f000 f997 	bl	80058ae <prvCopyDataToQueue>
 8005580:	0003      	movs	r3, r0
 8005582:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <xQueueGenericSend+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	3324      	adds	r3, #36	@ 0x24
 8005590:	0018      	movs	r0, r3
 8005592:	f000 fec3 	bl	800631c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005596:	f001 fcb5 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 800559a:	2301      	movs	r3, #1
 800559c:	e05b      	b.n	8005656 <xQueueGenericSend+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d103      	bne.n	80055ac <xQueueGenericSend+0xca>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055a4:	f001 fcae 	bl	8006f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e054      	b.n	8005656 <xQueueGenericSend+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055b2:	2314      	movs	r3, #20
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 ff0e 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055bc:	2301      	movs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055c0:	f001 fca0 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055c4:	f000 fcdc 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055c8:	f001 fc8a 	bl	8006ee0 <vPortEnterCritical>
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2244      	movs	r2, #68	@ 0x44
 80055d0:	5c9b      	ldrb	r3, [r3, r2]
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	d103      	bne.n	80055e0 <xQueueGenericSend+0xfe>
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2244      	movs	r2, #68	@ 0x44
 80055dc:	2100      	movs	r1, #0
 80055de:	5499      	strb	r1, [r3, r2]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2245      	movs	r2, #69	@ 0x45
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	d103      	bne.n	80055f4 <xQueueGenericSend+0x112>
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2245      	movs	r2, #69	@ 0x45
 80055f0:	2100      	movs	r1, #0
 80055f2:	5499      	strb	r1, [r3, r2]
 80055f4:	f001 fc86 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f8:	1d3a      	adds	r2, r7, #4
 80055fa:	2314      	movs	r3, #20
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	0011      	movs	r1, r2
 8005600:	0018      	movs	r0, r3
 8005602:	f000 fefd 	bl	8006400 <xTaskCheckForTimeOut>
 8005606:	1e03      	subs	r3, r0, #0
 8005608:	d11e      	bne.n	8005648 <xQueueGenericSend+0x166>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	0018      	movs	r0, r3
 800560e:	f000 fa53 	bl	8005ab8 <prvIsQueueFull>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d011      	beq.n	800563a <xQueueGenericSend+0x158>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	3310      	adds	r3, #16
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f000 fe34 	bl	800628c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f9d2 	bl	80059d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800562c:	f000 fcb4 	bl	8005f98 <xTaskResumeAll>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d194      	bne.n	800555e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8005634:	f001 fc44 	bl	8006ec0 <vPortYield>
 8005638:	e791      	b.n	800555e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	0018      	movs	r0, r3
 800563e:	f000 f9c7 	bl	80059d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005642:	f000 fca9 	bl	8005f98 <xTaskResumeAll>
 8005646:	e78a      	b.n	800555e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 f9c0 	bl	80059d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005650:	f000 fca2 	bl	8005f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005654:	2300      	movs	r3, #0
		}
	}
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b00a      	add	sp, #40	@ 0x28
 800565c:	bd80      	pop	{r7, pc}

0800565e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800565e:	b590      	push	{r4, r7, lr}
 8005660:	b089      	sub	sp, #36	@ 0x24
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <xQueueGenericSendFromISR+0x1e>
 8005676:	b672      	cpsid	i
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	e7fd      	b.n	8005678 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSendFromISR+0x2c>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueGenericSendFromISR+0x30>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericSendFromISR+0x32>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <xQueueGenericSendFromISR+0x3c>
 8005694:	b672      	cpsid	i
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	e7fd      	b.n	8005696 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d103      	bne.n	80056a8 <xQueueGenericSendFromISR+0x4a>
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <xQueueGenericSendFromISR+0x4e>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <xQueueGenericSendFromISR+0x50>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <xQueueGenericSendFromISR+0x5a>
 80056b2:	b672      	cpsid	i
 80056b4:	46c0      	nop			@ (mov r8, r8)
 80056b6:	e7fd      	b.n	80056b4 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b8:	f001 fc3c 	bl	8006f34 <ulSetInterruptMaskFromISR>
 80056bc:	0003      	movs	r3, r0
 80056be:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <xQueueGenericSendFromISR+0x74>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d12e      	bne.n	8005730 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056d2:	2413      	movs	r4, #19
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	2145      	movs	r1, #69	@ 0x45
 80056da:	5c52      	ldrb	r2, [r2, r1]
 80056dc:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f8e2 	bl	80058ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056ea:	193b      	adds	r3, r7, r4
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b25b      	sxtb	r3, r3
 80056f0:	3301      	adds	r3, #1
 80056f2:	d111      	bne.n	8005718 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3324      	adds	r3, #36	@ 0x24
 8005700:	0018      	movs	r0, r3
 8005702:	f000 fe0b 	bl	800631c <xTaskRemoveFromEventList>
 8005706:	1e03      	subs	r3, r0, #0
 8005708:	d00f      	beq.n	800572a <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e008      	b.n	800572a <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005718:	2313      	movs	r3, #19
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	b259      	sxtb	r1, r3
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2245      	movs	r2, #69	@ 0x45
 8005728:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
		{
 800572e:	e001      	b.n	8005734 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	0018      	movs	r0, r3
 8005738:	f001 fc02 	bl	8006f40 <vClearInterruptMaskFromISR>

	return xReturn;
 800573c:	69fb      	ldr	r3, [r7, #28]
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	b009      	add	sp, #36	@ 0x24
 8005744:	bd90      	pop	{r4, r7, pc}

08005746 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08a      	sub	sp, #40	@ 0x28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <xQueueReceive+0x20>
 8005760:	b672      	cpsid	i
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	e7fd      	b.n	8005762 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <xQueueReceive+0x2e>
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <xQueueReceive+0x32>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <xQueueReceive+0x34>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <xQueueReceive+0x3e>
 800577e:	b672      	cpsid	i
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	e7fd      	b.n	8005780 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005784:	f000 ff62 	bl	800664c <xTaskGetSchedulerState>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d102      	bne.n	8005792 <xQueueReceive+0x4c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <xQueueReceive+0x50>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <xQueueReceive+0x52>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <xQueueReceive+0x5c>
 800579c:	b672      	cpsid	i
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	e7fd      	b.n	800579e <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a2:	f001 fb9d 	bl	8006ee0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <xQueueReceive+0x9a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f000 f8e3 	bl	8005984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <xQueueReceive+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	3310      	adds	r3, #16
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 fda2 	bl	800631c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d8:	f001 fb94 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80057dc:	2301      	movs	r3, #1
 80057de:	e062      	b.n	80058a6 <xQueueReceive+0x160>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <xQueueReceive+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e6:	f001 fb8d 	bl	8006f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e05b      	b.n	80058a6 <xQueueReceive+0x160>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f4:	2314      	movs	r3, #20
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 fded 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005802:	f001 fb7f 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005806:	f000 fbbb 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800580a:	f001 fb69 	bl	8006ee0 <vPortEnterCritical>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	2244      	movs	r2, #68	@ 0x44
 8005812:	5c9b      	ldrb	r3, [r3, r2]
 8005814:	b25b      	sxtb	r3, r3
 8005816:	3301      	adds	r3, #1
 8005818:	d103      	bne.n	8005822 <xQueueReceive+0xdc>
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2244      	movs	r2, #68	@ 0x44
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2245      	movs	r2, #69	@ 0x45
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	b25b      	sxtb	r3, r3
 800582a:	3301      	adds	r3, #1
 800582c:	d103      	bne.n	8005836 <xQueueReceive+0xf0>
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2245      	movs	r2, #69	@ 0x45
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	f001 fb65 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583a:	1d3a      	adds	r2, r7, #4
 800583c:	2314      	movs	r3, #20
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	0011      	movs	r1, r2
 8005842:	0018      	movs	r0, r3
 8005844:	f000 fddc 	bl	8006400 <xTaskCheckForTimeOut>
 8005848:	1e03      	subs	r3, r0, #0
 800584a:	d11e      	bne.n	800588a <xQueueReceive+0x144>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	0018      	movs	r0, r3
 8005850:	f000 f91c 	bl	8005a8c <prvIsQueueEmpty>
 8005854:	1e03      	subs	r3, r0, #0
 8005856:	d011      	beq.n	800587c <xQueueReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	3324      	adds	r3, #36	@ 0x24
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	0011      	movs	r1, r2
 8005860:	0018      	movs	r0, r3
 8005862:	f000 fd13 	bl	800628c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 f8b1 	bl	80059d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800586e:	f000 fb93 	bl	8005f98 <xTaskResumeAll>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d195      	bne.n	80057a2 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8005876:	f001 fb23 	bl	8006ec0 <vPortYield>
 800587a:	e792      	b.n	80057a2 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	0018      	movs	r0, r3
 8005880:	f000 f8a6 	bl	80059d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005884:	f000 fb88 	bl	8005f98 <xTaskResumeAll>
 8005888:	e78b      	b.n	80057a2 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 f89f 	bl	80059d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005892:	f000 fb81 	bl	8005f98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	0018      	movs	r0, r3
 800589a:	f000 f8f7 	bl	8005a8c <prvIsQueueEmpty>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d100      	bne.n	80058a4 <xQueueReceive+0x15e>
 80058a2:	e77e      	b.n	80057a2 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b00a      	add	sp, #40	@ 0x28
 80058ac:	bd80      	pop	{r7, pc}

080058ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d14e      	bne.n	8005972 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 fed3 	bl	8006684 <xTaskPriorityDisinherit>
 80058de:	0003      	movs	r3, r0
 80058e0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	e043      	b.n	8005972 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d119      	bne.n	8005924 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6898      	ldr	r0, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	0019      	movs	r1, r3
 80058fc:	f001 fdae 	bl	800745c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	18d2      	adds	r2, r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d32b      	bcc.n	8005972 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	e026      	b.n	8005972 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68d8      	ldr	r0, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	0019      	movs	r1, r3
 8005930:	f001 fd94 	bl	800745c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	425b      	negs	r3, r3
 800593e:	18d2      	adds	r2, r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d207      	bcs.n	8005960 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	425b      	negs	r3, r3
 800595a:	18d2      	adds	r2, r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d105      	bne.n	8005972 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3b01      	subs	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800597a:	697b      	ldr	r3, [r7, #20]
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b006      	add	sp, #24
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	18d2      	adds	r2, r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d303      	bcc.n	80059b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	0018      	movs	r0, r3
 80059c4:	f001 fd4a 	bl	800745c <memcpy>
	}
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059d8:	f001 fa82 	bl	8006ee0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059dc:	230f      	movs	r3, #15
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	2145      	movs	r1, #69	@ 0x45
 80059e4:	5c52      	ldrb	r2, [r2, r1]
 80059e6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e8:	e013      	b.n	8005a12 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	@ 0x24
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 fc90 	bl	800631c <xTaskRemoveFromEventList>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d001      	beq.n	8005a04 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a00:	f000 fd50 	bl	80064a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a04:	210f      	movs	r1, #15
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	187b      	adds	r3, r7, r1
 8005a10:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a12:	230f      	movs	r3, #15
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dce5      	bgt.n	80059ea <prvUnlockQueue+0x1a>
 8005a1e:	e000      	b.n	8005a22 <prvUnlockQueue+0x52>
					break;
 8005a20:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2245      	movs	r2, #69	@ 0x45
 8005a26:	21ff      	movs	r1, #255	@ 0xff
 8005a28:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a2a:	f001 fa6b 	bl	8006f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a2e:	f001 fa57 	bl	8006ee0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a32:	230e      	movs	r3, #14
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	2144      	movs	r1, #68	@ 0x44
 8005a3a:	5c52      	ldrb	r2, [r2, r1]
 8005a3c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a3e:	e013      	b.n	8005a68 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3310      	adds	r3, #16
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 fc65 	bl	800631c <xTaskRemoveFromEventList>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d001      	beq.n	8005a5a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005a56:	f000 fd25 	bl	80064a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a5a:	210e      	movs	r1, #14
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	187b      	adds	r3, r7, r1
 8005a66:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a68:	230e      	movs	r3, #14
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dce5      	bgt.n	8005a40 <prvUnlockQueue+0x70>
 8005a74:	e000      	b.n	8005a78 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005a76:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2244      	movs	r2, #68	@ 0x44
 8005a7c:	21ff      	movs	r1, #255	@ 0xff
 8005a7e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a80:	f001 fa40 	bl	8006f04 <vPortExitCritical>
}
 8005a84:	46c0      	nop			@ (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b004      	add	sp, #16
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a94:	f001 fa24 	bl	8006ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e001      	b.n	8005aaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 fa2b 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b004      	add	sp, #16
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ac0:	f001 fa0e 	bl	8006ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d102      	bne.n	8005ad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e001      	b.n	8005ada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ada:	f001 fa13 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e015      	b.n	8005b24 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005af8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <vQueueAddToRegistry+0x4c>)
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	00d2      	lsls	r2, r2, #3
 8005afe:	58d3      	ldr	r3, [r2, r3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10c      	bne.n	8005b1e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <vQueueAddToRegistry+0x4c>)
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	00d2      	lsls	r2, r2, #3
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b0e:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <vQueueAddToRegistry+0x4c>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	18d3      	adds	r3, r2, r3
 8005b16:	3304      	adds	r3, #4
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b1c:	e006      	b.n	8005b2c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	d9e6      	bls.n	8005af8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	46c0      	nop			@ (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	200010b0 	.word	0x200010b0

08005b38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b48:	f001 f9ca 	bl	8006ee0 <vPortEnterCritical>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2244      	movs	r2, #68	@ 0x44
 8005b50:	5c9b      	ldrb	r3, [r3, r2]
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	3301      	adds	r3, #1
 8005b56:	d103      	bne.n	8005b60 <vQueueWaitForMessageRestricted+0x28>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2244      	movs	r2, #68	@ 0x44
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	5499      	strb	r1, [r3, r2]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2245      	movs	r2, #69	@ 0x45
 8005b64:	5c9b      	ldrb	r3, [r3, r2]
 8005b66:	b25b      	sxtb	r3, r3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	d103      	bne.n	8005b74 <vQueueWaitForMessageRestricted+0x3c>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2245      	movs	r2, #69	@ 0x45
 8005b70:	2100      	movs	r1, #0
 8005b72:	5499      	strb	r1, [r3, r2]
 8005b74:	f001 f9c6 	bl	8006f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	3324      	adds	r3, #36	@ 0x24
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 fb9f 	bl	80062cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff ff1d 	bl	80059d0 <prvUnlockQueue>
	}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b006      	add	sp, #24
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b9e:	b590      	push	{r4, r7, lr}
 8005ba0:	b08d      	sub	sp, #52	@ 0x34
 8005ba2:	af04      	add	r7, sp, #16
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <xTaskCreateStatic+0x1a>
 8005bb2:	b672      	cpsid	i
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	e7fd      	b.n	8005bb4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <xTaskCreateStatic+0x26>
 8005bbe:	b672      	cpsid	i
 8005bc0:	46c0      	nop			@ (mov r8, r8)
 8005bc2:	e7fd      	b.n	8005bc0 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bc4:	235c      	movs	r3, #92	@ 0x5c
 8005bc6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bcc:	d002      	beq.n	8005bd4 <xTaskCreateStatic+0x36>
 8005bce:	b672      	cpsid	i
 8005bd0:	46c0      	nop			@ (mov r8, r8)
 8005bd2:	e7fd      	b.n	8005bd0 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <xTaskCreateStatic+0x7e>
 8005bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01d      	beq.n	8005c1c <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2259      	movs	r2, #89	@ 0x59
 8005bee:	2102      	movs	r1, #2
 8005bf0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bf2:	683c      	ldr	r4, [r7, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9303      	str	r3, [sp, #12]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	9302      	str	r3, [sp, #8]
 8005c02:	2318      	movs	r3, #24
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	0023      	movs	r3, r4
 8005c0e:	f000 f859 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f8d7 	bl	8005dc8 <prvAddNewTaskToReadyList>
 8005c1a:	e001      	b.n	8005c20 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c20:	69bb      	ldr	r3, [r7, #24]
	}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b009      	add	sp, #36	@ 0x24
 8005c28:	bd90      	pop	{r4, r7, pc}

08005c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c2a:	b590      	push	{r4, r7, lr}
 8005c2c:	b08d      	sub	sp, #52	@ 0x34
 8005c2e:	af04      	add	r7, sp, #16
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	1dbb      	adds	r3, r7, #6
 8005c38:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c3a:	1dbb      	adds	r3, r7, #6
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	0018      	movs	r0, r3
 8005c42:	f001 f9e5 	bl	8007010 <pvPortMalloc>
 8005c46:	0003      	movs	r3, r0
 8005c48:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c50:	205c      	movs	r0, #92	@ 0x5c
 8005c52:	f001 f9dd 	bl	8007010 <pvPortMalloc>
 8005c56:	0003      	movs	r3, r0
 8005c58:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c66:	e006      	b.n	8005c76 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f001 fa78 	bl	8007160 <vPortFree>
 8005c70:	e001      	b.n	8005c76 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2259      	movs	r2, #89	@ 0x59
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c84:	1dbb      	adds	r3, r7, #6
 8005c86:	881a      	ldrh	r2, [r3, #0]
 8005c88:	683c      	ldr	r4, [r7, #0]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	0023      	movs	r3, r4
 8005ca0:	f000 f810 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f88e 	bl	8005dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	e002      	b.n	8005cb8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b009      	add	sp, #36	@ 0x24
 8005cc0:	bd90      	pop	{r4, r7, pc}
	...

08005cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	001a      	movs	r2, r3
 8005cdc:	21a5      	movs	r1, #165	@ 0xa5
 8005cde:	f001 fb91 	bl	8007404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4936      	ldr	r1, [pc, #216]	@ (8005dc4 <prvInitialiseNewTask+0x100>)
 8005cea:	468c      	mov	ip, r1
 8005cec:	4463      	add	r3, ip
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	18d3      	adds	r3, r2, r3
 8005cf2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2207      	movs	r2, #7
 8005d00:	4013      	ands	r3, r2
 8005d02:	d002      	beq.n	8005d0a <prvInitialiseNewTask+0x46>
 8005d04:	b672      	cpsid	i
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	e7fd      	b.n	8005d06 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e013      	b.n	8005d38 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	18d3      	adds	r3, r2, r3
 8005d16:	7818      	ldrb	r0, [r3, #0]
 8005d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1a:	2134      	movs	r1, #52	@ 0x34
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	18d3      	adds	r3, r2, r3
 8005d20:	185b      	adds	r3, r3, r1
 8005d22:	1c02      	adds	r2, r0, #0
 8005d24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3301      	adds	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b0f      	cmp	r3, #15
 8005d3c:	d9e8      	bls.n	8005d10 <prvInitialiseNewTask+0x4c>
 8005d3e:	e000      	b.n	8005d42 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d40:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	2243      	movs	r2, #67	@ 0x43
 8005d46:	2100      	movs	r1, #0
 8005d48:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	2b37      	cmp	r3, #55	@ 0x37
 8005d4e:	d901      	bls.n	8005d54 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d50:	2337      	movs	r3, #55	@ 0x37
 8005d52:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2200      	movs	r2, #0
 8005d64:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	3304      	adds	r3, #4
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff fa66 	bl	800523c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	3318      	adds	r3, #24
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7ff fa61 	bl	800523c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2238      	movs	r2, #56	@ 0x38
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	2200      	movs	r2, #0
 8005d94:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d98:	2258      	movs	r2, #88	@ 0x58
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f001 f803 	bl	8006db0 <pxPortInitialiseStack>
 8005daa:	0002      	movs	r2, r0
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dbc:	46c0      	nop			@ (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b006      	add	sp, #24
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	3fffffff 	.word	0x3fffffff

08005dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dd0:	f001 f886 	bl	8006ee0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dd4:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <prvAddNewTaskToReadyList+0xa8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	4b25      	ldr	r3, [pc, #148]	@ (8005e70 <prvAddNewTaskToReadyList+0xa8>)
 8005ddc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005dde:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <prvAddNewTaskToReadyList+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005de6:	4b23      	ldr	r3, [pc, #140]	@ (8005e74 <prvAddNewTaskToReadyList+0xac>)
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dec:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <prvAddNewTaskToReadyList+0xa8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d110      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005df4:	f000 fb6a 	bl	80064cc <prvInitialiseTaskLists>
 8005df8:	e00d      	b.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005e78 <prvAddNewTaskToReadyList+0xb0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e02:	4b1c      	ldr	r3, [pc, #112]	@ (8005e74 <prvAddNewTaskToReadyList+0xac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d802      	bhi.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e10:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <prvAddNewTaskToReadyList+0xac>)
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e16:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <prvAddNewTaskToReadyList+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <prvAddNewTaskToReadyList+0xb4>)
 8005e1e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e20:	4b16      	ldr	r3, [pc, #88]	@ (8005e7c <prvAddNewTaskToReadyList+0xb4>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2c:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <prvAddNewTaskToReadyList+0xb8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <prvAddNewTaskToReadyList+0x74>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <prvAddNewTaskToReadyList+0xb8>)
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	0013      	movs	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	189b      	adds	r3, r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a0e      	ldr	r2, [pc, #56]	@ (8005e84 <prvAddNewTaskToReadyList+0xbc>)
 8005e4a:	189a      	adds	r2, r3, r2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	0019      	movs	r1, r3
 8005e52:	0010      	movs	r0, r2
 8005e54:	f7ff f9fd 	bl	8005252 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e58:	f001 f854 	bl	8006f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <prvAddNewTaskToReadyList+0xb0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e64:	4b03      	ldr	r3, [pc, #12]	@ (8005e74 <prvAddNewTaskToReadyList+0xac>)
 8005e66:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200015c4 	.word	0x200015c4
 8005e74:	200010f0 	.word	0x200010f0
 8005e78:	200015d0 	.word	0x200015d0
 8005e7c:	200015e0 	.word	0x200015e0
 8005e80:	200015cc 	.word	0x200015cc
 8005e84:	200010f4 	.word	0x200010f4

08005e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d011      	beq.n	8005ebe <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <vTaskDelay+0x48>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <vTaskDelay+0x20>
 8005ea2:	b672      	cpsid	i
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	e7fd      	b.n	8005ea4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005ea8:	f000 f86a 	bl	8005f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2100      	movs	r1, #0
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 fc45 	bl	8006740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb6:	f000 f86f 	bl	8005f98 <xTaskResumeAll>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005ec4:	f000 fffc 	bl	8006ec0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ec8:	46c0      	nop			@ (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b004      	add	sp, #16
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	200015ec 	.word	0x200015ec

08005ed4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b089      	sub	sp, #36	@ 0x24
 8005ed8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ee2:	003a      	movs	r2, r7
 8005ee4:	1d39      	adds	r1, r7, #4
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7ff f958 	bl	80051a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ef0:	683c      	ldr	r4, [r7, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	491c      	ldr	r1, [pc, #112]	@ (8005f68 <vTaskStartScheduler+0x94>)
 8005ef8:	481c      	ldr	r0, [pc, #112]	@ (8005f6c <vTaskStartScheduler+0x98>)
 8005efa:	9202      	str	r2, [sp, #8]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	2300      	movs	r3, #0
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	0022      	movs	r2, r4
 8005f06:	f7ff fe4a 	bl	8005b9e <xTaskCreateStatic>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	4b18      	ldr	r3, [pc, #96]	@ (8005f70 <vTaskStartScheduler+0x9c>)
 8005f0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f10:	4b17      	ldr	r3, [pc, #92]	@ (8005f70 <vTaskStartScheduler+0x9c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e001      	b.n	8005f22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d103      	bne.n	8005f30 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005f28:	f000 fc5e 	bl	80067e8 <xTimerCreateTimerTask>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10d      	bne.n	8005f52 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005f36:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f38:	4b0e      	ldr	r3, [pc, #56]	@ (8005f74 <vTaskStartScheduler+0xa0>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4252      	negs	r2, r2
 8005f3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f40:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <vTaskStartScheduler+0xa4>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f46:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <vTaskStartScheduler+0xa8>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f4c:	f000 ff94 	bl	8006e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f50:	e005      	b.n	8005f5e <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	d102      	bne.n	8005f5e <vTaskStartScheduler+0x8a>
 8005f58:	b672      	cpsid	i
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	e7fd      	b.n	8005f5a <vTaskStartScheduler+0x86>
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b005      	add	sp, #20
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	080074d8 	.word	0x080074d8
 8005f6c:	080064b9 	.word	0x080064b9
 8005f70:	200015e8 	.word	0x200015e8
 8005f74:	200015e4 	.word	0x200015e4
 8005f78:	200015d0 	.word	0x200015d0
 8005f7c:	200015c8 	.word	0x200015c8

08005f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f84:	4b03      	ldr	r3, [pc, #12]	@ (8005f94 <vTaskSuspendAll+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	4b02      	ldr	r3, [pc, #8]	@ (8005f94 <vTaskSuspendAll+0x14>)
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200015ec 	.word	0x200015ec

08005f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <xTaskResumeAll+0xec>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <xTaskResumeAll+0x1c>
 8005fae:	b672      	cpsid	i
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	e7fd      	b.n	8005fb0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fb4:	f000 ff94 	bl	8006ee0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb8:	4b32      	ldr	r3, [pc, #200]	@ (8006084 <xTaskResumeAll+0xec>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	4b31      	ldr	r3, [pc, #196]	@ (8006084 <xTaskResumeAll+0xec>)
 8005fc0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b30      	ldr	r3, [pc, #192]	@ (8006084 <xTaskResumeAll+0xec>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d155      	bne.n	8006076 <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fca:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <xTaskResumeAll+0xf0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d051      	beq.n	8006076 <xTaskResumeAll+0xde>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd2:	e02f      	b.n	8006034 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800608c <xTaskResumeAll+0xf4>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3318      	adds	r3, #24
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7ff f98e 	bl	8005302 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff f989 	bl	8005302 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff4:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <xTaskResumeAll+0xf8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <xTaskResumeAll+0x6c>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006000:	4b23      	ldr	r3, [pc, #140]	@ (8006090 <xTaskResumeAll+0xf8>)
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006008:	0013      	movs	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	189b      	adds	r3, r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a20      	ldr	r2, [pc, #128]	@ (8006094 <xTaskResumeAll+0xfc>)
 8006012:	189a      	adds	r2, r3, r2
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3304      	adds	r3, #4
 8006018:	0019      	movs	r1, r3
 800601a:	0010      	movs	r0, r2
 800601c:	f7ff f919 	bl	8005252 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006024:	4b1c      	ldr	r3, [pc, #112]	@ (8006098 <xTaskResumeAll+0x100>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <xTaskResumeAll+0x104>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006034:	4b15      	ldr	r3, [pc, #84]	@ (800608c <xTaskResumeAll+0xf4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cb      	bne.n	8005fd4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006042:	f000 fadf 	bl	8006604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006046:	4b16      	ldr	r3, [pc, #88]	@ (80060a0 <xTaskResumeAll+0x108>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00f      	beq.n	8006072 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006052:	f000 f835 	bl	80060c0 <xTaskIncrementTick>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d002      	beq.n	8006060 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800605a:	4b10      	ldr	r3, [pc, #64]	@ (800609c <xTaskResumeAll+0x104>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	3b01      	subs	r3, #1
 8006064:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f2      	bne.n	8006052 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 800606c:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <xTaskResumeAll+0x108>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006072:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <xTaskResumeAll+0x104>)
 8006074:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006076:	f000 ff45 	bl	8006f04 <vPortExitCritical>

	return xAlreadyYielded;
 800607a:	687b      	ldr	r3, [r7, #4]
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b004      	add	sp, #16
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200015ec 	.word	0x200015ec
 8006088:	200015c4 	.word	0x200015c4
 800608c:	20001584 	.word	0x20001584
 8006090:	200015cc 	.word	0x200015cc
 8006094:	200010f4 	.word	0x200010f4
 8006098:	200010f0 	.word	0x200010f0
 800609c:	200015d8 	.word	0x200015d8
 80060a0:	200015d4 	.word	0x200015d4

080060a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060aa:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <xTaskGetTickCount+0x18>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060b0:	687b      	ldr	r3, [r7, #4]
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b002      	add	sp, #8
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	200015c8 	.word	0x200015c8

080060c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ca:	4b3e      	ldr	r3, [pc, #248]	@ (80061c4 <xTaskIncrementTick+0x104>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d000      	beq.n	80060d4 <xTaskIncrementTick+0x14>
 80060d2:	e06d      	b.n	80061b0 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060d4:	4b3c      	ldr	r3, [pc, #240]	@ (80061c8 <xTaskIncrementTick+0x108>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060dc:	4b3a      	ldr	r3, [pc, #232]	@ (80061c8 <xTaskIncrementTick+0x108>)
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d118      	bne.n	800611a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e8:	4b38      	ldr	r3, [pc, #224]	@ (80061cc <xTaskIncrementTick+0x10c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <xTaskIncrementTick+0x38>
 80060f2:	b672      	cpsid	i
 80060f4:	46c0      	nop			@ (mov r8, r8)
 80060f6:	e7fd      	b.n	80060f4 <xTaskIncrementTick+0x34>
 80060f8:	4b34      	ldr	r3, [pc, #208]	@ (80061cc <xTaskIncrementTick+0x10c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	4b34      	ldr	r3, [pc, #208]	@ (80061d0 <xTaskIncrementTick+0x110>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b32      	ldr	r3, [pc, #200]	@ (80061cc <xTaskIncrementTick+0x10c>)
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4b32      	ldr	r3, [pc, #200]	@ (80061d0 <xTaskIncrementTick+0x110>)
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	4b31      	ldr	r3, [pc, #196]	@ (80061d4 <xTaskIncrementTick+0x114>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	4b30      	ldr	r3, [pc, #192]	@ (80061d4 <xTaskIncrementTick+0x114>)
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f000 fa75 	bl	8006604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800611a:	4b2f      	ldr	r3, [pc, #188]	@ (80061d8 <xTaskIncrementTick+0x118>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d34a      	bcc.n	80061ba <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006124:	4b29      	ldr	r3, [pc, #164]	@ (80061cc <xTaskIncrementTick+0x10c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xTaskIncrementTick+0x72>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xTaskIncrementTick+0x74>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006138:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <xTaskIncrementTick+0x118>)
 800613a:	2201      	movs	r2, #1
 800613c:	4252      	negs	r2, r2
 800613e:	601a      	str	r2, [r3, #0]
					break;
 8006140:	e03b      	b.n	80061ba <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006142:	4b22      	ldr	r3, [pc, #136]	@ (80061cc <xTaskIncrementTick+0x10c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	429a      	cmp	r2, r3
 8006158:	d203      	bcs.n	8006162 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800615a:	4b1f      	ldr	r3, [pc, #124]	@ (80061d8 <xTaskIncrementTick+0x118>)
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
						break;
 8006160:	e02b      	b.n	80061ba <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3304      	adds	r3, #4
 8006166:	0018      	movs	r0, r3
 8006168:	f7ff f8cb 	bl	8005302 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3318      	adds	r3, #24
 8006178:	0018      	movs	r0, r3
 800617a:	f7ff f8c2 	bl	8005302 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	4b16      	ldr	r3, [pc, #88]	@ (80061dc <xTaskIncrementTick+0x11c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d903      	bls.n	8006192 <xTaskIncrementTick+0xd2>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <xTaskIncrementTick+0x11c>)
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006196:	0013      	movs	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	189b      	adds	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a10      	ldr	r2, [pc, #64]	@ (80061e0 <xTaskIncrementTick+0x120>)
 80061a0:	189a      	adds	r2, r3, r2
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3304      	adds	r3, #4
 80061a6:	0019      	movs	r1, r3
 80061a8:	0010      	movs	r0, r2
 80061aa:	f7ff f852 	bl	8005252 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ae:	e7b9      	b.n	8006124 <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <xTaskIncrementTick+0x124>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <xTaskIncrementTick+0x124>)
 80061b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b006      	add	sp, #24
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200015ec 	.word	0x200015ec
 80061c8:	200015c8 	.word	0x200015c8
 80061cc:	2000157c 	.word	0x2000157c
 80061d0:	20001580 	.word	0x20001580
 80061d4:	200015dc 	.word	0x200015dc
 80061d8:	200015e4 	.word	0x200015e4
 80061dc:	200015cc 	.word	0x200015cc
 80061e0:	200010f4 	.word	0x200010f4
 80061e4:	200015d4 	.word	0x200015d4

080061e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ee:	4b22      	ldr	r3, [pc, #136]	@ (8006278 <vTaskSwitchContext+0x90>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061f6:	4b21      	ldr	r3, [pc, #132]	@ (800627c <vTaskSwitchContext+0x94>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061fc:	e038      	b.n	8006270 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80061fe:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <vTaskSwitchContext+0x94>)
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006204:	4b1e      	ldr	r3, [pc, #120]	@ (8006280 <vTaskSwitchContext+0x98>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	e008      	b.n	800621e <vTaskSwitchContext+0x36>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <vTaskSwitchContext+0x30>
 8006212:	b672      	cpsid	i
 8006214:	46c0      	nop			@ (mov r8, r8)
 8006216:	e7fd      	b.n	8006214 <vTaskSwitchContext+0x2c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3b01      	subs	r3, #1
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	4919      	ldr	r1, [pc, #100]	@ (8006284 <vTaskSwitchContext+0x9c>)
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	0013      	movs	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	189b      	adds	r3, r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	585b      	ldr	r3, [r3, r1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ed      	beq.n	800620c <vTaskSwitchContext+0x24>
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	0013      	movs	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	189b      	adds	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4a12      	ldr	r2, [pc, #72]	@ (8006284 <vTaskSwitchContext+0x9c>)
 800623c:	189b      	adds	r3, r3, r2
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	429a      	cmp	r2, r3
 8006254:	d104      	bne.n	8006260 <vTaskSwitchContext+0x78>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	605a      	str	r2, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <vTaskSwitchContext+0xa0>)
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <vTaskSwitchContext+0x98>)
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200015ec 	.word	0x200015ec
 800627c:	200015d8 	.word	0x200015d8
 8006280:	200015cc 	.word	0x200015cc
 8006284:	200010f4 	.word	0x200010f4
 8006288:	200010f0 	.word	0x200010f0

0800628c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <vTaskPlaceOnEventList+0x16>
 800629c:	b672      	cpsid	i
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	e7fd      	b.n	800629e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <vTaskPlaceOnEventList+0x3c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3318      	adds	r3, #24
 80062a8:	001a      	movs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7fe fff1 	bl	8005296 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2101      	movs	r1, #1
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 fa41 	bl	8006740 <prvAddCurrentTaskToDelayedList>
}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	200010f0 	.word	0x200010f0

080062cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <vTaskPlaceOnEventListRestricted+0x18>
 80062de:	b672      	cpsid	i
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	e7fd      	b.n	80062e0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006318 <vTaskPlaceOnEventListRestricted+0x4c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3318      	adds	r3, #24
 80062ea:	001a      	movs	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0011      	movs	r1, r2
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7fe ffae 	bl	8005252 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 80062fc:	2301      	movs	r3, #1
 80062fe:	425b      	negs	r3, r3
 8006300:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	0011      	movs	r1, r2
 8006308:	0018      	movs	r0, r3
 800630a:	f000 fa19 	bl	8006740 <prvAddCurrentTaskToDelayedList>
	}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b004      	add	sp, #16
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			@ (mov r8, r8)
 8006318:	200010f0 	.word	0x200010f0

0800631c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <xTaskRemoveFromEventList+0x1c>
 8006332:	b672      	cpsid	i
 8006334:	46c0      	nop			@ (mov r8, r8)
 8006336:	e7fd      	b.n	8006334 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3318      	adds	r3, #24
 800633c:	0018      	movs	r0, r3
 800633e:	f7fe ffe0 	bl	8005302 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <xTaskRemoveFromEventList+0xa4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d11d      	bne.n	8006386 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	3304      	adds	r3, #4
 800634e:	0018      	movs	r0, r3
 8006350:	f7fe ffd7 	bl	8005302 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006358:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <xTaskRemoveFromEventList+0xa8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d903      	bls.n	8006368 <xTaskRemoveFromEventList+0x4c>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006364:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <xTaskRemoveFromEventList+0xa8>)
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636c:	0013      	movs	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	189b      	adds	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <xTaskRemoveFromEventList+0xac>)
 8006376:	189a      	adds	r2, r3, r2
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	3304      	adds	r3, #4
 800637c:	0019      	movs	r1, r3
 800637e:	0010      	movs	r0, r2
 8006380:	f7fe ff67 	bl	8005252 <vListInsertEnd>
 8006384:	e007      	b.n	8006396 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	3318      	adds	r3, #24
 800638a:	001a      	movs	r2, r3
 800638c:	4b0f      	ldr	r3, [pc, #60]	@ (80063cc <xTaskRemoveFromEventList+0xb0>)
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f7fe ff5e 	bl	8005252 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <xTaskRemoveFromEventList+0xb4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d905      	bls.n	80063b0 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <xTaskRemoveFromEventList+0xb8>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e001      	b.n	80063b4 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	200015ec 	.word	0x200015ec
 80063c4:	200015cc 	.word	0x200015cc
 80063c8:	200010f4 	.word	0x200010f4
 80063cc:	20001584 	.word	0x20001584
 80063d0:	200010f0 	.word	0x200010f0
 80063d4:	200015d8 	.word	0x200015d8

080063d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e0:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <vTaskInternalSetTimeOutState+0x20>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063e8:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <vTaskInternalSetTimeOutState+0x24>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b002      	add	sp, #8
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200015dc 	.word	0x200015dc
 80063fc:	200015c8 	.word	0x200015c8

08006400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xTaskCheckForTimeOut+0x16>
 8006410:	b672      	cpsid	i
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	e7fd      	b.n	8006412 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <xTaskCheckForTimeOut+0x22>
 800641c:	b672      	cpsid	i
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	e7fd      	b.n	800641e <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8006422:	f000 fd5d 	bl	8006ee0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006426:	4b1d      	ldr	r3, [pc, #116]	@ (800649c <xTaskCheckForTimeOut+0x9c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	d102      	bne.n	8006444 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e024      	b.n	800648e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4b15      	ldr	r3, [pc, #84]	@ (80064a0 <xTaskCheckForTimeOut+0xa0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d007      	beq.n	8006460 <xTaskCheckForTimeOut+0x60>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e016      	b.n	800648e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	429a      	cmp	r2, r3
 8006468:	d20c      	bcs.n	8006484 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f7ff ffad 	bl	80063d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e004      	b.n	800648e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800648e:	f000 fd39 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8006492:	697b      	ldr	r3, [r7, #20]
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b006      	add	sp, #24
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200015c8 	.word	0x200015c8
 80064a0:	200015dc 	.word	0x200015dc

080064a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064a8:	4b02      	ldr	r3, [pc, #8]	@ (80064b4 <vTaskMissedYield+0x10>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200015d8 	.word	0x200015d8

080064b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064c0:	f000 f848 	bl	8006554 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80064c4:	f000 fcfc 	bl	8006ec0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80064c8:	46c0      	nop			@ (mov r8, r8)
 80064ca:	e7f9      	b.n	80064c0 <prvIdleTask+0x8>

080064cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	e00c      	b.n	80064f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	0013      	movs	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4a14      	ldr	r2, [pc, #80]	@ (8006534 <prvInitialiseTaskLists+0x68>)
 80064e4:	189b      	adds	r3, r3, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fe fe8a 	bl	8005200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3301      	adds	r3, #1
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b37      	cmp	r3, #55	@ 0x37
 80064f6:	d9ef      	bls.n	80064d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <prvInitialiseTaskLists+0x6c>)
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fe fe80 	bl	8005200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006500:	4b0e      	ldr	r3, [pc, #56]	@ (800653c <prvInitialiseTaskLists+0x70>)
 8006502:	0018      	movs	r0, r3
 8006504:	f7fe fe7c 	bl	8005200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006508:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <prvInitialiseTaskLists+0x74>)
 800650a:	0018      	movs	r0, r3
 800650c:	f7fe fe78 	bl	8005200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <prvInitialiseTaskLists+0x78>)
 8006512:	0018      	movs	r0, r3
 8006514:	f7fe fe74 	bl	8005200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <prvInitialiseTaskLists+0x7c>)
 800651a:	0018      	movs	r0, r3
 800651c:	f7fe fe70 	bl	8005200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <prvInitialiseTaskLists+0x80>)
 8006522:	4a05      	ldr	r2, [pc, #20]	@ (8006538 <prvInitialiseTaskLists+0x6c>)
 8006524:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <prvInitialiseTaskLists+0x84>)
 8006528:	4a04      	ldr	r2, [pc, #16]	@ (800653c <prvInitialiseTaskLists+0x70>)
 800652a:	601a      	str	r2, [r3, #0]
}
 800652c:	46c0      	nop			@ (mov r8, r8)
 800652e:	46bd      	mov	sp, r7
 8006530:	b002      	add	sp, #8
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200010f4 	.word	0x200010f4
 8006538:	20001554 	.word	0x20001554
 800653c:	20001568 	.word	0x20001568
 8006540:	20001584 	.word	0x20001584
 8006544:	20001598 	.word	0x20001598
 8006548:	200015b0 	.word	0x200015b0
 800654c:	2000157c 	.word	0x2000157c
 8006550:	20001580 	.word	0x20001580

08006554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800655a:	e01a      	b.n	8006592 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800655c:	f000 fcc0 	bl	8006ee0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006560:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <prvCheckTasksWaitingTermination+0x50>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	0018      	movs	r0, r3
 800656e:	f7fe fec8 	bl	8005302 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006572:	4b0d      	ldr	r3, [pc, #52]	@ (80065a8 <prvCheckTasksWaitingTermination+0x54>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <prvCheckTasksWaitingTermination+0x54>)
 800657a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <prvCheckTasksWaitingTermination+0x58>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <prvCheckTasksWaitingTermination+0x58>)
 8006584:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006586:	f000 fcbd 	bl	8006f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f80f 	bl	80065b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006592:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <prvCheckTasksWaitingTermination+0x58>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e0      	bne.n	800655c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20001598 	.word	0x20001598
 80065a8:	200015c4 	.word	0x200015c4
 80065ac:	200015ac 	.word	0x200015ac

080065b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2259      	movs	r2, #89	@ 0x59
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 fdca 	bl	8007160 <vPortFree>
				vPortFree( pxTCB );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	0018      	movs	r0, r3
 80065d0:	f000 fdc6 	bl	8007160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065d4:	e011      	b.n	80065fa <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2259      	movs	r2, #89	@ 0x59
 80065da:	5c9b      	ldrb	r3, [r3, r2]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d104      	bne.n	80065ea <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f000 fdbc 	bl	8007160 <vPortFree>
	}
 80065e8:	e007      	b.n	80065fa <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2259      	movs	r2, #89	@ 0x59
 80065ee:	5c9b      	ldrb	r3, [r3, r2]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d002      	beq.n	80065fa <prvDeleteTCB+0x4a>
 80065f4:	b672      	cpsid	i
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	e7fd      	b.n	80065f6 <prvDeleteTCB+0x46>
	}
 80065fa:	46c0      	nop			@ (mov r8, r8)
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b002      	add	sp, #8
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660a:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <prvResetNextTaskUnblockTime+0x40>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <prvResetNextTaskUnblockTime+0x14>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <prvResetNextTaskUnblockTime+0x16>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800661e:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <prvResetNextTaskUnblockTime+0x44>)
 8006620:	2201      	movs	r2, #1
 8006622:	4252      	negs	r2, r2
 8006624:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006626:	e008      	b.n	800663a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <prvResetNextTaskUnblockTime+0x40>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <prvResetNextTaskUnblockTime+0x44>)
 8006638:	601a      	str	r2, [r3, #0]
}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	b002      	add	sp, #8
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	2000157c 	.word	0x2000157c
 8006648:	200015e4 	.word	0x200015e4

0800664c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <xTaskGetSchedulerState+0x30>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800665a:	2301      	movs	r3, #1
 800665c:	607b      	str	r3, [r7, #4]
 800665e:	e008      	b.n	8006672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006660:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <xTaskGetSchedulerState+0x34>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006668:	2302      	movs	r3, #2
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	e001      	b.n	8006672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006672:	687b      	ldr	r3, [r7, #4]
	}
 8006674:	0018      	movs	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	b002      	add	sp, #8
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200015d0 	.word	0x200015d0
 8006680:	200015ec 	.word	0x200015ec

08006684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d046      	beq.n	8006728 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800669a:	4b26      	ldr	r3, [pc, #152]	@ (8006734 <xTaskPriorityDisinherit+0xb0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d002      	beq.n	80066aa <xTaskPriorityDisinherit+0x26>
 80066a4:	b672      	cpsid	i
 80066a6:	46c0      	nop			@ (mov r8, r8)
 80066a8:	e7fd      	b.n	80066a6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <xTaskPriorityDisinherit+0x34>
 80066b2:	b672      	cpsid	i
 80066b4:	46c0      	nop			@ (mov r8, r8)
 80066b6:	e7fd      	b.n	80066b4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066bc:	1e5a      	subs	r2, r3, #1
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d02c      	beq.n	8006728 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d128      	bne.n	8006728 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3304      	adds	r3, #4
 80066da:	0018      	movs	r0, r3
 80066dc:	f7fe fe11 	bl	8005302 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	2238      	movs	r2, #56	@ 0x38
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006738 <xTaskPriorityDisinherit+0xb4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d903      	bls.n	8006708 <xTaskPriorityDisinherit+0x84>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006704:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <xTaskPriorityDisinherit+0xb4>)
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	0013      	movs	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	189b      	adds	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4a09      	ldr	r2, [pc, #36]	@ (800673c <xTaskPriorityDisinherit+0xb8>)
 8006716:	189a      	adds	r2, r3, r2
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3304      	adds	r3, #4
 800671c:	0019      	movs	r1, r3
 800671e:	0010      	movs	r0, r2
 8006720:	f7fe fd97 	bl	8005252 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006724:	2301      	movs	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006728:	68fb      	ldr	r3, [r7, #12]
	}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b004      	add	sp, #16
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	200010f0 	.word	0x200010f0
 8006738:	200015cc 	.word	0x200015cc
 800673c:	200010f4 	.word	0x200010f4

08006740 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800674a:	4b21      	ldr	r3, [pc, #132]	@ (80067d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006750:	4b20      	ldr	r3, [pc, #128]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3304      	adds	r3, #4
 8006756:	0018      	movs	r0, r3
 8006758:	f7fe fdd3 	bl	8005302 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3301      	adds	r3, #1
 8006760:	d10b      	bne.n	800677a <prvAddCurrentTaskToDelayedList+0x3a>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006768:	4b1a      	ldr	r3, [pc, #104]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006770:	0011      	movs	r1, r2
 8006772:	0018      	movs	r0, r3
 8006774:	f7fe fd6d 	bl	8005252 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006778:	e026      	b.n	80067c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	18d3      	adds	r3, r2, r3
 8006780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006782:	4b14      	ldr	r3, [pc, #80]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d209      	bcs.n	80067a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3304      	adds	r3, #4
 800679c:	0019      	movs	r1, r3
 800679e:	0010      	movs	r0, r2
 80067a0:	f7fe fd79 	bl	8005296 <vListInsert>
}
 80067a4:	e010      	b.n	80067c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a6:	4b0e      	ldr	r3, [pc, #56]	@ (80067e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3304      	adds	r3, #4
 80067b0:	0019      	movs	r1, r3
 80067b2:	0010      	movs	r0, r2
 80067b4:	f7fe fd6f 	bl	8005296 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067b8:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d202      	bcs.n	80067c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067c2:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	46c0      	nop			@ (mov r8, r8)
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b004      	add	sp, #16
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200015c8 	.word	0x200015c8
 80067d4:	200010f0 	.word	0x200010f0
 80067d8:	200015b0 	.word	0x200015b0
 80067dc:	20001580 	.word	0x20001580
 80067e0:	2000157c 	.word	0x2000157c
 80067e4:	200015e4 	.word	0x200015e4

080067e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b089      	sub	sp, #36	@ 0x24
 80067ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067f2:	f000 fa9b 	bl	8006d2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067f6:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <xTimerCreateTimerTask+0x70>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d020      	beq.n	8006840 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006806:	003a      	movs	r2, r7
 8006808:	1d39      	adds	r1, r7, #4
 800680a:	2308      	movs	r3, #8
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	0018      	movs	r0, r3
 8006810:	f7fe fcde 	bl	80051d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006814:	683c      	ldr	r4, [r7, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4910      	ldr	r1, [pc, #64]	@ (800685c <xTimerCreateTimerTask+0x74>)
 800681c:	4810      	ldr	r0, [pc, #64]	@ (8006860 <xTimerCreateTimerTask+0x78>)
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2302      	movs	r3, #2
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	0022      	movs	r2, r4
 800682a:	f7ff f9b8 	bl	8005b9e <xTaskCreateStatic>
 800682e:	0002      	movs	r2, r0
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <xTimerCreateTimerTask+0x7c>)
 8006832:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006834:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <xTimerCreateTimerTask+0x7c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800683c:	2301      	movs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <xTimerCreateTimerTask+0x64>
 8006846:	b672      	cpsid	i
 8006848:	46c0      	nop			@ (mov r8, r8)
 800684a:	e7fd      	b.n	8006848 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	b005      	add	sp, #20
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	20001620 	.word	0x20001620
 800685c:	080074e0 	.word	0x080074e0
 8006860:	08006975 	.word	0x08006975
 8006864:	20001624 	.word	0x20001624

08006868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b08b      	sub	sp, #44	@ 0x2c
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <xTimerGenericCommand+0x1e>
 8006880:	b672      	cpsid	i
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	e7fd      	b.n	8006882 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006886:	4b1d      	ldr	r3, [pc, #116]	@ (80068fc <xTimerGenericCommand+0x94>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d030      	beq.n	80068f0 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800688e:	2414      	movs	r4, #20
 8006890:	193b      	adds	r3, r7, r4
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006896:	193b      	adds	r3, r7, r4
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800689c:	193b      	adds	r3, r7, r4
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b05      	cmp	r3, #5
 80068a6:	dc19      	bgt.n	80068dc <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068a8:	f7ff fed0 	bl	800664c <xTaskGetSchedulerState>
 80068ac:	0003      	movs	r3, r0
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d109      	bne.n	80068c6 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <xTimerGenericCommand+0x94>)
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b8:	1939      	adds	r1, r7, r4
 80068ba:	2300      	movs	r3, #0
 80068bc:	f7fe fe11 	bl	80054e2 <xQueueGenericSend>
 80068c0:	0003      	movs	r3, r0
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c4:	e014      	b.n	80068f0 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <xTimerGenericCommand+0x94>)
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	2314      	movs	r3, #20
 80068cc:	18f9      	adds	r1, r7, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	f7fe fe06 	bl	80054e2 <xQueueGenericSend>
 80068d6:	0003      	movs	r3, r0
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068da:	e009      	b.n	80068f0 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068dc:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <xTimerGenericCommand+0x94>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	2314      	movs	r3, #20
 80068e4:	18f9      	adds	r1, r7, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	f7fe feb9 	bl	800565e <xQueueGenericSendFromISR>
 80068ec:	0003      	movs	r3, r0
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068f2:	0018      	movs	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b00b      	add	sp, #44	@ 0x2c
 80068f8:	bd90      	pop	{r4, r7, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	20001620 	.word	0x20001620

08006900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af02      	add	r7, sp, #8
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800690a:	4b19      	ldr	r3, [pc, #100]	@ (8006970 <prvProcessExpiredTimer+0x70>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3304      	adds	r3, #4
 8006918:	0018      	movs	r0, r3
 800691a:	f7fe fcf2 	bl	8005302 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d11a      	bne.n	800695c <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	18d1      	adds	r1, r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f8ba 	bl	8006aac <prvInsertTimerInActiveList>
 8006938:	1e03      	subs	r3, r0, #0
 800693a:	d00f      	beq.n	800695c <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	2100      	movs	r1, #0
 8006948:	f7ff ff8e 	bl	8006868 <xTimerGenericCommand>
 800694c:	0003      	movs	r3, r0
 800694e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <prvProcessExpiredTimer+0x5c>
 8006956:	b672      	cpsid	i
 8006958:	46c0      	nop			@ (mov r8, r8)
 800695a:	e7fd      	b.n	8006958 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	0010      	movs	r0, r2
 8006964:	4798      	blx	r3
}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	46bd      	mov	sp, r7
 800696a:	b004      	add	sp, #16
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	20001618 	.word	0x20001618

08006974 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800697c:	2308      	movs	r3, #8
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f853 	bl	8006a2c <prvGetNextExpireTime>
 8006986:	0003      	movs	r3, r0
 8006988:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f000 f805 	bl	80069a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006996:	f000 f8cb 	bl	8006b30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	e7ee      	b.n	800697c <prvTimerTask+0x8>
	...

080069a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069aa:	f7ff fae9 	bl	8005f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ae:	2308      	movs	r3, #8
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 f85a 	bl	8006a6c <prvSampleTimeNow>
 80069b8:	0003      	movs	r3, r0
 80069ba:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d129      	bne.n	8006a16 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10c      	bne.n	80069e2 <prvProcessTimerOrBlockTask+0x42>
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d808      	bhi.n	80069e2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80069d0:	f7ff fae2 	bl	8005f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f7ff ff90 	bl	8006900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069e0:	e01b      	b.n	8006a1a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a24 <prvProcessTimerOrBlockTask+0x84>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	425a      	negs	r2, r3
 80069f0:	4153      	adcs	r3, r2
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <prvProcessTimerOrBlockTask+0x88>)
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	0019      	movs	r1, r3
 8006a04:	f7ff f898 	bl	8005b38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a08:	f7ff fac6 	bl	8005f98 <xTaskResumeAll>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d104      	bne.n	8006a1a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006a10:	f000 fa56 	bl	8006ec0 <vPortYield>
}
 8006a14:	e001      	b.n	8006a1a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006a16:	f7ff fabf 	bl	8005f98 <xTaskResumeAll>
}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b004      	add	sp, #16
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	2000161c 	.word	0x2000161c
 8006a28:	20001620 	.word	0x20001620

08006a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a34:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <prvGetNextExpireTime+0x3c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	425a      	negs	r2, r3
 8006a3c:	4153      	adcs	r3, r2
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	001a      	movs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <prvGetNextExpireTime+0x3c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e001      	b.n	8006a5e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b004      	add	sp, #16
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20001618 	.word	0x20001618

08006a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a74:	f7ff fb16 	bl	80060a4 <xTaskGetTickCount>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <prvSampleTimeNow+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d205      	bcs.n	8006a92 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006a86:	f000 f8f5 	bl	8006c74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e002      	b.n	8006a98 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a98:	4b03      	ldr	r3, [pc, #12]	@ (8006aa8 <prvSampleTimeNow+0x3c>)
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b004      	add	sp, #16
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20001628 	.word	0x20001628

08006aac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d812      	bhi.n	8006af8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	e01b      	b.n	8006b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ae6:	4b10      	ldr	r3, [pc, #64]	@ (8006b28 <prvInsertTimerInActiveList+0x7c>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3304      	adds	r3, #4
 8006aee:	0019      	movs	r1, r3
 8006af0:	0010      	movs	r0, r2
 8006af2:	f7fe fbd0 	bl	8005296 <vListInsert>
 8006af6:	e012      	b.n	8006b1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d206      	bcs.n	8006b0e <prvInsertTimerInActiveList+0x62>
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d302      	bcc.n	8006b0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	e007      	b.n	8006b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b0e:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <prvInsertTimerInActiveList+0x80>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3304      	adds	r3, #4
 8006b16:	0019      	movs	r1, r3
 8006b18:	0010      	movs	r0, r2
 8006b1a:	f7fe fbbc 	bl	8005296 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b1e:	697b      	ldr	r3, [r7, #20]
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b006      	add	sp, #24
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2000161c 	.word	0x2000161c
 8006b2c:	20001618 	.word	0x20001618

08006b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b08d      	sub	sp, #52	@ 0x34
 8006b34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b36:	e089      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b38:	2208      	movs	r2, #8
 8006b3a:	18bb      	adds	r3, r7, r2
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da10      	bge.n	8006b64 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b42:	18bb      	adds	r3, r7, r2
 8006b44:	3304      	adds	r3, #4
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <prvProcessReceivedCommands+0x24>
 8006b4e:	b672      	cpsid	i
 8006b50:	46c0      	nop			@ (mov r8, r8)
 8006b52:	e7fd      	b.n	8006b50 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	6858      	ldr	r0, [r3, #4]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	0019      	movs	r1, r3
 8006b62:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b64:	2208      	movs	r2, #8
 8006b66:	18bb      	adds	r3, r7, r2
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da00      	bge.n	8006b70 <prvProcessReceivedCommands+0x40>
 8006b6e:	e06d      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b70:	18bb      	adds	r3, r7, r2
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	3304      	adds	r3, #4
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7fe fbbd 	bl	8005302 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b88:	1d3b      	adds	r3, r7, #4
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7ff ff6e 	bl	8006a6c <prvSampleTimeNow>
 8006b90:	0003      	movs	r3, r0
 8006b92:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006b94:	2308      	movs	r3, #8
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d84f      	bhi.n	8006c3e <prvProcessReceivedCommands+0x10e>
 8006b9e:	009a      	lsls	r2, r3, #2
 8006ba0:	4b32      	ldr	r3, [pc, #200]	@ (8006c6c <prvProcessReceivedCommands+0x13c>)
 8006ba2:	18d3      	adds	r3, r2, r3
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ba8:	2408      	movs	r4, #8
 8006baa:	193b      	adds	r3, r7, r4
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	18d1      	adds	r1, r2, r3
 8006bb4:	193b      	adds	r3, r7, r4
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	6a38      	ldr	r0, [r7, #32]
 8006bbc:	f7ff ff76 	bl	8006aac <prvInsertTimerInActiveList>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d040      	beq.n	8006c46 <prvProcessReceivedCommands+0x116>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	6a3a      	ldr	r2, [r7, #32]
 8006bca:	0010      	movs	r0, r2
 8006bcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d137      	bne.n	8006c46 <prvProcessReceivedCommands+0x116>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bd6:	193b      	adds	r3, r7, r4
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	18d2      	adds	r2, r2, r3
 8006be0:	6a38      	ldr	r0, [r7, #32]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	f7ff fe3d 	bl	8006868 <xTimerGenericCommand>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d126      	bne.n	8006c46 <prvProcessReceivedCommands+0x116>
 8006bf8:	b672      	cpsid	i
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	e7fd      	b.n	8006bfa <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bfe:	2308      	movs	r3, #8
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <prvProcessReceivedCommands+0xe6>
 8006c10:	b672      	cpsid	i
 8006c12:	46c0      	nop			@ (mov r8, r8)
 8006c14:	e7fd      	b.n	8006c12 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	18d1      	adds	r1, r2, r3
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	6a38      	ldr	r0, [r7, #32]
 8006c24:	f7ff ff42 	bl	8006aac <prvInsertTimerInActiveList>
					break;
 8006c28:	e010      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	222c      	movs	r2, #44	@ 0x2c
 8006c2e:	5c9b      	ldrb	r3, [r3, r2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <prvProcessReceivedCommands+0x11a>
						{
							vPortFree( pxTimer );
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 fa92 	bl	8007160 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c3c:	e005      	b.n	8006c4a <prvProcessReceivedCommands+0x11a>

				default	:
					/* Don't expect to get here. */
					break;
 8006c3e:	46c0      	nop			@ (mov r8, r8)
 8006c40:	e004      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
					break;
 8006c42:	46c0      	nop			@ (mov r8, r8)
 8006c44:	e002      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
					break;
 8006c46:	46c0      	nop			@ (mov r8, r8)
 8006c48:	e000      	b.n	8006c4c <prvProcessReceivedCommands+0x11c>
					break;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c4c:	4b08      	ldr	r3, [pc, #32]	@ (8006c70 <prvProcessReceivedCommands+0x140>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	18b9      	adds	r1, r7, r2
 8006c54:	2200      	movs	r2, #0
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7fe fd75 	bl	8005746 <xQueueReceive>
 8006c5c:	1e03      	subs	r3, r0, #0
 8006c5e:	d000      	beq.n	8006c62 <prvProcessReceivedCommands+0x132>
 8006c60:	e76a      	b.n	8006b38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b00b      	add	sp, #44	@ 0x2c
 8006c6a:	bd90      	pop	{r4, r7, pc}
 8006c6c:	08007abc 	.word	0x08007abc
 8006c70:	20001620 	.word	0x20001620

08006c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c7a:	e03f      	b.n	8006cfc <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c7c:	4b29      	ldr	r3, [pc, #164]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c86:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3304      	adds	r3, #4
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7fe fb34 	bl	8005302 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	0010      	movs	r0, r2
 8006ca2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d127      	bne.n	8006cfc <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	18d3      	adds	r3, r2, r3
 8006cb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d90e      	bls.n	8006cdc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cca:	4b16      	ldr	r3, [pc, #88]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	0019      	movs	r1, r3
 8006cd4:	0010      	movs	r0, r2
 8006cd6:	f7fe fade 	bl	8005296 <vListInsert>
 8006cda:	e00f      	b.n	8006cfc <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	f7ff fdbe 	bl	8006868 <xTimerGenericCommand>
 8006cec:	0003      	movs	r3, r0
 8006cee:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <prvSwitchTimerLists+0x88>
 8006cf6:	b672      	cpsid	i
 8006cf8:	46c0      	nop			@ (mov r8, r8)
 8006cfa:	e7fd      	b.n	8006cf8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cfc:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ba      	bne.n	8006c7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d06:	4b07      	ldr	r3, [pc, #28]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	@ (8006d28 <prvSwitchTimerLists+0xb4>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b04      	ldr	r3, [pc, #16]	@ (8006d24 <prvSwitchTimerLists+0xb0>)
 8006d12:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006d14:	4b04      	ldr	r3, [pc, #16]	@ (8006d28 <prvSwitchTimerLists+0xb4>)
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	601a      	str	r2, [r3, #0]
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b006      	add	sp, #24
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	20001618 	.word	0x20001618
 8006d28:	2000161c 	.word	0x2000161c

08006d2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d32:	f000 f8d5 	bl	8006ee0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d36:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <prvCheckForValidListAndQueue+0x64>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d123      	bne.n	8006d86 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d3e:	4b15      	ldr	r3, [pc, #84]	@ (8006d94 <prvCheckForValidListAndQueue+0x68>)
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fe fa5d 	bl	8005200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d46:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <prvCheckForValidListAndQueue+0x6c>)
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f7fe fa59 	bl	8005200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d4e:	4b13      	ldr	r3, [pc, #76]	@ (8006d9c <prvCheckForValidListAndQueue+0x70>)
 8006d50:	4a10      	ldr	r2, [pc, #64]	@ (8006d94 <prvCheckForValidListAndQueue+0x68>)
 8006d52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d54:	4b12      	ldr	r3, [pc, #72]	@ (8006da0 <prvCheckForValidListAndQueue+0x74>)
 8006d56:	4a10      	ldr	r2, [pc, #64]	@ (8006d98 <prvCheckForValidListAndQueue+0x6c>)
 8006d58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d5a:	4b12      	ldr	r3, [pc, #72]	@ (8006da4 <prvCheckForValidListAndQueue+0x78>)
 8006d5c:	4a12      	ldr	r2, [pc, #72]	@ (8006da8 <prvCheckForValidListAndQueue+0x7c>)
 8006d5e:	2100      	movs	r1, #0
 8006d60:	9100      	str	r1, [sp, #0]
 8006d62:	2110      	movs	r1, #16
 8006d64:	200a      	movs	r0, #10
 8006d66:	f7fe fb45 	bl	80053f4 <xQueueGenericCreateStatic>
 8006d6a:	0002      	movs	r2, r0
 8006d6c:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <prvCheckForValidListAndQueue+0x64>)
 8006d6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d70:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <prvCheckForValidListAndQueue+0x64>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <prvCheckForValidListAndQueue+0x64>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006dac <prvCheckForValidListAndQueue+0x80>)
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7fe feb1 	bl	8005ae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d86:	f000 f8bd 	bl	8006f04 <vPortExitCritical>
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20001620 	.word	0x20001620
 8006d94:	200015f0 	.word	0x200015f0
 8006d98:	20001604 	.word	0x20001604
 8006d9c:	20001618 	.word	0x20001618
 8006da0:	2000161c 	.word	0x2000161c
 8006da4:	200016cc 	.word	0x200016cc
 8006da8:	2000162c 	.word	0x2000162c
 8006dac:	080074e8 	.word	0x080074e8

08006db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3b04      	subs	r3, #4
 8006dc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2280      	movs	r2, #128	@ 0x80
 8006dc6:	0452      	lsls	r2, r2, #17
 8006dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ddc:	4a08      	ldr	r2, [pc, #32]	@ (8006e00 <pxPortInitialiseStack+0x50>)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b14      	subs	r3, #20
 8006de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3b20      	subs	r3, #32
 8006df2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006df4:	68fb      	ldr	r3, [r7, #12]
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b004      	add	sp, #16
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	08006e05 	.word	0x08006e05

08006e04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <prvTaskExitError+0x2c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	d002      	beq.n	8006e1c <prvTaskExitError+0x18>
 8006e16:	b672      	cpsid	i
 8006e18:	46c0      	nop			@ (mov r8, r8)
 8006e1a:	e7fd      	b.n	8006e18 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006e1c:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0fc      	beq.n	8006e20 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	2000041c 	.word	0x2000041c

08006e34 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006e38:	46c0      	nop			@ (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006e40:	4a0b      	ldr	r2, [pc, #44]	@ (8006e70 <pxCurrentTCBConst2>)
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	3020      	adds	r0, #32
 8006e48:	f380 8809 	msr	PSP, r0
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	f380 8814 	msr	CONTROL, r0
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006e58:	46ae      	mov	lr, r5
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	bc04      	pop	{r2}
 8006e5e:	b662      	cpsie	i
 8006e60:	4718      	bx	r3
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	46c0      	nop			@ (mov r8, r8)
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	46c0      	nop			@ (mov r8, r8)
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	46c0      	nop			@ (mov r8, r8)

08006e70 <pxCurrentTCBConst2>:
 8006e70:	200010f0 	.word	0x200010f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006e74:	46c0      	nop			@ (mov r8, r8)
 8006e76:	46c0      	nop			@ (mov r8, r8)

08006e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e82:	21ff      	movs	r1, #255	@ 0xff
 8006e84:	0409      	lsls	r1, r1, #16
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <xPortStartScheduler+0x40>)
 8006e90:	21ff      	movs	r1, #255	@ 0xff
 8006e92:	0609      	lsls	r1, r1, #24
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006e98:	f000 f898 	bl	8006fcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e9c:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <xPortStartScheduler+0x44>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006ea2:	f7ff ffcd 	bl	8006e40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ea6:	f7ff f99f 	bl	80061e8 <vTaskSwitchContext>
	prvTaskExitError();
 8006eaa:	f7ff ffab 	bl	8006e04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			@ (mov r8, r8)
 8006eb8:	e000ed20 	.word	0xe000ed20
 8006ebc:	2000041c 	.word	0x2000041c

08006ec0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <vPortYield+0x1c>)
 8006ec6:	2280      	movs	r2, #128	@ 0x80
 8006ec8:	0552      	lsls	r2, r2, #21
 8006eca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006ecc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ed0:	f3bf 8f6f 	isb	sy
}
 8006ed4:	46c0      	nop			@ (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006ee4:	b672      	cpsid	i
    uxCriticalNesting++;
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <vPortEnterCritical+0x20>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <vPortEnterCritical+0x20>)
 8006eee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006ef0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	2000041c 	.word	0x2000041c

08006f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f08:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <vPortExitCritical+0x12>
 8006f10:	b672      	cpsid	i
 8006f12:	46c0      	nop			@ (mov r8, r8)
 8006f14:	e7fd      	b.n	8006f12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f1e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006f20:	4b03      	ldr	r3, [pc, #12]	@ (8006f30 <vPortExitCritical+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d100      	bne.n	8006f2a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8006f28:	b662      	cpsie	i
    }
}
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	2000041c 	.word	0x2000041c

08006f34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006f34:	f3ef 8010 	mrs	r0, PRIMASK
 8006f38:	b672      	cpsid	i
 8006f3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006f3c:	46c0      	nop			@ (mov r8, r8)
 8006f3e:	0018      	movs	r0, r3

08006f40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006f40:	f380 8810 	msr	PRIMASK, r0
 8006f44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006f46:	46c0      	nop			@ (mov r8, r8)
	...

08006f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f50:	f3ef 8009 	mrs	r0, PSP
 8006f54:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <pxCurrentTCBConst>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	3820      	subs	r0, #32
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006f5e:	4644      	mov	r4, r8
 8006f60:	464d      	mov	r5, r9
 8006f62:	4656      	mov	r6, sl
 8006f64:	465f      	mov	r7, fp
 8006f66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006f68:	b508      	push	{r3, lr}
 8006f6a:	b672      	cpsid	i
 8006f6c:	f7ff f93c 	bl	80061e8 <vTaskSwitchContext>
 8006f70:	b662      	cpsie	i
 8006f72:	bc0c      	pop	{r2, r3}
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	6808      	ldr	r0, [r1, #0]
 8006f78:	3010      	adds	r0, #16
 8006f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006f7c:	46a0      	mov	r8, r4
 8006f7e:	46a9      	mov	r9, r5
 8006f80:	46b2      	mov	sl, r6
 8006f82:	46bb      	mov	fp, r7
 8006f84:	f380 8809 	msr	PSP, r0
 8006f88:	3820      	subs	r0, #32
 8006f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006f8c:	4718      	bx	r3
 8006f8e:	46c0      	nop			@ (mov r8, r8)

08006f90 <pxCurrentTCBConst>:
 8006f90:	200010f0 	.word	0x200010f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006f94:	46c0      	nop			@ (mov r8, r8)
 8006f96:	46c0      	nop			@ (mov r8, r8)

08006f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f9e:	f7ff ffc9 	bl	8006f34 <ulSetInterruptMaskFromISR>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fa6:	f7ff f88b 	bl	80060c0 <xTaskIncrementTick>
 8006faa:	1e03      	subs	r3, r0, #0
 8006fac:	d003      	beq.n	8006fb6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <SysTick_Handler+0x30>)
 8006fb0:	2280      	movs	r2, #128	@ 0x80
 8006fb2:	0552      	lsls	r2, r2, #21
 8006fb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff ffc1 	bl	8006f40 <vClearInterruptMaskFromISR>
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <prvSetupTimerInterrupt+0x34>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <prvSetupTimerInterrupt+0x38>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <prvSetupTimerInterrupt+0x3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	22fa      	movs	r2, #250	@ 0xfa
 8006fe2:	0091      	lsls	r1, r2, #2
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7f9 f88f 	bl	8000108 <__udivsi3>
 8006fea:	0003      	movs	r3, r0
 8006fec:	001a      	movs	r2, r3
 8006fee:	4b07      	ldr	r3, [pc, #28]	@ (800700c <prvSetupTimerInterrupt+0x40>)
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006ff4:	4b02      	ldr	r3, [pc, #8]	@ (8007000 <prvSetupTimerInterrupt+0x34>)
 8006ff6:	2207      	movs	r2, #7
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	e000e010 	.word	0xe000e010
 8007004:	e000e018 	.word	0xe000e018
 8007008:	20000000 	.word	0x20000000
 800700c:	e000e014 	.word	0xe000e014

08007010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800701c:	f7fe ffb0 	bl	8005f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007020:	4b4a      	ldr	r3, [pc, #296]	@ (800714c <pvPortMalloc+0x13c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007028:	f000 f8e4 	bl	80071f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800702c:	4b48      	ldr	r3, [pc, #288]	@ (8007150 <pvPortMalloc+0x140>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	4013      	ands	r3, r2
 8007034:	d000      	beq.n	8007038 <pvPortMalloc+0x28>
 8007036:	e07b      	b.n	8007130 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d013      	beq.n	8007066 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800703e:	2208      	movs	r2, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	189b      	adds	r3, r3, r2
 8007044:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2207      	movs	r2, #7
 800704a:	4013      	ands	r3, r2
 800704c:	d00b      	beq.n	8007066 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2207      	movs	r2, #7
 8007052:	4393      	bics	r3, r2
 8007054:	3308      	adds	r3, #8
 8007056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2207      	movs	r2, #7
 800705c:	4013      	ands	r3, r2
 800705e:	d002      	beq.n	8007066 <pvPortMalloc+0x56>
 8007060:	b672      	cpsid	i
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	e7fd      	b.n	8007062 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d061      	beq.n	8007130 <pvPortMalloc+0x120>
 800706c:	4b39      	ldr	r3, [pc, #228]	@ (8007154 <pvPortMalloc+0x144>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d85c      	bhi.n	8007130 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007076:	4b38      	ldr	r3, [pc, #224]	@ (8007158 <pvPortMalloc+0x148>)
 8007078:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800707a:	4b37      	ldr	r3, [pc, #220]	@ (8007158 <pvPortMalloc+0x148>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007080:	e004      	b.n	800708c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d903      	bls.n	800709e <pvPortMalloc+0x8e>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f1      	bne.n	8007082 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800709e:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <pvPortMalloc+0x13c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d043      	beq.n	8007130 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	1ad2      	subs	r2, r2, r3
 80070c2:	2308      	movs	r3, #8
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d917      	bls.n	80070fa <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	18d3      	adds	r3, r2, r3
 80070d0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2207      	movs	r2, #7
 80070d6:	4013      	ands	r3, r2
 80070d8:	d002      	beq.n	80070e0 <pvPortMalloc+0xd0>
 80070da:	b672      	cpsid	i
 80070dc:	46c0      	nop			@ (mov r8, r8)
 80070de:	e7fd      	b.n	80070dc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 f8dd 	bl	80072b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070fa:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <pvPortMalloc+0x144>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <pvPortMalloc+0x144>)
 8007106:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <pvPortMalloc+0x144>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <pvPortMalloc+0x14c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d203      	bcs.n	800711c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007114:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <pvPortMalloc+0x144>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	4b10      	ldr	r3, [pc, #64]	@ (800715c <pvPortMalloc+0x14c>)
 800711a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <pvPortMalloc+0x140>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	431a      	orrs	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007130:	f7fe ff32 	bl	8005f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2207      	movs	r2, #7
 8007138:	4013      	ands	r3, r2
 800713a:	d002      	beq.n	8007142 <pvPortMalloc+0x132>
 800713c:	b672      	cpsid	i
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	e7fd      	b.n	800713e <pvPortMalloc+0x12e>
	return pvReturn;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b006      	add	sp, #24
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20002324 	.word	0x20002324
 8007150:	20002330 	.word	0x20002330
 8007154:	20002328 	.word	0x20002328
 8007158:	2000231c 	.word	0x2000231c
 800715c:	2000232c 	.word	0x2000232c

08007160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d037      	beq.n	80071e2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007172:	2308      	movs	r3, #8
 8007174:	425b      	negs	r3, r3
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	18d3      	adds	r3, r2, r3
 800717a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <vPortFree+0x8c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4013      	ands	r3, r2
 800718a:	d102      	bne.n	8007192 <vPortFree+0x32>
 800718c:	b672      	cpsid	i
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	e7fd      	b.n	800718e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <vPortFree+0x40>
 800719a:	b672      	cpsid	i
 800719c:	46c0      	nop			@ (mov r8, r8)
 800719e:	e7fd      	b.n	800719c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4b11      	ldr	r3, [pc, #68]	@ (80071ec <vPortFree+0x8c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4013      	ands	r3, r2
 80071aa:	d01a      	beq.n	80071e2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d116      	bne.n	80071e2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <vPortFree+0x8c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	43db      	mvns	r3, r3
 80071be:	401a      	ands	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071c4:	f7fe fedc 	bl	8005f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <vPortFree+0x90>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	18d2      	adds	r2, r2, r3
 80071d2:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <vPortFree+0x90>)
 80071d4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 f86b 	bl	80072b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071de:	f7fe fedb 	bl	8005f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071e2:	46c0      	nop			@ (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b004      	add	sp, #16
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	20002330 	.word	0x20002330
 80071f0:	20002328 	.word	0x20002328

080071f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071fa:	23c0      	movs	r3, #192	@ 0xc0
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007200:	4b26      	ldr	r3, [pc, #152]	@ (800729c <prvHeapInit+0xa8>)
 8007202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2207      	movs	r2, #7
 8007208:	4013      	ands	r3, r2
 800720a:	d00c      	beq.n	8007226 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3307      	adds	r3, #7
 8007210:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2207      	movs	r2, #7
 8007216:	4393      	bics	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	4b1e      	ldr	r3, [pc, #120]	@ (800729c <prvHeapInit+0xa8>)
 8007222:	18d3      	adds	r3, r2, r3
 8007224:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800722a:	4b1d      	ldr	r3, [pc, #116]	@ (80072a0 <prvHeapInit+0xac>)
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007230:	4b1b      	ldr	r3, [pc, #108]	@ (80072a0 <prvHeapInit+0xac>)
 8007232:	2200      	movs	r2, #0
 8007234:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	18d3      	adds	r3, r2, r3
 800723c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800723e:	2208      	movs	r2, #8
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2207      	movs	r2, #7
 800724a:	4393      	bics	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <prvHeapInit+0xb0>)
 8007252:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007254:	4b13      	ldr	r3, [pc, #76]	@ (80072a4 <prvHeapInit+0xb0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800725c:	4b11      	ldr	r3, [pc, #68]	@ (80072a4 <prvHeapInit+0xb0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	1ad2      	subs	r2, r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007272:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <prvHeapInit+0xb0>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <prvHeapInit+0xb4>)
 8007280:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <prvHeapInit+0xb8>)
 8007288:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800728a:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvHeapInit+0xbc>)
 800728c:	2280      	movs	r2, #128	@ 0x80
 800728e:	0612      	lsls	r2, r2, #24
 8007290:	601a      	str	r2, [r3, #0]
}
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	2000171c 	.word	0x2000171c
 80072a0:	2000231c 	.word	0x2000231c
 80072a4:	20002324 	.word	0x20002324
 80072a8:	2000232c 	.word	0x2000232c
 80072ac:	20002328 	.word	0x20002328
 80072b0:	20002330 	.word	0x20002330

080072b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072bc:	4b27      	ldr	r3, [pc, #156]	@ (800735c <prvInsertBlockIntoFreeList+0xa8>)
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e002      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x14>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d8f7      	bhi.n	80072c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d108      	bne.n	80072f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	18d2      	adds	r2, r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	18d2      	adds	r2, r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d118      	bne.n	800733c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d00d      	beq.n	8007332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	18d2      	adds	r2, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e008      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e003      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	2000231c 	.word	0x2000231c
 8007360:	20002324 	.word	0x20002324

08007364 <__itoa>:
 8007364:	1e93      	subs	r3, r2, #2
 8007366:	b510      	push	{r4, lr}
 8007368:	000c      	movs	r4, r1
 800736a:	2b22      	cmp	r3, #34	@ 0x22
 800736c:	d904      	bls.n	8007378 <__itoa+0x14>
 800736e:	2300      	movs	r3, #0
 8007370:	001c      	movs	r4, r3
 8007372:	700b      	strb	r3, [r1, #0]
 8007374:	0020      	movs	r0, r4
 8007376:	bd10      	pop	{r4, pc}
 8007378:	2a0a      	cmp	r2, #10
 800737a:	d109      	bne.n	8007390 <__itoa+0x2c>
 800737c:	2800      	cmp	r0, #0
 800737e:	da07      	bge.n	8007390 <__itoa+0x2c>
 8007380:	232d      	movs	r3, #45	@ 0x2d
 8007382:	700b      	strb	r3, [r1, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	4240      	negs	r0, r0
 8007388:	1861      	adds	r1, r4, r1
 800738a:	f000 f807 	bl	800739c <__utoa>
 800738e:	e7f1      	b.n	8007374 <__itoa+0x10>
 8007390:	2100      	movs	r1, #0
 8007392:	e7f9      	b.n	8007388 <__itoa+0x24>

08007394 <itoa>:
 8007394:	b510      	push	{r4, lr}
 8007396:	f7ff ffe5 	bl	8007364 <__itoa>
 800739a:	bd10      	pop	{r4, pc}

0800739c <__utoa>:
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	000c      	movs	r4, r1
 80073a0:	0016      	movs	r6, r2
 80073a2:	b08d      	sub	sp, #52	@ 0x34
 80073a4:	2225      	movs	r2, #37	@ 0x25
 80073a6:	0007      	movs	r7, r0
 80073a8:	4915      	ldr	r1, [pc, #84]	@ (8007400 <__utoa+0x64>)
 80073aa:	a802      	add	r0, sp, #8
 80073ac:	f000 f856 	bl	800745c <memcpy>
 80073b0:	1e62      	subs	r2, r4, #1
 80073b2:	1eb3      	subs	r3, r6, #2
 80073b4:	2500      	movs	r5, #0
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	2b22      	cmp	r3, #34	@ 0x22
 80073ba:	d904      	bls.n	80073c6 <__utoa+0x2a>
 80073bc:	7025      	strb	r5, [r4, #0]
 80073be:	002c      	movs	r4, r5
 80073c0:	0020      	movs	r0, r4
 80073c2:	b00d      	add	sp, #52	@ 0x34
 80073c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c6:	0038      	movs	r0, r7
 80073c8:	0031      	movs	r1, r6
 80073ca:	f7f8 ff23 	bl	8000214 <__aeabi_uidivmod>
 80073ce:	000b      	movs	r3, r1
 80073d0:	aa02      	add	r2, sp, #8
 80073d2:	5cd3      	ldrb	r3, [r2, r3]
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	0029      	movs	r1, r5
 80073d8:	3501      	adds	r5, #1
 80073da:	5553      	strb	r3, [r2, r5]
 80073dc:	003b      	movs	r3, r7
 80073de:	0007      	movs	r7, r0
 80073e0:	429e      	cmp	r6, r3
 80073e2:	d9f0      	bls.n	80073c6 <__utoa+0x2a>
 80073e4:	2300      	movs	r3, #0
 80073e6:	0022      	movs	r2, r4
 80073e8:	5563      	strb	r3, [r4, r5]
 80073ea:	000b      	movs	r3, r1
 80073ec:	1ac8      	subs	r0, r1, r3
 80073ee:	4283      	cmp	r3, r0
 80073f0:	dde6      	ble.n	80073c0 <__utoa+0x24>
 80073f2:	7810      	ldrb	r0, [r2, #0]
 80073f4:	5ce5      	ldrb	r5, [r4, r3]
 80073f6:	7015      	strb	r5, [r2, #0]
 80073f8:	54e0      	strb	r0, [r4, r3]
 80073fa:	3201      	adds	r2, #1
 80073fc:	3b01      	subs	r3, #1
 80073fe:	e7f5      	b.n	80073ec <__utoa+0x50>
 8007400:	08007ae4 	.word	0x08007ae4

08007404 <memset>:
 8007404:	0003      	movs	r3, r0
 8007406:	1882      	adds	r2, r0, r2
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <__libc_init_array>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	2600      	movs	r6, #0
 8007418:	4c0c      	ldr	r4, [pc, #48]	@ (800744c <__libc_init_array+0x38>)
 800741a:	4d0d      	ldr	r5, [pc, #52]	@ (8007450 <__libc_init_array+0x3c>)
 800741c:	1b64      	subs	r4, r4, r5
 800741e:	10a4      	asrs	r4, r4, #2
 8007420:	42a6      	cmp	r6, r4
 8007422:	d109      	bne.n	8007438 <__libc_init_array+0x24>
 8007424:	2600      	movs	r6, #0
 8007426:	f000 f823 	bl	8007470 <_init>
 800742a:	4c0a      	ldr	r4, [pc, #40]	@ (8007454 <__libc_init_array+0x40>)
 800742c:	4d0a      	ldr	r5, [pc, #40]	@ (8007458 <__libc_init_array+0x44>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	42a6      	cmp	r6, r4
 8007434:	d105      	bne.n	8007442 <__libc_init_array+0x2e>
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	00b3      	lsls	r3, r6, #2
 800743a:	58eb      	ldr	r3, [r5, r3]
 800743c:	4798      	blx	r3
 800743e:	3601      	adds	r6, #1
 8007440:	e7ee      	b.n	8007420 <__libc_init_array+0xc>
 8007442:	00b3      	lsls	r3, r6, #2
 8007444:	58eb      	ldr	r3, [r5, r3]
 8007446:	4798      	blx	r3
 8007448:	3601      	adds	r6, #1
 800744a:	e7f2      	b.n	8007432 <__libc_init_array+0x1e>
 800744c:	08007b0c 	.word	0x08007b0c
 8007450:	08007b0c 	.word	0x08007b0c
 8007454:	08007b10 	.word	0x08007b10
 8007458:	08007b0c 	.word	0x08007b0c

0800745c <memcpy>:
 800745c:	2300      	movs	r3, #0
 800745e:	b510      	push	{r4, lr}
 8007460:	429a      	cmp	r2, r3
 8007462:	d100      	bne.n	8007466 <memcpy+0xa>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	5ccc      	ldrb	r4, [r1, r3]
 8007468:	54c4      	strb	r4, [r0, r3]
 800746a:	3301      	adds	r3, #1
 800746c:	e7f8      	b.n	8007460 <memcpy+0x4>
	...

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
