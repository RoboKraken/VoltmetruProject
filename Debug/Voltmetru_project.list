
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08005c44  08005c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f0  080067f0  00008424  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080067f0  080067f0  00008424  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080067f0  080067f0  00008424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  080067f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000424  08006c1c  00008424  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08006c1c  00008934  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008424  2**0
                  CONTENTS, READONLY
 12 .debug_line   00014df5  00000000  00000000  0000844c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001d241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000e72a  00000000  00000000  0001d2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cb7  00000000  00000000  0002b9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec8  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a9d60  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b65  00000000  00000000  000d92b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001c243  00000000  00000000  000d9e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f6060  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033c0  00000000  00000000  000f60a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000424 	.word	0x20000424
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005c2c 	.word	0x08005c2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000428 	.word	0x20000428
 8000100:	08005c2c 	.word	0x08005c2c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	@ (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f000 fac8 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	@ (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	@ (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	@ (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f005 fbd7 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f001 fbdb 	bl	8001bdc <main>

08000426 <LoopForever>:

LoopForever:
    b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8000434:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8000438:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800043c:	20000934 	.word	0x20000934

08000440 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_COMP_IRQHandler>
	...

08000444 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	230c      	movs	r3, #12
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f005 fbb4 	bl	8005bc0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000458:	4b2c      	ldr	r3, [pc, #176]	@ (800050c <MX_ADC_Init+0xc8>)
 800045a:	4a2d      	ldr	r2, [pc, #180]	@ (8000510 <MX_ADC_Init+0xcc>)
 800045c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800045e:	4b2b      	ldr	r3, [pc, #172]	@ (800050c <MX_ADC_Init+0xc8>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000464:	4b29      	ldr	r3, [pc, #164]	@ (800050c <MX_ADC_Init+0xc8>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046a:	4b28      	ldr	r3, [pc, #160]	@ (800050c <MX_ADC_Init+0xc8>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000470:	4b26      	ldr	r3, [pc, #152]	@ (800050c <MX_ADC_Init+0xc8>)
 8000472:	2201      	movs	r2, #1
 8000474:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000476:	4b25      	ldr	r3, [pc, #148]	@ (800050c <MX_ADC_Init+0xc8>)
 8000478:	2204      	movs	r2, #4
 800047a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <MX_ADC_Init+0xc8>)
 800047e:	2200      	movs	r2, #0
 8000480:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MX_ADC_Init+0xc8>)
 8000484:	2200      	movs	r2, #0
 8000486:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000488:	4b20      	ldr	r3, [pc, #128]	@ (800050c <MX_ADC_Init+0xc8>)
 800048a:	2200      	movs	r2, #0
 800048c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_ADC_Init+0xc8>)
 8000490:	2200      	movs	r2, #0
 8000492:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000494:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <MX_ADC_Init+0xc8>)
 8000496:	22c0      	movs	r2, #192	@ 0xc0
 8000498:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800049a:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <MX_ADC_Init+0xc8>)
 800049c:	22c0      	movs	r2, #192	@ 0xc0
 800049e:	0112      	lsls	r2, r2, #4
 80004a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_ADC_Init+0xc8>)
 80004a4:	2224      	movs	r2, #36	@ 0x24
 80004a6:	2101      	movs	r1, #1
 80004a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_ADC_Init+0xc8>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_ADC_Init+0xc8>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fec6 	bl	8003244 <HAL_ADC_Init>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004bc:	f002 fd7c 	bl	8002fb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0152      	lsls	r2, r2, #5
 80004cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2207      	movs	r2, #7
 80004d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004d4:	1d3a      	adds	r2, r7, #4
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_ADC_Init+0xc8>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f003 f88c 	bl	80035f8 <HAL_ADC_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80004e4:	f002 fd68 	bl	8002fb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	1d3a      	adds	r2, r7, #4
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_ADC_Init+0xc8>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f003 f87f 	bl	80035f8 <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80004fe:	f002 fd5b 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b004      	add	sp, #16
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	20000440 	.word	0x20000440
 8000510:	40012400 	.word	0x40012400

08000514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	@ 0x2c
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	2414      	movs	r4, #20
 800051e:	193b      	adds	r3, r7, r4
 8000520:	0018      	movs	r0, r3
 8000522:	2314      	movs	r3, #20
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f005 fb4a 	bl	8005bc0 <memset>
  if(adcHandle->Instance==ADC1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a35      	ldr	r2, [pc, #212]	@ (8000608 <HAL_ADC_MspInit+0xf4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d164      	bne.n	8000600 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 800053c:	2180      	movs	r1, #128	@ 0x80
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	430a      	orrs	r2, r1
 8000542:	619a      	str	r2, [r3, #24]
 8000544:	4b31      	ldr	r3, [pc, #196]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0289      	lsls	r1, r1, #10
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <HAL_ADC_MspInit+0xf8>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	029b      	lsls	r3, r3, #10
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2203      	movs	r2, #3
 8000578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	193a      	adds	r2, r7, r4
 8000582:	2390      	movs	r3, #144	@ 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f003 fcdf 	bl	8003f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel2;
 800058e:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <HAL_ADC_MspInit+0x100>)
 8000592:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	00d2      	lsls	r2, r2, #3
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005b8:	2220      	movs	r2, #32
 80005ba:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	0152      	lsls	r2, r2, #5
 80005c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 fb0a 	bl	8003be0 <HAL_DMA_Init>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80005d0:	f002 fcf2 	bl	8002fb8 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_ADC);
 80005d4:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005d6:	23a8      	movs	r3, #168	@ 0xa8
 80005d8:	58d3      	ldr	r3, [r2, r3]
 80005da:	490f      	ldr	r1, [pc, #60]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	4393      	bics	r3, r2
 80005e0:	22a8      	movs	r2, #168	@ 0xa8
 80005e2:	508b      	str	r3, [r1, r2]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005e6:	23a8      	movs	r3, #168	@ 0xa8
 80005e8:	58d3      	ldr	r3, [r2, r3]
 80005ea:	490b      	ldr	r1, [pc, #44]	@ (8000618 <HAL_ADC_MspInit+0x104>)
 80005ec:	2210      	movs	r2, #16
 80005ee:	4313      	orrs	r3, r2
 80005f0:	22a8      	movs	r2, #168	@ 0xa8
 80005f2:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_ADC_MspInit+0xfc>)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	@ 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40012400 	.word	0x40012400
 800060c:	40021000 	.word	0x40021000
 8000610:	20000480 	.word	0x20000480
 8000614:	4002001c 	.word	0x4002001c
 8000618:	40020000 	.word	0x40020000

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_DMA_Init+0x38>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_DMA_Init+0x38>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_DMA_Init+0x38>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	200a      	movs	r0, #10
 8000640:	f003 fa9c 	bl	8003b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000644:	200a      	movs	r0, #10
 8000646:	f003 faae 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08b      	sub	sp, #44	@ 0x2c
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2414      	movs	r4, #20
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f005 faa9 	bl	8005bc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b59      	ldr	r3, [pc, #356]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b58      	ldr	r3, [pc, #352]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	0309      	lsls	r1, r1, #12
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b55      	ldr	r3, [pc, #340]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	031b      	lsls	r3, r3, #12
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068a:	4b52      	ldr	r3, [pc, #328]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b51      	ldr	r3, [pc, #324]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	03c9      	lsls	r1, r1, #15
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b4e      	ldr	r3, [pc, #312]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	03db      	lsls	r3, r3, #15
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b4b      	ldr	r3, [pc, #300]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0289      	lsls	r1, r1, #10
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	02c9      	lsls	r1, r1, #11
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b40      	ldr	r3, [pc, #256]	@ (80007d4 <MX_GPIO_Init+0x17c>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	02db      	lsls	r3, r3, #11
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 80006de:	4b3e      	ldr	r3, [pc, #248]	@ (80007d8 <MX_GPIO_Init+0x180>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2180      	movs	r1, #128	@ 0x80
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 fda9 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 80006ea:	23c0      	movs	r3, #192	@ 0xc0
 80006ec:	0099      	lsls	r1, r3, #2
 80006ee:	2390      	movs	r3, #144	@ 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f003 fda1 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 80006fa:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	0018      	movs	r0, r3
 8000702:	f003 fd9b 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	0192      	lsls	r2, r2, #6
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2284      	movs	r2, #132	@ 0x84
 8000712:	0392      	lsls	r2, r2, #14
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a2e      	ldr	r2, [pc, #184]	@ (80007d8 <MX_GPIO_Init+0x180>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f003 fc12 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	193a      	adds	r2, r7, r4
 8000748:	2390      	movs	r3, #144	@ 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f003 fbfc 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0x180>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f003 fbea 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	22c0      	movs	r2, #192	@ 0xc0
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	000c      	movs	r4, r1
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	193a      	adds	r2, r7, r4
 8000798:	2390      	movs	r3, #144	@ 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 fbd4 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	4a06      	ldr	r2, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x184>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f003 fbc1 	bl	8003f4c <HAL_GPIO_Init>

}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b00b      	add	sp, #44	@ 0x2c
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800
 80007dc:	48000400 	.word	0x48000400

080007e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <MX_SPI1_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007ec:	2282      	movs	r2, #130	@ 0x82
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_SPI1_Init+0x74>)
 80007fa:	22e0      	movs	r2, #224	@ 0xe0
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI1_Init+0x74>)
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000816:	2218      	movs	r2, #24
 8000818:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI1_Init+0x74>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI1_Init+0x74>)
 800083a:	2208      	movs	r2, #8
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <MX_SPI1_Init+0x74>)
 8000840:	0018      	movs	r0, r3
 8000842:	f004 faeb 	bl	8004e1c <HAL_SPI_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084a:	f002 fbb5 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200004c4 	.word	0x200004c4
 8000858:	40013000 	.word	0x40013000

0800085c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b08b      	sub	sp, #44	@ 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	2414      	movs	r4, #20
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f005 f9a6 	bl	8005bc0 <memset>
  if(spiHandle->Instance==SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <HAL_SPI_MspInit+0x90>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d132      	bne.n	80008e4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 8000880:	699a      	ldr	r2, [r3, #24]
 8000882:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	0149      	lsls	r1, r1, #5
 8000888:	430a      	orrs	r2, r1
 800088a:	619a      	str	r2, [r3, #24]
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 800088e:	699a      	ldr	r2, [r3, #24]
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	015b      	lsls	r3, r3, #5
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0289      	lsls	r1, r1, #10
 80008a4:	430a      	orrs	r2, r1
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_SPI_MspInit+0x94>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b6:	0021      	movs	r1, r4
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	22a0      	movs	r2, #160	@ 0xa0
 80008bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2202      	movs	r2, #2
 80008c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2203      	movs	r2, #3
 80008ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	187a      	adds	r2, r7, r1
 80008d8:	2390      	movs	r3, #144	@ 0x90
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f003 fb34 	bl	8003f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b00b      	add	sp, #44	@ 0x2c
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	2101      	movs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	619a      	str	r2, [r3, #24]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	0549      	lsls	r1, r1, #21
 800091c:	430a      	orrs	r2, r1
 800091e:	61da      	str	r2, [r3, #28]
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_MspInit+0x44>)
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	055b      	lsls	r3, r3, #21
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f002 fc2e 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000976:	0018      	movs	r0, r3
 8000978:	f003 f9e0 	bl	8003d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	20000480 	.word	0x20000480

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	2308      	movs	r3, #8
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	0018      	movs	r0, r3
 80009a0:	2310      	movs	r3, #16
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f005 f90b 	bl	8005bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	003b      	movs	r3, r7
 80009ac:	0018      	movs	r0, r3
 80009ae:	2308      	movs	r3, #8
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f005 f904 	bl	8005bc0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	05d2      	lsls	r2, r2, #23
 80009be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009c2:	222f      	movs	r2, #47	@ 0x2f
 80009c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	4252      	negs	r2, r2
 80009d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 fda8 	bl	8005538 <HAL_TIM_Base_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f002 fae4 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	2108      	movs	r1, #8
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	0152      	lsls	r2, r2, #5
 80009f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f004 fe33 	bl	800566c <HAL_TIM_ConfigClockSource>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a0a:	f002 fad5 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_TIM2_Init+0xa4>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f005 f81f 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a2a:	f002 fac5 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b006      	add	sp, #24
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000528 	.word	0x20000528

08000a3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	2308      	movs	r3, #8
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f005 f8b7 	bl	8005bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	003b      	movs	r3, r7
 8000a54:	0018      	movs	r0, r3
 8000a56:	2308      	movs	r3, #8
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f005 f8b0 	bl	8005bc0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <MX_TIM3_Init+0xa4>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a68:	220e      	movs	r2, #14
 8000a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <MX_TIM3_Init+0xa8>)
 8000a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f004 fd56 	bl	8005538 <HAL_TIM_Base_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a90:	f002 fa92 	bl	8002fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	2108      	movs	r1, #8
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f004 fde1 	bl	800566c <HAL_TIM_ConfigClockSource>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000aae:	f002 fa83 	bl	8002fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abe:	003a      	movs	r2, r7
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_TIM3_Init+0xa0>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f004 ffcd 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ace:	f002 fa73 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b006      	add	sp, #24
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	20000570 	.word	0x20000570
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	000003e7 	.word	0x000003e7

08000ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d10c      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000afe:	69da      	ldr	r2, [r3, #28]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b14:	e010      	b.n	8000b38 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d10b      	bne.n	8000b38 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b22:	69da      	ldr	r2, [r3, #28]
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b26:	2102      	movs	r1, #2
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	61da      	str	r2, [r3, #28]
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <HAL_TIM_Base_MspInit+0x58>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	2202      	movs	r2, #2
 8000b32:	4013      	ands	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40000400 	.word	0x40000400

08000b48 <update_tim3_frequency>:

FrequencyMode currentFreqMode = FREQ_50HZ;



void update_tim3_frequency(FrequencyMode mode) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_DISABLE(&htim3);
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <update_tim3_frequency+0x78>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	d10d      	bne.n	8000b7c <update_tim3_frequency+0x34>
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <update_tim3_frequency+0x7c>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d107      	bne.n	8000b7c <update_tim3_frequency+0x34>
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	438a      	bics	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim3, tim3_arr_values[mode]);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	7819      	ldrb	r1, [r3, #0]
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <update_tim3_frequency+0x80>)
 8000b86:	0089      	lsls	r1, r1, #2
 8000b88:	588a      	ldr	r2, [r1, r2]
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <update_tim3_frequency+0x80>)
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	58d2      	ldr	r2, [r2, r3]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b98:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_ENABLE(&htim3);
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <update_tim3_frequency+0x74>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000570 	.word	0x20000570
 8000bc0:	00001111 	.word	0x00001111
 8000bc4:	00000444 	.word	0x00000444
 8000bc8:	08005d98 	.word	0x08005d98

08000bcc <HAL_GetTick_us>:
    TIM2->ARR = 0xFFFFFFFF;                          // free-run
    TIM2->CR1 = TIM_CR1_CEN;
}*/

uint32_t HAL_GetTick_us(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    return TIM2->CNT;          // 1-µs resolution
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <st7565_write_buffer>:
        }
    }
}
#else
void st7565_write_buffer(uint8_t *buffer)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    uint8_t p;
    for (p = 0; p < 8; p++) {
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e042      	b.n	8000c74 <st7565_write_buffer+0x98>
        CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <st7565_write_buffer+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f003 fb21 	bl	800423c <HAL_GPIO_WritePin>
 8000bfa:	240f      	movs	r4, #15
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4a22      	ldr	r2, [pc, #136]	@ (8000c8c <st7565_write_buffer+0xb0>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2250      	movs	r2, #80	@ 0x50
 8000c06:	4252      	negs	r2, r2
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f841 	bl	8000c94 <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <st7565_write_buffer+0xac>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	@ 0x80
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f003 fb0f 	bl	800423c <HAL_GPIO_WritePin>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f838 	bl	8000c94 <st7565_sendbyte>
        CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <st7565_write_buffer+0xac>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f003 fb06 	bl	800423c <HAL_GPIO_WritePin>
 8000c30:	2010      	movs	r0, #16
 8000c32:	f000 f82f 	bl	8000c94 <st7565_sendbyte>
        CMD(ST7565_CMD_RMW);
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <st7565_write_buffer+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f003 fafd 	bl	800423c <HAL_GPIO_WritePin>
 8000c42:	20e0      	movs	r0, #224	@ 0xe0
 8000c44:	f000 f826 	bl	8000c94 <st7565_sendbyte>
        HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <st7565_write_buffer+0xac>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 faf4 	bl	800423c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, &buffer[128 * p], 128, 6);
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	01db      	lsls	r3, r3, #7
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1899      	adds	r1, r3, r2
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <st7565_write_buffer+0xb4>)
 8000c62:	2306      	movs	r3, #6
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	f004 f991 	bl	8004f8c <HAL_SPI_Transmit>
    for (p = 0; p < 8; p++) {
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	3201      	adds	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d9b7      	bls.n	8000bee <st7565_write_buffer+0x12>
    }
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b005      	add	sp, #20
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	20000414 	.word	0x20000414
 8000c90:	200004c4 	.word	0x200004c4

08000c94 <st7565_sendbyte>:
#endif

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000ca0:	1df9      	adds	r1, r7, #7
 8000ca2:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <st7565_sendbyte+0x20>)
 8000ca4:	2364      	movs	r3, #100	@ 0x64
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f004 f970 	bl	8004f8c <HAL_SPI_Transmit>
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200004c4 	.word	0x200004c4

08000cb8 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	0059      	lsls	r1, r3, #1
 8000cc0:	2390      	movs	r3, #144	@ 0x90
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 fab8 	bl	800423c <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e08 <st7565_init+0x150>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2180      	movs	r1, #128	@ 0x80
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fab2 	bl	800423c <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	0099      	lsls	r1, r3, #2
 8000cdc:	2390      	movs	r3, #144	@ 0x90
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 faaa 	bl	800423c <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <st7565_init+0x154>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	2140      	movs	r1, #64	@ 0x40
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f003 faa4 	bl	800423c <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000cf4:	4b45      	ldr	r3, [pc, #276]	@ (8000e0c <st7565_init+0x154>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	@ 0x40
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f003 fa9e 	bl	800423c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	0099      	lsls	r1, r3, #2
 8000d04:	2390      	movs	r3, #144	@ 0x90
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2200      	movs	r2, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f003 fa96 	bl	800423c <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000d10:	23fa      	movs	r3, #250	@ 0xfa
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 fa71 	bl	80031fc <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	0099      	lsls	r1, r3, #2
 8000d1e:	2390      	movs	r3, #144	@ 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2201      	movs	r2, #1
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 fa89 	bl	800423c <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8000d2a:	4b37      	ldr	r3, [pc, #220]	@ (8000e08 <st7565_init+0x150>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	@ 0x80
 8000d30:	0018      	movs	r0, r3
 8000d32:	f003 fa83 	bl	800423c <HAL_GPIO_WritePin>
 8000d36:	20a3      	movs	r0, #163	@ 0xa3
 8000d38:	f7ff ffac 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000d3c:	4b32      	ldr	r3, [pc, #200]	@ (8000e08 <st7565_init+0x150>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	0018      	movs	r0, r3
 8000d44:	f003 fa7a 	bl	800423c <HAL_GPIO_WritePin>
 8000d48:	20a0      	movs	r0, #160	@ 0xa0
 8000d4a:	f7ff ffa3 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <st7565_init+0x150>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	0018      	movs	r0, r3
 8000d56:	f003 fa71 	bl	800423c <HAL_GPIO_WritePin>
 8000d5a:	20c0      	movs	r0, #192	@ 0xc0
 8000d5c:	f7ff ff9a 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000d60:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <st7565_init+0x150>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	2180      	movs	r1, #128	@ 0x80
 8000d66:	0018      	movs	r0, r3
 8000d68:	f003 fa68 	bl	800423c <HAL_GPIO_WritePin>
 8000d6c:	2040      	movs	r0, #64	@ 0x40
 8000d6e:	f7ff ff91 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <st7565_init+0x150>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	2180      	movs	r1, #128	@ 0x80
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f003 fa5f 	bl	800423c <HAL_GPIO_WritePin>
 8000d7e:	202c      	movs	r0, #44	@ 0x2c
 8000d80:	f7ff ff88 	bl	8000c94 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000d84:	2032      	movs	r0, #50	@ 0x32
 8000d86:	f002 fa39 	bl	80031fc <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <st7565_init+0x150>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	@ 0x80
 8000d90:	0018      	movs	r0, r3
 8000d92:	f003 fa53 	bl	800423c <HAL_GPIO_WritePin>
 8000d96:	202e      	movs	r0, #46	@ 0x2e
 8000d98:	f7ff ff7c 	bl	8000c94 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000d9c:	2032      	movs	r0, #50	@ 0x32
 8000d9e:	f002 fa2d 	bl	80031fc <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <st7565_init+0x150>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 fa47 	bl	800423c <HAL_GPIO_WritePin>
 8000dae:	202f      	movs	r0, #47	@ 0x2f
 8000db0:	f7ff ff70 	bl	8000c94 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000db4:	200a      	movs	r0, #10
 8000db6:	f002 fa21 	bl	80031fc <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <st7565_init+0x150>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f003 fa3b 	bl	800423c <HAL_GPIO_WritePin>
 8000dc6:	2026      	movs	r0, #38	@ 0x26
 8000dc8:	f7ff ff64 	bl	8000c94 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <st7565_init+0x150>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2180      	movs	r1, #128	@ 0x80
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f003 fa32 	bl	800423c <HAL_GPIO_WritePin>
 8000dd8:	20af      	movs	r0, #175	@ 0xaf
 8000dda:	f7ff ff5b 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <st7565_init+0x150>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	0018      	movs	r0, r3
 8000de6:	f003 fa29 	bl	800423c <HAL_GPIO_WritePin>
 8000dea:	20a4      	movs	r0, #164	@ 0xa4
 8000dec:	f7ff ff52 	bl	8000c94 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f81d 	bl	8000e30 <st7565_set_brightness>
 	st7565_clear_screen();
 8000df6:	f000 f83f 	bl	8000e78 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <st7565_init+0x158>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 f897 	bl	8000f30 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	20000014 	.word	0x20000014

08000e14 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	0059      	lsls	r1, r3, #1
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	2201      	movs	r2, #1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f003 fa0a 	bl	800423c <HAL_GPIO_WritePin>
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <st7565_set_brightness+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 f9fa 	bl	800423c <HAL_GPIO_WritePin>
 8000e48:	2081      	movs	r0, #129	@ 0x81
 8000e4a:	f7ff ff23 	bl	8000c94 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <st7565_set_brightness+0x44>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	0018      	movs	r0, r3
 8000e56:	f003 f9f1 	bl	800423c <HAL_GPIO_WritePin>
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	223f      	movs	r2, #63	@ 0x3f
 8000e60:	4013      	ands	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ff15 	bl	8000c94 <st7565_sendbyte>
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	48000800 	.word	0x48000800

08000e78 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e049      	b.n	8000f1a <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000e86:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <st7565_clear_screen+0xb4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2180      	movs	r1, #128	@ 0x80
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f003 f9d5 	bl	800423c <HAL_GPIO_WritePin>
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2250      	movs	r2, #80	@ 0x50
 8000e98:	4252      	negs	r2, r2
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fef8 	bl	8000c94 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e02d      	b.n	8000f08 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <st7565_clear_screen+0xb4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f003 f9c2 	bl	800423c <HAL_GPIO_WritePin>
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff fee6 	bl	8000c94 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <st7565_clear_screen+0xb4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f003 f9b4 	bl	800423c <HAL_GPIO_WritePin>
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	2210      	movs	r2, #16
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff fed4 	bl	8000c94 <st7565_sendbyte>
			DATA(0x0);
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <st7565_clear_screen+0xb4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2180      	movs	r1, #128	@ 0x80
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 f9a2 	bl	800423c <HAL_GPIO_WritePin>
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fecb 	bl	8000c94 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000efe:	1dbb      	adds	r3, r7, #6
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	3201      	adds	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	1dbb      	adds	r3, r7, #6
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b80      	cmp	r3, #128	@ 0x80
 8000f0e:	d9cd      	bls.n	8000eac <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	3201      	adds	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d9b1      	bls.n	8000e86 <st7565_clear_screen+0xe>
		}
	}
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	48000800 	.word	0x48000800

08000f30 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	00da      	lsls	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	0018      	movs	r0, r3
 8000f42:	f004 fe3d 	bl	8005bc0 <memset>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	000c      	movs	r4, r1
 8000f58:	0010      	movs	r0, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	1cfb      	adds	r3, r7, #3
 8000f5e:	1c22      	adds	r2, r4, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	1cbb      	adds	r3, r7, #2
 8000f64:	1c02      	adds	r2, r0, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	1c7b      	adds	r3, r7, #1
 8000f6a:	1c0a      	adds	r2, r1, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db51      	blt.n	800101c <st7565_setpixel+0xce>
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f7e:	d84d      	bhi.n	800101c <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000f80:	1c7b      	adds	r3, r7, #1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d023      	beq.n	8000fd0 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000f88:	1cfb      	adds	r3, r7, #3
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	1cbb      	adds	r3, r7, #2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	0003      	movs	r3, r0
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	189b      	adds	r3, r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	1cbb      	adds	r3, r7, #2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	2107      	movs	r1, #7
 8000fac:	400b      	ands	r3, r1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4099      	lsls	r1, r3
 8000fb2:	000b      	movs	r3, r1
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b259      	sxtb	r1, r3
 8000fba:	1cfb      	adds	r3, r7, #3
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	01db      	lsls	r3, r3, #7
 8000fc2:	18d3      	adds	r3, r2, r3
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e026      	b.n	800101e <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000fd0:	1cfb      	adds	r3, r7, #3
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	1cbb      	adds	r3, r7, #2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	0003      	movs	r3, r0
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	1cba      	adds	r2, r7, #2
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	2107      	movs	r1, #7
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	b252      	sxtb	r2, r2
 8000ffe:	43d2      	mvns	r2, r2
 8001000:	b252      	sxtb	r2, r2
 8001002:	4013      	ands	r3, r2
 8001004:	b259      	sxtb	r1, r3
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	0003      	movs	r3, r0
 800100c:	01db      	lsls	r3, r3, #7
 800100e:	18d3      	adds	r3, r2, r3
 8001010:	001a      	movs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	189b      	adds	r3, r3, r2
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e000      	b.n	800101e <st7565_setpixel+0xd0>
		return;
 800101c:	46c0      	nop			@ (mov r8, r8)
}
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}

08001024 <st7565_drawstring>:
		}
	}
}

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c,uint8_t fontSelect) {
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b087      	sub	sp, #28
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	0008      	movs	r0, r1
 800102e:	0011      	movs	r1, r2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	230b      	movs	r3, #11
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	1c02      	adds	r2, r0, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	230a      	movs	r3, #10
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	1c0a      	adds	r2, r1, #0
 8001040:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 8001042:	e02c      	b.n	800109e <st7565_drawstring+0x7a>
		st7565_drawchar(buff, x, line, c[0], fontSelect);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781c      	ldrb	r4, [r3, #0]
 8001048:	260a      	movs	r6, #10
 800104a:	19bb      	adds	r3, r7, r6
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	469c      	mov	ip, r3
 8001050:	250b      	movs	r5, #11
 8001052:	197b      	adds	r3, r7, r5
 8001054:	7819      	ldrb	r1, [r3, #0]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	2320      	movs	r3, #32
 800105a:	2208      	movs	r2, #8
 800105c:	189b      	adds	r3, r3, r2
 800105e:	19db      	adds	r3, r3, r7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	0023      	movs	r3, r4
 8001066:	4662      	mov	r2, ip
 8001068:	f000 f822 	bl	80010b0 <st7565_drawchar>
		c++;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 8001072:	197b      	adds	r3, r7, r5
 8001074:	197a      	adds	r2, r7, r5
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	3206      	adds	r2, #6
 800107a:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 800107c:	197b      	adds	r3, r7, r5
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b79      	cmp	r3, #121	@ 0x79
 8001082:	d907      	bls.n	8001094 <st7565_drawstring+0x70>
			x = 0; // ran out of this line
 8001084:	197b      	adds	r3, r7, r5
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
			line++;
 800108a:	19bb      	adds	r3, r7, r6
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	19bb      	adds	r3, r7, r6
 8001090:	3201      	adds	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8001094:	230a      	movs	r3, #10
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d804      	bhi.n	80010a8 <st7565_drawstring+0x84>
	while (c[0] != 0) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1ce      	bne.n	8001044 <st7565_drawstring+0x20>
 80010a6:	e000      	b.n	80010aa <st7565_drawstring+0x86>
			return; // ran out of space :(
 80010a8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b005      	add	sp, #20
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b0 <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c, uint8_t fontSelect) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	000c      	movs	r4, r1
 80010ba:	0010      	movs	r0, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	1cfb      	adds	r3, r7, #3
 80010c0:	1c22      	adds	r2, r4, #0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	1c0a      	adds	r2, r1, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e043      	b.n	8001162 <st7565_drawchar+0xb2>
		if(fontSelect==0)
 80010da:	2320      	movs	r3, #32
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d117      	bne.n	8001114 <st7565_drawchar+0x64>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 80010e4:	1c7b      	adds	r3, r7, #1
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	0013      	movs	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	189b      	adds	r3, r3, r2
 80010ee:	001a      	movs	r2, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	18d2      	adds	r2, r2, r3
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <st7565_drawchar+0xc8>)
 80010fa:	18d2      	adds	r2, r2, r3
 80010fc:	1cfb      	adds	r3, r7, #3
 80010fe:	7819      	ldrb	r1, [r3, #0]
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	01db      	lsls	r3, r3, #7
 8001106:	18cb      	adds	r3, r1, r3
 8001108:	0019      	movs	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	185b      	adds	r3, r3, r1
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e01b      	b.n	800114c <st7565_drawchar+0x9c>
		else if(fontSelect==1)
 8001114:	2320      	movs	r3, #32
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d116      	bne.n	800114c <st7565_drawchar+0x9c>
		buff[x + (line * 128)] = *(ultraFont + (c * 5) + i);
 800111e:	1c7b      	adds	r3, r7, #1
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	0013      	movs	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	189b      	adds	r3, r3, r2
 8001128:	001a      	movs	r2, r3
 800112a:	230f      	movs	r3, #15
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	18d2      	adds	r2, r2, r3
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <st7565_drawchar+0xcc>)
 8001134:	18d2      	adds	r2, r2, r3
 8001136:	1cfb      	adds	r3, r7, #3
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	18cb      	adds	r3, r1, r3
 8001142:	0019      	movs	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	185b      	adds	r3, r3, r1
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	701a      	strb	r2, [r3, #0]
		x++;
 800114c:	1cfb      	adds	r3, r7, #3
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	1cfb      	adds	r3, r7, #3
 8001152:	3201      	adds	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8001156:	210f      	movs	r1, #15
 8001158:	187b      	adds	r3, r7, r1
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	187b      	adds	r3, r7, r1
 800115e:	3201      	adds	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	230f      	movs	r3, #15
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b04      	cmp	r3, #4
 800116a:	d9b6      	bls.n	80010da <st7565_drawchar+0x2a>
	}
}
 800116c:	46c0      	nop			@ (mov r8, r8)
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b005      	add	sp, #20
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	080062a0 	.word	0x080062a0
 800117c:	08005da4 	.word	0x08005da4

08001180 <st7565_drawline_complex>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline_complex(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	000c      	movs	r4, r1
 800118a:	0010      	movs	r0, r2
 800118c:	0019      	movs	r1, r3
 800118e:	1cfb      	adds	r3, r7, #3
 8001190:	1c22      	adds	r2, r4, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	1cbb      	adds	r3, r7, #2
 8001196:	1c02      	adds	r2, r0, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	1c7b      	adds	r3, r7, #1
 800119c:	1c0a      	adds	r2, r1, #0
 800119e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 80011a8:	1cfa      	adds	r2, r7, #3
 80011aa:	1c7b      	adds	r3, r7, #1
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d908      	bls.n	80011c6 <st7565_drawline_complex+0x46>
		dx = x0 - x1;
 80011b4:	230c      	movs	r3, #12
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	1cf9      	adds	r1, r7, #3
 80011ba:	1c7a      	adds	r2, r7, #1
 80011bc:	7809      	ldrb	r1, [r1, #0]
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	1a8a      	subs	r2, r1, r2
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e007      	b.n	80011d6 <st7565_drawline_complex+0x56>
	else
		dx = x1 - x0;
 80011c6:	230c      	movs	r3, #12
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	1c79      	adds	r1, r7, #1
 80011cc:	1cfa      	adds	r2, r7, #3
 80011ce:	7809      	ldrb	r1, [r1, #0]
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	1a8a      	subs	r2, r1, r2
 80011d4:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 80011d6:	1cba      	adds	r2, r7, #2
 80011d8:	2020      	movs	r0, #32
 80011da:	183b      	adds	r3, r7, r0
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d908      	bls.n	80011f6 <st7565_drawline_complex+0x76>
		dy = y0 - y1;
 80011e4:	230b      	movs	r3, #11
 80011e6:	18fa      	adds	r2, r7, r3
 80011e8:	1cb9      	adds	r1, r7, #2
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	7809      	ldrb	r1, [r1, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	1acb      	subs	r3, r1, r3
 80011f2:	7013      	strb	r3, [r2, #0]
 80011f4:	e008      	b.n	8001208 <st7565_drawline_complex+0x88>
	else
		dy = y1 - y0;
 80011f6:	230b      	movs	r3, #11
 80011f8:	18fa      	adds	r2, r7, r3
 80011fa:	2320      	movs	r3, #32
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	1cb8      	adds	r0, r7, #2
 8001200:	7819      	ldrb	r1, [r3, #0]
 8001202:	7803      	ldrb	r3, [r0, #0]
 8001204:	1acb      	subs	r3, r1, r3
 8001206:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8001208:	200b      	movs	r0, #11
 800120a:	183a      	adds	r2, r7, r0
 800120c:	240c      	movs	r4, #12
 800120e:	193b      	adds	r3, r7, r4
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d929      	bls.n	800126c <st7565_drawline_complex+0xec>
		swap = 1;
 8001218:	230f      	movs	r3, #15
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8001220:	2108      	movs	r1, #8
 8001222:	187b      	adds	r3, r7, r1
 8001224:	193a      	adds	r2, r7, r4
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	701a      	strb	r2, [r3, #0]
		dx = dy;
 800122a:	193b      	adds	r3, r7, r4
 800122c:	183a      	adds	r2, r7, r0
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8001232:	183b      	adds	r3, r7, r0
 8001234:	187a      	adds	r2, r7, r1
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	1cfa      	adds	r2, r7, #3
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8001242:	1cfb      	adds	r3, r7, #3
 8001244:	1cba      	adds	r2, r7, #2
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 800124a:	1cbb      	adds	r3, r7, #2
 800124c:	187a      	adds	r2, r7, r1
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	1c7a      	adds	r2, r7, #1
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 800125a:	1c7a      	adds	r2, r7, #1
 800125c:	2020      	movs	r0, #32
 800125e:	183b      	adds	r3, r7, r0
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 8001264:	183b      	adds	r3, r7, r0
 8001266:	187a      	adds	r2, r7, r1
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 800126c:	1cfa      	adds	r2, r7, #3
 800126e:	1c7b      	adds	r3, r7, #1
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d919      	bls.n	80012ac <st7565_drawline_complex+0x12c>
		tmp = x0;
 8001278:	2108      	movs	r1, #8
 800127a:	187b      	adds	r3, r7, r1
 800127c:	1cfa      	adds	r2, r7, #3
 800127e:	7812      	ldrb	r2, [r2, #0]
 8001280:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 8001282:	1cfb      	adds	r3, r7, #3
 8001284:	1c7a      	adds	r2, r7, #1
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 800128a:	1c7b      	adds	r3, r7, #1
 800128c:	187a      	adds	r2, r7, r1
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	1cba      	adds	r2, r7, #2
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 800129a:	1cba      	adds	r2, r7, #2
 800129c:	2020      	movs	r0, #32
 800129e:	183b      	adds	r3, r7, r0
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 80012a4:	183b      	adds	r3, r7, r0
 80012a6:	187a      	adds	r2, r7, r1
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 80012ac:	230c      	movs	r3, #12
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	2309      	movs	r3, #9
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 80012bc:	2320      	movs	r3, #32
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	1cb9      	adds	r1, r7, #2
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	780b      	ldrb	r3, [r1, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d904      	bls.n	80012d4 <st7565_drawline_complex+0x154>
		ystep = 1;
 80012ca:	230a      	movs	r3, #10
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e003      	b.n	80012dc <st7565_drawline_complex+0x15c>
	else
		ystep = -1;
 80012d4:	230a      	movs	r3, #10
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	701a      	strb	r2, [r3, #0]
	y = y0;
 80012dc:	230d      	movs	r3, #13
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	1cba      	adds	r2, r7, #2
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 80012e6:	230e      	movs	r3, #14
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	1cfa      	adds	r2, r7, #3
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e045      	b.n	800137e <st7565_drawline_complex+0x1fe>
		if (swap == 0)
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10d      	bne.n	8001318 <st7565_drawline_complex+0x198>
			st7565_setpixel(buff, x, y, color);
 80012fc:	2324      	movs	r3, #36	@ 0x24
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	781c      	ldrb	r4, [r3, #0]
 8001302:	230d      	movs	r3, #13
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	230e      	movs	r3, #14
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	7819      	ldrb	r1, [r3, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	0023      	movs	r3, r4
 8001312:	f7ff fe1c 	bl	8000f4e <st7565_setpixel>
 8001316:	e00c      	b.n	8001332 <st7565_drawline_complex+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8001318:	2324      	movs	r3, #36	@ 0x24
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	781c      	ldrb	r4, [r3, #0]
 800131e:	230e      	movs	r3, #14
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	230d      	movs	r3, #13
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	0023      	movs	r3, r4
 800132e:	f7ff fe0e 	bl	8000f4e <st7565_setpixel>
		err -= (uint8_t) dy;
 8001332:	2009      	movs	r0, #9
 8001334:	183b      	adds	r3, r7, r0
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	230b      	movs	r3, #11
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	183b      	adds	r3, r7, r0
 8001344:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8001346:	183b      	adds	r3, r7, r0
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b7f      	cmp	r3, #127	@ 0x7f
 800134c:	d911      	bls.n	8001372 <st7565_drawline_complex+0x1f2>
			y += (uint8_t) ystep;
 800134e:	230a      	movs	r3, #10
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	220d      	movs	r2, #13
 8001356:	18bb      	adds	r3, r7, r2
 8001358:	18ba      	adds	r2, r7, r2
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	188a      	adds	r2, r1, r2
 800135e:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 8001360:	183b      	adds	r3, r7, r0
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	230c      	movs	r3, #12
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	18d3      	adds	r3, r2, r3
 800136c:	b2da      	uxtb	r2, r3
 800136e:	183b      	adds	r3, r7, r0
 8001370:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8001372:	210e      	movs	r1, #14
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	187b      	adds	r3, r7, r1
 800137a:	3201      	adds	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	230e      	movs	r3, #14
 8001380:	18fa      	adds	r2, r7, r3
 8001382:	1c7b      	adds	r3, r7, #1
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d9b2      	bls.n	80012f2 <st7565_drawline_complex+0x172>
		}
	}
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b005      	add	sp, #20
 8001394:	bd90      	pop	{r4, r7, pc}

08001396 <st7565_fillrect>:

// draw a filled rectangle
void st7565_fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
 8001396:	b590      	push	{r4, r7, lr}
 8001398:	b087      	sub	sp, #28
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	000c      	movs	r4, r1
 80013a0:	0010      	movs	r0, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	1cfb      	adds	r3, r7, #3
 80013a6:	1c22      	adds	r2, r4, #0
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	1cbb      	adds	r3, r7, #2
 80013ac:	1c02      	adds	r2, r0, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	1c7b      	adds	r3, r7, #1
 80013b2:	1c0a      	adds	r2, r1, #0
 80013b4:	701a      	strb	r2, [r3, #0]
    if (x >= LCDWIDTH || y >= LCDHEIGHT)
 80013b6:	1cfb      	adds	r3, r7, #3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da00      	bge.n	80013c2 <st7565_fillrect+0x2c>
 80013c0:	e0e2      	b.n	8001588 <st7565_fillrect+0x1f2>
 80013c2:	1cbb      	adds	r3, r7, #2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80013c8:	d900      	bls.n	80013cc <st7565_fillrect+0x36>
 80013ca:	e0dd      	b.n	8001588 <st7565_fillrect+0x1f2>
        return;
    if (x + w > LCDWIDTH)
 80013cc:	1cfb      	adds	r3, r7, #3
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	2b80      	cmp	r3, #128	@ 0x80
 80013d8:	dd06      	ble.n	80013e8 <st7565_fillrect+0x52>
        w = LCDWIDTH - x;
 80013da:	1c7b      	adds	r3, r7, #1
 80013dc:	1cfa      	adds	r2, r7, #3
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	2180      	movs	r1, #128	@ 0x80
 80013e2:	4249      	negs	r1, r1
 80013e4:	1a8a      	subs	r2, r1, r2
 80013e6:	701a      	strb	r2, [r3, #0]
    if (y + h > LCDHEIGHT)
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	2128      	movs	r1, #40	@ 0x28
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	2b40      	cmp	r3, #64	@ 0x40
 80013f6:	dd05      	ble.n	8001404 <st7565_fillrect+0x6e>
        h = LCDHEIGHT - y;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	1cba      	adds	r2, r7, #2
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	2140      	movs	r1, #64	@ 0x40
 8001400:	1a8a      	subs	r2, r1, r2
 8001402:	701a      	strb	r2, [r3, #0]
    uint8_t y_start = y;
 8001404:	2114      	movs	r1, #20
 8001406:	187b      	adds	r3, r7, r1
 8001408:	1cba      	adds	r2, r7, #2
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
    uint8_t y_end = y + h - 1;
 800140e:	1cba      	adds	r2, r7, #2
 8001410:	2328      	movs	r3, #40	@ 0x28
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	b2da      	uxtb	r2, r3
 800141c:	2013      	movs	r0, #19
 800141e:	183b      	adds	r3, r7, r0
 8001420:	3a01      	subs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
    uint8_t page_start = y_start / 8;
 8001424:	2312      	movs	r3, #18
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	187a      	adds	r2, r7, r1
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	08d2      	lsrs	r2, r2, #3
 800142e:	701a      	strb	r2, [r3, #0]
    uint8_t page_end = y_end / 8;
 8001430:	2311      	movs	r3, #17
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	183a      	adds	r2, r7, r0
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	08d2      	lsrs	r2, r2, #3
 800143a:	701a      	strb	r2, [r3, #0]
    uint8_t bit_start = y_start % 8;
 800143c:	2310      	movs	r3, #16
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	187a      	adds	r2, r7, r1
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	2107      	movs	r1, #7
 8001446:	400a      	ands	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
    uint8_t bit_end = y_end % 8;
 800144a:	230f      	movs	r3, #15
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	183a      	adds	r2, r7, r0
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	2107      	movs	r1, #7
 8001454:	400a      	ands	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
    for (uint8_t px = x; px < x + w; px++) {
 8001458:	2317      	movs	r3, #23
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	1cfa      	adds	r2, r7, #3
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e085      	b.n	8001570 <st7565_fillrect+0x1da>
        for (uint8_t page = page_start; page <= page_end; page++) {
 8001464:	2316      	movs	r3, #22
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2212      	movs	r2, #18
 800146a:	18ba      	adds	r2, r7, r2
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e070      	b.n	8001554 <st7565_fillrect+0x1be>
            uint8_t mask = 0xFF;
 8001472:	2115      	movs	r1, #21
 8001474:	187b      	adds	r3, r7, r1
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 800147a:	2316      	movs	r3, #22
 800147c:	18fa      	adds	r2, r7, r3
 800147e:	2312      	movs	r3, #18
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d10d      	bne.n	80014a6 <st7565_fillrect+0x110>
                mask &= (0xFF >> bit_start);
 800148a:	2310      	movs	r3, #16
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	22ff      	movs	r2, #255	@ 0xff
 8001492:	411a      	asrs	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	b25b      	sxtb	r3, r3
 8001498:	187a      	adds	r2, r7, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	b252      	sxtb	r2, r2
 800149e:	4013      	ands	r3, r2
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 80014a6:	2316      	movs	r3, #22
 80014a8:	18fa      	adds	r2, r7, r3
 80014aa:	2311      	movs	r3, #17
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d110      	bne.n	80014d8 <st7565_fillrect+0x142>
                mask &= (0xFF << (7 - bit_end));
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2207      	movs	r2, #7
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	22ff      	movs	r2, #255	@ 0xff
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	2115      	movs	r1, #21
 80014ca:	187a      	adds	r2, r7, r1
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	b252      	sxtb	r2, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = px + page * 128;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b299      	uxth	r1, r3
 80014e0:	2316      	movs	r3, #22
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	200c      	movs	r0, #12
 80014ee:	183b      	adds	r3, r7, r0
 80014f0:	188a      	adds	r2, r1, r2
 80014f2:	801a      	strh	r2, [r3, #0]
            if (color)
 80014f4:	232c      	movs	r3, #44	@ 0x2c
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00f      	beq.n	800151e <st7565_fillrect+0x188>
                buff[idx] |= mask;
 80014fe:	183b      	adds	r3, r7, r0
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	18d3      	adds	r3, r2, r3
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	183b      	adds	r3, r7, r0
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	2215      	movs	r2, #21
 8001512:	18ba      	adds	r2, r7, r2
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e014      	b.n	8001548 <st7565_fillrect+0x1b2>
            else
                buff[idx] &= ~mask;
 800151e:	200c      	movs	r0, #12
 8001520:	183b      	adds	r3, r7, r0
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	18d3      	adds	r3, r2, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	2215      	movs	r2, #21
 800152e:	18ba      	adds	r2, r7, r2
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	b252      	sxtb	r2, r2
 8001534:	43d2      	mvns	r2, r2
 8001536:	b252      	sxtb	r2, r2
 8001538:	4013      	ands	r3, r2
 800153a:	b259      	sxtb	r1, r3
 800153c:	183b      	adds	r3, r7, r0
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	18d3      	adds	r3, r2, r3
 8001544:	b2ca      	uxtb	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 8001548:	2116      	movs	r1, #22
 800154a:	187b      	adds	r3, r7, r1
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	187b      	adds	r3, r7, r1
 8001550:	3201      	adds	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	2316      	movs	r3, #22
 8001556:	18fa      	adds	r2, r7, r3
 8001558:	2311      	movs	r3, #17
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d986      	bls.n	8001472 <st7565_fillrect+0xdc>
    for (uint8_t px = x; px < x + w; px++) {
 8001564:	2117      	movs	r1, #23
 8001566:	187b      	adds	r3, r7, r1
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	187b      	adds	r3, r7, r1
 800156c:	3201      	adds	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	2317      	movs	r3, #23
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	1cfb      	adds	r3, r7, #3
 8001578:	7819      	ldrb	r1, [r3, #0]
 800157a:	1c7b      	adds	r3, r7, #1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	18cb      	adds	r3, r1, r3
 8001580:	429a      	cmp	r2, r3
 8001582:	da00      	bge.n	8001586 <st7565_fillrect+0x1f0>
 8001584:	e76e      	b.n	8001464 <st7565_fillrect+0xce>
 8001586:	e000      	b.n	800158a <st7565_fillrect+0x1f4>
        return;
 8001588:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800158a:	46bd      	mov	sp, r7
 800158c:	b007      	add	sp, #28
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <st7565_drawline>:
			st7565_setpixel(buff, x0 - y, i, color);
		}
	}
}

void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b08b      	sub	sp, #44	@ 0x2c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	000c      	movs	r4, r1
 800159a:	0010      	movs	r0, r2
 800159c:	0019      	movs	r1, r3
 800159e:	1cfb      	adds	r3, r7, #3
 80015a0:	1c22      	adds	r2, r4, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	1cbb      	adds	r3, r7, #2
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	1c7b      	adds	r3, r7, #1
 80015ac:	1c0a      	adds	r2, r1, #0
 80015ae:	701a      	strb	r2, [r3, #0]
    if (x0 == x1) {
 80015b0:	1cfa      	adds	r2, r7, #3
 80015b2:	1c7b      	adds	r3, r7, #1
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d000      	beq.n	80015be <st7565_drawline+0x2e>
 80015bc:	e0c8      	b.n	8001750 <st7565_drawline+0x1c0>
        if (x0 >= LCDWIDTH)
 80015be:	1cfb      	adds	r3, r7, #3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <st7565_drawline+0x3a>
 80015c8:	e1f0      	b.n	80019ac <st7565_drawline+0x41c>
            return;
        uint8_t y_start = y0 < y1 ? y0 : y1;
 80015ca:	2313      	movs	r3, #19
 80015cc:	18fa      	adds	r2, r7, r3
 80015ce:	2338      	movs	r3, #56	@ 0x38
 80015d0:	2108      	movs	r1, #8
 80015d2:	185b      	adds	r3, r3, r1
 80015d4:	19db      	adds	r3, r3, r7
 80015d6:	1cb9      	adds	r1, r7, #2
 80015d8:	780c      	ldrb	r4, [r1, #0]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2d8      	uxtb	r0, r3
 80015de:	b2e1      	uxtb	r1, r4
 80015e0:	4288      	cmp	r0, r1
 80015e2:	d900      	bls.n	80015e6 <st7565_drawline+0x56>
 80015e4:	1c23      	adds	r3, r4, #0
 80015e6:	7013      	strb	r3, [r2, #0]
        uint8_t y_end = y0 > y1 ? y0 : y1;
 80015e8:	2327      	movs	r3, #39	@ 0x27
 80015ea:	18fa      	adds	r2, r7, r3
 80015ec:	2338      	movs	r3, #56	@ 0x38
 80015ee:	2108      	movs	r1, #8
 80015f0:	185b      	adds	r3, r3, r1
 80015f2:	19db      	adds	r3, r3, r7
 80015f4:	1cb9      	adds	r1, r7, #2
 80015f6:	780c      	ldrb	r4, [r1, #0]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	b2e1      	uxtb	r1, r4
 80015fe:	4288      	cmp	r0, r1
 8001600:	d200      	bcs.n	8001604 <st7565_drawline+0x74>
 8001602:	1c23      	adds	r3, r4, #0
 8001604:	7013      	strb	r3, [r2, #0]
        if (y_end >= LCDHEIGHT)
 8001606:	2227      	movs	r2, #39	@ 0x27
 8001608:	18bb      	adds	r3, r7, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b3f      	cmp	r3, #63	@ 0x3f
 800160e:	d902      	bls.n	8001616 <st7565_drawline+0x86>
            y_end = LCDHEIGHT - 1;
 8001610:	18bb      	adds	r3, r7, r2
 8001612:	223f      	movs	r2, #63	@ 0x3f
 8001614:	701a      	strb	r2, [r3, #0]
        uint8_t page_start = y_start / 8;
 8001616:	2012      	movs	r0, #18
 8001618:	183b      	adds	r3, r7, r0
 800161a:	2113      	movs	r1, #19
 800161c:	187a      	adds	r2, r7, r1
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	701a      	strb	r2, [r3, #0]
        uint8_t page_end = y_end / 8;
 8001624:	2311      	movs	r3, #17
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2427      	movs	r4, #39	@ 0x27
 800162a:	193a      	adds	r2, r7, r4
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	08d2      	lsrs	r2, r2, #3
 8001630:	701a      	strb	r2, [r3, #0]
        uint8_t bit_start = y_start % 8;
 8001632:	2310      	movs	r3, #16
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	187a      	adds	r2, r7, r1
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	2107      	movs	r1, #7
 800163c:	400a      	ands	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
        uint8_t bit_end = y_end % 8;
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	193a      	adds	r2, r7, r4
 8001646:	7812      	ldrb	r2, [r2, #0]
 8001648:	2107      	movs	r1, #7
 800164a:	400a      	ands	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 800164e:	2326      	movs	r3, #38	@ 0x26
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	183a      	adds	r2, r7, r0
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e071      	b.n	800173e <st7565_drawline+0x1ae>
            uint8_t mask = 0xFF;
 800165a:	2125      	movs	r1, #37	@ 0x25
 800165c:	187b      	adds	r3, r7, r1
 800165e:	22ff      	movs	r2, #255	@ 0xff
 8001660:	701a      	strb	r2, [r3, #0]
            if (page == page_start) {
 8001662:	2326      	movs	r3, #38	@ 0x26
 8001664:	18fa      	adds	r2, r7, r3
 8001666:	2312      	movs	r3, #18
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d10d      	bne.n	800168e <st7565_drawline+0xfe>
                mask &= (0xFF >> bit_start);
 8001672:	2310      	movs	r3, #16
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	22ff      	movs	r2, #255	@ 0xff
 800167a:	411a      	asrs	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	187a      	adds	r2, r7, r1
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	b252      	sxtb	r2, r2
 8001686:	4013      	ands	r3, r2
 8001688:	b25a      	sxtb	r2, r3
 800168a:	187b      	adds	r3, r7, r1
 800168c:	701a      	strb	r2, [r3, #0]
            }
            if (page == page_end) {
 800168e:	2326      	movs	r3, #38	@ 0x26
 8001690:	18fa      	adds	r2, r7, r3
 8001692:	2311      	movs	r3, #17
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d110      	bne.n	80016c0 <st7565_drawline+0x130>
                mask &= (0xFF << (7 - bit_end));
 800169e:	230f      	movs	r3, #15
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2207      	movs	r2, #7
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	22ff      	movs	r2, #255	@ 0xff
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	2125      	movs	r1, #37	@ 0x25
 80016b2:	187a      	adds	r2, r7, r1
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	b252      	sxtb	r2, r2
 80016b8:	4013      	ands	r3, r2
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	701a      	strb	r2, [r3, #0]
            }
            uint16_t idx = x0 + page * 128;
 80016c0:	1cfb      	adds	r3, r7, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	2326      	movs	r3, #38	@ 0x26
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	01db      	lsls	r3, r3, #7
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	200c      	movs	r0, #12
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	188a      	adds	r2, r1, r2
 80016d8:	801a      	strh	r2, [r3, #0]
            if (color)
 80016da:	233c      	movs	r3, #60	@ 0x3c
 80016dc:	2208      	movs	r2, #8
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	19db      	adds	r3, r3, r7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00f      	beq.n	8001708 <st7565_drawline+0x178>
                buff[idx] |= mask;
 80016e8:	183b      	adds	r3, r7, r0
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	18d3      	adds	r3, r2, r3
 80016f0:	7819      	ldrb	r1, [r3, #0]
 80016f2:	183b      	adds	r3, r7, r0
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	18d3      	adds	r3, r2, r3
 80016fa:	2225      	movs	r2, #37	@ 0x25
 80016fc:	18ba      	adds	r2, r7, r2
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e014      	b.n	8001732 <st7565_drawline+0x1a2>
            else
                buff[idx] &= ~mask;
 8001708:	200c      	movs	r0, #12
 800170a:	183b      	adds	r3, r7, r0
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	2225      	movs	r2, #37	@ 0x25
 8001718:	18ba      	adds	r2, r7, r2
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	b252      	sxtb	r2, r2
 800171e:	43d2      	mvns	r2, r2
 8001720:	b252      	sxtb	r2, r2
 8001722:	4013      	ands	r3, r2
 8001724:	b259      	sxtb	r1, r3
 8001726:	183b      	adds	r3, r7, r0
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
        for (uint8_t page = page_start; page <= page_end; page++) {
 8001732:	2126      	movs	r1, #38	@ 0x26
 8001734:	187b      	adds	r3, r7, r1
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	187b      	adds	r3, r7, r1
 800173a:	3201      	adds	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	2326      	movs	r3, #38	@ 0x26
 8001740:	18fa      	adds	r2, r7, r3
 8001742:	2311      	movs	r3, #17
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d985      	bls.n	800165a <st7565_drawline+0xca>
 800174e:	e130      	b.n	80019b2 <st7565_drawline+0x422>
        }
    } else if (y0 == y1) {
 8001750:	1cba      	adds	r2, r7, #2
 8001752:	2338      	movs	r3, #56	@ 0x38
 8001754:	2108      	movs	r1, #8
 8001756:	185b      	adds	r3, r3, r1
 8001758:	19db      	adds	r3, r3, r7
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d000      	beq.n	8001764 <st7565_drawline+0x1d4>
 8001762:	e126      	b.n	80019b2 <st7565_drawline+0x422>
        if (y0 >= LCDHEIGHT)
 8001764:	1cbb      	adds	r3, r7, #2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b3f      	cmp	r3, #63	@ 0x3f
 800176a:	d900      	bls.n	800176e <st7565_drawline+0x1de>
 800176c:	e120      	b.n	80019b0 <st7565_drawline+0x420>
            return;
        uint8_t x_start = x0 < x1 ? x0 : x1;
 800176e:	231d      	movs	r3, #29
 8001770:	18fa      	adds	r2, r7, r3
 8001772:	1c7b      	adds	r3, r7, #1
 8001774:	1cf9      	adds	r1, r7, #3
 8001776:	780c      	ldrb	r4, [r1, #0]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2d8      	uxtb	r0, r3
 800177c:	b2e1      	uxtb	r1, r4
 800177e:	4288      	cmp	r0, r1
 8001780:	d900      	bls.n	8001784 <st7565_drawline+0x1f4>
 8001782:	1c23      	adds	r3, r4, #0
 8001784:	7013      	strb	r3, [r2, #0]
        uint8_t x_end = x0 > x1 ? x0 : x1;
 8001786:	2324      	movs	r3, #36	@ 0x24
 8001788:	18fa      	adds	r2, r7, r3
 800178a:	1c7b      	adds	r3, r7, #1
 800178c:	1cf9      	adds	r1, r7, #3
 800178e:	780c      	ldrb	r4, [r1, #0]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2d8      	uxtb	r0, r3
 8001794:	b2e1      	uxtb	r1, r4
 8001796:	4288      	cmp	r0, r1
 8001798:	d200      	bcs.n	800179c <st7565_drawline+0x20c>
 800179a:	1c23      	adds	r3, r4, #0
 800179c:	7013      	strb	r3, [r2, #0]
        if (x_end >= LCDWIDTH)
 800179e:	2224      	movs	r2, #36	@ 0x24
 80017a0:	18bb      	adds	r3, r7, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da02      	bge.n	80017b0 <st7565_drawline+0x220>
            x_end = LCDWIDTH - 1;
 80017aa:	18bb      	adds	r3, r7, r2
 80017ac:	227f      	movs	r2, #127	@ 0x7f
 80017ae:	701a      	strb	r2, [r3, #0]
        uint8_t page = y0 / 8;
 80017b0:	201c      	movs	r0, #28
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	1cba      	adds	r2, r7, #2
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	08d2      	lsrs	r2, r2, #3
 80017ba:	701a      	strb	r2, [r3, #0]
        uint8_t bit = 7 - (y0 % 8);
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	241b      	movs	r4, #27
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2107      	movs	r1, #7
 80017ca:	400a      	ands	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
        uint8_t mask = 1 << bit;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	409a      	lsls	r2, r3
 80017d6:	231a      	movs	r3, #26
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	701a      	strb	r2, [r3, #0]
        uint16_t idx = x_start + page * 128;
 80017dc:	231d      	movs	r3, #29
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b299      	uxth	r1, r3
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	01db      	lsls	r3, r3, #7
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	2018      	movs	r0, #24
 80017f0:	183b      	adds	r3, r7, r0
 80017f2:	188a      	adds	r2, r1, r2
 80017f4:	801a      	strh	r2, [r3, #0]
        // 32-bit write optimization
        uint32_t *p32 = (uint32_t *)&buff[idx];
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	623b      	str	r3, [r7, #32]
        uint32_t val = color ? 0xFFFFFFFF : 0x00000000;
 8001800:	233c      	movs	r3, #60	@ 0x3c
 8001802:	2208      	movs	r2, #8
 8001804:	189b      	adds	r3, r3, r2
 8001806:	19db      	adds	r3, r3, r7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <st7565_drawline+0x284>
 800180e:	2301      	movs	r3, #1
 8001810:	425b      	negs	r3, r3
 8001812:	e000      	b.n	8001816 <st7565_drawline+0x286>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
        uint8_t rem = (x_end - x_start + 1);
 8001818:	2324      	movs	r3, #36	@ 0x24
 800181a:	18fa      	adds	r2, r7, r3
 800181c:	231d      	movs	r3, #29
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b2da      	uxtb	r2, r3
 8001828:	231f      	movs	r3, #31
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	3201      	adds	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 8001830:	e030      	b.n	8001894 <st7565_drawline+0x304>
            if (color) *p32 |= (val & (mask * 0x01010101));
 8001832:	233c      	movs	r3, #60	@ 0x3c
 8001834:	2208      	movs	r2, #8
 8001836:	189b      	adds	r3, r3, r2
 8001838:	19db      	adds	r3, r3, r7
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d011      	beq.n	8001864 <st7565_drawline+0x2d4>
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	231a      	movs	r3, #26
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	0013      	movs	r3, r2
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	189b      	adds	r3, r3, r2
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	189b      	adds	r3, r3, r2
 8001854:	001a      	movs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4013      	ands	r3, r2
 800185a:	000a      	movs	r2, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e00e      	b.n	8001882 <st7565_drawline+0x2f2>
            else *p32 &= ~(mask * 0x01010101);
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	231a      	movs	r3, #26
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	0013      	movs	r3, r2
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	189b      	adds	r3, r3, r2
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	189b      	adds	r3, r3, r2
 8001878:	43db      	mvns	r3, r3
 800187a:	400b      	ands	r3, r1
 800187c:	001a      	movs	r2, r3
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	601a      	str	r2, [r3, #0]
            p32++;
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	3304      	adds	r3, #4
 8001886:	623b      	str	r3, [r7, #32]
            rem -= 4;
 8001888:	221f      	movs	r2, #31
 800188a:	18bb      	adds	r3, r7, r2
 800188c:	18ba      	adds	r2, r7, r2
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	3a04      	subs	r2, #4
 8001892:	701a      	strb	r2, [r3, #0]
        while (rem >= 4 && (((uintptr_t)p32 & 0x3) == 0)) {
 8001894:	231f      	movs	r3, #31
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d903      	bls.n	80018a6 <st7565_drawline+0x316>
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0c5      	beq.n	8001832 <st7565_drawline+0x2a2>
        }
        idx = (uint8_t *)p32 - &buff[x_start + page * 128];
 80018a6:	231d      	movs	r3, #29
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	231c      	movs	r3, #28
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	001a      	movs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	2318      	movs	r3, #24
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 80018c6:	231e      	movs	r3, #30
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e064      	b.n	800199a <st7565_drawline+0x40a>
            if (color) buff[x_start + page * 128 + idx + i] |= mask;
 80018d0:	233c      	movs	r3, #60	@ 0x3c
 80018d2:	2208      	movs	r2, #8
 80018d4:	189b      	adds	r3, r3, r2
 80018d6:	19db      	adds	r3, r3, r7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d029      	beq.n	8001932 <st7565_drawline+0x3a2>
 80018de:	201d      	movs	r0, #29
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	241c      	movs	r4, #28
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	18d2      	adds	r2, r2, r3
 80018ee:	2518      	movs	r5, #24
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	18d2      	adds	r2, r2, r3
 80018f6:	261e      	movs	r6, #30
 80018f8:	19bb      	adds	r3, r7, r6
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	001a      	movs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	189b      	adds	r3, r3, r2
 8001904:	7819      	ldrb	r1, [r3, #0]
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	193b      	adds	r3, r7, r4
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	18d2      	adds	r2, r2, r3
 8001912:	197b      	adds	r3, r7, r5
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	18d2      	adds	r2, r2, r3
 8001918:	19bb      	adds	r3, r7, r6
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	189b      	adds	r3, r3, r2
 8001924:	221a      	movs	r2, #26
 8001926:	18ba      	adds	r2, r7, r2
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e02d      	b.n	800198e <st7565_drawline+0x3fe>
            else buff[x_start + page * 128 + idx + i] &= ~mask;
 8001932:	201d      	movs	r0, #29
 8001934:	183b      	adds	r3, r7, r0
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	241c      	movs	r4, #28
 800193a:	193b      	adds	r3, r7, r4
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	18d2      	adds	r2, r2, r3
 8001942:	2518      	movs	r5, #24
 8001944:	197b      	adds	r3, r7, r5
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	18d2      	adds	r2, r2, r3
 800194a:	261e      	movs	r6, #30
 800194c:	19bb      	adds	r3, r7, r6
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	18d3      	adds	r3, r2, r3
 8001952:	001a      	movs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	189b      	adds	r3, r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	221a      	movs	r2, #26
 800195e:	18ba      	adds	r2, r7, r2
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	b252      	sxtb	r2, r2
 8001964:	43d2      	mvns	r2, r2
 8001966:	b252      	sxtb	r2, r2
 8001968:	4013      	ands	r3, r2
 800196a:	b259      	sxtb	r1, r3
 800196c:	183b      	adds	r3, r7, r0
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	193b      	adds	r3, r7, r4
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	18d2      	adds	r2, r2, r3
 8001978:	197b      	adds	r3, r7, r5
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	18d2      	adds	r2, r2, r3
 800197e:	19bb      	adds	r3, r7, r6
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	18d3      	adds	r3, r2, r3
 8001984:	001a      	movs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	189b      	adds	r3, r3, r2
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < rem; i++) {
 800198e:	211e      	movs	r1, #30
 8001990:	187b      	adds	r3, r7, r1
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	187b      	adds	r3, r7, r1
 8001996:	3201      	adds	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	231e      	movs	r3, #30
 800199c:	18fa      	adds	r2, r7, r3
 800199e:	231f      	movs	r3, #31
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d392      	bcc.n	80018d0 <st7565_drawline+0x340>
 80019aa:	e002      	b.n	80019b2 <st7565_drawline+0x422>
            return;
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	e000      	b.n	80019b2 <st7565_drawline+0x422>
            return;
 80019b0:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b00b      	add	sp, #44	@ 0x2c
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b8 <interpolation>:
    int16_t x; //input
    int16_t y; //output
} Point;

static int16_t interpolation(int16_t input)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	801a      	strh	r2, [r3, #0]
        {1180, 100},
        {2400, 200},
        {4000, 330}
    };

    if (input <= pts[0].x) return pts[0].y*input/pts[0].x;
 80019c4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <interpolation+0x108>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	5e9b      	ldrsh	r3, [r3, r2]
 80019ca:	1dba      	adds	r2, r7, #6
 80019cc:	2100      	movs	r1, #0
 80019ce:	5e52      	ldrsh	r2, [r2, r1]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dc11      	bgt.n	80019f8 <interpolation+0x40>
 80019d4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <interpolation+0x108>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	5e9b      	ldrsh	r3, [r3, r2]
 80019da:	001a      	movs	r2, r3
 80019dc:	1dbb      	adds	r3, r7, #6
 80019de:	2100      	movs	r1, #0
 80019e0:	5e5b      	ldrsh	r3, [r3, r1]
 80019e2:	435a      	muls	r2, r3
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <interpolation+0x108>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	5e5b      	ldrsh	r3, [r3, r1]
 80019ea:	0019      	movs	r1, r3
 80019ec:	0010      	movs	r0, r2
 80019ee:	f7fe fc13 	bl	8000218 <__divsi3>
 80019f2:	0003      	movs	r3, r0
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	e05e      	b.n	8001ab6 <interpolation+0xfe>
    if (input >= pts[2].x) return pts[2].y;
 80019f8:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <interpolation+0x108>)
 80019fa:	2208      	movs	r2, #8
 80019fc:	5e9b      	ldrsh	r3, [r3, r2]
 80019fe:	1dba      	adds	r2, r7, #6
 8001a00:	2100      	movs	r1, #0
 8001a02:	5e52      	ldrsh	r2, [r2, r1]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	db03      	blt.n	8001a10 <interpolation+0x58>
 8001a08:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <interpolation+0x108>)
 8001a0a:	220a      	movs	r2, #10
 8001a0c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a0e:	e052      	b.n	8001ab6 <interpolation+0xfe>
    if (input <= pts[1].x) {
 8001a10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <interpolation+0x108>)
 8001a12:	2204      	movs	r2, #4
 8001a14:	5e9b      	ldrsh	r3, [r3, r2]
 8001a16:	1dba      	adds	r2, r7, #6
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5e52      	ldrsh	r2, [r2, r1]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dc25      	bgt.n	8001a6c <interpolation+0xb4>
        return pts[0].y +
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <interpolation+0x108>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	5e9b      	ldrsh	r3, [r3, r2]
 8001a26:	b29c      	uxth	r4, r3
            (pts[1].y - pts[0].y) * (input - pts[0].x) / (pts[1].x - pts[0].x);
 8001a28:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <interpolation+0x108>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a2e:	001a      	movs	r2, r3
 8001a30:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <interpolation+0x108>)
 8001a32:	2102      	movs	r1, #2
 8001a34:	5e5b      	ldrsh	r3, [r3, r1]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	1dba      	adds	r2, r7, #6
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5e52      	ldrsh	r2, [r2, r1]
 8001a3e:	4920      	ldr	r1, [pc, #128]	@ (8001ac0 <interpolation+0x108>)
 8001a40:	2000      	movs	r0, #0
 8001a42:	5e09      	ldrsh	r1, [r1, r0]
 8001a44:	1a52      	subs	r2, r2, r1
 8001a46:	435a      	muls	r2, r3
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <interpolation+0x108>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	5e5b      	ldrsh	r3, [r3, r1]
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <interpolation+0x108>)
 8001a52:	2000      	movs	r0, #0
 8001a54:	5e1b      	ldrsh	r3, [r3, r0]
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f7fe fbdc 	bl	8000218 <__divsi3>
 8001a60:	0003      	movs	r3, r0
        return pts[0].y +
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	18e3      	adds	r3, r4, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	e024      	b.n	8001ab6 <interpolation+0xfe>
    } else {

        return pts[1].y +
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <interpolation+0x108>)
 8001a6e:	2206      	movs	r2, #6
 8001a70:	5e9b      	ldrsh	r3, [r3, r2]
 8001a72:	b29c      	uxth	r4, r3
            (pts[2].y - pts[1].y) * (input - pts[1].x) / (pts[2].x - pts[1].x);
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <interpolation+0x108>)
 8001a76:	220a      	movs	r2, #10
 8001a78:	5e9b      	ldrsh	r3, [r3, r2]
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <interpolation+0x108>)
 8001a7e:	2106      	movs	r1, #6
 8001a80:	5e5b      	ldrsh	r3, [r3, r1]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	1dba      	adds	r2, r7, #6
 8001a86:	2100      	movs	r1, #0
 8001a88:	5e52      	ldrsh	r2, [r2, r1]
 8001a8a:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <interpolation+0x108>)
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	5e09      	ldrsh	r1, [r1, r0]
 8001a90:	1a52      	subs	r2, r2, r1
 8001a92:	435a      	muls	r2, r3
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <interpolation+0x108>)
 8001a96:	2108      	movs	r1, #8
 8001a98:	5e5b      	ldrsh	r3, [r3, r1]
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <interpolation+0x108>)
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	5e1b      	ldrsh	r3, [r3, r0]
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	f7fe fbb6 	bl	8000218 <__divsi3>
 8001aac:	0003      	movs	r3, r0
        return pts[1].y +
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	18e3      	adds	r3, r4, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21b      	sxth	r3, r3
    }
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b003      	add	sp, #12
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	0800679c 	.word	0x0800679c

08001ac4 <filterButton>:
 */
#include <stdint.h>

static uint16_t MAVectorButton[4];

static uint16_t filterButton(uint16_t voltIn){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	0002      	movs	r2, r0
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001ad0:	230e      	movs	r3, #14
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	1dba      	adds	r2, r7, #6
 8001ad6:	8812      	ldrh	r2, [r2, #0]
 8001ad8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<3;i++){
 8001ada:	230d      	movs	r3, #13
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e01c      	b.n	8001b1e <filterButton+0x5a>
		media+=MAVectorButton[i+1];
 8001ae4:	200d      	movs	r0, #13
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <filterButton+0x84>)
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	5ad1      	ldrh	r1, [r2, r3]
 8001af2:	220e      	movs	r2, #14
 8001af4:	18bb      	adds	r3, r7, r2
 8001af6:	18ba      	adds	r2, r7, r2
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	188a      	adds	r2, r1, r2
 8001afc:	801a      	strh	r2, [r3, #0]
		MAVectorButton[i]=MAVectorButton[i+1];
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	1c59      	adds	r1, r3, #1
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <filterButton+0x84>)
 8001b0a:	0049      	lsls	r1, r1, #1
 8001b0c:	5ac9      	ldrh	r1, [r1, r3]
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <filterButton+0x84>)
 8001b10:	0052      	lsls	r2, r2, #1
 8001b12:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<3;i++){
 8001b14:	183b      	adds	r3, r7, r0
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	3201      	adds	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	230d      	movs	r3, #13
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d9dd      	bls.n	8001ae4 <filterButton+0x20>
	}
	MAVectorButton[3]=voltIn;
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <filterButton+0x84>)
 8001b2a:	1dba      	adds	r2, r7, #6
 8001b2c:	8812      	ldrh	r2, [r2, #0]
 8001b2e:	80da      	strh	r2, [r3, #6]
	media/=4;
 8001b30:	210e      	movs	r1, #14
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	187a      	adds	r2, r7, r1
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	0892      	lsrs	r2, r2, #2
 8001b3a:	801a      	strh	r2, [r3, #0]

	//if(media>)
	return media;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	881b      	ldrh	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200008fc 	.word	0x200008fc

08001b4c <filterVolt>:
 */
#include <stdint.h>

static uint16_t MAVectorVolt[10];

static uint16_t filterVolt(uint16_t voltIn){
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	0002      	movs	r2, r0
 8001b54:	1dbb      	adds	r3, r7, #6
 8001b56:	801a      	strh	r2, [r3, #0]
	uint16_t media=voltIn;
 8001b58:	230e      	movs	r3, #14
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	1dba      	adds	r2, r7, #6
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<9;i++){
 8001b62:	230d      	movs	r3, #13
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e01c      	b.n	8001ba6 <filterVolt+0x5a>
		media+=MAVectorVolt[i+1];
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	183b      	adds	r3, r7, r0
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <filterVolt+0x8c>)
 8001b76:	0052      	lsls	r2, r2, #1
 8001b78:	5ad1      	ldrh	r1, [r2, r3]
 8001b7a:	220e      	movs	r2, #14
 8001b7c:	18bb      	adds	r3, r7, r2
 8001b7e:	18ba      	adds	r2, r7, r2
 8001b80:	8812      	ldrh	r2, [r2, #0]
 8001b82:	188a      	adds	r2, r1, r2
 8001b84:	801a      	strh	r2, [r3, #0]
		MAVectorVolt[i]=MAVectorVolt[i+1];
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	183b      	adds	r3, r7, r0
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <filterVolt+0x8c>)
 8001b92:	0049      	lsls	r1, r1, #1
 8001b94:	5ac9      	ldrh	r1, [r1, r3]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <filterVolt+0x8c>)
 8001b98:	0052      	lsls	r2, r2, #1
 8001b9a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++){
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	183b      	adds	r3, r7, r0
 8001ba2:	3201      	adds	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	230d      	movs	r3, #13
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d9dd      	bls.n	8001b6c <filterVolt+0x20>
	}
	MAVectorVolt[9]=voltIn;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <filterVolt+0x8c>)
 8001bb2:	1dba      	adds	r2, r7, #6
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	825a      	strh	r2, [r3, #18]
	media/=10;
 8001bb8:	250e      	movs	r5, #14
 8001bba:	197c      	adds	r4, r7, r5
 8001bbc:	197b      	adds	r3, r7, r5
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7fe fa9e 	bl	8000104 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	8023      	strh	r3, [r4, #0]
	return media;
 8001bcc:	197b      	adds	r3, r7, r5
 8001bce:	881b      	ldrh	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	20000904 	.word	0x20000904

08001bdc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b08e      	sub	sp, #56	@ 0x38
 8001be0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001be2:	f001 faa7 	bl	8003134 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001be6:	f000 f84d 	bl	8001c84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bea:	f7fe fd35 	bl	8000658 <MX_GPIO_Init>
	MX_DMA_Init();
 8001bee:	f7fe fd15 	bl	800061c <MX_DMA_Init>
	MX_ADC_Init();
 8001bf2:	f7fe fc27 	bl	8000444 <MX_ADC_Init>
	MX_SPI1_Init();
 8001bf6:	f7fe fdf3 	bl	80007e0 <MX_SPI1_Init>
	MX_TIM2_Init();
 8001bfa:	f7fe fecb 	bl	8000994 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bfe:	f7fe ff1d 	bl	8000a3c <MX_TIM3_Init>

	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <main+0x88>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f003 fce7 	bl	80055d8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <main+0x8c>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f003 fce3 	bl	80055d8 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buffer, ADC_BUFFER_SIZE);
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	4915      	ldr	r1, [pc, #84]	@ (8001c6c <main+0x90>)
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <main+0x94>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 fc52 	bl	80034c4 <HAL_ADC_Start_DMA>
	// Set TIM3 to current frequency mode
	update_tim3_frequency(currentFreqMode);
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <main+0x98>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe ff8f 	bl	8000b48 <update_tim3_frequency>
	/* USER CODE END 2 */

	uint8_t nrTasks = 4; //Numar taskuri
 8001c2a:	2537      	movs	r5, #55	@ 0x37
 8001c2c:	197b      	adds	r3, r7, r5
 8001c2e:	2204      	movs	r2, #4
 8001c30:	701a      	strb	r2, [r3, #0]
	SimpleTask tasks[] = { { "readAdcVoltFunction", readAdcVoltFunction, 100 },
 8001c32:	003b      	movs	r3, r7
 8001c34:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <main+0x9c>)
 8001c36:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c38:	c313      	stmia	r3!, {r0, r1, r4}
 8001c3a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c3c:	c313      	stmia	r3!, {r0, r1, r4}
 8001c3e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c40:	c313      	stmia	r3!, {r0, r1, r4}
 8001c42:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c44:	c313      	stmia	r3!, {r0, r1, r4}
			{ "displayVoltReadFunction", displayVoltReadFunction, 1570 }, {
					"readButtonFunction", readButtonFunction, 100 }, {
					"oscilloscopeTriggerFunction", oscilloscopeTriggerFunction,
					100 } }; //timpul total pana vom intra din nou intr-o functie, ex readAdcVoltFunction, e suma tuturor us a tuturor taskurilor.

	uint32_t initTaskMaxTime = 1570 * 1000; //timp alocat task-ului de init OS(dupa initializarea OS-ului in sine). In us.
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <main+0xa0>)
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
	OS_Init(tasks, nrTasks, init_task, initTaskMaxTime);
 8001c4a:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <main+0xa4>)
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	7819      	ldrb	r1, [r3, #0]
 8001c52:	0038      	movs	r0, r7
 8001c54:	0023      	movs	r3, r4
 8001c56:	f001 f9b5 	bl	8002fc4 <OS_Init>
	OS_Run();
 8001c5a:	f001 f9d7 	bl	800300c <OS_Run>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	e7fd      	b.n	8001c5e <main+0x82>
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	20000528 	.word	0x20000528
 8001c68:	20000570 	.word	0x20000570
 8001c6c:	200005fc 	.word	0x200005fc
 8001c70:	20000440 	.word	0x20000440
 8001c74:	20000004 	.word	0x20000004
 8001c78:	08005ca0 	.word	0x08005ca0
 8001c7c:	0017f4d0 	.word	0x0017f4d0
 8001c80:	08001d55 	.word	0x08001d55

08001c84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b099      	sub	sp, #100	@ 0x64
 8001c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c8a:	242c      	movs	r4, #44	@ 0x2c
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2334      	movs	r3, #52	@ 0x34
 8001c92:	001a      	movs	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f003 ff93 	bl	8005bc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c9a:	231c      	movs	r3, #28
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	f003 ff8b 	bl	8005bc0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001caa:	003b      	movs	r3, r7
 8001cac:	0018      	movs	r0, r3
 8001cae:	231c      	movs	r3, #28
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f003 ff84 	bl	8005bc0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001cb8:	0021      	movs	r1, r4
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2212      	movs	r2, #18
 8001cbe:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI14;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2201      	movs	r2, #1
 8001cca:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2210      	movs	r2, #16
 8001cd0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2202      	movs	r2, #2
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	0212      	lsls	r2, r2, #8
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	22a0      	movs	r2, #160	@ 0xa0
 8001cea:	0392      	lsls	r2, r2, #14
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f002 fabe 	bl	8004278 <HAL_RCC_OscConfig>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x80>
		Error_Handler();
 8001d00:	f001 f95a 	bl	8002fb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d04:	211c      	movs	r1, #28
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2202      	movs	r2, #2
 8001d10:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2101      	movs	r1, #1
 8001d22:	0018      	movs	r0, r3
 8001d24:	f002 fe2e 	bl	8004984 <HAL_RCC_ClockConfig>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0xac>
		Error_Handler();
 8001d2c:	f001 f944 	bl	8002fb8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d30:	003b      	movs	r3, r7
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d36:	003b      	movs	r3, r7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001d3c:	003b      	movs	r3, r7
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f002 ff6c 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0xc8>
		Error_Handler();
 8001d48:	f001 f936 	bl	8002fb8 <Error_Handler>
	}
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b019      	add	sp, #100	@ 0x64
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <init_task>:

/* USER CODE BEGIN 4 */
// Facem OS custom aici, avem un init task dupa care vin celalalte.
void init_task(void) {
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af02      	add	r7, sp, #8
	test = 42;
 8001d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800201c <init_task+0x2c8>)
 8001d5c:	222a      	movs	r2, #42	@ 0x2a
 8001d5e:	701a      	strb	r2, [r3, #0]
	st7565_init();
 8001d60:	f7fe ffaa 	bl	8000cb8 <st7565_init>
	st7565_backlight_enable();
 8001d64:	f7ff f856 	bl	8000e14 <st7565_backlight_enable>
	st7565_clear_screen();
 8001d68:	f7ff f886 	bl	8000e78 <st7565_clear_screen>
	st7565_set_brightness(0);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff f85f 	bl	8000e30 <st7565_set_brightness>
	//st7565_write_buffer(buffer); // This will show the pre-filled logo
	//osDelay(1000);

	//st7565_fade_in(10);

	st7565_clear_buffer(buffer);
 8001d72:	4bab      	ldr	r3, [pc, #684]	@ (8002020 <init_task+0x2cc>)
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff f8db 	bl	8000f30 <st7565_clear_buffer>

	//Animatie jmekera de startup

	uint8_t spacingx = 126 / 10; //Cat de distantate sunt liniile in animatie x
 8001d7a:	230b      	movs	r3, #11
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	220c      	movs	r2, #12
 8001d80:	701a      	strb	r2, [r3, #0]
	uint8_t spacingy = 63 / 6;
 8001d82:	230a      	movs	r3, #10
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	220a      	movs	r2, #10
 8001d88:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i <= 63; i += 2) { //i,j stanga sus->centru
 8001d8a:	231e      	movs	r3, #30
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e0ab      	b.n	8001eec <init_task+0x198>
		//spacing=5+i/10;
		if (i % 4 == 0)
 8001d94:	211e      	movs	r1, #30
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <init_task+0x60>
			st7565_set_brightness(i / 4);
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff f83e 	bl	8000e30 <st7565_set_brightness>
		uint16_t j = i / 2;
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	221e      	movs	r2, #30
 8001db8:	18ba      	adds	r2, r7, r2
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	0852      	lsrs	r2, r2, #1
 8001dbe:	801a      	strh	r2, [r3, #0]
		st7565_clear_buffer(buffer);
 8001dc0:	4b97      	ldr	r3, [pc, #604]	@ (8002020 <init_task+0x2cc>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff f8b4 	bl	8000f30 <st7565_clear_buffer>
		//Linie de la i,j la marginea dreapta
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001dc8:	231c      	movs	r3, #28
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
 8001dd0:	e017      	b.n	8001e02 <init_task+0xae>
			st7565_drawline_complex(buffer, i, j, 126, j2, 1);
 8001dd2:	231e      	movs	r3, #30
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	8819      	ldrh	r1, [r3, #0]
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	251c      	movs	r5, #28
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	488f      	ldr	r0, [pc, #572]	@ (8002020 <init_task+0x2cc>)
 8001de4:	2401      	movs	r4, #1
 8001de6:	9401      	str	r4, [sp, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	237e      	movs	r3, #126	@ 0x7e
 8001dec:	f7ff f9c8 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001df0:	230a      	movs	r3, #10
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b299      	uxth	r1, r3
 8001df8:	197b      	adds	r3, r7, r5
 8001dfa:	197a      	adds	r2, r7, r5
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	188a      	adds	r2, r1, r2
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	231c      	movs	r3, #28
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e0a:	d9e2      	bls.n	8001dd2 <init_task+0x7e>
		}
		//Linie de la i,j la marginea stanga
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001e0c:	231a      	movs	r3, #26
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	e017      	b.n	8001e46 <init_task+0xf2>
			st7565_drawline_complex(buffer, i, j, 0, j2, 1);
 8001e16:	231e      	movs	r3, #30
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	8819      	ldrh	r1, [r3, #0]
 8001e1c:	1dbb      	adds	r3, r7, #6
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	251a      	movs	r5, #26
 8001e22:	197b      	adds	r3, r7, r5
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	487e      	ldr	r0, [pc, #504]	@ (8002020 <init_task+0x2cc>)
 8001e28:	2401      	movs	r4, #1
 8001e2a:	9401      	str	r4, [sp, #4]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f7ff f9a6 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001e34:	230a      	movs	r3, #10
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	197b      	adds	r3, r7, r5
 8001e3e:	197a      	adds	r2, r7, r5
 8001e40:	8812      	ldrh	r2, [r2, #0]
 8001e42:	188a      	adds	r2, r1, r2
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	231a      	movs	r3, #26
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e4e:	d9e2      	bls.n	8001e16 <init_task+0xc2>
		}

		//Linie de la i,j la margine jos
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001e50:	2318      	movs	r3, #24
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	e017      	b.n	8001e8a <init_task+0x136>
			st7565_drawline_complex(buffer, i, j, i2, 63, 1);
 8001e5a:	231e      	movs	r3, #30
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	8819      	ldrh	r1, [r3, #0]
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	2518      	movs	r5, #24
 8001e66:	197b      	adds	r3, r7, r5
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	486d      	ldr	r0, [pc, #436]	@ (8002020 <init_task+0x2cc>)
 8001e6c:	2401      	movs	r4, #1
 8001e6e:	9401      	str	r4, [sp, #4]
 8001e70:	243f      	movs	r4, #63	@ 0x3f
 8001e72:	9400      	str	r4, [sp, #0]
 8001e74:	f7ff f984 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001e78:	230b      	movs	r3, #11
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b299      	uxth	r1, r3
 8001e80:	197b      	adds	r3, r7, r5
 8001e82:	197a      	adds	r2, r7, r5
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	188a      	adds	r2, r1, r2
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	2318      	movs	r3, #24
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e92:	d9e2      	bls.n	8001e5a <init_task+0x106>
		}
		//Linie de la i,j la margine sus
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001e94:	2316      	movs	r3, #22
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	e017      	b.n	8001ece <init_task+0x17a>
			st7565_drawline_complex(buffer, i, j, i2, 0, 1);
 8001e9e:	231e      	movs	r3, #30
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	8819      	ldrh	r1, [r3, #0]
 8001ea4:	1dbb      	adds	r3, r7, #6
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	2516      	movs	r5, #22
 8001eaa:	197b      	adds	r3, r7, r5
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	485c      	ldr	r0, [pc, #368]	@ (8002020 <init_task+0x2cc>)
 8001eb0:	2401      	movs	r4, #1
 8001eb2:	9401      	str	r4, [sp, #4]
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	f7ff f962 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001ebc:	230b      	movs	r3, #11
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	197b      	adds	r3, r7, r5
 8001ec6:	197a      	adds	r2, r7, r5
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	188a      	adds	r2, r1, r2
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	2316      	movs	r3, #22
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ed6:	d9e2      	bls.n	8001e9e <init_task+0x14a>
		}

		//deseneaza frame
		st7565_write_buffer(buffer);
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <init_task+0x2cc>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe fe7e 	bl	8000bdc <st7565_write_buffer>
	for (uint16_t i = 0; i <= 63; i += 2) { //i,j stanga sus->centru
 8001ee0:	221e      	movs	r2, #30
 8001ee2:	18bb      	adds	r3, r7, r2
 8001ee4:	18ba      	adds	r2, r7, r2
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	3202      	adds	r2, #2
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	231e      	movs	r3, #30
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ef4:	d800      	bhi.n	8001ef8 <init_task+0x1a4>
 8001ef6:	e74d      	b.n	8001d94 <init_task+0x40>
		//HAL_Delay(50);

		//osDelay(2);

	}
	for (uint16_t i = 64; i <= 126; i += 2) {      	//i,j centru->dreapta jos
 8001ef8:	2314      	movs	r3, #20
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2240      	movs	r2, #64	@ 0x40
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e0b8      	b.n	8002074 <init_task+0x320>
		//spacing=11-(i-64)/10;
		if (i % 4 == 0)
 8001f02:	2114      	movs	r1, #20
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <init_task+0x1d4>
			st7565_set_brightness((126 - i) / 4);
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	227e      	movs	r2, #126	@ 0x7e
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	d500      	bpl.n	8001f1e <init_task+0x1ca>
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	109b      	asrs	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe ff84 	bl	8000e30 <st7565_set_brightness>
		uint16_t j = i / 2;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2214      	movs	r2, #20
 8001f2e:	18ba      	adds	r2, r7, r2
 8001f30:	8812      	ldrh	r2, [r2, #0]
 8001f32:	0852      	lsrs	r2, r2, #1
 8001f34:	801a      	strh	r2, [r3, #0]
		st7565_clear_buffer(buffer);
 8001f36:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <init_task+0x2cc>)
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe fff9 	bl	8000f30 <st7565_clear_buffer>
		//Linie de la i,j la marginea dreapta
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001f3e:	2312      	movs	r3, #18
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	e018      	b.n	8001f7a <init_task+0x226>
			st7565_drawline_complex(buffer, i, j, 126, j2, 1);
 8001f48:	2314      	movs	r3, #20
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	8819      	ldrh	r1, [r3, #0]
 8001f4e:	2308      	movs	r3, #8
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	2512      	movs	r5, #18
 8001f56:	197b      	adds	r3, r7, r5
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	4831      	ldr	r0, [pc, #196]	@ (8002020 <init_task+0x2cc>)
 8001f5c:	2401      	movs	r4, #1
 8001f5e:	9401      	str	r4, [sp, #4]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	237e      	movs	r3, #126	@ 0x7e
 8001f64:	f7ff f90c 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001f68:	230a      	movs	r3, #10
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b299      	uxth	r1, r3
 8001f70:	197b      	adds	r3, r7, r5
 8001f72:	197a      	adds	r2, r7, r5
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	188a      	adds	r2, r1, r2
 8001f78:	801a      	strh	r2, [r3, #0]
 8001f7a:	2312      	movs	r3, #18
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f82:	d9e1      	bls.n	8001f48 <init_task+0x1f4>
		}
		//Linie de la i,j la marginea stanga
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001f84:	2310      	movs	r3, #16
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e018      	b.n	8001fc0 <init_task+0x26c>
			st7565_drawline_complex(buffer, i, j, 0, j2, 1);
 8001f8e:	2314      	movs	r3, #20
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	8819      	ldrh	r1, [r3, #0]
 8001f94:	2308      	movs	r3, #8
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	881a      	ldrh	r2, [r3, #0]
 8001f9a:	2510      	movs	r5, #16
 8001f9c:	197b      	adds	r3, r7, r5
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	481f      	ldr	r0, [pc, #124]	@ (8002020 <init_task+0x2cc>)
 8001fa2:	2401      	movs	r4, #1
 8001fa4:	9401      	str	r4, [sp, #4]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f7ff f8e9 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t j2 = 0; j2 <= 63; j2 += spacingy) {
 8001fae:	230a      	movs	r3, #10
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	197b      	adds	r3, r7, r5
 8001fb8:	197a      	adds	r2, r7, r5
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	188a      	adds	r2, r1, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fc8:	d9e1      	bls.n	8001f8e <init_task+0x23a>
		}

		//Linie de la i,j la margine jos
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001fca:	230e      	movs	r3, #14
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	e018      	b.n	8002006 <init_task+0x2b2>
			st7565_drawline_complex(buffer, i, j, i2, 63, 1);
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	8819      	ldrh	r1, [r3, #0]
 8001fda:	2308      	movs	r3, #8
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	250e      	movs	r5, #14
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	480e      	ldr	r0, [pc, #56]	@ (8002020 <init_task+0x2cc>)
 8001fe8:	2401      	movs	r4, #1
 8001fea:	9401      	str	r4, [sp, #4]
 8001fec:	243f      	movs	r4, #63	@ 0x3f
 8001fee:	9400      	str	r4, [sp, #0]
 8001ff0:	f7ff f8c6 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8001ff4:	230b      	movs	r3, #11
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b299      	uxth	r1, r3
 8001ffc:	197b      	adds	r3, r7, r5
 8001ffe:	197a      	adds	r2, r7, r5
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	188a      	adds	r2, r1, r2
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	230e      	movs	r3, #14
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	2b7e      	cmp	r3, #126	@ 0x7e
 800200e:	d9e1      	bls.n	8001fd4 <init_task+0x280>
		}
		//Linie de la i,j la margine sus
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8002010:	230c      	movs	r3, #12
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2200      	movs	r2, #0
 8002016:	801a      	strh	r2, [r3, #0]
 8002018:	e01d      	b.n	8002056 <init_task+0x302>
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	20000918 	.word	0x20000918
 8002020:	20000014 	.word	0x20000014
			st7565_drawline_complex(buffer, i, j, i2, 0, 1);
 8002024:	2314      	movs	r3, #20
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	8819      	ldrh	r1, [r3, #0]
 800202a:	2308      	movs	r3, #8
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	250c      	movs	r5, #12
 8002032:	197b      	adds	r3, r7, r5
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	4816      	ldr	r0, [pc, #88]	@ (8002090 <init_task+0x33c>)
 8002038:	2401      	movs	r4, #1
 800203a:	9401      	str	r4, [sp, #4]
 800203c:	2400      	movs	r4, #0
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	f7ff f89e 	bl	8001180 <st7565_drawline_complex>
		for (uint16_t i2 = 0; i2 <= 126; i2 += spacingx) {
 8002044:	230b      	movs	r3, #11
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b299      	uxth	r1, r3
 800204c:	197b      	adds	r3, r7, r5
 800204e:	197a      	adds	r2, r7, r5
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	188a      	adds	r2, r1, r2
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	230c      	movs	r3, #12
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b7e      	cmp	r3, #126	@ 0x7e
 800205e:	d9e1      	bls.n	8002024 <init_task+0x2d0>
		}

		//deseneaza frame
		st7565_write_buffer(buffer);
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <init_task+0x33c>)
 8002062:	0018      	movs	r0, r3
 8002064:	f7fe fdba 	bl	8000bdc <st7565_write_buffer>
	for (uint16_t i = 64; i <= 126; i += 2) {      	//i,j centru->dreapta jos
 8002068:	2214      	movs	r2, #20
 800206a:	18bb      	adds	r3, r7, r2
 800206c:	18ba      	adds	r2, r7, r2
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	3202      	adds	r2, #2
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	2314      	movs	r3, #20
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	2b7e      	cmp	r3, #126	@ 0x7e
 800207c:	d800      	bhi.n	8002080 <init_task+0x32c>
 800207e:	e740      	b.n	8001f02 <init_task+0x1ae>
	//st7565_drawstring(buffer,15,2,"Hello World!!");

	//HAL_ReadPin
	//Trimitem comanda sa desenam

	st7565_set_brightness(0);
 8002080:	2000      	movs	r0, #0
 8002082:	f7fe fed5 	bl	8000e30 <st7565_set_brightness>

}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b008      	add	sp, #32
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	20000014 	.word	0x20000014

08002094 <readAdcVoltFunction>:
 * @brief  Function implementing the readAdcVolt thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_readAdcVoltFunction */
void readAdcVoltFunction(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	 voltReadRaw = HAL_ADC_GetValue(&hadc);
	 else voltReadRaw=0;

	 HAL_ADC_Stop(&hadc);*/

	voltReadRaw = adc_buffer[255];
 8002098:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <readAdcVoltFunction+0x38>)
 800209a:	23ff      	movs	r3, #255	@ 0xff
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	5ad3      	ldrh	r3, [r2, r3]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <readAdcVoltFunction+0x3c>)
 80020a4:	801a      	strh	r2, [r3, #0]
	voltRead = filterVolt(interpolation(voltReadRaw));
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <readAdcVoltFunction+0x3c>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fc83 	bl	80019b8 <interpolation>
 80020b2:	0003      	movs	r3, r0
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fd48 	bl	8001b4c <filterVolt>
 80020bc:	0003      	movs	r3, r0
 80020be:	001a      	movs	r2, r3
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <readAdcVoltFunction+0x40>)
 80020c2:	801a      	strh	r2, [r3, #0]

	/* USER CODE END 5 */
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	200005fc 	.word	0x200005fc
 80020d0:	20000006 	.word	0x20000006
 80020d4:	200005b8 	.word	0x200005b8

080020d8 <displayVoltReadFunction>:
 * @brief Function implementing the displayVoltRead thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayVoltReadFunction */
void displayVoltReadFunction(void) {
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b0bf      	sub	sp, #252	@ 0xfc
 80020dc:	af02      	add	r7, sp, #8
		DRAWING, DRAWING_POPUP, SENDING_PAGE, WAITING
	};
	static uint8_t state = DRAWING;
	static uint8_t current_page = 0;
	static uint32_t last_frame_time = 0;
	uint32_t now = HAL_GetTick_us();
 80020de:	f7fe fd75 	bl	8000bcc <HAL_GetTick_us>
 80020e2:	0003      	movs	r3, r0
 80020e4:	22e0      	movs	r2, #224	@ 0xe0
 80020e6:	18ba      	adds	r2, r7, r2
 80020e8:	6013      	str	r3, [r2, #0]
	switch (state) {
 80020ea:	4b74      	ldr	r3, [pc, #464]	@ (80022bc <displayVoltReadFunction+0x1e4>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d101      	bne.n	80020f6 <displayVoltReadFunction+0x1e>
 80020f2:	f000 fce4 	bl	8002abe <displayVoltReadFunction+0x9e6>
 80020f6:	dd01      	ble.n	80020fc <displayVoltReadFunction+0x24>
 80020f8:	f000 fcf5 	bl	8002ae6 <displayVoltReadFunction+0xa0e>
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d101      	bne.n	8002104 <displayVoltReadFunction+0x2c>
 8002100:	f000 fc8a 	bl	8002a18 <displayVoltReadFunction+0x940>
 8002104:	dd01      	ble.n	800210a <displayVoltReadFunction+0x32>
 8002106:	f000 fcee 	bl	8002ae6 <displayVoltReadFunction+0xa0e>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <displayVoltReadFunction+0x40>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d100      	bne.n	8002114 <displayVoltReadFunction+0x3c>
 8002112:	e397      	b.n	8002844 <displayVoltReadFunction+0x76c>
			state = DRAWING;
			last_frame_time = now;
		}
		break;
	}
}
 8002114:	f000 fce7 	bl	8002ae6 <displayVoltReadFunction+0xa0e>
		st7565_clear_buffer(buffer);
 8002118:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <displayVoltReadFunction+0x1e8>)
 800211a:	0018      	movs	r0, r3
 800211c:	f7fe ff08 	bl	8000f30 <st7565_clear_buffer>
		if (displayMode == 0) {
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <displayVoltReadFunction+0x1ec>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d159      	bne.n	80021dc <displayVoltReadFunction+0x104>
			st7565_drawstring(buffer, 0, 0, "Volt:", fontMode);
 8002128:	4b67      	ldr	r3, [pc, #412]	@ (80022c8 <displayVoltReadFunction+0x1f0>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4a67      	ldr	r2, [pc, #412]	@ (80022cc <displayVoltReadFunction+0x1f4>)
 800212e:	4864      	ldr	r0, [pc, #400]	@ (80022c0 <displayVoltReadFunction+0x1e8>)
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	0013      	movs	r3, r2
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	f7fe ff74 	bl	8001024 <st7565_drawstring>
			itoa(voltRead, volt, 10);
 800213c:	4b64      	ldr	r3, [pc, #400]	@ (80022d0 <displayVoltReadFunction+0x1f8>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	220a      	movs	r2, #10
 8002146:	0019      	movs	r1, r3
 8002148:	f003 fd02 	bl	8005b50 <itoa>
			if (voltRead < 10) {
 800214c:	4b60      	ldr	r3, [pc, #384]	@ (80022d0 <displayVoltReadFunction+0x1f8>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d810      	bhi.n	8002176 <displayVoltReadFunction+0x9e>
				volt[4] = '\0';
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	711a      	strb	r2, [r3, #4]
				volt[3] = volt[0];
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	70da      	strb	r2, [r3, #3]
				volt[2] = '0';
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2230      	movs	r2, #48	@ 0x30
 8002166:	709a      	strb	r2, [r3, #2]
				volt[1] = '.';
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	222e      	movs	r2, #46	@ 0x2e
 800216c:	705a      	strb	r2, [r3, #1]
				volt[0] = '0';
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2230      	movs	r2, #48	@ 0x30
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e027      	b.n	80021c6 <displayVoltReadFunction+0xee>
			} else if (voltRead >= 10 && voltRead < 100) {
 8002176:	4b56      	ldr	r3, [pc, #344]	@ (80022d0 <displayVoltReadFunction+0x1f8>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	2b09      	cmp	r3, #9
 800217c:	d915      	bls.n	80021aa <displayVoltReadFunction+0xd2>
 800217e:	4b54      	ldr	r3, [pc, #336]	@ (80022d0 <displayVoltReadFunction+0x1f8>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	2b63      	cmp	r3, #99	@ 0x63
 8002184:	d811      	bhi.n	80021aa <displayVoltReadFunction+0xd2>
				volt[4] = '\0';
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	711a      	strb	r2, [r3, #4]
				volt[3] = volt[1];
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	785a      	ldrb	r2, [r3, #1]
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	70da      	strb	r2, [r3, #3]
				volt[2] = volt[0];
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	709a      	strb	r2, [r3, #2]
				volt[1] = '.';
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	222e      	movs	r2, #46	@ 0x2e
 80021a0:	705a      	strb	r2, [r3, #1]
				volt[0] = '0';
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2230      	movs	r2, #48	@ 0x30
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e00d      	b.n	80021c6 <displayVoltReadFunction+0xee>
				volt[4] = '\0';
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	711a      	strb	r2, [r3, #4]
				volt[3] = volt[2];
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	789a      	ldrb	r2, [r3, #2]
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	70da      	strb	r2, [r3, #3]
				volt[2] = volt[1];
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	785a      	ldrb	r2, [r3, #1]
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	709a      	strb	r2, [r3, #2]
				volt[1] = '.';
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	222e      	movs	r2, #46	@ 0x2e
 80021c4:	705a      	strb	r2, [r3, #1]
			st7565_drawstring(buffer, 0, 1, volt, fontMode);
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <displayVoltReadFunction+0x1f0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	483c      	ldr	r0, [pc, #240]	@ (80022c0 <displayVoltReadFunction+0x1e8>)
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	0013      	movs	r3, r2
 80021d2:	2201      	movs	r2, #1
 80021d4:	2100      	movs	r1, #0
 80021d6:	f7fe ff25 	bl	8001024 <st7565_drawstring>
 80021da:	e32f      	b.n	800283c <displayVoltReadFunction+0x764>
		} else if (displayMode == 1) {
 80021dc:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <displayVoltReadFunction+0x1ec>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d000      	beq.n	80021e6 <displayVoltReadFunction+0x10e>
 80021e4:	e1aa      	b.n	800253c <displayVoltReadFunction+0x464>
			st7565_drawstring(buffer, 30, 2, "Volt Range", fontMode);
 80021e6:	4b38      	ldr	r3, [pc, #224]	@ (80022c8 <displayVoltReadFunction+0x1f0>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	@ (80022d4 <displayVoltReadFunction+0x1fc>)
 80021ec:	4834      	ldr	r0, [pc, #208]	@ (80022c0 <displayVoltReadFunction+0x1e8>)
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	0013      	movs	r3, r2
 80021f2:	2202      	movs	r2, #2
 80021f4:	211e      	movs	r1, #30
 80021f6:	f7fe ff15 	bl	8001024 <st7565_drawstring>
			int bar_x0 = 5;
 80021fa:	2305      	movs	r3, #5
 80021fc:	22cc      	movs	r2, #204	@ 0xcc
 80021fe:	18b9      	adds	r1, r7, r2
 8002200:	600b      	str	r3, [r1, #0]
			int bar_x1 = 121;
 8002202:	2379      	movs	r3, #121	@ 0x79
 8002204:	20c8      	movs	r0, #200	@ 0xc8
 8002206:	1839      	adds	r1, r7, r0
 8002208:	600b      	str	r3, [r1, #0]
			int bar_y0 = 30;
 800220a:	231e      	movs	r3, #30
 800220c:	24c4      	movs	r4, #196	@ 0xc4
 800220e:	1939      	adds	r1, r7, r4
 8002210:	600b      	str	r3, [r1, #0]
			int bar_y1 = 37;
 8002212:	2325      	movs	r3, #37	@ 0x25
 8002214:	26c0      	movs	r6, #192	@ 0xc0
 8002216:	19b9      	adds	r1, r7, r6
 8002218:	600b      	str	r3, [r1, #0]
			int squares = 10;
 800221a:	230a      	movs	r3, #10
 800221c:	21bc      	movs	r1, #188	@ 0xbc
 800221e:	187d      	adds	r5, r7, r1
 8002220:	602b      	str	r3, [r5, #0]
			int inner_x0 = bar_x0 + 1;
 8002222:	18bb      	adds	r3, r7, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	25b8      	movs	r5, #184	@ 0xb8
 800222a:	197a      	adds	r2, r7, r5
 800222c:	6013      	str	r3, [r2, #0]
			int inner_x1 = bar_x1 - 1;
 800222e:	183b      	adds	r3, r7, r0
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	22b4      	movs	r2, #180	@ 0xb4
 8002236:	18b8      	adds	r0, r7, r2
 8002238:	6003      	str	r3, [r0, #0]
			int inner_y0 = bar_y0 + 1;
 800223a:	193b      	adds	r3, r7, r4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	20b0      	movs	r0, #176	@ 0xb0
 8002242:	1838      	adds	r0, r7, r0
 8002244:	6003      	str	r3, [r0, #0]
			int inner_y1 = bar_y1 - 1;
 8002246:	19bb      	adds	r3, r7, r6
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	20ac      	movs	r0, #172	@ 0xac
 800224e:	1838      	adds	r0, r7, r0
 8002250:	6003      	str	r3, [r0, #0]
			int inner_width = inner_x1 - inner_x0 + 1;
 8002252:	18bb      	adds	r3, r7, r2
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	197b      	adds	r3, r7, r5
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	3301      	adds	r3, #1
 800225e:	26a8      	movs	r6, #168	@ 0xa8
 8002260:	19ba      	adds	r2, r7, r6
 8002262:	6013      	str	r3, [r2, #0]
			int square_width = inner_width / squares;
 8002264:	000c      	movs	r4, r1
 8002266:	187b      	adds	r3, r7, r1
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	19bb      	adds	r3, r7, r6
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	f7fd ffd3 	bl	8000218 <__divsi3>
 8002272:	0003      	movs	r3, r0
 8002274:	22a4      	movs	r2, #164	@ 0xa4
 8002276:	18b9      	adds	r1, r7, r2
 8002278:	600b      	str	r3, [r1, #0]
			int remainder = inner_width - square_width * squares;
 800227a:	18bb      	adds	r3, r7, r2
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0021      	movs	r1, r4
 8002280:	187a      	adds	r2, r7, r1
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4353      	muls	r3, r2
 8002286:	19ba      	adds	r2, r7, r6
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	22a0      	movs	r2, #160	@ 0xa0
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	6013      	str	r3, [r2, #0]
			int volt_step = 330 / squares;
 8002292:	187b      	adds	r3, r7, r1
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	23a5      	movs	r3, #165	@ 0xa5
 8002298:	0058      	lsls	r0, r3, #1
 800229a:	f7fd ffbd 	bl	8000218 <__divsi3>
 800229e:	0003      	movs	r3, r0
 80022a0:	229c      	movs	r2, #156	@ 0x9c
 80022a2:	18ba      	adds	r2, r7, r2
 80022a4:	6013      	str	r3, [r2, #0]
			int x = inner_x0;
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	22ec      	movs	r2, #236	@ 0xec
 80022ac:	18ba      	adds	r2, r7, r2
 80022ae:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < squares; i++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	22e8      	movs	r2, #232	@ 0xe8
 80022b4:	18ba      	adds	r2, r7, r2
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e062      	b.n	8002380 <displayVoltReadFunction+0x2a8>
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	20000919 	.word	0x20000919
 80022c0:	20000014 	.word	0x20000014
 80022c4:	2000000a 	.word	0x2000000a
 80022c8:	200005c0 	.word	0x200005c0
 80022cc:	08005cd0 	.word	0x08005cd0
 80022d0:	200005b8 	.word	0x200005b8
 80022d4:	08005cd8 	.word	0x08005cd8
				int w = square_width + (i < remainder ? 1 : 0);
 80022d8:	2301      	movs	r3, #1
 80022da:	1c19      	adds	r1, r3, #0
 80022dc:	23e8      	movs	r3, #232	@ 0xe8
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	23a0      	movs	r3, #160	@ 0xa0
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	db01      	blt.n	80022f0 <displayVoltReadFunction+0x218>
 80022ec:	2300      	movs	r3, #0
 80022ee:	1c19      	adds	r1, r3, #0
 80022f0:	b2cb      	uxtb	r3, r1
 80022f2:	001a      	movs	r2, r3
 80022f4:	23a4      	movs	r3, #164	@ 0xa4
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	2098      	movs	r0, #152	@ 0x98
 80022fe:	183a      	adds	r2, r7, r0
 8002300:	6013      	str	r3, [r2, #0]
				int threshold = (i + 1) * volt_step;
 8002302:	23e8      	movs	r3, #232	@ 0xe8
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	239c      	movs	r3, #156	@ 0x9c
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4353      	muls	r3, r2
 8002312:	2194      	movs	r1, #148	@ 0x94
 8002314:	187a      	adds	r2, r7, r1
 8002316:	6013      	str	r3, [r2, #0]
				if (voltRead >= threshold) {
 8002318:	4bc8      	ldr	r3, [pc, #800]	@ (800263c <displayVoltReadFunction+0x564>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	001a      	movs	r2, r3
 800231e:	187b      	adds	r3, r7, r1
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4293      	cmp	r3, r2
 8002324:	dc1d      	bgt.n	8002362 <displayVoltReadFunction+0x28a>
					st7565_fillrect(buffer, x, inner_y0, w,
 8002326:	23ec      	movs	r3, #236	@ 0xec
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2d9      	uxtb	r1, r3
 800232e:	26b0      	movs	r6, #176	@ 0xb0
 8002330:	19bb      	adds	r3, r7, r6
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2dc      	uxtb	r4, r3
 8002336:	183b      	adds	r3, r7, r0
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2dd      	uxtb	r5, r3
							inner_y1 - inner_y0 + 1, 1);
 800233c:	23ac      	movs	r3, #172	@ 0xac
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	19bb      	adds	r3, r7, r6
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b2db      	uxtb	r3, r3
					st7565_fillrect(buffer, x, inner_y0, w,
 800234e:	3301      	adds	r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	48bb      	ldr	r0, [pc, #748]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002354:	2201      	movs	r2, #1
 8002356:	9201      	str	r2, [sp, #4]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	002b      	movs	r3, r5
 800235c:	0022      	movs	r2, r4
 800235e:	f7ff f81a 	bl	8001396 <st7565_fillrect>
				x += w;
 8002362:	21ec      	movs	r1, #236	@ 0xec
 8002364:	187b      	adds	r3, r7, r1
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2398      	movs	r3, #152	@ 0x98
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	187a      	adds	r2, r7, r1
 8002372:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < squares; i++) {
 8002374:	22e8      	movs	r2, #232	@ 0xe8
 8002376:	18bb      	adds	r3, r7, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	18ba      	adds	r2, r7, r2
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	23e8      	movs	r3, #232	@ 0xe8
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	23bc      	movs	r3, #188	@ 0xbc
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	dba3      	blt.n	80022d8 <displayVoltReadFunction+0x200>
			st7565_drawline(buffer, bar_x0 + 1, bar_y0, bar_x1 - 1, bar_y0, 1);
 8002390:	26cc      	movs	r6, #204	@ 0xcc
 8002392:	19bb      	adds	r3, r7, r6
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	b2d9      	uxtb	r1, r3
 800239c:	20c4      	movs	r0, #196	@ 0xc4
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	25c8      	movs	r5, #200	@ 0xc8
 80023a6:	197b      	adds	r3, r7, r5
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2dc      	uxtb	r4, r3
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	48a2      	ldr	r0, [pc, #648]	@ (8002640 <displayVoltReadFunction+0x568>)
 80023b8:	2501      	movs	r5, #1
 80023ba:	9501      	str	r5, [sp, #4]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	0023      	movs	r3, r4
 80023c0:	f7ff f8e6 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, bar_x0 + 1, bar_y1, bar_x1 - 1, bar_y1, 1);
 80023c4:	19bb      	adds	r3, r7, r6
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	23c0      	movs	r3, #192	@ 0xc0
 80023d0:	0018      	movs	r0, r3
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	25c8      	movs	r5, #200	@ 0xc8
 80023da:	197b      	adds	r3, r7, r5
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b2dc      	uxtb	r4, r3
 80023e4:	0003      	movs	r3, r0
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4894      	ldr	r0, [pc, #592]	@ (8002640 <displayVoltReadFunction+0x568>)
 80023ee:	2501      	movs	r5, #1
 80023f0:	9501      	str	r5, [sp, #4]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	0023      	movs	r3, r4
 80023f6:	f7ff f8cb 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, bar_x0, bar_y0 + 1, bar_x0, bar_y1 - 1, 1);
 80023fa:	19ba      	adds	r2, r7, r6
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	b2d9      	uxtb	r1, r3
 8002400:	20c4      	movs	r0, #196	@ 0xc4
 8002402:	183a      	adds	r2, r7, r0
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	19bc      	adds	r4, r7, r6
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	b2dc      	uxtb	r4, r3
 8002412:	23c0      	movs	r3, #192	@ 0xc0
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4888      	ldr	r0, [pc, #544]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002420:	2501      	movs	r5, #1
 8002422:	9501      	str	r5, [sp, #4]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	0023      	movs	r3, r4
 8002428:	f7ff f8b2 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, bar_x1, bar_y0 + 1, bar_x1, bar_y1 - 1, 1);
 800242c:	25c8      	movs	r5, #200	@ 0xc8
 800242e:	197a      	adds	r2, r7, r5
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	b2d9      	uxtb	r1, r3
 8002434:	20c4      	movs	r0, #196	@ 0xc4
 8002436:	183a      	adds	r2, r7, r0
 8002438:	6813      	ldr	r3, [r2, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	1978      	adds	r0, r7, r5
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	b2dc      	uxtb	r4, r3
 8002446:	23c0      	movs	r3, #192	@ 0xc0
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	487b      	ldr	r0, [pc, #492]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002454:	2501      	movs	r5, #1
 8002456:	9501      	str	r5, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	0023      	movs	r3, r4
 800245c:	f7ff f898 	bl	8001590 <st7565_drawline>
			st7565_setpixel(buffer, bar_x0 + 1, bar_y0 + 1, 1);
 8002460:	19ba      	adds	r2, r7, r6
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	b2d9      	uxtb	r1, r3
 800246a:	24c4      	movs	r4, #196	@ 0xc4
 800246c:	193a      	adds	r2, r7, r4
 800246e:	6813      	ldr	r3, [r2, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4872      	ldr	r0, [pc, #456]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002478:	2301      	movs	r3, #1
 800247a:	f7fe fd68 	bl	8000f4e <st7565_setpixel>
			st7565_setpixel(buffer, bar_x0 + 1, bar_y1 - 1, 1);
 800247e:	19ba      	adds	r2, r7, r6
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	b2d9      	uxtb	r1, r3
 8002488:	26c0      	movs	r6, #192	@ 0xc0
 800248a:	19bb      	adds	r3, r7, r6
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	486a      	ldr	r0, [pc, #424]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002496:	2301      	movs	r3, #1
 8002498:	f7fe fd59 	bl	8000f4e <st7565_setpixel>
			st7565_setpixel(buffer, bar_x1 - 1, bar_y0 + 1, 1);
 800249c:	25c8      	movs	r5, #200	@ 0xc8
 800249e:	197b      	adds	r3, r7, r5
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4863      	ldr	r0, [pc, #396]	@ (8002640 <displayVoltReadFunction+0x568>)
 80024b4:	2301      	movs	r3, #1
 80024b6:	f7fe fd4a 	bl	8000f4e <st7565_setpixel>
			st7565_setpixel(buffer, bar_x1 - 1, bar_y1 - 1, 1);
 80024ba:	197b      	adds	r3, r7, r5
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b2d9      	uxtb	r1, r3
 80024c4:	19bb      	adds	r3, r7, r6
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	485c      	ldr	r0, [pc, #368]	@ (8002640 <displayVoltReadFunction+0x568>)
 80024d0:	2301      	movs	r3, #1
 80024d2:	f7fe fd3c 	bl	8000f4e <st7565_setpixel>
			st7565_drawstring(buffer, 0, 5, "0", fontMode);
 80024d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002644 <displayVoltReadFunction+0x56c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <displayVoltReadFunction+0x570>)
 80024dc:	4858      	ldr	r0, [pc, #352]	@ (8002640 <displayVoltReadFunction+0x568>)
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	0013      	movs	r3, r2
 80024e2:	2205      	movs	r2, #5
 80024e4:	2100      	movs	r1, #0
 80024e6:	f7fe fd9d 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 20, 5, "0.8", fontMode);
 80024ea:	4b56      	ldr	r3, [pc, #344]	@ (8002644 <displayVoltReadFunction+0x56c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4a57      	ldr	r2, [pc, #348]	@ (800264c <displayVoltReadFunction+0x574>)
 80024f0:	4853      	ldr	r0, [pc, #332]	@ (8002640 <displayVoltReadFunction+0x568>)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	0013      	movs	r3, r2
 80024f6:	2205      	movs	r2, #5
 80024f8:	2114      	movs	r1, #20
 80024fa:	f7fe fd93 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 45, 5, "1.6", fontMode);
 80024fe:	4b51      	ldr	r3, [pc, #324]	@ (8002644 <displayVoltReadFunction+0x56c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4a53      	ldr	r2, [pc, #332]	@ (8002650 <displayVoltReadFunction+0x578>)
 8002504:	484e      	ldr	r0, [pc, #312]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	0013      	movs	r3, r2
 800250a:	2205      	movs	r2, #5
 800250c:	212d      	movs	r1, #45	@ 0x2d
 800250e:	f7fe fd89 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 75, 5, "2.5", fontMode);
 8002512:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <displayVoltReadFunction+0x56c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4a4f      	ldr	r2, [pc, #316]	@ (8002654 <displayVoltReadFunction+0x57c>)
 8002518:	4849      	ldr	r0, [pc, #292]	@ (8002640 <displayVoltReadFunction+0x568>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	0013      	movs	r3, r2
 800251e:	2205      	movs	r2, #5
 8002520:	214b      	movs	r1, #75	@ 0x4b
 8002522:	f7fe fd7f 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 108, 5, "3.3", fontMode);
 8002526:	4b47      	ldr	r3, [pc, #284]	@ (8002644 <displayVoltReadFunction+0x56c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <displayVoltReadFunction+0x580>)
 800252c:	4844      	ldr	r0, [pc, #272]	@ (8002640 <displayVoltReadFunction+0x568>)
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	0013      	movs	r3, r2
 8002532:	2205      	movs	r2, #5
 8002534:	216c      	movs	r1, #108	@ 0x6c
 8002536:	f7fe fd75 	bl	8001024 <st7565_drawstring>
 800253a:	e17f      	b.n	800283c <displayVoltReadFunction+0x764>
		} else if (displayMode == 2) { //Display osciloscop
 800253c:	4b47      	ldr	r3, [pc, #284]	@ (800265c <displayVoltReadFunction+0x584>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d000      	beq.n	8002546 <displayVoltReadFunction+0x46e>
 8002544:	e16c      	b.n	8002820 <displayVoltReadFunction+0x748>
			for (uint8_t x = 0; x < 128; x++) {
 8002546:	23e7      	movs	r3, #231	@ 0xe7
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e02c      	b.n	80025aa <displayVoltReadFunction+0x4d2>
				uint16_t value = oscilloscopeBuffer[x];
 8002550:	23e7      	movs	r3, #231	@ 0xe7
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	7819      	ldrb	r1, [r3, #0]
 8002556:	20d2      	movs	r0, #210	@ 0xd2
 8002558:	183b      	adds	r3, r7, r0
 800255a:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <displayVoltReadFunction+0x588>)
 800255c:	0049      	lsls	r1, r1, #1
 800255e:	5a8a      	ldrh	r2, [r1, r2]
 8002560:	801a      	strh	r2, [r3, #0]
				uint8_t y = 63 - (value * 63 / 4095);
 8002562:	183b      	adds	r3, r7, r0
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	2241      	movs	r2, #65	@ 0x41
 8002568:	4251      	negs	r1, r2
 800256a:	0018      	movs	r0, r3
 800256c:	f7fd fe54 	bl	8000218 <__divsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	21e6      	movs	r1, #230	@ 0xe6
 8002576:	187b      	adds	r3, r7, r1
 8002578:	323f      	adds	r2, #63	@ 0x3f
 800257a:	701a      	strb	r2, [r3, #0]
				if (y > 63)
 800257c:	187b      	adds	r3, r7, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b3f      	cmp	r3, #63	@ 0x3f
 8002582:	d902      	bls.n	800258a <displayVoltReadFunction+0x4b2>
					y = 63;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	223f      	movs	r2, #63	@ 0x3f
 8002588:	701a      	strb	r2, [r3, #0]
				st7565_setpixel(buffer, x, y, 1);
 800258a:	23e6      	movs	r3, #230	@ 0xe6
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	24e7      	movs	r4, #231	@ 0xe7
 8002592:	193b      	adds	r3, r7, r4
 8002594:	7819      	ldrb	r1, [r3, #0]
 8002596:	482a      	ldr	r0, [pc, #168]	@ (8002640 <displayVoltReadFunction+0x568>)
 8002598:	2301      	movs	r3, #1
 800259a:	f7fe fcd8 	bl	8000f4e <st7565_setpixel>
			for (uint8_t x = 0; x < 128; x++) {
 800259e:	0021      	movs	r1, r4
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	3201      	adds	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	23e7      	movs	r3, #231	@ 0xe7
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dacc      	bge.n	8002550 <displayVoltReadFunction+0x478>
			uint8_t freq_str[8] = { 0 };
 80025b6:	258c      	movs	r5, #140	@ 0x8c
 80025b8:	197b      	adds	r3, r7, r5
 80025ba:	0018      	movs	r0, r3
 80025bc:	2308      	movs	r3, #8
 80025be:	001a      	movs	r2, r3
 80025c0:	2100      	movs	r1, #0
 80025c2:	f003 fafd 	bl	8005bc0 <memset>
			uint8_t trig_str[15] = "Trig:    ";
 80025c6:	237c      	movs	r3, #124	@ 0x7c
 80025c8:	18f9      	adds	r1, r7, r3
 80025ca:	4a26      	ldr	r2, [pc, #152]	@ (8002664 <displayVoltReadFunction+0x58c>)
 80025cc:	000b      	movs	r3, r1
 80025ce:	ca11      	ldmia	r2!, {r0, r4}
 80025d0:	c311      	stmia	r3!, {r0, r4}
 80025d2:	8812      	ldrh	r2, [r2, #0]
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	230a      	movs	r3, #10
 80025d8:	18cb      	adds	r3, r1, r3
 80025da:	2205      	movs	r2, #5
 80025dc:	2100      	movs	r1, #0
 80025de:	0018      	movs	r0, r3
 80025e0:	f003 faee 	bl	8005bc0 <memset>
			freq_str[2] = 'H';
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	2248      	movs	r2, #72	@ 0x48
 80025e8:	709a      	strb	r2, [r3, #2]
			freq_str[3] = 'z';
 80025ea:	197b      	adds	r3, r7, r5
 80025ec:	227a      	movs	r2, #122	@ 0x7a
 80025ee:	70da      	strb	r2, [r3, #3]
			freq_str[4] = '\0';
 80025f0:	197b      	adds	r3, r7, r5
 80025f2:	2200      	movs	r2, #0
 80025f4:	711a      	strb	r2, [r3, #4]
			switch (currentFreqMode) {
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <displayVoltReadFunction+0x590>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d015      	beq.n	800262a <displayVoltReadFunction+0x552>
 80025fe:	dc35      	bgt.n	800266c <displayVoltReadFunction+0x594>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <displayVoltReadFunction+0x532>
 8002604:	2b01      	cmp	r3, #1
 8002606:	d008      	beq.n	800261a <displayVoltReadFunction+0x542>
 8002608:	e030      	b.n	800266c <displayVoltReadFunction+0x594>
				freq_str[0] = '4';
 800260a:	218c      	movs	r1, #140	@ 0x8c
 800260c:	187b      	adds	r3, r7, r1
 800260e:	2234      	movs	r2, #52	@ 0x34
 8002610:	701a      	strb	r2, [r3, #0]
				freq_str[1] = '0';
 8002612:	187b      	adds	r3, r7, r1
 8002614:	2230      	movs	r2, #48	@ 0x30
 8002616:	705a      	strb	r2, [r3, #1]
				break;
 8002618:	e030      	b.n	800267c <displayVoltReadFunction+0x5a4>
				freq_str[0] = '5';
 800261a:	218c      	movs	r1, #140	@ 0x8c
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2235      	movs	r2, #53	@ 0x35
 8002620:	701a      	strb	r2, [r3, #0]
				freq_str[1] = '0';
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2230      	movs	r2, #48	@ 0x30
 8002626:	705a      	strb	r2, [r3, #1]
				break;
 8002628:	e028      	b.n	800267c <displayVoltReadFunction+0x5a4>
				freq_str[0] = '6';
 800262a:	218c      	movs	r1, #140	@ 0x8c
 800262c:	187b      	adds	r3, r7, r1
 800262e:	2236      	movs	r2, #54	@ 0x36
 8002630:	701a      	strb	r2, [r3, #0]
				freq_str[1] = '0';
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2230      	movs	r2, #48	@ 0x30
 8002636:	705a      	strb	r2, [r3, #1]
				break;
 8002638:	e020      	b.n	800267c <displayVoltReadFunction+0x5a4>
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	200005b8 	.word	0x200005b8
 8002640:	20000014 	.word	0x20000014
 8002644:	200005c0 	.word	0x200005c0
 8002648:	08005ce4 	.word	0x08005ce4
 800264c:	08005ce8 	.word	0x08005ce8
 8002650:	08005cec 	.word	0x08005cec
 8002654:	08005cf0 	.word	0x08005cf0
 8002658:	08005cf4 	.word	0x08005cf4
 800265c:	2000000a 	.word	0x2000000a
 8002660:	200007fc 	.word	0x200007fc
 8002664:	08005d64 	.word	0x08005d64
 8002668:	20000004 	.word	0x20000004
				freq_str[0] = '?';
 800266c:	218c      	movs	r1, #140	@ 0x8c
 800266e:	187b      	adds	r3, r7, r1
 8002670:	223f      	movs	r2, #63	@ 0x3f
 8002672:	701a      	strb	r2, [r3, #0]
				freq_str[1] = '?';
 8002674:	187b      	adds	r3, r7, r1
 8002676:	223f      	movs	r2, #63	@ 0x3f
 8002678:	705a      	strb	r2, [r3, #1]
				break;
 800267a:	46c0      	nop			@ (mov r8, r8)
			uint16_t trig = oscilloscopeTrigger;
 800267c:	25da      	movs	r5, #218	@ 0xda
 800267e:	197b      	adds	r3, r7, r5
 8002680:	4ad7      	ldr	r2, [pc, #860]	@ (80029e0 <displayVoltReadFunction+0x908>)
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	801a      	strh	r2, [r3, #0]
			trig_str[5] = (trig / 100) % 10 + '0';
 8002686:	197b      	adds	r3, r7, r5
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2164      	movs	r1, #100	@ 0x64
 800268c:	0018      	movs	r0, r3
 800268e:	f7fd fd39 	bl	8000104 <__udivsi3>
 8002692:	0003      	movs	r3, r0
 8002694:	b29b      	uxth	r3, r3
 8002696:	210a      	movs	r1, #10
 8002698:	0018      	movs	r0, r3
 800269a:	f7fd fdb9 	bl	8000210 <__aeabi_uidivmod>
 800269e:	000b      	movs	r3, r1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3330      	adds	r3, #48	@ 0x30
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	247c      	movs	r4, #124	@ 0x7c
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	715a      	strb	r2, [r3, #5]
			trig_str[6] = ',';
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	222c      	movs	r2, #44	@ 0x2c
 80026b2:	719a      	strb	r2, [r3, #6]
			trig_str[7] = (trig / 10) % 10 + '0';
 80026b4:	197b      	adds	r3, r7, r5
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	210a      	movs	r1, #10
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7fd fd22 	bl	8000104 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	210a      	movs	r1, #10
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fd fda2 	bl	8000210 <__aeabi_uidivmod>
 80026cc:	000b      	movs	r3, r1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3330      	adds	r3, #48	@ 0x30
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	71da      	strb	r2, [r3, #7]
			trig_str[8] = (trig % 10) + '0';
 80026da:	197b      	adds	r3, r7, r5
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	210a      	movs	r1, #10
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fd fd95 	bl	8000210 <__aeabi_uidivmod>
 80026e6:	000b      	movs	r3, r1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3330      	adds	r3, #48	@ 0x30
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	721a      	strb	r2, [r3, #8]
			trig_str[9] = 'V';
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2256      	movs	r2, #86	@ 0x56
 80026f8:	725a      	strb	r2, [r3, #9]
			trig_str[10] = '\0';
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	2200      	movs	r2, #0
 80026fe:	729a      	strb	r2, [r3, #10]
			st7565_drawstring(buffer, 90, 0, freq_str, fontMode);
 8002700:	4bb8      	ldr	r3, [pc, #736]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	228c      	movs	r2, #140	@ 0x8c
 8002706:	18ba      	adds	r2, r7, r2
 8002708:	48b7      	ldr	r0, [pc, #732]	@ (80029e8 <displayVoltReadFunction+0x910>)
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0013      	movs	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	215a      	movs	r1, #90	@ 0x5a
 8002712:	f7fe fc87 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 5, 0, trig_str, fontMode);
 8002716:	4bb3      	ldr	r3, [pc, #716]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	193a      	adds	r2, r7, r4
 800271c:	48b2      	ldr	r0, [pc, #712]	@ (80029e8 <displayVoltReadFunction+0x910>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	0013      	movs	r3, r2
 8002722:	2200      	movs	r2, #0
 8002724:	2105      	movs	r1, #5
 8002726:	f7fe fc7d 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 2, 7, "0", fontMode);
 800272a:	4bae      	ldr	r3, [pc, #696]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4aaf      	ldr	r2, [pc, #700]	@ (80029ec <displayVoltReadFunction+0x914>)
 8002730:	48ad      	ldr	r0, [pc, #692]	@ (80029e8 <displayVoltReadFunction+0x910>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	0013      	movs	r3, r2
 8002736:	2207      	movs	r2, #7
 8002738:	2102      	movs	r1, #2
 800273a:	f7fe fc73 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 58, 7, "20", fontMode);
 800273e:	4ba9      	ldr	r3, [pc, #676]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4aab      	ldr	r2, [pc, #684]	@ (80029f0 <displayVoltReadFunction+0x918>)
 8002744:	48a8      	ldr	r0, [pc, #672]	@ (80029e8 <displayVoltReadFunction+0x910>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0013      	movs	r3, r2
 800274a:	2207      	movs	r2, #7
 800274c:	213a      	movs	r1, #58	@ 0x3a
 800274e:	f7fe fc69 	bl	8001024 <st7565_drawstring>
			st7565_drawstring(buffer, 112, 7, "ms", fontMode);
 8002752:	4ba4      	ldr	r3, [pc, #656]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4aa7      	ldr	r2, [pc, #668]	@ (80029f4 <displayVoltReadFunction+0x91c>)
 8002758:	48a3      	ldr	r0, [pc, #652]	@ (80029e8 <displayVoltReadFunction+0x910>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	0013      	movs	r3, r2
 800275e:	2207      	movs	r2, #7
 8002760:	2170      	movs	r1, #112	@ 0x70
 8002762:	f7fe fc5f 	bl	8001024 <st7565_drawstring>
			uint8_t num_ticks = 10;
 8002766:	23d9      	movs	r3, #217	@ 0xd9
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	220a      	movs	r2, #10
 800276c:	701a      	strb	r2, [r3, #0]
			uint8_t x0 = 0;
 800276e:	23d8      	movs	r3, #216	@ 0xd8
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
			uint8_t x1 = 127;
 8002776:	23d7      	movs	r3, #215	@ 0xd7
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	227f      	movs	r2, #127	@ 0x7f
 800277c:	701a      	strb	r2, [r3, #0]
			uint8_t y_bottom = 63;
 800277e:	23d6      	movs	r3, #214	@ 0xd6
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	223f      	movs	r2, #63	@ 0x3f
 8002784:	701a      	strb	r2, [r3, #0]
			for (uint8_t t = 0; t < num_ticks; t++) {
 8002786:	23e5      	movs	r3, #229	@ 0xe5
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e03e      	b.n	800280e <displayVoltReadFunction+0x736>
				uint8_t x_tick = x0 + (x1 - x0) * t / (num_ticks - 1);
 8002790:	23d7      	movs	r3, #215	@ 0xd7
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	24d8      	movs	r4, #216	@ 0xd8
 8002798:	193b      	adds	r3, r7, r4
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	22e5      	movs	r2, #229	@ 0xe5
 80027a0:	18ba      	adds	r2, r7, r2
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	435a      	muls	r2, r3
 80027a6:	23d9      	movs	r3, #217	@ 0xd9
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f7fd fd31 	bl	8000218 <__divsi3>
 80027b6:	0003      	movs	r3, r0
 80027b8:	b2d9      	uxtb	r1, r3
 80027ba:	23d5      	movs	r3, #213	@ 0xd5
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	193a      	adds	r2, r7, r4
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	188a      	adds	r2, r1, r2
 80027c4:	701a      	strb	r2, [r3, #0]
				for (uint8_t dy = 0; dy < 3; dy++) {
 80027c6:	23e4      	movs	r3, #228	@ 0xe4
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e013      	b.n	80027f8 <displayVoltReadFunction+0x720>
					st7565_setpixel(buffer, x_tick, y_bottom - dy, 1);
 80027d0:	23d6      	movs	r3, #214	@ 0xd6
 80027d2:	18fa      	adds	r2, r7, r3
 80027d4:	24e4      	movs	r4, #228	@ 0xe4
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	7812      	ldrb	r2, [r2, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	23d5      	movs	r3, #213	@ 0xd5
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	7819      	ldrb	r1, [r3, #0]
 80027e6:	4880      	ldr	r0, [pc, #512]	@ (80029e8 <displayVoltReadFunction+0x910>)
 80027e8:	2301      	movs	r3, #1
 80027ea:	f7fe fbb0 	bl	8000f4e <st7565_setpixel>
				for (uint8_t dy = 0; dy < 3; dy++) {
 80027ee:	193b      	adds	r3, r7, r4
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	3201      	adds	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	23e4      	movs	r3, #228	@ 0xe4
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d9e6      	bls.n	80027d0 <displayVoltReadFunction+0x6f8>
			for (uint8_t t = 0; t < num_ticks; t++) {
 8002802:	21e5      	movs	r1, #229	@ 0xe5
 8002804:	187b      	adds	r3, r7, r1
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	187b      	adds	r3, r7, r1
 800280a:	3201      	adds	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	23e5      	movs	r3, #229	@ 0xe5
 8002810:	18fa      	adds	r2, r7, r3
 8002812:	23d9      	movs	r3, #217	@ 0xd9
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b8      	bcc.n	8002790 <displayVoltReadFunction+0x6b8>
 800281e:	e00d      	b.n	800283c <displayVoltReadFunction+0x764>
		} else if (displayMode == 100) { //Display debug font
 8002820:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <displayVoltReadFunction+0x920>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b64      	cmp	r3, #100	@ 0x64
 8002826:	d109      	bne.n	800283c <displayVoltReadFunction+0x764>
			st7565_drawstring(buffer, 0, 0,
 8002828:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4a73      	ldr	r2, [pc, #460]	@ (80029fc <displayVoltReadFunction+0x924>)
 800282e:	486e      	ldr	r0, [pc, #440]	@ (80029e8 <displayVoltReadFunction+0x910>)
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	0013      	movs	r3, r2
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	f7fe fbf4 	bl	8001024 <st7565_drawstring>
		state = DRAWING_POPUP;
 800283c:	4b70      	ldr	r3, [pc, #448]	@ (8002a00 <displayVoltReadFunction+0x928>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
		break;
 8002842:	e150      	b.n	8002ae6 <displayVoltReadFunction+0xa0e>
		if (showDisplayModeOverlay
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <displayVoltReadFunction+0x92c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d100      	bne.n	800284e <displayVoltReadFunction+0x776>
 800284c:	e0be      	b.n	80029cc <displayVoltReadFunction+0x8f4>
				&& (now - displayModeChangeTime) < 1250 * 1000) {
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <displayVoltReadFunction+0x930>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	22e0      	movs	r2, #224	@ 0xe0
 8002854:	18ba      	adds	r2, r7, r2
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a0c <displayVoltReadFunction+0x934>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d900      	bls.n	8002862 <displayVoltReadFunction+0x78a>
 8002860:	e0b4      	b.n	80029cc <displayVoltReadFunction+0x8f4>
			uint8_t rect_x = 80;
 8002862:	21df      	movs	r1, #223	@ 0xdf
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2250      	movs	r2, #80	@ 0x50
 8002868:	701a      	strb	r2, [r3, #0]
			uint8_t rect_y = 45;
 800286a:	26de      	movs	r6, #222	@ 0xde
 800286c:	19bb      	adds	r3, r7, r6
 800286e:	222d      	movs	r2, #45	@ 0x2d
 8002870:	701a      	strb	r2, [r3, #0]
			uint8_t rect_w = 47;
 8002872:	24dd      	movs	r4, #221	@ 0xdd
 8002874:	193b      	adds	r3, r7, r4
 8002876:	222f      	movs	r2, #47	@ 0x2f
 8002878:	701a      	strb	r2, [r3, #0]
			uint8_t rect_h = 18;
 800287a:	23dc      	movs	r3, #220	@ 0xdc
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2212      	movs	r2, #18
 8002880:	701a      	strb	r2, [r3, #0]
			st7565_fillrect(buffer, rect_x, rect_y, rect_w, rect_h, 0);
 8002882:	193b      	adds	r3, r7, r4
 8002884:	781c      	ldrb	r4, [r3, #0]
 8002886:	19bb      	adds	r3, r7, r6
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	000d      	movs	r5, r1
 800288c:	197b      	adds	r3, r7, r5
 800288e:	7819      	ldrb	r1, [r3, #0]
 8002890:	4855      	ldr	r0, [pc, #340]	@ (80029e8 <displayVoltReadFunction+0x910>)
 8002892:	2300      	movs	r3, #0
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	23dc      	movs	r3, #220	@ 0xdc
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	0023      	movs	r3, r4
 80028a0:	f7fe fd79 	bl	8001396 <st7565_fillrect>
			st7565_drawline(buffer, rect_x, rect_y, rect_x + rect_w, rect_y, 1);
 80028a4:	197a      	adds	r2, r7, r5
 80028a6:	24dd      	movs	r4, #221	@ 0xdd
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	b2dc      	uxtb	r4, r3
 80028b2:	19bb      	adds	r3, r7, r6
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	197b      	adds	r3, r7, r5
 80028b8:	7819      	ldrb	r1, [r3, #0]
 80028ba:	484b      	ldr	r0, [pc, #300]	@ (80029e8 <displayVoltReadFunction+0x910>)
 80028bc:	2301      	movs	r3, #1
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	19bb      	adds	r3, r7, r6
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	0023      	movs	r3, r4
 80028c8:	f7fe fe62 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, rect_x, rect_y, rect_x, rect_y + rect_h, 1);
 80028cc:	0031      	movs	r1, r6
 80028ce:	19ba      	adds	r2, r7, r6
 80028d0:	23dc      	movs	r3, #220	@ 0xdc
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	002e      	movs	r6, r5
 80028de:	19ba      	adds	r2, r7, r6
 80028e0:	7815      	ldrb	r5, [r2, #0]
 80028e2:	187a      	adds	r2, r7, r1
 80028e4:	7814      	ldrb	r4, [r2, #0]
 80028e6:	19ba      	adds	r2, r7, r6
 80028e8:	7811      	ldrb	r1, [r2, #0]
 80028ea:	483f      	ldr	r0, [pc, #252]	@ (80029e8 <displayVoltReadFunction+0x910>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	002b      	movs	r3, r5
 80028f4:	0022      	movs	r2, r4
 80028f6:	f7fe fe4b 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, rect_x + rect_w, rect_y, rect_x + rect_w,
 80028fa:	19ba      	adds	r2, r7, r6
 80028fc:	24dd      	movs	r4, #221	@ 0xdd
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	19ba      	adds	r2, r7, r6
 800290a:	193b      	adds	r3, r7, r4
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	18d3      	adds	r3, r2, r3
 8002912:	b2dc      	uxtb	r4, r3
 8002914:	20de      	movs	r0, #222	@ 0xde
 8002916:	183a      	adds	r2, r7, r0
 8002918:	25dc      	movs	r5, #220	@ 0xdc
 800291a:	197b      	adds	r3, r7, r5
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	183a      	adds	r2, r7, r0
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	482f      	ldr	r0, [pc, #188]	@ (80029e8 <displayVoltReadFunction+0x910>)
 800292a:	2501      	movs	r5, #1
 800292c:	9501      	str	r5, [sp, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	0023      	movs	r3, r4
 8002932:	f7fe fe2d 	bl	8001590 <st7565_drawline>
			st7565_drawline(buffer, rect_x, rect_y + rect_h, rect_x + rect_w,
 8002936:	21de      	movs	r1, #222	@ 0xde
 8002938:	187a      	adds	r2, r7, r1
 800293a:	20dc      	movs	r0, #220	@ 0xdc
 800293c:	183b      	adds	r3, r7, r0
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	18d3      	adds	r3, r2, r3
 8002944:	b2dc      	uxtb	r4, r3
 8002946:	19ba      	adds	r2, r7, r6
 8002948:	23dd      	movs	r3, #221	@ 0xdd
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	b2dd      	uxtb	r5, r3
 8002954:	187a      	adds	r2, r7, r1
 8002956:	183b      	adds	r3, r7, r0
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	19ba      	adds	r2, r7, r6
 8002962:	7811      	ldrb	r1, [r2, #0]
 8002964:	4820      	ldr	r0, [pc, #128]	@ (80029e8 <displayVoltReadFunction+0x910>)
 8002966:	2201      	movs	r2, #1
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	002b      	movs	r3, r5
 800296e:	0022      	movs	r2, r4
 8002970:	f7fe fe0e 	bl	8001590 <st7565_drawline>
			char mode_text[20] = "Mode  ";
 8002974:	2468      	movs	r4, #104	@ 0x68
 8002976:	1939      	adds	r1, r7, r4
 8002978:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <displayVoltReadFunction+0x938>)
 800297a:	000b      	movs	r3, r1
 800297c:	6810      	ldr	r0, [r2, #0]
 800297e:	6018      	str	r0, [r3, #0]
 8002980:	8890      	ldrh	r0, [r2, #4]
 8002982:	8098      	strh	r0, [r3, #4]
 8002984:	7992      	ldrb	r2, [r2, #6]
 8002986:	719a      	strb	r2, [r3, #6]
 8002988:	2307      	movs	r3, #7
 800298a:	18cb      	adds	r3, r1, r3
 800298c:	220d      	movs	r2, #13
 800298e:	2100      	movs	r1, #0
 8002990:	0018      	movs	r0, r3
 8002992:	f003 f915 	bl	8005bc0 <memset>
			mode_text[5] = displayMode + '0';
 8002996:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <displayVoltReadFunction+0x920>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3330      	adds	r3, #48	@ 0x30
 800299c:	b2da      	uxtb	r2, r3
 800299e:	0020      	movs	r0, r4
 80029a0:	183b      	adds	r3, r7, r0
 80029a2:	715a      	strb	r2, [r3, #5]
			st7565_drawstring(buffer, rect_x + 2, rect_y / 8 + 1, mode_text,
 80029a4:	19bb      	adds	r3, r7, r6
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3302      	adds	r3, #2
 80029aa:	b2d9      	uxtb	r1, r3
 80029ac:	23de      	movs	r3, #222	@ 0xde
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <displayVoltReadFunction+0x90c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	183c      	adds	r4, r7, r0
 80029c0:	4809      	ldr	r0, [pc, #36]	@ (80029e8 <displayVoltReadFunction+0x910>)
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	0023      	movs	r3, r4
 80029c6:	f7fe fb2d 	bl	8001024 <st7565_drawstring>
				&& (now - displayModeChangeTime) < 1250 * 1000) {
 80029ca:	e002      	b.n	80029d2 <displayVoltReadFunction+0x8fa>
			showDisplayModeOverlay = 0;
 80029cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <displayVoltReadFunction+0x92c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
		state = SENDING_PAGE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <displayVoltReadFunction+0x928>)
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
		current_page = 0;
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <displayVoltReadFunction+0x93c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
		break;
 80029de:	e082      	b.n	8002ae6 <displayVoltReadFunction+0xa0e>
 80029e0:	2000000e 	.word	0x2000000e
 80029e4:	200005c0 	.word	0x200005c0
 80029e8:	20000014 	.word	0x20000014
 80029ec:	08005ce4 	.word	0x08005ce4
 80029f0:	08005cf8 	.word	0x08005cf8
 80029f4:	08005cfc 	.word	0x08005cfc
 80029f8:	2000000a 	.word	0x2000000a
 80029fc:	08005d00 	.word	0x08005d00
 8002a00:	20000919 	.word	0x20000919
 8002a04:	200005d0 	.word	0x200005d0
 8002a08:	200005cc 	.word	0x200005cc
 8002a0c:	001312cf 	.word	0x001312cf
 8002a10:	08005d74 	.word	0x08005d74
 8002a14:	2000091a 	.word	0x2000091a
		CMD(ST7565_CMD_SET_PAGE | pagemap[current_page])
 8002a18:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <displayVoltReadFunction+0xa18>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f001 fc0c 	bl	800423c <HAL_GPIO_WritePin>
 8002a24:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <displayVoltReadFunction+0xa1c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <displayVoltReadFunction+0xa20>)
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	2250      	movs	r2, #80	@ 0x50
 8002a30:	4252      	negs	r2, r2
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7fe f92c 	bl	8000c94 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf))
 8002a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002af0 <displayVoltReadFunction+0xa18>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2180      	movs	r1, #128	@ 0x80
 8002a42:	0018      	movs	r0, r3
 8002a44:	f001 fbfa 	bl	800423c <HAL_GPIO_WritePin>
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f923 	bl	8000c94 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf))
 8002a4e:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <displayVoltReadFunction+0xa18>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	0018      	movs	r0, r3
 8002a56:	f001 fbf1 	bl	800423c <HAL_GPIO_WritePin>
 8002a5a:	2010      	movs	r0, #16
 8002a5c:	f7fe f91a 	bl	8000c94 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW)
 8002a60:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <displayVoltReadFunction+0xa18>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 fbe8 	bl	800423c <HAL_GPIO_WritePin>
 8002a6c:	20e0      	movs	r0, #224	@ 0xe0
 8002a6e:	f7fe f911 	bl	8000c94 <st7565_sendbyte>
		HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8002a72:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <displayVoltReadFunction+0xa18>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f001 fbdf 	bl	800423c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &buffer[128 * current_page], 128, 6);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <displayVoltReadFunction+0xa1c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	01da      	lsls	r2, r3, #7
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <displayVoltReadFunction+0xa24>)
 8002a86:	18d1      	adds	r1, r2, r3
 8002a88:	481d      	ldr	r0, [pc, #116]	@ (8002b00 <displayVoltReadFunction+0xa28>)
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	2280      	movs	r2, #128	@ 0x80
 8002a8e:	f002 fa7d 	bl	8004f8c <HAL_SPI_Transmit>
		current_page++;
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <displayVoltReadFunction+0xa1c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <displayVoltReadFunction+0xa1c>)
 8002a9c:	701a      	strb	r2, [r3, #0]
		if (current_page >= 8) {
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <displayVoltReadFunction+0xa1c>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d91c      	bls.n	8002ae0 <displayVoltReadFunction+0xa08>
			os_debug_drawing_time = now - last_frame_time;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <displayVoltReadFunction+0xa2c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	22e0      	movs	r2, #224	@ 0xe0
 8002aac:	18ba      	adds	r2, r7, r2
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	1ad2      	subs	r2, r2, r3
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <displayVoltReadFunction+0xa30>)
 8002ab4:	601a      	str	r2, [r3, #0]
			state = WAITING;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <displayVoltReadFunction+0xa34>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	701a      	strb	r2, [r3, #0]
		break;
 8002abc:	e010      	b.n	8002ae0 <displayVoltReadFunction+0xa08>
		if (now - last_frame_time >= 42 * 1000) {
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <displayVoltReadFunction+0xa2c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	21e0      	movs	r1, #224	@ 0xe0
 8002ac4:	187a      	adds	r2, r7, r1
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <displayVoltReadFunction+0xa38>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d909      	bls.n	8002ae4 <displayVoltReadFunction+0xa0c>
			state = DRAWING;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <displayVoltReadFunction+0xa34>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
			last_frame_time = now;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <displayVoltReadFunction+0xa2c>)
 8002ad8:	187a      	adds	r2, r7, r1
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	601a      	str	r2, [r3, #0]
		break;
 8002ade:	e001      	b.n	8002ae4 <displayVoltReadFunction+0xa0c>
		break;
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	e000      	b.n	8002ae6 <displayVoltReadFunction+0xa0e>
		break;
 8002ae4:	46c0      	nop			@ (mov r8, r8)
}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b03d      	add	sp, #244	@ 0xf4
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	48000800 	.word	0x48000800
 8002af4:	2000091a 	.word	0x2000091a
 8002af8:	20000414 	.word	0x20000414
 8002afc:	20000014 	.word	0x20000014
 8002b00:	200004c4 	.word	0x200004c4
 8002b04:	2000091c 	.word	0x2000091c
 8002b08:	200005f8 	.word	0x200005f8
 8002b0c:	20000919 	.word	0x20000919
 8002b10:	0000a40f 	.word	0x0000a40f

08002b14 <readButtonFunction>:
 * @brief Function implementing the readButton thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_readButtonFunction */
void readButtonFunction(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
	 }
	 } else {
	 buttonReadRaw = 666;
	 }
	 HAL_ADC_Stop(&hadc);*/
	buttonReadRaw = adc_buffer[254];
 8002b1a:	4aba      	ldr	r2, [pc, #744]	@ (8002e04 <readButtonFunction+0x2f0>)
 8002b1c:	23fe      	movs	r3, #254	@ 0xfe
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	5ad3      	ldrh	r3, [r2, r3]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4bb8      	ldr	r3, [pc, #736]	@ (8002e08 <readButtonFunction+0x2f4>)
 8002b26:	801a      	strh	r2, [r3, #0]
	buttonRead[0] = buttonRead[1];
 8002b28:	4bb8      	ldr	r3, [pc, #736]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b2a:	885a      	ldrh	r2, [r3, #2]
 8002b2c:	4bb7      	ldr	r3, [pc, #732]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b2e:	801a      	strh	r2, [r3, #0]
	buttonRead[1] = filterButton(interpolation(buttonReadRaw));
 8002b30:	4bb5      	ldr	r3, [pc, #724]	@ (8002e08 <readButtonFunction+0x2f4>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fe ff3e 	bl	80019b8 <interpolation>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe ffbf 	bl	8001ac4 <filterButton>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	4bb0      	ldr	r3, [pc, #704]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b4c:	805a      	strh	r2, [r3, #2]

	uint8_t rawButtonState = 0;
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
	if (buttonRead[1] <= 50) {
 8002b54:	4bad      	ldr	r3, [pc, #692]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b56:	885b      	ldrh	r3, [r3, #2]
 8002b58:	2b32      	cmp	r3, #50	@ 0x32
 8002b5a:	d803      	bhi.n	8002b64 <readButtonFunction+0x50>
		rawButtonState = 1;
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e026      	b.n	8002bb2 <readButtonFunction+0x9e>
	} else if (buttonRead[1] > 290 && buttonRead[1] < 315) {
 8002b64:	4ba9      	ldr	r3, [pc, #676]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b66:	885a      	ldrh	r2, [r3, #2]
 8002b68:	2391      	movs	r3, #145	@ 0x91
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d909      	bls.n	8002b84 <readButtonFunction+0x70>
 8002b70:	4ba6      	ldr	r3, [pc, #664]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b72:	885a      	ldrh	r2, [r3, #2]
 8002b74:	239d      	movs	r3, #157	@ 0x9d
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d803      	bhi.n	8002b84 <readButtonFunction+0x70>
		rawButtonState = 2;
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e016      	b.n	8002bb2 <readButtonFunction+0x9e>
	} else if (buttonRead[1] > 186 && buttonRead[1] < 206) {
 8002b84:	4ba1      	ldr	r3, [pc, #644]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b86:	885b      	ldrh	r3, [r3, #2]
 8002b88:	2bba      	cmp	r3, #186	@ 0xba
 8002b8a:	d907      	bls.n	8002b9c <readButtonFunction+0x88>
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b8e:	885b      	ldrh	r3, [r3, #2]
 8002b90:	2bcd      	cmp	r3, #205	@ 0xcd
 8002b92:	d803      	bhi.n	8002b9c <readButtonFunction+0x88>
		rawButtonState = 3;
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e00a      	b.n	8002bb2 <readButtonFunction+0x9e>
	} else if (buttonRead[1] > 86 && buttonRead[1] < 108) {
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002b9e:	885b      	ldrh	r3, [r3, #2]
 8002ba0:	2b56      	cmp	r3, #86	@ 0x56
 8002ba2:	d906      	bls.n	8002bb2 <readButtonFunction+0x9e>
 8002ba4:	4b99      	ldr	r3, [pc, #612]	@ (8002e0c <readButtonFunction+0x2f8>)
 8002ba6:	885b      	ldrh	r3, [r3, #2]
 8002ba8:	2b6b      	cmp	r3, #107	@ 0x6b
 8002baa:	d802      	bhi.n	8002bb2 <readButtonFunction+0x9e>
		rawButtonState = 4;
 8002bac:	1dfb      	adds	r3, r7, #7
 8002bae:	2204      	movs	r2, #4
 8002bb0:	701a      	strb	r2, [r3, #0]
	}

	if (rawButtonState != buttonState) {
 8002bb2:	4b97      	ldr	r3, [pc, #604]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	1dfa      	adds	r2, r7, #7
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d100      	bne.n	8002bc0 <readButtonFunction+0xac>
 8002bbe:	e115      	b.n	8002dec <readButtonFunction+0x2d8>
		if (!buttonTransitionFlag) {
 8002bc0:	4b94      	ldr	r3, [pc, #592]	@ (8002e14 <readButtonFunction+0x300>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <readButtonFunction+0xc0>
			buttonTransitionFlag = 1;
 8002bc8:	4b92      	ldr	r3, [pc, #584]	@ (8002e14 <readButtonFunction+0x300>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
			buttonDebounceTimer = 0;
 8002bce:	4b92      	ldr	r3, [pc, #584]	@ (8002e18 <readButtonFunction+0x304>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
		}
		buttonDebounceTimer += 5;
 8002bd4:	4b90      	ldr	r3, [pc, #576]	@ (8002e18 <readButtonFunction+0x304>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1d5a      	adds	r2, r3, #5
 8002bda:	4b8f      	ldr	r3, [pc, #572]	@ (8002e18 <readButtonFunction+0x304>)
 8002bdc:	601a      	str	r2, [r3, #0]

		if (buttonDebounceTimer >= 15) {
 8002bde:	4b8e      	ldr	r3, [pc, #568]	@ (8002e18 <readButtonFunction+0x304>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b0e      	cmp	r3, #14
 8002be4:	d800      	bhi.n	8002be8 <readButtonFunction+0xd4>
 8002be6:	e108      	b.n	8002dfa <readButtonFunction+0x2e6>
			buttonStatePrev = buttonState;
 8002be8:	4b89      	ldr	r3, [pc, #548]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	4b8b      	ldr	r3, [pc, #556]	@ (8002e1c <readButtonFunction+0x308>)
 8002bee:	701a      	strb	r2, [r3, #0]
			buttonState = rawButtonState;
 8002bf0:	4b87      	ldr	r3, [pc, #540]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002bf2:	1dfa      	adds	r2, r7, #7
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
			buttonTransitionFlag = 0;
 8002bf8:	4b86      	ldr	r3, [pc, #536]	@ (8002e14 <readButtonFunction+0x300>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
			buttonDebounceTimer = 0;
 8002bfe:	4b86      	ldr	r3, [pc, #536]	@ (8002e18 <readButtonFunction+0x304>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

			if (!buttonTransitionFlag) {
 8002c04:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <readButtonFunction+0x300>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d000      	beq.n	8002c0e <readButtonFunction+0xfa>
 8002c0c:	e0f5      	b.n	8002dfa <readButtonFunction+0x2e6>
				if (displayMode < 2) { // moduri voltmetru
 8002c0e:	4b84      	ldr	r3, [pc, #528]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d900      	bls.n	8002c18 <readButtonFunction+0x104>
 8002c16:	e075      	b.n	8002d04 <readButtonFunction+0x1f0>
					if (buttonState == 1 && buttonStatePrev == 0) {
 8002c18:	4b7d      	ldr	r3, [pc, #500]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d11c      	bne.n	8002c5a <readButtonFunction+0x146>
 8002c20:	4b7e      	ldr	r3, [pc, #504]	@ (8002e1c <readButtonFunction+0x308>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <readButtonFunction+0x146>
						if (displayMode == 0)
 8002c28:	4b7d      	ldr	r3, [pc, #500]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <readButtonFunction+0x126>
							displayMode = displayModeMax;
 8002c30:	4b7c      	ldr	r3, [pc, #496]	@ (8002e24 <readButtonFunction+0x310>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	4b7a      	ldr	r3, [pc, #488]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e005      	b.n	8002c46 <readButtonFunction+0x132>
						else
							displayMode--;
 8002c3a:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b77      	ldr	r3, [pc, #476]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c44:	701a      	strb	r2, [r3, #0]
						showDisplayModeOverlay = 1;
 8002c46:	4b78      	ldr	r3, [pc, #480]	@ (8002e28 <readButtonFunction+0x314>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
						displayModeChangeTime = HAL_GetTick_us();
 8002c4c:	f7fd ffbe 	bl	8000bcc <HAL_GetTick_us>
 8002c50:	0003      	movs	r3, r0
 8002c52:	001a      	movs	r2, r3
 8002c54:	4b75      	ldr	r3, [pc, #468]	@ (8002e2c <readButtonFunction+0x318>)
 8002c56:	601a      	str	r2, [r3, #0]
					if (buttonState == 1 && buttonStatePrev == 0) {
 8002c58:	e0cf      	b.n	8002dfa <readButtonFunction+0x2e6>
					} else if (buttonState == 2 && buttonStatePrev == 0) {
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d11d      	bne.n	8002c9e <readButtonFunction+0x18a>
 8002c62:	4b6e      	ldr	r3, [pc, #440]	@ (8002e1c <readButtonFunction+0x308>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d119      	bne.n	8002c9e <readButtonFunction+0x18a>
						if (displayMode == displayModeMax)
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <readButtonFunction+0x310>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d103      	bne.n	8002c7e <readButtonFunction+0x16a>
							displayMode = 0;
 8002c76:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e005      	b.n	8002c8a <readButtonFunction+0x176>
						else
							displayMode++;
 8002c7e:	4b68      	ldr	r3, [pc, #416]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <readButtonFunction+0x30c>)
 8002c88:	701a      	strb	r2, [r3, #0]
						showDisplayModeOverlay = 1;
 8002c8a:	4b67      	ldr	r3, [pc, #412]	@ (8002e28 <readButtonFunction+0x314>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
						displayModeChangeTime = HAL_GetTick_us();
 8002c90:	f7fd ff9c 	bl	8000bcc <HAL_GetTick_us>
 8002c94:	0003      	movs	r3, r0
 8002c96:	001a      	movs	r2, r3
 8002c98:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <readButtonFunction+0x318>)
 8002c9a:	601a      	str	r2, [r3, #0]
					} else if (buttonState == 2 && buttonStatePrev == 0) {
 8002c9c:	e0ad      	b.n	8002dfa <readButtonFunction+0x2e6>
					}

					else if (buttonState == 3 && buttonStatePrev == 0) { //apas jos
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d113      	bne.n	8002cce <readButtonFunction+0x1ba>
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <readButtonFunction+0x308>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <readButtonFunction+0x1ba>
						if (fontMode == 0)
 8002cae:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <readButtonFunction+0x1ac>
							fontMode = fontModeMax;
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <readButtonFunction+0x320>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b5d      	ldr	r3, [pc, #372]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cbc:	701a      	strb	r2, [r3, #0]
						if (fontMode == 0)
 8002cbe:	e09c      	b.n	8002dfa <readButtonFunction+0x2e6>
						else
							fontMode--;
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cca:	701a      	strb	r2, [r3, #0]
						if (fontMode == 0)
 8002ccc:	e095      	b.n	8002dfa <readButtonFunction+0x2e6>
					} else if (buttonState == 4 && buttonStatePrev == 0) { //apas sus
 8002cce:	4b50      	ldr	r3, [pc, #320]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d000      	beq.n	8002cd8 <readButtonFunction+0x1c4>
 8002cd6:	e090      	b.n	8002dfa <readButtonFunction+0x2e6>
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <readButtonFunction+0x308>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d000      	beq.n	8002ce2 <readButtonFunction+0x1ce>
 8002ce0:	e08b      	b.n	8002dfa <readButtonFunction+0x2e6>
						if (fontMode == fontModeMax)
 8002ce2:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <readButtonFunction+0x31c>)
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	4b53      	ldr	r3, [pc, #332]	@ (8002e34 <readButtonFunction+0x320>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d103      	bne.n	8002cf6 <readButtonFunction+0x1e2>
							fontMode = 0;
 8002cee:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
	else {
				buttonTransitionFlag = 0;
				buttonDebounceTimer = 0;
			}
			/* USER CODE END readButtonFunction */
}
 8002cf4:	e081      	b.n	8002dfa <readButtonFunction+0x2e6>
							fontMode++;
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e30 <readButtonFunction+0x31c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <readButtonFunction+0x31c>)
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	e07a      	b.n	8002dfa <readButtonFunction+0x2e6>
					if (buttonState == 1 && buttonStatePrev == 0) {
 8002d04:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d114      	bne.n	8002d36 <readButtonFunction+0x222>
 8002d0c:	4b43      	ldr	r3, [pc, #268]	@ (8002e1c <readButtonFunction+0x308>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <readButtonFunction+0x222>
						oscilloscopeTriggerRaw+=100;
 8002d14:	4b48      	ldr	r3, [pc, #288]	@ (8002e38 <readButtonFunction+0x324>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	3364      	adds	r3, #100	@ 0x64
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b46      	ldr	r3, [pc, #280]	@ (8002e38 <readButtonFunction+0x324>)
 8002d1e:	801a      	strh	r2, [r3, #0]
						oscilloscopeTrigger=interpolation(oscilloscopeTriggerRaw);
 8002d20:	4b45      	ldr	r3, [pc, #276]	@ (8002e38 <readButtonFunction+0x324>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7fe fe46 	bl	80019b8 <interpolation>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <readButtonFunction+0x328>)
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e061      	b.n	8002dfa <readButtonFunction+0x2e6>
					else if (buttonState == 2 && buttonStatePrev == 0) {
 8002d36:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d114      	bne.n	8002d68 <readButtonFunction+0x254>
 8002d3e:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <readButtonFunction+0x308>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d110      	bne.n	8002d68 <readButtonFunction+0x254>
						oscilloscopeTriggerRaw-=100;
 8002d46:	4b3c      	ldr	r3, [pc, #240]	@ (8002e38 <readButtonFunction+0x324>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	3b64      	subs	r3, #100	@ 0x64
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <readButtonFunction+0x324>)
 8002d50:	801a      	strh	r2, [r3, #0]
						oscilloscopeTrigger=interpolation(oscilloscopeTriggerRaw);
 8002d52:	4b39      	ldr	r3, [pc, #228]	@ (8002e38 <readButtonFunction+0x324>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7fe fe2d 	bl	80019b8 <interpolation>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <readButtonFunction+0x328>)
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	e048      	b.n	8002dfa <readButtonFunction+0x2e6>
					else if (buttonState == 3 && buttonStatePrev == 0) { //apas jos osciloscop
 8002d68:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d11c      	bne.n	8002daa <readButtonFunction+0x296>
 8002d70:	4b2a      	ldr	r3, [pc, #168]	@ (8002e1c <readButtonFunction+0x308>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d118      	bne.n	8002daa <readButtonFunction+0x296>
						if (currentFreqMode == FREQ_40HZ) {
 8002d78:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <readButtonFunction+0x32c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d108      	bne.n	8002d92 <readButtonFunction+0x27e>
							currentFreqMode = FREQ_60HZ;
 8002d80:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <readButtonFunction+0x32c>)
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
							update_tim3_frequency(currentFreqMode);
 8002d86:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <readButtonFunction+0x32c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7fd fedc 	bl	8000b48 <update_tim3_frequency>
						if (currentFreqMode == FREQ_40HZ) {
 8002d90:	e033      	b.n	8002dfa <readButtonFunction+0x2e6>
							currentFreqMode--;
 8002d92:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <readButtonFunction+0x32c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <readButtonFunction+0x32c>)
 8002d9c:	701a      	strb	r2, [r3, #0]
							update_tim3_frequency(currentFreqMode);
 8002d9e:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <readButtonFunction+0x32c>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd fed0 	bl	8000b48 <update_tim3_frequency>
						if (currentFreqMode == FREQ_40HZ) {
 8002da8:	e027      	b.n	8002dfa <readButtonFunction+0x2e6>
					else if (buttonState == 4 && buttonStatePrev == 0) { //apas sus osciloscop
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <readButtonFunction+0x2fc>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d123      	bne.n	8002dfa <readButtonFunction+0x2e6>
 8002db2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e1c <readButtonFunction+0x308>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11f      	bne.n	8002dfa <readButtonFunction+0x2e6>
						if (currentFreqMode == FREQ_60HZ) {
 8002dba:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <readButtonFunction+0x32c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d108      	bne.n	8002dd4 <readButtonFunction+0x2c0>
							currentFreqMode = FREQ_40HZ;
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <readButtonFunction+0x32c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
							update_tim3_frequency(currentFreqMode);
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <readButtonFunction+0x32c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fd febb 	bl	8000b48 <update_tim3_frequency>
}
 8002dd2:	e012      	b.n	8002dfa <readButtonFunction+0x2e6>
							currentFreqMode++;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <readButtonFunction+0x32c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <readButtonFunction+0x32c>)
 8002dde:	701a      	strb	r2, [r3, #0]
							update_tim3_frequency(currentFreqMode);
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <readButtonFunction+0x32c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fd feaf 	bl	8000b48 <update_tim3_frequency>
}
 8002dea:	e006      	b.n	8002dfa <readButtonFunction+0x2e6>
				buttonTransitionFlag = 0;
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <readButtonFunction+0x300>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
				buttonDebounceTimer = 0;
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <readButtonFunction+0x304>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
}
 8002df8:	e7ff      	b.n	8002dfa <readButtonFunction+0x2e6>
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	200005fc 	.word	0x200005fc
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	200005bc 	.word	0x200005bc
 8002e10:	200005c1 	.word	0x200005c1
 8002e14:	200005c8 	.word	0x200005c8
 8002e18:	200005c4 	.word	0x200005c4
 8002e1c:	200005c2 	.word	0x200005c2
 8002e20:	2000000a 	.word	0x2000000a
 8002e24:	2000000b 	.word	0x2000000b
 8002e28:	200005d0 	.word	0x200005d0
 8002e2c:	200005cc 	.word	0x200005cc
 8002e30:	200005c0 	.word	0x200005c0
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	2000000e 	.word	0x2000000e
 8002e40:	20000004 	.word	0x20000004

08002e44 <oscilloscopeTriggerFunction>:

void oscilloscopeTriggerFunction(void) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
    const uint8_t SCOPE_SIZE = 128;
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2280      	movs	r2, #128	@ 0x80
 8002e4e:	701a      	strb	r2, [r3, #0]
    const uint8_t HYST_WINDOW = 12;
 8002e50:	1cfb      	adds	r3, r7, #3
 8002e52:	220c      	movs	r2, #12
 8002e54:	701a      	strb	r2, [r3, #0]
    uint8_t trigger_found = 0;
 8002e56:	230f      	movs	r3, #15
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    uint16_t trigger_index = 3;
 8002e5e:	230c      	movs	r3, #12
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2203      	movs	r2, #3
 8002e64:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 2 * HYST_WINDOW+1; i < 256; i += 2) {
 8002e66:	1cfb      	adds	r3, r7, #3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	18db      	adds	r3, r3, r3
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	230a      	movs	r3, #10
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	3201      	adds	r2, #1
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	e05c      	b.n	8002f34 <oscilloscopeTriggerFunction+0xf0>
        uint16_t curr_val = adc_buffer[i];
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	8819      	ldrh	r1, [r3, #0]
 8002e80:	003b      	movs	r3, r7
 8002e82:	4a49      	ldr	r2, [pc, #292]	@ (8002fa8 <oscilloscopeTriggerFunction+0x164>)
 8002e84:	0049      	lsls	r1, r1, #1
 8002e86:	5a8a      	ldrh	r2, [r1, r2]
 8002e88:	801a      	strh	r2, [r3, #0]
        if (curr_val > (oscilloscopeTriggerRaw + oscilloscopeTriggerHyst)) {
 8002e8a:	003b      	movs	r3, r7
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <oscilloscopeTriggerFunction+0x168>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	0019      	movs	r1, r3
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <oscilloscopeTriggerFunction+0x16c>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	18cb      	adds	r3, r1, r3
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	dd44      	ble.n	8002f28 <oscilloscopeTriggerFunction+0xe4>
            uint8_t below_count = 0;
 8002e9e:	2309      	movs	r3, #9
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
            for (uint8_t w = 1; w <= HYST_WINDOW; w++) {
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e020      	b.n	8002ef2 <oscilloscopeTriggerFunction+0xae>
                if (adc_buffer[i - 2 * w] < (oscilloscopeTriggerRaw - oscilloscopeTriggerHyst)) {
 8002eb0:	230a      	movs	r3, #10
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <oscilloscopeTriggerFunction+0x164>)
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	5ad3      	ldrh	r3, [r2, r3]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	001a      	movs	r2, r3
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <oscilloscopeTriggerFunction+0x168>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <oscilloscopeTriggerFunction+0x16c>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	1acb      	subs	r3, r1, r3
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	da05      	bge.n	8002ee6 <oscilloscopeTriggerFunction+0xa2>
                    below_count++;
 8002eda:	2109      	movs	r1, #9
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	3201      	adds	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
            for (uint8_t w = 1; w <= HYST_WINDOW; w++) {
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	3201      	adds	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	18fa      	adds	r2, r7, r3
 8002ef6:	1cfb      	adds	r3, r7, #3
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d9d7      	bls.n	8002eb0 <oscilloscopeTriggerFunction+0x6c>
                }
            }
            if (below_count >= HYST_WINDOW/2) {
 8002f00:	1cfb      	adds	r3, r7, #3
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2209      	movs	r2, #9
 8002f0a:	18ba      	adds	r2, r7, r2
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d30a      	bcc.n	8002f28 <oscilloscopeTriggerFunction+0xe4>
            	//HAL_ADC_Stop_DMA(&hadc);
                trigger_found = 1;
 8002f12:	230f      	movs	r3, #15
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
                trigger_index = i;
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	220a      	movs	r2, #10
 8002f20:	18ba      	adds	r2, r7, r2
 8002f22:	8812      	ldrh	r2, [r2, #0]
 8002f24:	801a      	strh	r2, [r3, #0]
                break;
 8002f26:	e00a      	b.n	8002f3e <oscilloscopeTriggerFunction+0xfa>
    for (uint16_t i = 2 * HYST_WINDOW+1; i < 256; i += 2) {
 8002f28:	220a      	movs	r2, #10
 8002f2a:	18bb      	adds	r3, r7, r2
 8002f2c:	18ba      	adds	r2, r7, r2
 8002f2e:	8812      	ldrh	r2, [r2, #0]
 8002f30:	3202      	adds	r2, #2
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	230a      	movs	r3, #10
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	2bff      	cmp	r3, #255	@ 0xff
 8002f3c:	d99d      	bls.n	8002e7a <oscilloscopeTriggerFunction+0x36>
            }
        }
    }

    if (trigger_found) {
 8002f3e:	230f      	movs	r3, #15
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02a      	beq.n	8002f9e <oscilloscopeTriggerFunction+0x15a>
        uint16_t adc_idx = trigger_index;
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	18ba      	adds	r2, r7, r2
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	801a      	strh	r2, [r3, #0]
        for (uint8_t m = 0; m < SCOPE_SIZE; m++) {
 8002f52:	1d7b      	adds	r3, r7, #5
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e01b      	b.n	8002f92 <oscilloscopeTriggerFunction+0x14e>
            oscilloscopeBuffer[m] = adc_buffer[adc_idx];
 8002f5a:	1dbb      	adds	r3, r7, #6
 8002f5c:	8819      	ldrh	r1, [r3, #0]
 8002f5e:	1d7b      	adds	r3, r7, #5
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <oscilloscopeTriggerFunction+0x164>)
 8002f64:	0049      	lsls	r1, r1, #1
 8002f66:	5acb      	ldrh	r3, [r1, r3]
 8002f68:	b299      	uxth	r1, r3
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <oscilloscopeTriggerFunction+0x170>)
 8002f6c:	0052      	lsls	r2, r2, #1
 8002f6e:	52d1      	strh	r1, [r2, r3]
            adc_idx += 2;
 8002f70:	1dbb      	adds	r3, r7, #6
 8002f72:	1dba      	adds	r2, r7, #6
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	3202      	adds	r2, #2
 8002f78:	801a      	strh	r2, [r3, #0]
            if (adc_idx >= 256)
 8002f7a:	1dbb      	adds	r3, r7, #6
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2bff      	cmp	r3, #255	@ 0xff
 8002f80:	d902      	bls.n	8002f88 <oscilloscopeTriggerFunction+0x144>
                adc_idx = 1;
 8002f82:	1dbb      	adds	r3, r7, #6
 8002f84:	2201      	movs	r2, #1
 8002f86:	801a      	strh	r2, [r3, #0]
        for (uint8_t m = 0; m < SCOPE_SIZE; m++) {
 8002f88:	1d7b      	adds	r3, r7, #5
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	1d7b      	adds	r3, r7, #5
 8002f8e:	3201      	adds	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	1d7a      	adds	r2, r7, #5
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3dd      	bcc.n	8002f5a <oscilloscopeTriggerFunction+0x116>
    else {
        /*for (uint8_t m = 0, adc_idx = 1; m < SCOPE_SIZE && adc_idx < 256; m++, adc_idx += 2) {
            oscilloscopeBuffer[m] = adc_buffer[adc_idx];
        }*/
    }
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	200005fc 	.word	0x200005fc
 8002fac:	20000010 	.word	0x20000010
 8002fb0:	20000012 	.word	0x20000012
 8002fb4:	200007fc 	.word	0x200007fc

08002fb8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbc:	b672      	cpsid	i
}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	e7fd      	b.n	8002fc0 <Error_Handler+0x8>

08002fc4 <OS_Init>:
static const SimpleTask *os_tasks = 0;
static uint8_t os_num_tasks = 0;
static void (*os_init_task)(void) = 0;
static uint32_t os_init_max_time_ms = 0;

void OS_Init(const SimpleTask *tasks, uint8_t num_tasks, void (*init_task)(void), uint32_t init_max_time_ms) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	200b      	movs	r0, #11
 8002fd2:	183b      	adds	r3, r7, r0
 8002fd4:	1c0a      	adds	r2, r1, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
    os_tasks = tasks;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <OS_Init+0x38>)
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	601a      	str	r2, [r3, #0]
    os_num_tasks = num_tasks;
 8002fde:	4b08      	ldr	r3, [pc, #32]	@ (8003000 <OS_Init+0x3c>)
 8002fe0:	183a      	adds	r2, r7, r0
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	701a      	strb	r2, [r3, #0]
    os_init_task = init_task;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <OS_Init+0x40>)
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	601a      	str	r2, [r3, #0]
    os_init_max_time_ms = init_max_time_ms;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <OS_Init+0x44>)
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b004      	add	sp, #16
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	20000920 	.word	0x20000920
 8003000:	20000924 	.word	0x20000924
 8003004:	20000928 	.word	0x20000928
 8003008:	2000092c 	.word	0x2000092c

0800300c <OS_Run>:

void OS_Run(void) {
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
    if (os_init_task) {
 8003012:	4b42      	ldr	r3, [pc, #264]	@ (800311c <OS_Run+0x110>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d026      	beq.n	8003068 <OS_Run+0x5c>
        uint32_t start = HAL_GetTick();
 800301a:	f000 f8e5 	bl	80031e8 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	613b      	str	r3, [r7, #16]
        os_init_task();
 8003022:	4b3e      	ldr	r3, [pc, #248]	@ (800311c <OS_Run+0x110>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick_us() - start;
 8003028:	f7fd fdd0 	bl	8000bcc <HAL_GetTick_us>
 800302c:	0003      	movs	r3, r0
 800302e:	001a      	movs	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	60fb      	str	r3, [r7, #12]
        if (elapsed > os_init_max_time_ms) {
 8003036:	4b3a      	ldr	r3, [pc, #232]	@ (8003120 <OS_Run+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <OS_Run+0x46>
            os_task_overrun_count[0]++;
 8003040:	4b38      	ldr	r3, [pc, #224]	@ (8003124 <OS_Run+0x118>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <OS_Run+0x118>)
 8003048:	601a      	str	r2, [r3, #0]
            os_task_overrun_time=elapsed;
 800304a:	4b37      	ldr	r3, [pc, #220]	@ (8003128 <OS_Run+0x11c>)
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e00a      	b.n	8003068 <OS_Run+0x5c>
        } else {
            while ((HAL_GetTick_us() - start) < os_init_max_time_ms) {}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	f7fd fdba 	bl	8000bcc <HAL_GetTick_us>
 8003058:	0003      	movs	r3, r0
 800305a:	001a      	movs	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad2      	subs	r2, r2, r3
 8003060:	4b2f      	ldr	r3, [pc, #188]	@ (8003120 <OS_Run+0x114>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d3f5      	bcc.n	8003054 <OS_Run+0x48>
        }
    }
    uint8_t i = 0;
 8003068:	2317      	movs	r3, #23
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    while (1) {
        uint32_t start = HAL_GetTick_us();
 8003070:	f7fd fdac 	bl	8000bcc <HAL_GetTick_us>
 8003074:	0003      	movs	r3, r0
 8003076:	60bb      	str	r3, [r7, #8]
        os_tasks[i].task_func();
 8003078:	4b2c      	ldr	r3, [pc, #176]	@ (800312c <OS_Run+0x120>)
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	2417      	movs	r4, #23
 800307e:	193b      	adds	r3, r7, r4
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	0013      	movs	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	189b      	adds	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	18cb      	adds	r3, r1, r3
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick_us() - start;
 8003090:	f7fd fd9c 	bl	8000bcc <HAL_GetTick_us>
 8003094:	0003      	movs	r3, r0
 8003096:	001a      	movs	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	607b      	str	r3, [r7, #4]
        if (elapsed > os_tasks[i].max_time_ms) {
 800309e:	4b23      	ldr	r3, [pc, #140]	@ (800312c <OS_Run+0x120>)
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	0013      	movs	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	18cb      	adds	r3, r1, r3
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d90d      	bls.n	80030d4 <OS_Run+0xc8>
            os_task_overrun_count[i+1]++;
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <OS_Run+0x118>)
 80030c0:	0099      	lsls	r1, r3, #2
 80030c2:	588a      	ldr	r2, [r1, r2]
 80030c4:	1c51      	adds	r1, r2, #1
 80030c6:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <OS_Run+0x118>)
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	5099      	str	r1, [r3, r2]
            os_task_overrun_time=elapsed;
 80030cc:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <OS_Run+0x11c>)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e013      	b.n	80030fc <OS_Run+0xf0>
        } else {
            while ((HAL_GetTick_us() - start) < os_tasks[i].max_time_ms) {}//bucla de asteptare pana la urmatorul task
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	f7fd fd79 	bl	8000bcc <HAL_GetTick_us>
 80030da:	0003      	movs	r3, r0
 80030dc:	001a      	movs	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad1      	subs	r1, r2, r3
 80030e2:	4b12      	ldr	r3, [pc, #72]	@ (800312c <OS_Run+0x120>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	2317      	movs	r3, #23
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	0013      	movs	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	18c3      	adds	r3, r0, r3
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d3ec      	bcc.n	80030d6 <OS_Run+0xca>
        }
        i++;
 80030fc:	2117      	movs	r1, #23
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	187b      	adds	r3, r7, r1
 8003104:	3201      	adds	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
        if (i >= os_num_tasks) i = 0;
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <OS_Run+0x124>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	187a      	adds	r2, r7, r1
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3ad      	bcc.n	8003070 <OS_Run+0x64>
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
    while (1) {
 800311a:	e7a9      	b.n	8003070 <OS_Run+0x64>
 800311c:	20000928 	.word	0x20000928
 8003120:	2000092c 	.word	0x2000092c
 8003124:	200005d4 	.word	0x200005d4
 8003128:	200005f4 	.word	0x200005f4
 800312c:	20000920 	.word	0x20000920
 8003130:	20000924 	.word	0x20000924

08003134 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003138:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <HAL_Init+0x24>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_Init+0x24>)
 800313e:	2110      	movs	r1, #16
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003144:	2003      	movs	r0, #3
 8003146:	f000 f809 	bl	800315c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800314a:	f7fd fbd3 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_InitTick+0x5c>)
 8003166:	681c      	ldr	r4, [r3, #0]
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_InitTick+0x60>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	0019      	movs	r1, r3
 800316e:	23fa      	movs	r3, #250	@ 0xfa
 8003170:	0098      	lsls	r0, r3, #2
 8003172:	f7fc ffc7 	bl	8000104 <__udivsi3>
 8003176:	0003      	movs	r3, r0
 8003178:	0019      	movs	r1, r3
 800317a:	0020      	movs	r0, r4
 800317c:	f7fc ffc2 	bl	8000104 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fd1f 	bl	8003bc6 <HAL_SYSTICK_Config>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d001      	beq.n	8003190 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e00f      	b.n	80031b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d80b      	bhi.n	80031ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	2301      	movs	r3, #1
 800319a:	425b      	negs	r3, r3
 800319c:	2200      	movs	r2, #0
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fcec 	bl	8003b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_InitTick+0x64>)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b003      	add	sp, #12
 80031b6:	bd90      	pop	{r4, r7, pc}
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000420 	.word	0x20000420
 80031c0:	2000041c 	.word	0x2000041c

080031c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_IncTick+0x1c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_IncTick+0x20>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	18d2      	adds	r2, r2, r3
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_IncTick+0x20>)
 80031d6:	601a      	str	r2, [r3, #0]
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	20000420 	.word	0x20000420
 80031e4:	20000930 	.word	0x20000930

080031e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b02      	ldr	r3, [pc, #8]	@ (80031f8 <HAL_GetTick+0x10>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	20000930 	.word	0x20000930

080031fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff fff0 	bl	80031e8 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3301      	adds	r3, #1
 8003214:	d005      	beq.n	8003222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_Delay+0x44>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001a      	movs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	189b      	adds	r3, r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	f7ff ffe0 	bl	80031e8 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d8f7      	bhi.n	8003224 <HAL_Delay+0x28>
  {
  }
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	20000420 	.word	0x20000420

08003244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324c:	230f      	movs	r3, #15
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e125      	b.n	80034ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2234      	movs	r2, #52	@ 0x34
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f7fd f94a 	bl	8000514 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	2210      	movs	r2, #16
 8003286:	4013      	ands	r3, r2
 8003288:	d000      	beq.n	800328c <HAL_ADC_Init+0x48>
 800328a:	e103      	b.n	8003494 <HAL_ADC_Init+0x250>
 800328c:	230f      	movs	r3, #15
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d000      	beq.n	8003298 <HAL_ADC_Init+0x54>
 8003296:	e0fd      	b.n	8003494 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2204      	movs	r2, #4
 80032a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80032a2:	d000      	beq.n	80032a6 <HAL_ADC_Init+0x62>
 80032a4:	e0f6      	b.n	8003494 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	4a83      	ldr	r2, [pc, #524]	@ (80034b8 <HAL_ADC_Init+0x274>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	2202      	movs	r2, #2
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2203      	movs	r2, #3
 80032be:	4013      	ands	r3, r2
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d112      	bne.n	80032ea <HAL_ADC_Init+0xa6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d009      	beq.n	80032e6 <HAL_ADC_Init+0xa2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	2380      	movs	r3, #128	@ 0x80
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	401a      	ands	r2, r3
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_Init+0xa6>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_ADC_Init+0xa8>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2218      	movs	r2, #24
 80032f8:	4393      	bics	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	0899      	lsrs	r1, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4964      	ldr	r1, [pc, #400]	@ (80034bc <HAL_ADC_Init+0x278>)
 800332a:	400a      	ands	r2, r1
 800332c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7e1b      	ldrb	r3, [r3, #24]
 8003332:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7e5b      	ldrb	r3, [r3, #25]
 8003338:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800333a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7e9b      	ldrb	r3, [r3, #26]
 8003340:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003342:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	2b01      	cmp	r3, #1
 800334a:	d002      	beq.n	8003352 <HAL_ADC_Init+0x10e>
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	015b      	lsls	r3, r3, #5
 8003350:	e000      	b.n	8003354 <HAL_ADC_Init+0x110>
 8003352:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003354:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800335a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d101      	bne.n	8003368 <HAL_ADC_Init+0x124>
 8003364:	2304      	movs	r3, #4
 8003366:	e000      	b.n	800336a <HAL_ADC_Init+0x126>
 8003368:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800336a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2124      	movs	r1, #36	@ 0x24
 8003370:	5c5b      	ldrb	r3, [r3, r1]
 8003372:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003374:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7edb      	ldrb	r3, [r3, #27]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d115      	bne.n	80033b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7e9b      	ldrb	r3, [r3, #26]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	0252      	lsls	r2, r2, #9
 8003392:	4313      	orrs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	e00b      	b.n	80033b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	2220      	movs	r2, #32
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	2201      	movs	r2, #1
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	23c2      	movs	r3, #194	@ 0xc2
 80033b6:	33ff      	adds	r3, #255	@ 0xff
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d007      	beq.n	80033cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033c4:	4313      	orrs	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	055b      	lsls	r3, r3, #21
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d01b      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d017      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d013      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d00f      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	2b04      	cmp	r3, #4
 8003406:	d00b      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	2b05      	cmp	r3, #5
 800340e:	d007      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	2b06      	cmp	r3, #6
 8003416:	d003      	beq.n	8003420 <HAL_ADC_Init+0x1dc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	2b07      	cmp	r3, #7
 800341e:	d112      	bne.n	8003446 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2107      	movs	r1, #7
 800342c:	438a      	bics	r2, r1
 800342e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6959      	ldr	r1, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	2207      	movs	r2, #7
 800343c:	401a      	ands	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_ADC_Init+0x27c>)
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d10b      	bne.n	800346e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	2203      	movs	r2, #3
 8003462:	4393      	bics	r3, r2
 8003464:	2201      	movs	r2, #1
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800346c:	e01c      	b.n	80034a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	2212      	movs	r2, #18
 8003474:	4393      	bics	r3, r2
 8003476:	2210      	movs	r2, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	2201      	movs	r2, #1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800348a:	230f      	movs	r3, #15
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003492:	e009      	b.n	80034a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	2210      	movs	r2, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80034a0:	230f      	movs	r3, #15
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	fffffefd 	.word	0xfffffefd
 80034bc:	fffe0219 	.word	0xfffe0219
 80034c0:	833fffe7 	.word	0x833fffe7

080034c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d0:	2317      	movs	r3, #23
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	d15e      	bne.n	80035a2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2234      	movs	r2, #52	@ 0x34
 80034e8:	5c9b      	ldrb	r3, [r3, r2]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x2e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e05e      	b.n	80035b0 <HAL_ADC_Start_DMA+0xec>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2234      	movs	r2, #52	@ 0x34
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	7e5b      	ldrb	r3, [r3, #25]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d007      	beq.n	8003512 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003502:	2317      	movs	r3, #23
 8003504:	18fc      	adds	r4, r7, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f983 	bl	8003814 <ADC_Enable>
 800350e:	0003      	movs	r3, r0
 8003510:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003512:	2317      	movs	r3, #23
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d146      	bne.n	80035aa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	4a25      	ldr	r2, [pc, #148]	@ (80035b8 <HAL_ADC_Start_DMA+0xf4>)
 8003522:	4013      	ands	r3, r2
 8003524:	2280      	movs	r2, #128	@ 0x80
 8003526:	0052      	lsls	r2, r2, #1
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2234      	movs	r2, #52	@ 0x34
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	4a1e      	ldr	r2, [pc, #120]	@ (80035bc <HAL_ADC_Start_DMA+0xf8>)
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <HAL_ADC_Start_DMA+0xfc>)
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <HAL_ADC_Start_DMA+0x100>)
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	221c      	movs	r2, #28
 800355a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2110      	movs	r1, #16
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	430a      	orrs	r2, r1
 800357a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3340      	adds	r3, #64	@ 0x40
 8003586:	0019      	movs	r1, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f000 fb70 	bl	8003c70 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2104      	movs	r1, #4
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e003      	b.n	80035aa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035a2:	2317      	movs	r3, #23
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80035aa:	2317      	movs	r3, #23
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	781b      	ldrb	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	fffff0fe 	.word	0xfffff0fe
 80035bc:	0800391d 	.word	0x0800391d
 80035c0:	080039d1 	.word	0x080039d1
 80035c4:	080039ef 	.word	0x080039ef

080035c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003602:	230f      	movs	r3, #15
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	055b      	lsls	r3, r3, #21
 8003616:	429a      	cmp	r2, r3
 8003618:	d011      	beq.n	800363e <HAL_ADC_ConfigChannel+0x46>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d00d      	beq.n	800363e <HAL_ADC_ConfigChannel+0x46>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	2b02      	cmp	r3, #2
 8003628:	d009      	beq.n	800363e <HAL_ADC_ConfigChannel+0x46>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	2b03      	cmp	r3, #3
 8003630:	d005      	beq.n	800363e <HAL_ADC_ConfigChannel+0x46>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	2b04      	cmp	r3, #4
 8003638:	d001      	beq.n	800363e <HAL_ADC_ConfigChannel+0x46>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2234      	movs	r2, #52	@ 0x34
 8003642:	5c9b      	ldrb	r3, [r3, r2]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x54>
 8003648:	2302      	movs	r3, #2
 800364a:	e0d0      	b.n	80037ee <HAL_ADC_ConfigChannel+0x1f6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2234      	movs	r2, #52	@ 0x34
 8003650:	2101      	movs	r1, #1
 8003652:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2204      	movs	r2, #4
 800365c:	4013      	ands	r3, r2
 800365e:	d000      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x6a>
 8003660:	e0b4      	b.n	80037cc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a64      	ldr	r2, [pc, #400]	@ (80037f8 <HAL_ADC_ConfigChannel+0x200>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d100      	bne.n	800366e <HAL_ADC_ConfigChannel+0x76>
 800366c:	e082      	b.n	8003774 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	409a      	lsls	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	055b      	lsls	r3, r3, #21
 800368c:	429a      	cmp	r2, r3
 800368e:	d037      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d033      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	2b02      	cmp	r3, #2
 800369e:	d02f      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d02b      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d027      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d023      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d01f      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d01b      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2107      	movs	r1, #7
 80036d4:	400b      	ands	r3, r1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d012      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2107      	movs	r1, #7
 80036e6:	438a      	bics	r2, r1
 80036e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6959      	ldr	r1, [r3, #20]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2207      	movs	r2, #7
 80036f6:	401a      	ands	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d007      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x120>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b11      	cmp	r3, #17
 800370e:	d003      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x120>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b12      	cmp	r3, #18
 8003716:	d163      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003718:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_ADC_ConfigChannel+0x204>)
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b10      	cmp	r3, #16
 8003722:	d009      	beq.n	8003738 <HAL_ADC_ConfigChannel+0x140>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b11      	cmp	r3, #17
 800372a:	d102      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x13a>
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	03db      	lsls	r3, r3, #15
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x144>
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	045b      	lsls	r3, r3, #17
 8003736:	e001      	b.n	800373c <HAL_ADC_ConfigChannel+0x144>
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	4a2f      	ldr	r2, [pc, #188]	@ (80037fc <HAL_ADC_ConfigChannel+0x204>)
 800373e:	430b      	orrs	r3, r1
 8003740:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b10      	cmp	r3, #16
 8003748:	d14a      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800374a:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <HAL_ADC_ConfigChannel+0x208>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	492d      	ldr	r1, [pc, #180]	@ (8003804 <HAL_ADC_ConfigChannel+0x20c>)
 8003750:	0018      	movs	r0, r3
 8003752:	f7fc fcd7 	bl	8000104 <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	001a      	movs	r2, r3
 800375a:	0013      	movs	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	189b      	adds	r3, r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003764:	e002      	b.n	800376c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3b01      	subs	r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x16e>
 8003772:	e035      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	4099      	lsls	r1, r3
 8003782:	000b      	movs	r3, r1
 8003784:	43d9      	mvns	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	400a      	ands	r2, r1
 800378c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b10      	cmp	r3, #16
 8003794:	d007      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x1ae>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b11      	cmp	r3, #17
 800379c:	d003      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x1ae>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b12      	cmp	r3, #18
 80037a4:	d11c      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_ADC_ConfigChannel+0x204>)
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d007      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x1ca>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b11      	cmp	r3, #17
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x1c6>
 80037ba:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_ADC_ConfigChannel+0x210>)
 80037bc:	e002      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x1cc>
 80037be:	4b13      	ldr	r3, [pc, #76]	@ (800380c <HAL_ADC_ConfigChannel+0x214>)
 80037c0:	e000      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x1cc>
 80037c2:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <HAL_ADC_ConfigChannel+0x218>)
 80037c4:	4a0d      	ldr	r2, [pc, #52]	@ (80037fc <HAL_ADC_ConfigChannel+0x204>)
 80037c6:	400b      	ands	r3, r1
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e009      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	2220      	movs	r2, #32
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2234      	movs	r2, #52	@ 0x34
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037e8:	230f      	movs	r3, #15
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	781b      	ldrb	r3, [r3, #0]
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	00001001 	.word	0x00001001
 80037fc:	40012708 	.word	0x40012708
 8003800:	20000000 	.word	0x20000000
 8003804:	000f4240 	.word	0x000f4240
 8003808:	ffbfffff 	.word	0xffbfffff
 800380c:	feffffff 	.word	0xfeffffff
 8003810:	ff7fffff 	.word	0xff7fffff

08003814 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2203      	movs	r2, #3
 800382c:	4013      	ands	r3, r2
 800382e:	2b01      	cmp	r3, #1
 8003830:	d112      	bne.n	8003858 <ADC_Enable+0x44>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	2b01      	cmp	r3, #1
 800383e:	d009      	beq.n	8003854 <ADC_Enable+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	401a      	ands	r2, r3
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	429a      	cmp	r2, r3
 8003852:	d101      	bne.n	8003858 <ADC_Enable+0x44>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <ADC_Enable+0x46>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d152      	bne.n	8003904 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a2a      	ldr	r2, [pc, #168]	@ (8003910 <ADC_Enable+0xfc>)
 8003866:	4013      	ands	r3, r2
 8003868:	d00d      	beq.n	8003886 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	2210      	movs	r2, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	2201      	movs	r2, #1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e03f      	b.n	8003906 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2101      	movs	r1, #1
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003896:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <ADC_Enable+0x100>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	491f      	ldr	r1, [pc, #124]	@ (8003918 <ADC_Enable+0x104>)
 800389c:	0018      	movs	r0, r3
 800389e:	f7fc fc31 	bl	8000104 <__udivsi3>
 80038a2:	0003      	movs	r3, r0
 80038a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038a6:	e002      	b.n	80038ae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f9      	bne.n	80038a8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80038b4:	f7ff fc98 	bl	80031e8 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038bc:	e01b      	b.n	80038f6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038be:	f7ff fc93 	bl	80031e8 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d914      	bls.n	80038f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d00d      	beq.n	80038f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	2210      	movs	r2, #16
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	2201      	movs	r2, #1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e007      	b.n	8003906 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1dc      	bne.n	80038be <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	80000017 	.word	0x80000017
 8003914:	20000000 	.word	0x20000000
 8003918:	000f4240 	.word	0x000f4240

0800391c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	2250      	movs	r2, #80	@ 0x50
 8003930:	4013      	ands	r3, r2
 8003932:	d140      	bne.n	80039b6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	2280      	movs	r2, #128	@ 0x80
 800393a:	0092      	lsls	r2, r2, #2
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	23c0      	movs	r3, #192	@ 0xc0
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4013      	ands	r3, r2
 800394e:	d12d      	bne.n	80039ac <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003954:	2b00      	cmp	r3, #0
 8003956:	d129      	bne.n	80039ac <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2208      	movs	r2, #8
 8003960:	4013      	ands	r3, r2
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2204      	movs	r2, #4
 800396e:	4013      	ands	r3, r2
 8003970:	d110      	bne.n	8003994 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	210c      	movs	r1, #12
 800397e:	438a      	bics	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	4a11      	ldr	r2, [pc, #68]	@ (80039cc <ADC_DMAConvCplt+0xb0>)
 8003988:	4013      	ands	r3, r2
 800398a:	2201      	movs	r2, #1
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
 8003992:	e00b      	b.n	80039ac <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	2220      	movs	r2, #32
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	2201      	movs	r2, #1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff fe0a 	bl	80035c8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80039b4:	e005      	b.n	80039c2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	0010      	movs	r0, r2
 80039c0:	4798      	blx	r3
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	fffffefe 	.word	0xfffffefe

080039d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff fdf9 	bl	80035d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}

080039ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff fde6 	bl	80035e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	1dfb      	adds	r3, r7, #7
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a36:	d809      	bhi.n	8003a4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	231f      	movs	r3, #31
 8003a40:	401a      	ands	r2, r3
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <__NVIC_EnableIRQ+0x30>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	4091      	lsls	r1, r2
 8003a48:	000a      	movs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
  }
}
 8003a4c:	46c0      	nop			@ (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	e000e100 	.word	0xe000e100

08003a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	0002      	movs	r2, r0
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a6c:	d828      	bhi.n	8003ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b2c <__NVIC_SetPriority+0xd4>)
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	33c0      	adds	r3, #192	@ 0xc0
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	589b      	ldr	r3, [r3, r2]
 8003a7e:	1dfa      	adds	r2, r7, #7
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	0011      	movs	r1, r2
 8003a84:	2203      	movs	r2, #3
 8003a86:	400a      	ands	r2, r1
 8003a88:	00d2      	lsls	r2, r2, #3
 8003a8a:	21ff      	movs	r1, #255	@ 0xff
 8003a8c:	4091      	lsls	r1, r2
 8003a8e:	000a      	movs	r2, r1
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	401a      	ands	r2, r3
 8003a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	22ff      	movs	r2, #255	@ 0xff
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aac:	481f      	ldr	r0, [pc, #124]	@ (8003b2c <__NVIC_SetPriority+0xd4>)
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	33c0      	adds	r3, #192	@ 0xc0
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003abe:	e031      	b.n	8003b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b30 <__NVIC_SetPriority+0xd8>)
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	230f      	movs	r3, #15
 8003aca:	400b      	ands	r3, r1
 8003acc:	3b08      	subs	r3, #8
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3306      	adds	r3, #6
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1dfa      	adds	r2, r7, #7
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	0011      	movs	r1, r2
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	00d2      	lsls	r2, r2, #3
 8003ae6:	21ff      	movs	r1, #255	@ 0xff
 8003ae8:	4091      	lsls	r1, r2
 8003aea:	000a      	movs	r2, r1
 8003aec:	43d2      	mvns	r2, r2
 8003aee:	401a      	ands	r2, r3
 8003af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	22ff      	movs	r2, #255	@ 0xff
 8003af8:	401a      	ands	r2, r3
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	0018      	movs	r0, r3
 8003b00:	2303      	movs	r3, #3
 8003b02:	4003      	ands	r3, r0
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b08:	4809      	ldr	r0, [pc, #36]	@ (8003b30 <__NVIC_SetPriority+0xd8>)
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	001c      	movs	r4, r3
 8003b10:	230f      	movs	r3, #15
 8003b12:	4023      	ands	r3, r4
 8003b14:	3b08      	subs	r3, #8
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	3306      	adds	r3, #6
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	18c3      	adds	r3, r0, r3
 8003b20:	3304      	adds	r3, #4
 8003b22:	601a      	str	r2, [r3, #0]
}
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b003      	add	sp, #12
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1e5a      	subs	r2, r3, #1
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	045b      	lsls	r3, r3, #17
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d301      	bcc.n	8003b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e010      	b.n	8003b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <SysTick_Config+0x44>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	3a01      	subs	r2, #1
 8003b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b54:	2301      	movs	r3, #1
 8003b56:	425b      	negs	r3, r3
 8003b58:	2103      	movs	r1, #3
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff ff7c 	bl	8003a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <SysTick_Config+0x44>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b66:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <SysTick_Config+0x44>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b002      	add	sp, #8
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	210f      	movs	r1, #15
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	1c02      	adds	r2, r0, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ff5d 	bl	8003a58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b004      	add	sp, #16
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	0002      	movs	r2, r0
 8003bae:	1dfb      	adds	r3, r7, #7
 8003bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb2:	1dfb      	adds	r3, r7, #7
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff ff33 	bl	8003a24 <__NVIC_EnableIRQ>
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff ffaf 	bl	8003b34 <SysTick_Config>
 8003bd6:	0003      	movs	r3, r0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e036      	b.n	8003c64 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2221      	movs	r2, #33	@ 0x21
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <HAL_DMA_Init+0x8c>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f946 	bl	8003ed8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2221      	movs	r2, #33	@ 0x21
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	ffffc00f 	.word	0xffffc00f

08003c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2317      	movs	r3, #23
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Start_IT+0x24>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e04f      	b.n	8003d34 <HAL_DMA_Start_IT+0xc4>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	2101      	movs	r1, #1
 8003c9a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2221      	movs	r2, #33	@ 0x21
 8003ca0:	5c9b      	ldrb	r3, [r3, r2]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d13a      	bne.n	8003d1e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2221      	movs	r2, #33	@ 0x21
 8003cac:	2102      	movs	r1, #2
 8003cae:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f8d7 	bl	8003e80 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	210e      	movs	r1, #14
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e00f      	b.n	8003d0c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	210a      	movs	r1, #10
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2104      	movs	r1, #4
 8003d08:	438a      	bics	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e007      	b.n	8003d2e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d26:	2317      	movs	r3, #23
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003d2e:	2317      	movs	r3, #23
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	781b      	ldrb	r3, [r3, #0]
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b006      	add	sp, #24
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	2204      	movs	r2, #4
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	d024      	beq.n	8003dae <HAL_DMA_IRQHandler+0x72>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d020      	beq.n	8003dae <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2220      	movs	r2, #32
 8003d74:	4013      	ands	r3, r2
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2104      	movs	r1, #4
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	2104      	movs	r1, #4
 8003d92:	4091      	lsls	r1, r2
 8003d94:	000a      	movs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d100      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x66>
 8003da0:	e06a      	b.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	0010      	movs	r0, r2
 8003daa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dac:	e064      	b.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2202      	movs	r2, #2
 8003db4:	409a      	lsls	r2, r3
 8003db6:	0013      	movs	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d02b      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xda>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d027      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d10b      	bne.n	8003dea <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	210a      	movs	r1, #10
 8003dde:	438a      	bics	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2221      	movs	r2, #33	@ 0x21
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	2102      	movs	r1, #2
 8003df4:	4091      	lsls	r1, r2
 8003df6:	000a      	movs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	0010      	movs	r0, r2
 8003e12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e14:	e030      	b.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	0013      	movs	r3, r2
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	d028      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d024      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	210e      	movs	r1, #14
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	2101      	movs	r1, #1
 8003e48:	4091      	lsls	r1, r2
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2221      	movs	r2, #33	@ 0x21
 8003e58:	2101      	movs	r1, #1
 8003e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	2100      	movs	r1, #0
 8003e62:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	0010      	movs	r0, r2
 8003e74:	4798      	blx	r3
    }
  }
}
 8003e76:	e7ff      	b.n	8003e78 <HAL_DMA_IRQHandler+0x13c>
 8003e78:	46c0      	nop			@ (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	2101      	movs	r1, #1
 8003e98:	4091      	lsls	r1, r2
 8003e9a:	000a      	movs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d108      	bne.n	8003ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ebe:	e007      	b.n	8003ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <DMA_CalcBaseAndBitshift+0x60>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d810      	bhi.n	8003f0e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <DMA_CalcBaseAndBitshift+0x64>)
 8003ef2:	4694      	mov	ip, r2
 8003ef4:	4463      	add	r3, ip
 8003ef6:	2114      	movs	r1, #20
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc f903 	bl	8000104 <__udivsi3>
 8003efe:	0003      	movs	r3, r0
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0d      	ldr	r2, [pc, #52]	@ (8003f40 <DMA_CalcBaseAndBitshift+0x68>)
 8003f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003f0c:	e00f      	b.n	8003f2e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <DMA_CalcBaseAndBitshift+0x6c>)
 8003f14:	4694      	mov	ip, r2
 8003f16:	4463      	add	r3, ip
 8003f18:	2114      	movs	r1, #20
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc f8f2 	bl	8000104 <__udivsi3>
 8003f20:	0003      	movs	r3, r0
 8003f22:	009a      	lsls	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <DMA_CalcBaseAndBitshift+0x70>)
 8003f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40020407 	.word	0x40020407
 8003f3c:	bffdfff8 	.word	0xbffdfff8
 8003f40:	40020000 	.word	0x40020000
 8003f44:	bffdfbf8 	.word	0xbffdfbf8
 8003f48:	40020400 	.word	0x40020400

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f5a:	e155      	b.n	8004208 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2101      	movs	r1, #1
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4091      	lsls	r1, r2
 8003f66:	000a      	movs	r2, r1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d100      	bne.n	8003f74 <HAL_GPIO_Init+0x28>
 8003f72:	e146      	b.n	8004202 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d005      	beq.n	8003f8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d130      	bne.n	8003fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	0013      	movs	r3, r2
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	409a      	lsls	r2, r3
 8003fae:	0013      	movs	r3, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	0013      	movs	r3, r2
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	2201      	movs	r2, #1
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d017      	beq.n	800402a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2203      	movs	r2, #3
 8004030:	4013      	ands	r3, r2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d123      	bne.n	800407e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	08da      	lsrs	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	58d3      	ldr	r3, [r2, r3]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2207      	movs	r2, #7
 8004048:	4013      	ands	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	409a      	lsls	r2, r3
 8004050:	0013      	movs	r3, r2
 8004052:	43da      	mvns	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2107      	movs	r1, #7
 8004062:	400b      	ands	r3, r1
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	409a      	lsls	r2, r3
 8004068:	0013      	movs	r3, r2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	08da      	lsrs	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3208      	adds	r2, #8
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	409a      	lsls	r2, r3
 800408c:	0013      	movs	r3, r2
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2203      	movs	r2, #3
 800409c:	401a      	ands	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	0013      	movs	r3, r2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	23c0      	movs	r3, #192	@ 0xc0
 80040b8:	029b      	lsls	r3, r3, #10
 80040ba:	4013      	ands	r3, r2
 80040bc:	d100      	bne.n	80040c0 <HAL_GPIO_Init+0x174>
 80040be:	e0a0      	b.n	8004202 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c0:	4b57      	ldr	r3, [pc, #348]	@ (8004220 <HAL_GPIO_Init+0x2d4>)
 80040c2:	699a      	ldr	r2, [r3, #24]
 80040c4:	4b56      	ldr	r3, [pc, #344]	@ (8004220 <HAL_GPIO_Init+0x2d4>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
 80040cc:	4b54      	ldr	r3, [pc, #336]	@ (8004220 <HAL_GPIO_Init+0x2d4>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040d8:	4a52      	ldr	r2, [pc, #328]	@ (8004224 <HAL_GPIO_Init+0x2d8>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	3302      	adds	r3, #2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	589b      	ldr	r3, [r3, r2]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2203      	movs	r2, #3
 80040ea:	4013      	ands	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	220f      	movs	r2, #15
 80040f0:	409a      	lsls	r2, r3
 80040f2:	0013      	movs	r3, r2
 80040f4:	43da      	mvns	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	2390      	movs	r3, #144	@ 0x90
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	429a      	cmp	r2, r3
 8004104:	d019      	beq.n	800413a <HAL_GPIO_Init+0x1ee>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a47      	ldr	r2, [pc, #284]	@ (8004228 <HAL_GPIO_Init+0x2dc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_GPIO_Init+0x1ea>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a46      	ldr	r2, [pc, #280]	@ (800422c <HAL_GPIO_Init+0x2e0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00d      	beq.n	8004132 <HAL_GPIO_Init+0x1e6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a45      	ldr	r2, [pc, #276]	@ (8004230 <HAL_GPIO_Init+0x2e4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d007      	beq.n	800412e <HAL_GPIO_Init+0x1e2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a44      	ldr	r2, [pc, #272]	@ (8004234 <HAL_GPIO_Init+0x2e8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <HAL_GPIO_Init+0x1de>
 8004126:	2304      	movs	r3, #4
 8004128:	e008      	b.n	800413c <HAL_GPIO_Init+0x1f0>
 800412a:	2305      	movs	r3, #5
 800412c:	e006      	b.n	800413c <HAL_GPIO_Init+0x1f0>
 800412e:	2303      	movs	r3, #3
 8004130:	e004      	b.n	800413c <HAL_GPIO_Init+0x1f0>
 8004132:	2302      	movs	r3, #2
 8004134:	e002      	b.n	800413c <HAL_GPIO_Init+0x1f0>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_GPIO_Init+0x1f0>
 800413a:	2300      	movs	r3, #0
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	2103      	movs	r1, #3
 8004140:	400a      	ands	r2, r1
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	4093      	lsls	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800414c:	4935      	ldr	r1, [pc, #212]	@ (8004224 <HAL_GPIO_Init+0x2d8>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	3302      	adds	r3, #2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	035b      	lsls	r3, r3, #13
 8004172:	4013      	ands	r3, r2
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800417e:	4b2e      	ldr	r3, [pc, #184]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004184:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	43da      	mvns	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	039b      	lsls	r3, r3, #14
 800419c:	4013      	ands	r3, r2
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041a8:	4b23      	ldr	r3, [pc, #140]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	4013      	ands	r3, r2
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80041d8:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	43da      	mvns	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	025b      	lsls	r3, r3, #9
 80041f0:	4013      	ands	r3, r2
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_GPIO_Init+0x2ec>)
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	40da      	lsrs	r2, r3
 8004210:	1e13      	subs	r3, r2, #0
 8004212:	d000      	beq.n	8004216 <HAL_GPIO_Init+0x2ca>
 8004214:	e6a2      	b.n	8003f5c <HAL_GPIO_Init+0x10>
  } 
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b006      	add	sp, #24
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	40010000 	.word	0x40010000
 8004228:	48000400 	.word	0x48000400
 800422c:	48000800 	.word	0x48000800
 8004230:	48000c00 	.word	0x48000c00
 8004234:	48001000 	.word	0x48001000
 8004238:	40010400 	.word	0x40010400

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	0008      	movs	r0, r1
 8004246:	0011      	movs	r1, r2
 8004248:	1cbb      	adds	r3, r7, #2
 800424a:	1c02      	adds	r2, r0, #0
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	1c7b      	adds	r3, r7, #1
 8004250:	1c0a      	adds	r2, r1, #0
 8004252:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004254:	1c7b      	adds	r3, r7, #1
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800425c:	1cbb      	adds	r3, r7, #2
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004264:	e003      	b.n	800426e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004266:	1cbb      	adds	r3, r7, #2
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f000 fb76 	bl	8004978 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	4013      	ands	r3, r2
 8004294:	d100      	bne.n	8004298 <HAL_RCC_OscConfig+0x20>
 8004296:	e08e      	b.n	80043b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004298:	4bc5      	ldr	r3, [pc, #788]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	220c      	movs	r2, #12
 800429e:	4013      	ands	r3, r2
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d00e      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042a4:	4bc2      	ldr	r3, [pc, #776]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	220c      	movs	r2, #12
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d117      	bne.n	80042e0 <HAL_RCC_OscConfig+0x68>
 80042b0:	4bbf      	ldr	r3, [pc, #764]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	23c0      	movs	r3, #192	@ 0xc0
 80042b6:	025b      	lsls	r3, r3, #9
 80042b8:	401a      	ands	r2, r3
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	429a      	cmp	r2, r3
 80042c0:	d10e      	bne.n	80042e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c2:	4bbb      	ldr	r3, [pc, #748]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	4013      	ands	r3, r2
 80042cc:	d100      	bne.n	80042d0 <HAL_RCC_OscConfig+0x58>
 80042ce:	e071      	b.n	80043b4 <HAL_RCC_OscConfig+0x13c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d000      	beq.n	80042da <HAL_RCC_OscConfig+0x62>
 80042d8:	e06c      	b.n	80043b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f000 fb4c 	bl	8004978 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x80>
 80042e8:	4bb1      	ldr	r3, [pc, #708]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4bb0      	ldr	r3, [pc, #704]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	0249      	lsls	r1, r1, #9
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e02f      	b.n	8004358 <HAL_RCC_OscConfig+0xe0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10c      	bne.n	800431a <HAL_RCC_OscConfig+0xa2>
 8004300:	4bab      	ldr	r3, [pc, #684]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4baa      	ldr	r3, [pc, #680]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004306:	49ab      	ldr	r1, [pc, #684]	@ (80045b4 <HAL_RCC_OscConfig+0x33c>)
 8004308:	400a      	ands	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	4ba8      	ldr	r3, [pc, #672]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4ba7      	ldr	r3, [pc, #668]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004312:	49a9      	ldr	r1, [pc, #676]	@ (80045b8 <HAL_RCC_OscConfig+0x340>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e01e      	b.n	8004358 <HAL_RCC_OscConfig+0xe0>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b05      	cmp	r3, #5
 8004320:	d10e      	bne.n	8004340 <HAL_RCC_OscConfig+0xc8>
 8004322:	4ba3      	ldr	r3, [pc, #652]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4ba2      	ldr	r3, [pc, #648]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	02c9      	lsls	r1, r1, #11
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	4b9f      	ldr	r3, [pc, #636]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b9e      	ldr	r3, [pc, #632]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	0249      	lsls	r1, r1, #9
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xe0>
 8004340:	4b9b      	ldr	r3, [pc, #620]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b9a      	ldr	r3, [pc, #616]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004346:	499b      	ldr	r1, [pc, #620]	@ (80045b4 <HAL_RCC_OscConfig+0x33c>)
 8004348:	400a      	ands	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	4b98      	ldr	r3, [pc, #608]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b97      	ldr	r3, [pc, #604]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004352:	4999      	ldr	r1, [pc, #612]	@ (80045b8 <HAL_RCC_OscConfig+0x340>)
 8004354:	400a      	ands	r2, r1
 8004356:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d014      	beq.n	800438a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe ff42 	bl	80031e8 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436a:	f7fe ff3d 	bl	80031e8 <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	@ 0x64
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e2fd      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437c:	4b8c      	ldr	r3, [pc, #560]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	4013      	ands	r3, r2
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0xf2>
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe ff2d 	bl	80031e8 <HAL_GetTick>
 800438e:	0003      	movs	r3, r0
 8004390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004394:	f7fe ff28 	bl	80031e8 <HAL_GetTick>
 8004398:	0002      	movs	r2, r0
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	@ 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e2e8      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	4b82      	ldr	r3, [pc, #520]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	2380      	movs	r3, #128	@ 0x80
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	4013      	ands	r3, r2
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x11c>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	4013      	ands	r3, r2
 80043be:	d100      	bne.n	80043c2 <HAL_RCC_OscConfig+0x14a>
 80043c0:	e06c      	b.n	800449c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043c2:	4b7b      	ldr	r3, [pc, #492]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	220c      	movs	r2, #12
 80043c8:	4013      	ands	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043cc:	4b78      	ldr	r3, [pc, #480]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	220c      	movs	r2, #12
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d11f      	bne.n	8004418 <HAL_RCC_OscConfig+0x1a0>
 80043d8:	4b75      	ldr	r3, [pc, #468]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	23c0      	movs	r3, #192	@ 0xc0
 80043de:	025b      	lsls	r3, r3, #9
 80043e0:	401a      	ands	r2, r3
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b71      	ldr	r3, [pc, #452]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_OscConfig+0x188>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e2bb      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b6b      	ldr	r3, [pc, #428]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	22f8      	movs	r2, #248	@ 0xf8
 8004406:	4393      	bics	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00da      	lsls	r2, r3, #3
 8004410:	4b67      	ldr	r3, [pc, #412]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004412:	430a      	orrs	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e041      	b.n	800449c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d024      	beq.n	800446a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b62      	ldr	r3, [pc, #392]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004426:	2101      	movs	r1, #1
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fe fedc 	bl	80031e8 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004436:	f7fe fed7 	bl	80031e8 <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e297      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	4b59      	ldr	r3, [pc, #356]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2202      	movs	r2, #2
 800444e:	4013      	ands	r3, r2
 8004450:	d0f1      	beq.n	8004436 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b57      	ldr	r3, [pc, #348]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	22f8      	movs	r2, #248	@ 0xf8
 8004458:	4393      	bics	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	00da      	lsls	r2, r3, #3
 8004462:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e018      	b.n	800449c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b50      	ldr	r3, [pc, #320]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004470:	2101      	movs	r1, #1
 8004472:	438a      	bics	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fe feb7 	bl	80031e8 <HAL_GetTick>
 800447a:	0003      	movs	r3, r0
 800447c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fe feb2 	bl	80031e8 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e272      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2202      	movs	r2, #2
 8004498:	4013      	ands	r3, r2
 800449a:	d1f1      	bne.n	8004480 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4013      	ands	r3, r2
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b40      	ldr	r3, [pc, #256]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80044b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044b2:	4b3f      	ldr	r3, [pc, #252]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80044b4:	2101      	movs	r1, #1
 80044b6:	430a      	orrs	r2, r1
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fe fe95 	bl	80031e8 <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe fe90 	bl	80031e8 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e250      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	2202      	movs	r2, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	d0f1      	beq.n	80044c4 <HAL_RCC_OscConfig+0x24c>
 80044e0:	e018      	b.n	8004514 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e2:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80044e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e6:	4b32      	ldr	r3, [pc, #200]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80044e8:	2101      	movs	r1, #1
 80044ea:	438a      	bics	r2, r1
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fe fe7b 	bl	80031e8 <HAL_GetTick>
 80044f2:	0003      	movs	r3, r0
 80044f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f8:	f7fe fe76 	bl	80031e8 <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e236      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d1f1      	bne.n	80044f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2204      	movs	r2, #4
 800451a:	4013      	ands	r3, r2
 800451c:	d100      	bne.n	8004520 <HAL_RCC_OscConfig+0x2a8>
 800451e:	e0b5      	b.n	800468c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004520:	201f      	movs	r0, #31
 8004522:	183b      	adds	r3, r7, r0
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004528:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	055b      	lsls	r3, r3, #21
 8004530:	4013      	ands	r3, r2
 8004532:	d110      	bne.n	8004556 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	4b1d      	ldr	r3, [pc, #116]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 800453a:	2180      	movs	r1, #128	@ 0x80
 800453c:	0549      	lsls	r1, r1, #21
 800453e:	430a      	orrs	r2, r1
 8004540:	61da      	str	r2, [r3, #28]
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	055b      	lsls	r3, r3, #21
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004550:	183b      	adds	r3, r7, r0
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <HAL_RCC_OscConfig+0x344>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4013      	ands	r3, r2
 8004560:	d11a      	bne.n	8004598 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b16      	ldr	r3, [pc, #88]	@ (80045bc <HAL_RCC_OscConfig+0x344>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <HAL_RCC_OscConfig+0x344>)
 8004568:	2180      	movs	r1, #128	@ 0x80
 800456a:	0049      	lsls	r1, r1, #1
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004570:	f7fe fe3a 	bl	80031e8 <HAL_GetTick>
 8004574:	0003      	movs	r3, r0
 8004576:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fe fe35 	bl	80031e8 <HAL_GetTick>
 800457e:	0002      	movs	r2, r0
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	@ 0x64
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e1f5      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCC_OscConfig+0x344>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4013      	ands	r3, r2
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10f      	bne.n	80045c0 <HAL_RCC_OscConfig+0x348>
 80045a0:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	4b02      	ldr	r3, [pc, #8]	@ (80045b0 <HAL_RCC_OscConfig+0x338>)
 80045a6:	2101      	movs	r1, #1
 80045a8:	430a      	orrs	r2, r1
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e036      	b.n	800461c <HAL_RCC_OscConfig+0x3a4>
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	40021000 	.word	0x40021000
 80045b4:	fffeffff 	.word	0xfffeffff
 80045b8:	fffbffff 	.word	0xfffbffff
 80045bc:	40007000 	.word	0x40007000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCC_OscConfig+0x36a>
 80045c8:	4bca      	ldr	r3, [pc, #808]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	4bc9      	ldr	r3, [pc, #804]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	438a      	bics	r2, r1
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	4bc7      	ldr	r3, [pc, #796]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	4bc6      	ldr	r3, [pc, #792]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045da:	2104      	movs	r1, #4
 80045dc:	438a      	bics	r2, r1
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	e01c      	b.n	800461c <HAL_RCC_OscConfig+0x3a4>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x38c>
 80045ea:	4bc2      	ldr	r3, [pc, #776]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	4bc1      	ldr	r3, [pc, #772]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045f0:	2104      	movs	r1, #4
 80045f2:	430a      	orrs	r2, r1
 80045f4:	621a      	str	r2, [r3, #32]
 80045f6:	4bbf      	ldr	r3, [pc, #764]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	4bbe      	ldr	r3, [pc, #760]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	430a      	orrs	r2, r1
 8004600:	621a      	str	r2, [r3, #32]
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0x3a4>
 8004604:	4bbb      	ldr	r3, [pc, #748]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	4bba      	ldr	r3, [pc, #744]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800460a:	2101      	movs	r1, #1
 800460c:	438a      	bics	r2, r1
 800460e:	621a      	str	r2, [r3, #32]
 8004610:	4bb8      	ldr	r3, [pc, #736]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	4bb7      	ldr	r3, [pc, #732]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004616:	2104      	movs	r1, #4
 8004618:	438a      	bics	r2, r1
 800461a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d014      	beq.n	800464e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fe fde0 	bl	80031e8 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e009      	b.n	8004642 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fddb 	bl	80031e8 <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	4aaf      	ldr	r2, [pc, #700]	@ (80048f8 <HAL_RCC_OscConfig+0x680>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e19a      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	4bac      	ldr	r3, [pc, #688]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x3b6>
 800464c:	e013      	b.n	8004676 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464e:	f7fe fdcb 	bl	80031e8 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	e009      	b.n	800466c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fe fdc6 	bl	80031e8 <HAL_GetTick>
 800465c:	0002      	movs	r2, r0
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4aa5      	ldr	r2, [pc, #660]	@ (80048f8 <HAL_RCC_OscConfig+0x680>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e185      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466c:	4ba1      	ldr	r3, [pc, #644]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	2202      	movs	r2, #2
 8004672:	4013      	ands	r3, r2
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004676:	231f      	movs	r3, #31
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b9c      	ldr	r3, [pc, #624]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	4b9b      	ldr	r3, [pc, #620]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004686:	499d      	ldr	r1, [pc, #628]	@ (80048fc <HAL_RCC_OscConfig+0x684>)
 8004688:	400a      	ands	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2210      	movs	r2, #16
 8004692:	4013      	ands	r3, r2
 8004694:	d063      	beq.n	800475e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d12a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800469e:	4b95      	ldr	r3, [pc, #596]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a2:	4b94      	ldr	r3, [pc, #592]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046a4:	2104      	movs	r1, #4
 80046a6:	430a      	orrs	r2, r1
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80046aa:	4b92      	ldr	r3, [pc, #584]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ae:	4b91      	ldr	r3, [pc, #580]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe fd97 	bl	80031e8 <HAL_GetTick>
 80046ba:	0003      	movs	r3, r0
 80046bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046c0:	f7fe fd92 	bl	80031e8 <HAL_GetTick>
 80046c4:	0002      	movs	r2, r0
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e152      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046d2:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d0f1      	beq.n	80046c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046dc:	4b85      	ldr	r3, [pc, #532]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e0:	22f8      	movs	r2, #248	@ 0xf8
 80046e2:	4393      	bics	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	00da      	lsls	r2, r3, #3
 80046ec:	4b81      	ldr	r3, [pc, #516]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046ee:	430a      	orrs	r2, r1
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80046f2:	e034      	b.n	800475e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	3305      	adds	r3, #5
 80046fa:	d111      	bne.n	8004720 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80046fc:	4b7d      	ldr	r3, [pc, #500]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80046fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004700:	4b7c      	ldr	r3, [pc, #496]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004702:	2104      	movs	r1, #4
 8004704:	438a      	bics	r2, r1
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004708:	4b7a      	ldr	r3, [pc, #488]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800470a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470c:	22f8      	movs	r2, #248	@ 0xf8
 800470e:	4393      	bics	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	00da      	lsls	r2, r3, #3
 8004718:	4b76      	ldr	r3, [pc, #472]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800471a:	430a      	orrs	r2, r1
 800471c:	635a      	str	r2, [r3, #52]	@ 0x34
 800471e:	e01e      	b.n	800475e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004720:	4b74      	ldr	r3, [pc, #464]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004724:	4b73      	ldr	r3, [pc, #460]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004726:	2104      	movs	r1, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800472c:	4b71      	ldr	r3, [pc, #452]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800472e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004730:	4b70      	ldr	r3, [pc, #448]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fe fd56 	bl	80031e8 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004742:	f7fe fd51 	bl	80031e8 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e111      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004754:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2220      	movs	r2, #32
 8004764:	4013      	ands	r3, r2
 8004766:	d05c      	beq.n	8004822 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004768:	4b62      	ldr	r3, [pc, #392]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	220c      	movs	r2, #12
 800476e:	4013      	ands	r3, r2
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d00e      	beq.n	8004792 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004774:	4b5f      	ldr	r3, [pc, #380]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	220c      	movs	r2, #12
 800477a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800477c:	2b08      	cmp	r3, #8
 800477e:	d114      	bne.n	80047aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004780:	4b5c      	ldr	r3, [pc, #368]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	23c0      	movs	r3, #192	@ 0xc0
 8004786:	025b      	lsls	r3, r3, #9
 8004788:	401a      	ands	r2, r3
 800478a:	23c0      	movs	r3, #192	@ 0xc0
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	429a      	cmp	r2, r3
 8004790:	d10b      	bne.n	80047aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004792:	4b58      	ldr	r3, [pc, #352]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	4013      	ands	r3, r2
 800479c:	d040      	beq.n	8004820 <HAL_RCC_OscConfig+0x5a8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d03c      	beq.n	8004820 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0e6      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01b      	beq.n	80047ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80047b2:	4b50      	ldr	r3, [pc, #320]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80047b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047b6:	4b4f      	ldr	r3, [pc, #316]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80047b8:	2180      	movs	r1, #128	@ 0x80
 80047ba:	0249      	lsls	r1, r1, #9
 80047bc:	430a      	orrs	r2, r1
 80047be:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fe fd12 	bl	80031e8 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ca:	f7fe fd0d 	bl	80031e8 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0cd      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80047dc:	4b45      	ldr	r3, [pc, #276]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80047de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	4013      	ands	r3, r2
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x552>
 80047e8:	e01b      	b.n	8004822 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80047ea:	4b42      	ldr	r3, [pc, #264]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80047ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ee:	4b41      	ldr	r3, [pc, #260]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80047f0:	4943      	ldr	r1, [pc, #268]	@ (8004900 <HAL_RCC_OscConfig+0x688>)
 80047f2:	400a      	ands	r2, r1
 80047f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f6:	f7fe fcf7 	bl	80031e8 <HAL_GetTick>
 80047fa:	0003      	movs	r3, r0
 80047fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004800:	f7fe fcf2 	bl	80031e8 <HAL_GetTick>
 8004804:	0002      	movs	r2, r0
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0b2      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004812:	4b38      	ldr	r3, [pc, #224]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004816:	2380      	movs	r3, #128	@ 0x80
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	4013      	ands	r3, r2
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x588>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004820:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d100      	bne.n	800482c <HAL_RCC_OscConfig+0x5b4>
 800482a:	e0a4      	b.n	8004976 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482c:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	220c      	movs	r2, #12
 8004832:	4013      	ands	r3, r2
 8004834:	2b08      	cmp	r3, #8
 8004836:	d100      	bne.n	800483a <HAL_RCC_OscConfig+0x5c2>
 8004838:	e078      	b.n	800492c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	2b02      	cmp	r3, #2
 8004840:	d14c      	bne.n	80048dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b2c      	ldr	r3, [pc, #176]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004848:	492e      	ldr	r1, [pc, #184]	@ (8004904 <HAL_RCC_OscConfig+0x68c>)
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fe fccb 	bl	80031e8 <HAL_GetTick>
 8004852:	0003      	movs	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004858:	f7fe fcc6 	bl	80031e8 <HAL_GetTick>
 800485c:	0002      	movs	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e086      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486a:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	2380      	movs	r3, #128	@ 0x80
 8004870:	049b      	lsls	r3, r3, #18
 8004872:	4013      	ands	r3, r2
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004876:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	220f      	movs	r2, #15
 800487c:	4393      	bics	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004884:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 8004886:	430a      	orrs	r2, r1
 8004888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800488a:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4a1e      	ldr	r2, [pc, #120]	@ (8004908 <HAL_RCC_OscConfig+0x690>)
 8004890:	4013      	ands	r3, r2
 8004892:	0019      	movs	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	431a      	orrs	r2, r3
 800489e:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	0449      	lsls	r1, r1, #17
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fe fc99 	bl	80031e8 <HAL_GetTick>
 80048b6:	0003      	movs	r3, r0
 80048b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fe fc94 	bl	80031e8 <HAL_GetTick>
 80048c0:	0002      	movs	r2, r0
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e054      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ce:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	049b      	lsls	r3, r3, #18
 80048d6:	4013      	ands	r3, r2
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x644>
 80048da:	e04c      	b.n	8004976 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <HAL_RCC_OscConfig+0x67c>)
 80048e2:	4908      	ldr	r1, [pc, #32]	@ (8004904 <HAL_RCC_OscConfig+0x68c>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe fc7e 	bl	80031e8 <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f0:	e015      	b.n	800491e <HAL_RCC_OscConfig+0x6a6>
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	40021000 	.word	0x40021000
 80048f8:	00001388 	.word	0x00001388
 80048fc:	efffffff 	.word	0xefffffff
 8004900:	fffeffff 	.word	0xfffeffff
 8004904:	feffffff 	.word	0xfeffffff
 8004908:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe fc6c 	bl	80031e8 <HAL_GetTick>
 8004910:	0002      	movs	r2, r0
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e02c      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491e:	4b18      	ldr	r3, [pc, #96]	@ (8004980 <HAL_RCC_OscConfig+0x708>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	049b      	lsls	r3, r3, #18
 8004926:	4013      	ands	r3, r2
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x694>
 800492a:	e024      	b.n	8004976 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e01f      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <HAL_RCC_OscConfig+0x708>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <HAL_RCC_OscConfig+0x708>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	23c0      	movs	r3, #192	@ 0xc0
 8004948:	025b      	lsls	r3, r3, #9
 800494a:	401a      	ands	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	429a      	cmp	r2, r3
 8004952:	d10e      	bne.n	8004972 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	220f      	movs	r2, #15
 8004958:	401a      	ands	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d107      	bne.n	8004972 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	23f0      	movs	r3, #240	@ 0xf0
 8004966:	039b      	lsls	r3, r3, #14
 8004968:	401a      	ands	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b008      	add	sp, #32
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0bf      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b61      	ldr	r3, [pc, #388]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2201      	movs	r2, #1
 800499e:	4013      	ands	r3, r2
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d911      	bls.n	80049ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2201      	movs	r2, #1
 80049ac:	4393      	bics	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b8:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2201      	movs	r2, #1
 80049be:	4013      	ands	r3, r2
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0a6      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2202      	movs	r2, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d015      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2204      	movs	r2, #4
 80049da:	4013      	ands	r3, r2
 80049dc:	d006      	beq.n	80049ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049de:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b50      	ldr	r3, [pc, #320]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 80049e4:	21e0      	movs	r1, #224	@ 0xe0
 80049e6:	00c9      	lsls	r1, r1, #3
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	22f0      	movs	r2, #240	@ 0xf0
 80049f2:	4393      	bics	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	4013      	ands	r3, r2
 8004a08:	d04c      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b44      	ldr	r3, [pc, #272]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	029b      	lsls	r3, r3, #10
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d120      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07a      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	@ 0x80
 8004a30:	049b      	lsls	r3, r3, #18
 8004a32:	4013      	ands	r3, r2
 8004a34:	d114      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06e      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a46:	2380      	movs	r3, #128	@ 0x80
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e062      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b34      	ldr	r3, [pc, #208]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e05b      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	4393      	bics	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a74:	f7fe fbb8 	bl	80031e8 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7c:	e009      	b.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7e:	f7fe fbb3 	bl	80031e8 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	4a27      	ldr	r2, [pc, #156]	@ (8004b28 <HAL_RCC_ClockConfig+0x1a4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e042      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	220c      	movs	r2, #12
 8004a98:	401a      	ands	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1ec      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4013      	ands	r3, r2
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d211      	bcs.n	8004ad6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4393      	bics	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	4b18      	ldr	r3, [pc, #96]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac4:	4b16      	ldr	r3, [pc, #88]	@ (8004b20 <HAL_RCC_ClockConfig+0x19c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e020      	b.n	8004b18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2204      	movs	r2, #4
 8004adc:	4013      	ands	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	@ (8004b2c <HAL_RCC_ClockConfig+0x1a8>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	0019      	movs	r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004af4:	f000 f820 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af8:	0001      	movs	r1, r0
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_RCC_ClockConfig+0x1a0>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	220f      	movs	r2, #15
 8004b02:	4013      	ands	r3, r2
 8004b04:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <HAL_RCC_ClockConfig+0x1ac>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	000a      	movs	r2, r1
 8004b0a:	40da      	lsrs	r2, r3
 8004b0c:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b0>)
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b10:	2003      	movs	r0, #3
 8004b12:	f7fe fb23 	bl	800315c <HAL_InitTick>
  
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
 8004b28:	00001388 	.word	0x00001388
 8004b2c:	fffff8ff 	.word	0xfffff8ff
 8004b30:	08005d88 	.word	0x08005d88
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b52:	4b2d      	ldr	r3, [pc, #180]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	220c      	movs	r2, #12
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d046      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xb8>
 8004b62:	d848      	bhi.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xbe>
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d002      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0x36>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d003      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x3c>
 8004b6c:	e043      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b6e:	4b27      	ldr	r3, [pc, #156]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b70:	613b      	str	r3, [r7, #16]
      break;
 8004b72:	e043      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	0c9b      	lsrs	r3, r3, #18
 8004b78:	220f      	movs	r2, #15
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	4a24      	ldr	r2, [pc, #144]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b82:	4b21      	ldr	r3, [pc, #132]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	220f      	movs	r2, #15
 8004b88:	4013      	ands	r3, r2
 8004b8a:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	23c0      	movs	r3, #192	@ 0xc0
 8004b94:	025b      	lsls	r3, r3, #9
 8004b96:	401a      	ands	r2, r3
 8004b98:	2380      	movs	r3, #128	@ 0x80
 8004b9a:	025b      	lsls	r3, r3, #9
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	481a      	ldr	r0, [pc, #104]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ba4:	f7fb faae 	bl	8000104 <__udivsi3>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	001a      	movs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4353      	muls	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e01a      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	23c0      	movs	r3, #192	@ 0xc0
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	401a      	ands	r2, r3
 8004bbc:	23c0      	movs	r3, #192	@ 0xc0
 8004bbe:	025b      	lsls	r3, r3, #9
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4814      	ldr	r0, [pc, #80]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004bc8:	f7fb fa9c 	bl	8000104 <__udivsi3>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	001a      	movs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4353      	muls	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	480c      	ldr	r0, [pc, #48]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bdc:	f7fb fa92 	bl	8000104 <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	001a      	movs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4353      	muls	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	613b      	str	r3, [r7, #16]
      break;
 8004bee:	e005      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004bf2:	613b      	str	r3, [r7, #16]
      break;
 8004bf4:	e002      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bf8:	613b      	str	r3, [r7, #16]
      break;
 8004bfa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004bfc:	693b      	ldr	r3, [r7, #16]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b006      	add	sp, #24
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	007a1200 	.word	0x007a1200
 8004c10:	080067a8 	.word	0x080067a8
 8004c14:	080067b8 	.word	0x080067b8
 8004c18:	02dc6c00 	.word	0x02dc6c00

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	@ 0x80
 8004c32:	025b      	lsls	r3, r3, #9
 8004c34:	4013      	ands	r3, r2
 8004c36:	d100      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004c38:	e08e      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2017      	movs	r0, #23
 8004c3c:	183b      	adds	r3, r7, r0
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c42:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	055b      	lsls	r3, r3, #21
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d110      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c54:	2180      	movs	r1, #128	@ 0x80
 8004c56:	0549      	lsls	r1, r1, #21
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	61da      	str	r2, [r3, #28]
 8004c5c:	4b67      	ldr	r3, [pc, #412]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	2380      	movs	r3, #128	@ 0x80
 8004c62:	055b      	lsls	r3, r3, #21
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6a:	183b      	adds	r3, r7, r0
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b63      	ldr	r3, [pc, #396]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d11a      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7c:	4b60      	ldr	r3, [pc, #384]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b5f      	ldr	r3, [pc, #380]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c82:	2180      	movs	r1, #128	@ 0x80
 8004c84:	0049      	lsls	r1, r1, #1
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fe faad 	bl	80031e8 <HAL_GetTick>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c92:	e008      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c94:	f7fe faa8 	bl	80031e8 <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0a6      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b56      	ldr	r3, [pc, #344]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2380      	movs	r3, #128	@ 0x80
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb2:	4b52      	ldr	r3, [pc, #328]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	23c0      	movs	r3, #192	@ 0xc0
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d034      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	23c0      	movs	r3, #192	@ 0xc0
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d02c      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd4:	4b49      	ldr	r3, [pc, #292]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	4b46      	ldr	r3, [pc, #280]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce4:	2180      	movs	r1, #128	@ 0x80
 8004ce6:	0249      	lsls	r1, r1, #9
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cec:	4b43      	ldr	r3, [pc, #268]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cee:	6a1a      	ldr	r2, [r3, #32]
 8004cf0:	4b42      	ldr	r3, [pc, #264]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cf2:	4945      	ldr	r1, [pc, #276]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cf8:	4b40      	ldr	r3, [pc, #256]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fe fa6f 	bl	80031e8 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	e009      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fe fa6a 	bl	80031e8 <HAL_GetTick>
 8004d14:	0002      	movs	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e067      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4a34      	ldr	r2, [pc, #208]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d42:	2317      	movs	r3, #23
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d52:	492f      	ldr	r1, [pc, #188]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004d54:	400a      	ands	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d62:	4b26      	ldr	r3, [pc, #152]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	2203      	movs	r2, #3
 8004d68:	4393      	bics	r3, r2
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	4b22      	ldr	r3, [pc, #136]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d72:	430a      	orrs	r2, r1
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d80:	4b1e      	ldr	r3, [pc, #120]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d84:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d90:	430a      	orrs	r2, r1
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2380      	movs	r3, #128	@ 0x80
 8004d9a:	02db      	lsls	r3, r3, #11
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004da0:	4b16      	ldr	r3, [pc, #88]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	4b13      	ldr	r3, [pc, #76]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2220      	movs	r2, #32
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	2240      	movs	r2, #64	@ 0x40
 8004de4:	4393      	bics	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	4b03      	ldr	r3, [pc, #12]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	0018      	movs	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b006      	add	sp, #24
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40007000 	.word	0x40007000
 8004e04:	fffffcff 	.word	0xfffffcff
 8004e08:	fffeffff 	.word	0xfffeffff
 8004e0c:	00001388 	.word	0x00001388
 8004e10:	efffffff 	.word	0xefffffff
 8004e14:	fffcffff 	.word	0xfffcffff
 8004e18:	fff3ffff 	.word	0xfff3ffff

08004e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0a8      	b.n	8004f80 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	2382      	movs	r3, #130	@ 0x82
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d009      	beq.n	8004e56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
 8004e48:	e005      	b.n	8004e56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	225d      	movs	r2, #93	@ 0x5d
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	225c      	movs	r2, #92	@ 0x5c
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7fb fcf2 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	225d      	movs	r2, #93	@ 0x5d
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2140      	movs	r1, #64	@ 0x40
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	23e0      	movs	r3, #224	@ 0xe0
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d902      	bls.n	8004ea2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e002      	b.n	8004ea8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ea2:	2380      	movs	r3, #128	@ 0x80
 8004ea4:	015b      	lsls	r3, r3, #5
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	23f0      	movs	r3, #240	@ 0xf0
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d008      	beq.n	8004ec6 <HAL_SPI_Init+0xaa>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	23e0      	movs	r3, #224	@ 0xe0
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	2382      	movs	r3, #130	@ 0x82
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	2384      	movs	r3, #132	@ 0x84
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	400b      	ands	r3, r1
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2101      	movs	r1, #1
 8004eec:	400b      	ands	r3, r1
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6999      	ldr	r1, [r3, #24]
 8004ef4:	2380      	movs	r3, #128	@ 0x80
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	400b      	ands	r3, r1
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2138      	movs	r1, #56	@ 0x38
 8004f02:	400b      	ands	r3, r1
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	2180      	movs	r1, #128	@ 0x80
 8004f0c:	400b      	ands	r3, r1
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	0011      	movs	r1, r2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	2110      	movs	r1, #16
 8004f34:	400b      	ands	r3, r1
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	2108      	movs	r1, #8
 8004f3e:	400b      	ands	r3, r1
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	23f0      	movs	r3, #240	@ 0xf0
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	400b      	ands	r3, r1
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	0011      	movs	r1, r2
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	401a      	ands	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4907      	ldr	r1, [pc, #28]	@ (8004f88 <HAL_SPI_Init+0x16c>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	225d      	movs	r2, #93	@ 0x5d
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b004      	add	sp, #16
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fffff7ff 	.word	0xfffff7ff

08004f8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	1dbb      	adds	r3, r7, #6
 8004f9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f9c:	231f      	movs	r3, #31
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	225c      	movs	r2, #92	@ 0x5c
 8004fa8:	5c9b      	ldrb	r3, [r3, r2]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Transmit+0x26>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e147      	b.n	8005242 <HAL_SPI_Transmit+0x2b6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	225c      	movs	r2, #92	@ 0x5c
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fba:	f7fe f915 	bl	80031e8 <HAL_GetTick>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004fc2:	2316      	movs	r3, #22
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	1dba      	adds	r2, r7, #6
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	225d      	movs	r2, #93	@ 0x5d
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d004      	beq.n	8004fe2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004fd8:	231f      	movs	r3, #31
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	2202      	movs	r2, #2
 8004fde:	701a      	strb	r2, [r3, #0]
    goto error;
 8004fe0:	e128      	b.n	8005234 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_SPI_Transmit+0x64>
 8004fe8:	1dbb      	adds	r3, r7, #6
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004ff0:	231f      	movs	r3, #31
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ff8:	e11c      	b.n	8005234 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	225d      	movs	r2, #93	@ 0x5d
 8004ffe:	2103      	movs	r1, #3
 8005000:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1dba      	adds	r2, r7, #6
 8005012:	8812      	ldrh	r2, [r2, #0]
 8005014:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1dba      	adds	r2, r7, #6
 800501a:	8812      	ldrh	r2, [r2, #0]
 800501c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2244      	movs	r2, #68	@ 0x44
 8005028:	2100      	movs	r1, #0
 800502a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2246      	movs	r2, #70	@ 0x46
 8005030:	2100      	movs	r1, #0
 8005032:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	429a      	cmp	r2, r3
 800504a:	d110      	bne.n	800506e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2140      	movs	r1, #64	@ 0x40
 8005058:	438a      	bics	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2180      	movs	r1, #128	@ 0x80
 8005068:	01c9      	lsls	r1, r1, #7
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2240      	movs	r2, #64	@ 0x40
 8005076:	4013      	ands	r3, r2
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d007      	beq.n	800508c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2140      	movs	r1, #64	@ 0x40
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	23e0      	movs	r3, #224	@ 0xe0
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	429a      	cmp	r2, r3
 8005096:	d952      	bls.n	800513e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <HAL_SPI_Transmit+0x11e>
 80050a0:	2316      	movs	r3, #22
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d143      	bne.n	8005132 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	1c9a      	adds	r2, r3, #2
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ce:	e030      	b.n	8005132 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4013      	ands	r3, r2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d112      	bne.n	8005104 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005102:	e016      	b.n	8005132 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005104:	f7fe f870 	bl	80031e8 <HAL_GetTick>
 8005108:	0002      	movs	r2, r0
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d802      	bhi.n	800511a <HAL_SPI_Transmit+0x18e>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Transmit+0x194>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d108      	bne.n	8005132 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2203      	movs	r2, #3
 8005126:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	225d      	movs	r2, #93	@ 0x5d
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005130:	e080      	b.n	8005234 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1c9      	bne.n	80050d0 <HAL_SPI_Transmit+0x144>
 800513c:	e053      	b.n	80051e6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_SPI_Transmit+0x1c4>
 8005146:	2316      	movs	r3, #22
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d145      	bne.n	80051dc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005176:	e031      	b.n	80051dc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d113      	bne.n	80051ae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ac:	e016      	b.n	80051dc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ae:	f7fe f81b 	bl	80031e8 <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d802      	bhi.n	80051c4 <HAL_SPI_Transmit+0x238>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	d102      	bne.n	80051ca <HAL_SPI_Transmit+0x23e>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80051ca:	231f      	movs	r3, #31
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	2203      	movs	r2, #3
 80051d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	225d      	movs	r2, #93	@ 0x5d
 80051d6:	2101      	movs	r1, #1
 80051d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80051da:	e02b      	b.n	8005234 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c8      	bne.n	8005178 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f000 f95d 	bl	80054ac <SPI_EndRxTxTransaction>
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005222:	231f      	movs	r3, #31
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e003      	b.n	8005234 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	225d      	movs	r2, #93	@ 0x5d
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	225c      	movs	r2, #92	@ 0x5c
 8005238:	2100      	movs	r1, #0
 800523a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800523c:	231f      	movs	r3, #31
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b008      	add	sp, #32
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	1dfb      	adds	r3, r7, #7
 800525a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800525c:	f7fd ffc4 	bl	80031e8 <HAL_GetTick>
 8005260:	0002      	movs	r2, r0
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	18d3      	adds	r3, r2, r3
 800526a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800526c:	f7fd ffbc 	bl	80031e8 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005274:	4b3a      	ldr	r3, [pc, #232]	@ (8005360 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	015b      	lsls	r3, r3, #5
 800527a:	0d1b      	lsrs	r3, r3, #20
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	4353      	muls	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005282:	e058      	b.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	d055      	beq.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800528a:	f7fd ffad 	bl	80031e8 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	429a      	cmp	r2, r3
 8005298:	d902      	bls.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d142      	bne.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	21e0      	movs	r1, #224	@ 0xe0
 80052ac:	438a      	bics	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	2382      	movs	r3, #130	@ 0x82
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d113      	bne.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d005      	beq.n	80052d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2140      	movs	r1, #64	@ 0x40
 80052e0:	438a      	bics	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	019b      	lsls	r3, r3, #6
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d110      	bne.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	491a      	ldr	r1, [pc, #104]	@ (8005364 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2180      	movs	r1, #128	@ 0x80
 800530c:	0189      	lsls	r1, r1, #6
 800530e:	430a      	orrs	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	225d      	movs	r2, #93	@ 0x5d
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	225c      	movs	r2, #92	@ 0x5c
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e017      	b.n	8005356 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3b01      	subs	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	425a      	negs	r2, r3
 8005346:	4153      	adcs	r3, r2
 8005348:	b2db      	uxtb	r3, r3
 800534a:	001a      	movs	r2, r3
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d197      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b008      	add	sp, #32
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	20000000 	.word	0x20000000
 8005364:	ffffdfff 	.word	0xffffdfff

08005368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	@ 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005376:	2317      	movs	r3, #23
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800537e:	f7fd ff33 	bl	80031e8 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	18d3      	adds	r3, r2, r3
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800538e:	f7fd ff2b 	bl	80031e8 <HAL_GetTick>
 8005392:	0003      	movs	r3, r0
 8005394:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800539e:	4b41      	ldr	r3, [pc, #260]	@ (80054a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	0013      	movs	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	00da      	lsls	r2, r3, #3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	0d1b      	lsrs	r3, r3, #20
 80053ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b0:	4353      	muls	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053b4:	e068      	b.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	23c0      	movs	r3, #192	@ 0xc0
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	429a      	cmp	r2, r3
 80053be:	d10a      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	2117      	movs	r1, #23
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	d055      	beq.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053dc:	f7fd ff04 	bl	80031e8 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d902      	bls.n	80053f2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d142      	bne.n	8005478 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	21e0      	movs	r1, #224	@ 0xe0
 80053fe:	438a      	bics	r2, r1
 8005400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	2382      	movs	r3, #130	@ 0x82
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	429a      	cmp	r2, r3
 800540c:	d113      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xce>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	429a      	cmp	r2, r3
 8005418:	d005      	beq.n	8005426 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	429a      	cmp	r2, r3
 8005424:	d107      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2140      	movs	r1, #64	@ 0x40
 8005432:	438a      	bics	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	429a      	cmp	r2, r3
 8005440:	d110      	bne.n	8005464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4916      	ldr	r1, [pc, #88]	@ (80054a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800544e:	400a      	ands	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2180      	movs	r1, #128	@ 0x80
 800545e:	0189      	lsls	r1, r1, #6
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	225d      	movs	r2, #93	@ 0x5d
 8005468:	2101      	movs	r1, #1
 800546a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	225c      	movs	r2, #92	@ 0x5c
 8005470:	2100      	movs	r1, #0
 8005472:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e010      	b.n	800549a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3b01      	subs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d18e      	bne.n	80053b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b00a      	add	sp, #40	@ 0x28
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	20000000 	.word	0x20000000
 80054a8:	ffffdfff 	.word	0xffffdfff

080054ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	23c0      	movs	r3, #192	@ 0xc0
 80054bc:	0159      	lsls	r1, r3, #5
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	0013      	movs	r3, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	f7ff ff4e 	bl	8005368 <SPI_WaitFifoStateUntilTimeout>
 80054cc:	1e03      	subs	r3, r0, #0
 80054ce:	d007      	beq.n	80054e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d4:	2220      	movs	r2, #32
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e027      	b.n	8005530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	0013      	movs	r3, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	2180      	movs	r1, #128	@ 0x80
 80054ee:	f7ff fead 	bl	800524c <SPI_WaitFlagStateUntilTimeout>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d007      	beq.n	8005506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	2220      	movs	r2, #32
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e014      	b.n	8005530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	23c0      	movs	r3, #192	@ 0xc0
 800550a:	00d9      	lsls	r1, r3, #3
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	0013      	movs	r3, r2
 8005514:	2200      	movs	r2, #0
 8005516:	f7ff ff27 	bl	8005368 <SPI_WaitFifoStateUntilTimeout>
 800551a:	1e03      	subs	r3, r0, #0
 800551c:	d007      	beq.n	800552e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	2220      	movs	r2, #32
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e000      	b.n	8005530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b004      	add	sp, #16
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e042      	b.n	80055d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223d      	movs	r2, #61	@ 0x3d
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	223c      	movs	r2, #60	@ 0x3c
 800555a:	2100      	movs	r1, #0
 800555c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f7fb fac1 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	223d      	movs	r2, #61	@ 0x3d
 800556a:	2102      	movs	r1, #2
 800556c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3304      	adds	r3, #4
 8005576:	0019      	movs	r1, r3
 8005578:	0010      	movs	r0, r2
 800557a:	f000 f94b 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2246      	movs	r2, #70	@ 0x46
 8005582:	2101      	movs	r1, #1
 8005584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	223e      	movs	r2, #62	@ 0x3e
 800558a:	2101      	movs	r1, #1
 800558c:	5499      	strb	r1, [r3, r2]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	223f      	movs	r2, #63	@ 0x3f
 8005592:	2101      	movs	r1, #1
 8005594:	5499      	strb	r1, [r3, r2]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2240      	movs	r2, #64	@ 0x40
 800559a:	2101      	movs	r1, #1
 800559c:	5499      	strb	r1, [r3, r2]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2241      	movs	r2, #65	@ 0x41
 80055a2:	2101      	movs	r1, #1
 80055a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2242      	movs	r2, #66	@ 0x42
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2243      	movs	r2, #67	@ 0x43
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2244      	movs	r2, #68	@ 0x44
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2245      	movs	r2, #69	@ 0x45
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	223d      	movs	r2, #61	@ 0x3d
 80055ca:	2101      	movs	r1, #1
 80055cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	223d      	movs	r2, #61	@ 0x3d
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d001      	beq.n	80055f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e033      	b.n	8005658 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	223d      	movs	r2, #61	@ 0x3d
 80055f4:	2102      	movs	r1, #2
 80055f6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <HAL_TIM_Base_Start+0x88>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <HAL_TIM_Base_Start+0x4a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	05db      	lsls	r3, r3, #23
 800560a:	429a      	cmp	r2, r3
 800560c:	d009      	beq.n	8005622 <HAL_TIM_Base_Start+0x4a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a14      	ldr	r2, [pc, #80]	@ (8005664 <HAL_TIM_Base_Start+0x8c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIM_Base_Start+0x4a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a12      	ldr	r2, [pc, #72]	@ (8005668 <HAL_TIM_Base_Start+0x90>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d111      	bne.n	8005646 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2207      	movs	r2, #7
 800562a:	4013      	ands	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b06      	cmp	r3, #6
 8005632:	d010      	beq.n	8005656 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2101      	movs	r1, #1
 8005640:	430a      	orrs	r2, r1
 8005642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005644:	e007      	b.n	8005656 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2101      	movs	r1, #1
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40014000 	.word	0x40014000

0800566c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	230f      	movs	r3, #15
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	223c      	movs	r2, #60	@ 0x3c
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIM_ConfigClockSource+0x20>
 8005688:	2302      	movs	r3, #2
 800568a:	e0bc      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x19a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	223c      	movs	r2, #60	@ 0x3c
 8005690:	2101      	movs	r1, #1
 8005692:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	223d      	movs	r2, #61	@ 0x3d
 8005698:	2102      	movs	r1, #2
 800569a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2277      	movs	r2, #119	@ 0x77
 80056a8:	4393      	bics	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4a58      	ldr	r2, [pc, #352]	@ (8005810 <HAL_TIM_ConfigClockSource+0x1a4>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2280      	movs	r2, #128	@ 0x80
 80056c2:	0192      	lsls	r2, r2, #6
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d040      	beq.n	800574a <HAL_TIM_ConfigClockSource+0xde>
 80056c8:	2280      	movs	r2, #128	@ 0x80
 80056ca:	0192      	lsls	r2, r2, #6
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d900      	bls.n	80056d2 <HAL_TIM_ConfigClockSource+0x66>
 80056d0:	e088      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 80056d2:	2280      	movs	r2, #128	@ 0x80
 80056d4:	0152      	lsls	r2, r2, #5
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d100      	bne.n	80056dc <HAL_TIM_ConfigClockSource+0x70>
 80056da:	e088      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x182>
 80056dc:	2280      	movs	r2, #128	@ 0x80
 80056de:	0152      	lsls	r2, r2, #5
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d900      	bls.n	80056e6 <HAL_TIM_ConfigClockSource+0x7a>
 80056e4:	e07e      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 80056e6:	2b70      	cmp	r3, #112	@ 0x70
 80056e8:	d018      	beq.n	800571c <HAL_TIM_ConfigClockSource+0xb0>
 80056ea:	d900      	bls.n	80056ee <HAL_TIM_ConfigClockSource+0x82>
 80056ec:	e07a      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 80056ee:	2b60      	cmp	r3, #96	@ 0x60
 80056f0:	d04f      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x126>
 80056f2:	d900      	bls.n	80056f6 <HAL_TIM_ConfigClockSource+0x8a>
 80056f4:	e076      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 80056f6:	2b50      	cmp	r3, #80	@ 0x50
 80056f8:	d03b      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x106>
 80056fa:	d900      	bls.n	80056fe <HAL_TIM_ConfigClockSource+0x92>
 80056fc:	e072      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d057      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x146>
 8005702:	d900      	bls.n	8005706 <HAL_TIM_ConfigClockSource+0x9a>
 8005704:	e06e      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 8005706:	2b30      	cmp	r3, #48	@ 0x30
 8005708:	d063      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x166>
 800570a:	d86b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d060      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x166>
 8005710:	d868      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d05d      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x166>
 8005716:	2b10      	cmp	r3, #16
 8005718:	d05b      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x166>
 800571a:	e063      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800572c:	f000 f97a 	bl	8005a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2277      	movs	r2, #119	@ 0x77
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
      break;
 8005748:	e052      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	f000 f963 	bl	8005a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2180      	movs	r1, #128	@ 0x80
 800576a:	01c9      	lsls	r1, r1, #7
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
      break;
 8005770:	e03e      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	001a      	movs	r2, r3
 8005780:	f000 f8d6 	bl	8005930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2150      	movs	r1, #80	@ 0x50
 800578a:	0018      	movs	r0, r3
 800578c:	f000 f930 	bl	80059f0 <TIM_ITRx_SetConfig>
      break;
 8005790:	e02e      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579e:	001a      	movs	r2, r3
 80057a0:	f000 f8f4 	bl	800598c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2160      	movs	r1, #96	@ 0x60
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 f920 	bl	80059f0 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e01e      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	001a      	movs	r2, r3
 80057c0:	f000 f8b6 	bl	8005930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2140      	movs	r1, #64	@ 0x40
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 f910 	bl	80059f0 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e00e      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0019      	movs	r1, r3
 80057dc:	0010      	movs	r0, r2
 80057de:	f000 f907 	bl	80059f0 <TIM_ITRx_SetConfig>
      break;
 80057e2:	e005      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80057e4:	230f      	movs	r3, #15
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
      break;
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80057ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	223d      	movs	r2, #61	@ 0x3d
 80057f4:	2101      	movs	r1, #1
 80057f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223c      	movs	r2, #60	@ 0x3c
 80057fc:	2100      	movs	r1, #0
 80057fe:	5499      	strb	r1, [r3, r2]

  return status;
 8005800:	230f      	movs	r3, #15
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	781b      	ldrb	r3, [r3, #0]
}
 8005806:	0018      	movs	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	b004      	add	sp, #16
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	ffff00ff 	.word	0xffff00ff

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3b      	ldr	r2, [pc, #236]	@ (8005914 <TIM_Base_SetConfig+0x100>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d008      	beq.n	800583e <TIM_Base_SetConfig+0x2a>
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	2380      	movs	r3, #128	@ 0x80
 8005830:	05db      	lsls	r3, r3, #23
 8005832:	429a      	cmp	r2, r3
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0x2a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a37      	ldr	r2, [pc, #220]	@ (8005918 <TIM_Base_SetConfig+0x104>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2270      	movs	r2, #112	@ 0x70
 8005842:	4393      	bics	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a30      	ldr	r2, [pc, #192]	@ (8005914 <TIM_Base_SetConfig+0x100>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	2380      	movs	r3, #128	@ 0x80
 800585c:	05db      	lsls	r3, r3, #23
 800585e:	429a      	cmp	r2, r3
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2c      	ldr	r2, [pc, #176]	@ (8005918 <TIM_Base_SetConfig+0x104>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	@ (800591c <TIM_Base_SetConfig+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	@ (8005920 <TIM_Base_SetConfig+0x10c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	@ (8005924 <TIM_Base_SetConfig+0x110>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a28      	ldr	r2, [pc, #160]	@ (8005928 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a27      	ldr	r2, [pc, #156]	@ (800592c <TIM_Base_SetConfig+0x118>)
 800588e:	4013      	ands	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2280      	movs	r2, #128	@ 0x80
 80058a0:	4393      	bics	r3, r2
 80058a2:	001a      	movs	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a13      	ldr	r2, [pc, #76]	@ (8005914 <TIM_Base_SetConfig+0x100>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a14      	ldr	r2, [pc, #80]	@ (8005920 <TIM_Base_SetConfig+0x10c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a13      	ldr	r2, [pc, #76]	@ (8005924 <TIM_Base_SetConfig+0x110>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <TIM_Base_SetConfig+0x114>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d103      	bne.n	80058ea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2201      	movs	r2, #1
 8005902:	4393      	bics	r3, r2
 8005904:	001a      	movs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]
  }
}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	46bd      	mov	sp, r7
 800590e:	b004      	add	sp, #16
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40000400 	.word	0x40000400
 800591c:	40002000 	.word	0x40002000
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800
 800592c:	fffffcff 	.word	0xfffffcff

08005930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	2201      	movs	r2, #1
 8005948:	4393      	bics	r3, r2
 800594a:	001a      	movs	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	22f0      	movs	r2, #240	@ 0xf0
 800595a:	4393      	bics	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	220a      	movs	r2, #10
 800596c:	4393      	bics	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	46c0      	nop			@ (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b006      	add	sp, #24
 800598a:	bd80      	pop	{r7, pc}

0800598c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	2210      	movs	r2, #16
 80059a4:	4393      	bics	r3, r2
 80059a6:	001a      	movs	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a0d      	ldr	r2, [pc, #52]	@ (80059ec <TIM_TI2_ConfigInputStage+0x60>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	22a0      	movs	r2, #160	@ 0xa0
 80059c8:	4393      	bics	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b006      	add	sp, #24
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	ffff0fff 	.word	0xffff0fff

080059f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2270      	movs	r2, #112	@ 0x70
 8005a04:	4393      	bics	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	2207      	movs	r2, #7
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	609a      	str	r2, [r3, #8]
}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <TIM_ETR_SetConfig+0x3c>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	021a      	lsls	r2, r3, #8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	609a      	str	r2, [r3, #8]
}
 8005a58:	46c0      	nop			@ (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b006      	add	sp, #24
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	ffff00ff 	.word	0xffff00ff

08005a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	223c      	movs	r2, #60	@ 0x3c
 8005a72:	5c9b      	ldrb	r3, [r3, r2]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e047      	b.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223c      	movs	r2, #60	@ 0x3c
 8005a80:	2101      	movs	r1, #1
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	223d      	movs	r2, #61	@ 0x3d
 8005a88:	2102      	movs	r1, #2
 8005a8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2270      	movs	r2, #112	@ 0x70
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2380      	movs	r3, #128	@ 0x80
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a11      	ldr	r2, [pc, #68]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a10      	ldr	r2, [pc, #64]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2280      	movs	r2, #128	@ 0x80
 8005ae4:	4393      	bics	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	223d      	movs	r2, #61	@ 0x3d
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	223c      	movs	r2, #60	@ 0x3c
 8005b06:	2100      	movs	r1, #0
 8005b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40014000 	.word	0x40014000

08005b20 <__itoa>:
 8005b20:	1e93      	subs	r3, r2, #2
 8005b22:	b510      	push	{r4, lr}
 8005b24:	000c      	movs	r4, r1
 8005b26:	2b22      	cmp	r3, #34	@ 0x22
 8005b28:	d904      	bls.n	8005b34 <__itoa+0x14>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	001c      	movs	r4, r3
 8005b2e:	700b      	strb	r3, [r1, #0]
 8005b30:	0020      	movs	r0, r4
 8005b32:	bd10      	pop	{r4, pc}
 8005b34:	2a0a      	cmp	r2, #10
 8005b36:	d109      	bne.n	8005b4c <__itoa+0x2c>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	da07      	bge.n	8005b4c <__itoa+0x2c>
 8005b3c:	232d      	movs	r3, #45	@ 0x2d
 8005b3e:	700b      	strb	r3, [r1, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	4240      	negs	r0, r0
 8005b44:	1861      	adds	r1, r4, r1
 8005b46:	f000 f807 	bl	8005b58 <__utoa>
 8005b4a:	e7f1      	b.n	8005b30 <__itoa+0x10>
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	e7f9      	b.n	8005b44 <__itoa+0x24>

08005b50 <itoa>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f7ff ffe5 	bl	8005b20 <__itoa>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <__utoa>:
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	000c      	movs	r4, r1
 8005b5c:	0016      	movs	r6, r2
 8005b5e:	b08d      	sub	sp, #52	@ 0x34
 8005b60:	2225      	movs	r2, #37	@ 0x25
 8005b62:	0007      	movs	r7, r0
 8005b64:	4915      	ldr	r1, [pc, #84]	@ (8005bbc <__utoa+0x64>)
 8005b66:	a802      	add	r0, sp, #8
 8005b68:	f000 f856 	bl	8005c18 <memcpy>
 8005b6c:	1e62      	subs	r2, r4, #1
 8005b6e:	1eb3      	subs	r3, r6, #2
 8005b70:	2500      	movs	r5, #0
 8005b72:	9201      	str	r2, [sp, #4]
 8005b74:	2b22      	cmp	r3, #34	@ 0x22
 8005b76:	d904      	bls.n	8005b82 <__utoa+0x2a>
 8005b78:	7025      	strb	r5, [r4, #0]
 8005b7a:	002c      	movs	r4, r5
 8005b7c:	0020      	movs	r0, r4
 8005b7e:	b00d      	add	sp, #52	@ 0x34
 8005b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b82:	0038      	movs	r0, r7
 8005b84:	0031      	movs	r1, r6
 8005b86:	f7fa fb43 	bl	8000210 <__aeabi_uidivmod>
 8005b8a:	000b      	movs	r3, r1
 8005b8c:	aa02      	add	r2, sp, #8
 8005b8e:	5cd3      	ldrb	r3, [r2, r3]
 8005b90:	9a01      	ldr	r2, [sp, #4]
 8005b92:	0029      	movs	r1, r5
 8005b94:	3501      	adds	r5, #1
 8005b96:	5553      	strb	r3, [r2, r5]
 8005b98:	003b      	movs	r3, r7
 8005b9a:	0007      	movs	r7, r0
 8005b9c:	429e      	cmp	r6, r3
 8005b9e:	d9f0      	bls.n	8005b82 <__utoa+0x2a>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	0022      	movs	r2, r4
 8005ba4:	5563      	strb	r3, [r4, r5]
 8005ba6:	000b      	movs	r3, r1
 8005ba8:	1ac8      	subs	r0, r1, r3
 8005baa:	4283      	cmp	r3, r0
 8005bac:	dde6      	ble.n	8005b7c <__utoa+0x24>
 8005bae:	7810      	ldrb	r0, [r2, #0]
 8005bb0:	5ce5      	ldrb	r5, [r4, r3]
 8005bb2:	7015      	strb	r5, [r2, #0]
 8005bb4:	54e0      	strb	r0, [r4, r3]
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	e7f5      	b.n	8005ba8 <__utoa+0x50>
 8005bbc:	080067c8 	.word	0x080067c8

08005bc0 <memset>:
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	1882      	adds	r2, r0, r2
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d100      	bne.n	8005bca <memset+0xa>
 8005bc8:	4770      	bx	lr
 8005bca:	7019      	strb	r1, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	e7f9      	b.n	8005bc4 <memset+0x4>

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	4c0c      	ldr	r4, [pc, #48]	@ (8005c08 <__libc_init_array+0x38>)
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8005c0c <__libc_init_array+0x3c>)
 8005bd8:	1b64      	subs	r4, r4, r5
 8005bda:	10a4      	asrs	r4, r4, #2
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	2600      	movs	r6, #0
 8005be2:	f000 f823 	bl	8005c2c <_init>
 8005be6:	4c0a      	ldr	r4, [pc, #40]	@ (8005c10 <__libc_init_array+0x40>)
 8005be8:	4d0a      	ldr	r5, [pc, #40]	@ (8005c14 <__libc_init_array+0x44>)
 8005bea:	1b64      	subs	r4, r4, r5
 8005bec:	10a4      	asrs	r4, r4, #2
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	00b3      	lsls	r3, r6, #2
 8005bf6:	58eb      	ldr	r3, [r5, r3]
 8005bf8:	4798      	blx	r3
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	00b3      	lsls	r3, r6, #2
 8005c00:	58eb      	ldr	r3, [r5, r3]
 8005c02:	4798      	blx	r3
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	080067f0 	.word	0x080067f0
 8005c0c:	080067f0 	.word	0x080067f0
 8005c10:	080067f4 	.word	0x080067f4
 8005c14:	080067f0 	.word	0x080067f0

08005c18 <memcpy>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d100      	bne.n	8005c22 <memcpy+0xa>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	5ccc      	ldrb	r4, [r1, r3]
 8005c24:	54c4      	strb	r4, [r0, r3]
 8005c26:	3301      	adds	r3, #1
 8005c28:	e7f8      	b.n	8005c1c <memcpy+0x4>
	...

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
