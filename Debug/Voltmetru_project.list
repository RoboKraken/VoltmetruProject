
Voltmetru_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032dc  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800339c  0800339c  0000439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080034ac  080034ac  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080034ac  080034ac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ac  080034ac  000044ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034b0  080034b0  000044b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  2000000c  080034c0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  080034c0  00005634  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000154a5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000069  00000000  00000000  0001a4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00012266  00000000  00000000  0001a542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028c0  00000000  00000000  0002c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001188  00000000  00000000  0002f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b4bc1  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000dd0  00000000  00000000  000e4db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001bc9a  00000000  00000000  000e5b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010181b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f2c  00000000  00000000  00101860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003384 	.word	0x08003384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003384 	.word	0x08003384

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	@ (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	f000 f9c6 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	@ (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	@ (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	@ (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f003 f875 	bl	800333c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f9c7 	bl	80005e4 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000264:	080034b4 	.word	0x080034b4
  ldr r2, =_sbss
 8000268:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800026c:	20000634 	.word	0x20000634

08000270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_COMP_IRQHandler>
	...

08000274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <HAL_MspInit+0x50>)
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <HAL_MspInit+0x50>)
 8000280:	2101      	movs	r1, #1
 8000282:	430a      	orrs	r2, r1
 8000284:	619a      	str	r2, [r3, #24]
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <HAL_MspInit+0x50>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	2201      	movs	r2, #1
 800028c:	4013      	ands	r3, r2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <HAL_MspInit+0x50>)
 8000294:	69da      	ldr	r2, [r3, #28]
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <HAL_MspInit+0x50>)
 8000298:	2180      	movs	r1, #128	@ 0x80
 800029a:	0549      	lsls	r1, r1, #21
 800029c:	430a      	orrs	r2, r1
 800029e:	61da      	str	r2, [r3, #28]
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <HAL_MspInit+0x50>)
 80002a2:	69da      	ldr	r2, [r3, #28]
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	055b      	lsls	r3, r3, #21
 80002a8:	4013      	ands	r3, r2
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80002ae:	2302      	movs	r3, #2
 80002b0:	425b      	negs	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	2103      	movs	r1, #3
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 ff44 	bl	8001144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000

080002c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b08b      	sub	sp, #44	@ 0x2c
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	2414      	movs	r4, #20
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f003 f826 	bl	800332c <memset>
  if(hadc->Instance==ADC1)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a19      	ldr	r2, [pc, #100]	@ (800034c <HAL_ADC_MspInit+0x84>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d12b      	bne.n	8000342 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002ea:	4b19      	ldr	r3, [pc, #100]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 80002ec:	699a      	ldr	r2, [r3, #24]
 80002ee:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 80002f0:	2180      	movs	r1, #128	@ 0x80
 80002f2:	0089      	lsls	r1, r1, #2
 80002f4:	430a      	orrs	r2, r1
 80002f6:	619a      	str	r2, [r3, #24]
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 80002fa:	699a      	ldr	r2, [r3, #24]
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4013      	ands	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 8000308:	695a      	ldr	r2, [r3, #20]
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 800030c:	2180      	movs	r1, #128	@ 0x80
 800030e:	0289      	lsls	r1, r1, #10
 8000310:	430a      	orrs	r2, r1
 8000312:	615a      	str	r2, [r3, #20]
 8000314:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <HAL_ADC_MspInit+0x88>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	2380      	movs	r3, #128	@ 0x80
 800031a:	029b      	lsls	r3, r3, #10
 800031c:	4013      	ands	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2203      	movs	r2, #3
 8000326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000328:	193b      	adds	r3, r7, r4
 800032a:	2203      	movs	r2, #3
 800032c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000334:	193a      	adds	r2, r7, r4
 8000336:	2390      	movs	r3, #144	@ 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 ff27 	bl	8001190 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b00b      	add	sp, #44	@ 0x2c
 8000348:	bd90      	pop	{r4, r7, pc}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	40012400 	.word	0x40012400
 8000350:	40021000 	.word	0x40021000

08000354 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b08b      	sub	sp, #44	@ 0x2c
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	2414      	movs	r4, #20
 800035e:	193b      	adds	r3, r7, r4
 8000360:	0018      	movs	r0, r3
 8000362:	2314      	movs	r3, #20
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f002 ffe0 	bl	800332c <memset>
  if(hspi->Instance==SPI1)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1c      	ldr	r2, [pc, #112]	@ (80003e4 <HAL_SPI_MspInit+0x90>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d132      	bne.n	80003dc <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 800037c:	2180      	movs	r1, #128	@ 0x80
 800037e:	0149      	lsls	r1, r1, #5
 8000380:	430a      	orrs	r2, r1
 8000382:	619a      	str	r2, [r3, #24]
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 8000386:	699a      	ldr	r2, [r3, #24]
 8000388:	2380      	movs	r3, #128	@ 0x80
 800038a:	015b      	lsls	r3, r3, #5
 800038c:	4013      	ands	r3, r2
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 8000398:	2180      	movs	r1, #128	@ 0x80
 800039a:	0289      	lsls	r1, r1, #10
 800039c:	430a      	orrs	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <HAL_SPI_MspInit+0x94>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	@ 0x80
 80003a6:	029b      	lsls	r3, r3, #10
 80003a8:	4013      	ands	r3, r2
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80003ae:	0021      	movs	r1, r4
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	22a0      	movs	r2, #160	@ 0xa0
 80003b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2202      	movs	r2, #2
 80003ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2203      	movs	r2, #3
 80003c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	2390      	movs	r3, #144	@ 0x90
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 feda 	bl	8001190 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b00b      	add	sp, #44	@ 0x2c
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40013000 	.word	0x40013000
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08b      	sub	sp, #44	@ 0x2c
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	2414      	movs	r4, #20
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	0018      	movs	r0, r3
 80003fa:	2314      	movs	r3, #20
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f002 ff94 	bl	800332c <memset>
  if(huart->Instance==USART2)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1c      	ldr	r2, [pc, #112]	@ (800047c <HAL_UART_MspInit+0x90>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d132      	bne.n	8000474 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800040e:	4b1c      	ldr	r3, [pc, #112]	@ (8000480 <HAL_UART_MspInit+0x94>)
 8000410:	69da      	ldr	r2, [r3, #28]
 8000412:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <HAL_UART_MspInit+0x94>)
 8000414:	2180      	movs	r1, #128	@ 0x80
 8000416:	0289      	lsls	r1, r1, #10
 8000418:	430a      	orrs	r2, r1
 800041a:	61da      	str	r2, [r3, #28]
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <HAL_UART_MspInit+0x94>)
 800041e:	69da      	ldr	r2, [r3, #28]
 8000420:	2380      	movs	r3, #128	@ 0x80
 8000422:	029b      	lsls	r3, r3, #10
 8000424:	4013      	ands	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <HAL_UART_MspInit+0x94>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <HAL_UART_MspInit+0x94>)
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <HAL_UART_MspInit+0x94>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000446:	0021      	movs	r1, r4
 8000448:	187b      	adds	r3, r7, r1
 800044a:	220c      	movs	r2, #12
 800044c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2202      	movs	r2, #2
 8000452:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2201      	movs	r2, #1
 8000464:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	187a      	adds	r2, r7, r1
 8000468:	2390      	movs	r3, #144	@ 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fe8e 	bl	8001190 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b00b      	add	sp, #44	@ 0x2c
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	40004400 	.word	0x40004400
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b08c      	sub	sp, #48	@ 0x30
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000494:	4b37      	ldr	r3, [pc, #220]	@ (8000574 <HAL_InitTick+0xf0>)
 8000496:	69da      	ldr	r2, [r3, #28]
 8000498:	4b36      	ldr	r3, [pc, #216]	@ (8000574 <HAL_InitTick+0xf0>)
 800049a:	2102      	movs	r1, #2
 800049c:	430a      	orrs	r2, r1
 800049e:	61da      	str	r2, [r3, #28]
 80004a0:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <HAL_InitTick+0xf0>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2202      	movs	r2, #2
 80004a6:	4013      	ands	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fa      	adds	r2, r7, r3
 80004b0:	2410      	movs	r4, #16
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fcf2 	bl	8001ea0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d104      	bne.n	80004d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c8:	f001 fcd4 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80004cc:	0003      	movs	r3, r0
 80004ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004d0:	e004      	b.n	80004dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004d2:	f001 fccf 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80004d6:	0003      	movs	r3, r0
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004de:	4926      	ldr	r1, [pc, #152]	@ (8000578 <HAL_InitTick+0xf4>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff fe11 	bl	8000108 <__udivsi3>
 80004e6:	0003      	movs	r3, r0
 80004e8:	3b01      	subs	r3, #1
 80004ea:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004ec:	4b23      	ldr	r3, [pc, #140]	@ (800057c <HAL_InitTick+0xf8>)
 80004ee:	4a24      	ldr	r2, [pc, #144]	@ (8000580 <HAL_InitTick+0xfc>)
 80004f0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004f2:	4b22      	ldr	r3, [pc, #136]	@ (800057c <HAL_InitTick+0xf8>)
 80004f4:	4a23      	ldr	r2, [pc, #140]	@ (8000584 <HAL_InitTick+0x100>)
 80004f6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004f8:	4b20      	ldr	r3, [pc, #128]	@ (800057c <HAL_InitTick+0xf8>)
 80004fa:	6a3a      	ldr	r2, [r7, #32]
 80004fc:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <HAL_InitTick+0xf8>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b1d      	ldr	r3, [pc, #116]	@ (800057c <HAL_InitTick+0xf8>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <HAL_InitTick+0xf8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000510:	252b      	movs	r5, #43	@ 0x2b
 8000512:	197c      	adds	r4, r7, r5
 8000514:	4b19      	ldr	r3, [pc, #100]	@ (800057c <HAL_InitTick+0xf8>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fea4 	bl	8002264 <HAL_TIM_Base_Init>
 800051c:	0003      	movs	r3, r0
 800051e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000520:	197b      	adds	r3, r7, r5
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d11e      	bne.n	8000566 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000528:	197c      	adds	r4, r7, r5
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <HAL_InitTick+0xf8>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fef1 	bl	8002314 <HAL_TIM_Base_Start_IT>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000536:	197b      	adds	r3, r7, r5
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d113      	bne.n	8000566 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800053e:	2010      	movs	r0, #16
 8000540:	f000 fe15 	bl	800116e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d809      	bhi.n	800055e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	0019      	movs	r1, r3
 8000550:	2010      	movs	r0, #16
 8000552:	f000 fdf7 	bl	8001144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000556:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <HAL_InitTick+0x104>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	e003      	b.n	8000566 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800055e:	232b      	movs	r3, #43	@ 0x2b
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000566:	232b      	movs	r3, #43	@ 0x2b
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	781b      	ldrb	r3, [r3, #0]
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b00c      	add	sp, #48	@ 0x30
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	000f4240 	.word	0x000f4240
 800057c:	20000028 	.word	0x20000028
 8000580:	40000400 	.word	0x40000400
 8000584:	000003e7 	.word	0x000003e7
 8000588:	20000004 	.word	0x20000004

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <TIM3_IRQHandler+0x14>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 ff08 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	20000028 	.word	0x20000028

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <test_task.0>:
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  void test_task(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4663      	mov	r3, ip
 80005c8:	607b      	str	r3, [r7, #4]

    test++;
 80005ca:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <test_task.0+0x20>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <test_task.0+0x20>)
 80005d4:	701a      	strb	r2, [r3, #0]
  }
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	2000019c 	.word	0x2000019c

080005e4 <main>:
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	b08b      	sub	sp, #44	@ 0x2c
 80005e8:	af00      	add	r7, sp, #0
int main(void)
 80005ea:	2340      	movs	r3, #64	@ 0x40
 80005ec:	18fa      	adds	r2, r7, r3
 80005ee:	2110      	movs	r1, #16
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	000b      	movs	r3, r1
 80005f6:	18f9      	adds	r1, r7, r3
 80005f8:	18f8      	adds	r0, r7, r3
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <main+0x70>)
 80005fc:	000b      	movs	r3, r1
 80005fe:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000600:	c370      	stmia	r3!, {r4, r5, r6}
 8000602:	ca30      	ldmia	r2!, {r4, r5}
 8000604:	c330      	stmia	r3!, {r4, r5}
 8000606:	60c8      	str	r0, [r1, #12]
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <main+0x74>)
 800060a:	610b      	str	r3, [r1, #16]
  HAL_Init();
 800060c:	f000 fa94 	bl	8000b38 <HAL_Init>
  SystemClock_Config();
 8000610:	f000 f826 	bl	8000660 <SystemClock_Config>
  MX_GPIO_Init();
 8000614:	f000 f962 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f930 	bl	800087c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800061c:	f000 f888 	bl	8000730 <MX_ADC_Init>
  MX_SPI1_Init();
 8000620:	f000 f8ee 	bl	8000800 <MX_SPI1_Init>


  //Definire nume, functie si timp de executie(ms) taskuri
  SimpleTask tasks[] = {
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <main+0x78>)
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	2310      	movs	r3, #16
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	2201      	movs	r2, #1
 8000630:	4313      	orrs	r3, r2
 8000632:	001a      	movs	r2, r3
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	22fa      	movs	r2, #250	@ 0xfa
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	609a      	str	r2, [r3, #8]
    {"test", test_task, 1000}
  };


  OS_Init(tasks, 1);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2101      	movs	r1, #1
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fa0f 	bl	8000a68 <OS_Init>



  OS_Run();
 800064a:	f000 fa23 	bl	8000a94 <OS_Run>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	e7fd      	b.n	800064e <main+0x6a>
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	080033c4 	.word	0x080033c4
 8000658:	080005c1 	.word	0x080005c1
 800065c:	080033d8 	.word	0x080033d8

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b099      	sub	sp, #100	@ 0x64
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	242c      	movs	r4, #44	@ 0x2c
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2334      	movs	r3, #52	@ 0x34
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 fe5b 	bl	800332c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	231c      	movs	r3, #28
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2310      	movs	r3, #16
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f002 fe53 	bl	800332c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	231c      	movs	r3, #28
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f002 fe4c 	bl	800332c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000694:	0021      	movs	r1, r4
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2212      	movs	r2, #18
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2201      	movs	r2, #1
 80006a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2210      	movs	r2, #16
 80006ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2210      	movs	r2, #16
 80006b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2202      	movs	r2, #2
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	0212      	lsls	r2, r2, #8
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	22a0      	movs	r2, #160	@ 0xa0
 80006c6:	0392      	lsls	r2, r2, #14
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fef2 	bl	80014bc <HAL_RCC_OscConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f9be 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	211c      	movs	r1, #28
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2202      	movs	r2, #2
 80006ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2101      	movs	r1, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fa62 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000708:	f000 f9a8 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800070c:	003b      	movs	r3, r7
 800070e:	2202      	movs	r2, #2
 8000710:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000712:	003b      	movs	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	003b      	movs	r3, r7
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fbea 	bl	8001ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000724:	f000 f99a 	bl	8000a5c <Error_Handler>
  }
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b019      	add	sp, #100	@ 0x64
 800072e:	bd90      	pop	{r4, r7, pc}

08000730 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	0018      	movs	r0, r3
 800073a:	230c      	movs	r3, #12
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 fdf4 	bl	800332c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000744:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000746:	4a2d      	ldr	r2, [pc, #180]	@ (80007fc <MX_ADC_Init+0xcc>)
 8000748:	601a      	str	r2, [r3, #0]

  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800075e:	2201      	movs	r2, #1
 8000760:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000764:	2204      	movs	r2, #4
 8000766:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000770:	2200      	movs	r2, #0
 8000772:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000776:	2200      	movs	r2, #0
 8000778:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800077c:	2200      	movs	r2, #0
 800077e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000782:	22c2      	movs	r2, #194	@ 0xc2
 8000784:	32ff      	adds	r2, #255	@ 0xff
 8000786:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000790:	2224      	movs	r2, #36	@ 0x24
 8000792:	2100      	movs	r1, #0
 8000794:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_ADC_Init+0xc8>)
 8000798:	2201      	movs	r2, #1
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_ADC_Init+0xc8>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f9fa 	bl	8000b98 <HAL_ADC_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007a8:	f000 f958 	bl	8000a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	0152      	lsls	r2, r2, #5
 80007b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2207      	movs	r2, #7
 80007be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c0:	1d3a      	adds	r2, r7, #4
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MX_ADC_Init+0xc8>)
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fb26 	bl	8000e18 <HAL_ADC_ConfigChannel>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80007d0:	f000 f944 	bl	8000a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_ADC_Init+0xc8>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fb19 	bl	8000e18 <HAL_ADC_ConfigChannel>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80007ea:	f000 f937 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000070 	.word	0x20000070
 80007fc:	40012400 	.word	0x40012400

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <MX_SPI1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_SPI1_Init+0x74>)
 800080c:	2282      	movs	r2, #130	@ 0x82
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_SPI1_Init+0x74>)
 800081a:	22e0      	movs	r2, #224	@ 0xe0
 800081c:	00d2      	lsls	r2, r2, #3
 800081e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_SPI1_Init+0x74>)
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000836:	2218      	movs	r2, #24
 8000838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_SPI1_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_SPI1_Init+0x74>)
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <MX_SPI1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fc47 	bl	80020f4 <HAL_SPI_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f8f7 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000b0 	.word	0x200000b0
 8000878:	40013000 	.word	0x40013000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	@ (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	22e1      	movs	r2, #225	@ 0xe1
 800088a:	0252      	lsls	r2, r2, #9
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 ff25 	bl	8002710 <HAL_UART_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f8c7 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000114 	.word	0x20000114
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	@ 0x2c
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	2414      	movs	r4, #20
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 fd1d 	bl	800332c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b4e      	ldr	r3, [pc, #312]	@ (8000a2c <MX_GPIO_Init+0x150>)
 80008f4:	695a      	ldr	r2, [r3, #20]
 80008f6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a2c <MX_GPIO_Init+0x150>)
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0309      	lsls	r1, r1, #12
 80008fc:	430a      	orrs	r2, r1
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	4b4a      	ldr	r3, [pc, #296]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	031b      	lsls	r3, r3, #12
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b47      	ldr	r3, [pc, #284]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b46      	ldr	r3, [pc, #280]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	03c9      	lsls	r1, r1, #15
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b43      	ldr	r3, [pc, #268]	@ (8000a2c <MX_GPIO_Init+0x150>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	03db      	lsls	r3, r3, #15
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b40      	ldr	r3, [pc, #256]	@ (8000a2c <MX_GPIO_Init+0x150>)
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	0289      	lsls	r1, r1, #10
 8000934:	430a      	orrs	r2, r1
 8000936:	615a      	str	r2, [r3, #20]
 8000938:	4b3c      	ldr	r3, [pc, #240]	@ (8000a2c <MX_GPIO_Init+0x150>)
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b38      	ldr	r3, [pc, #224]	@ (8000a2c <MX_GPIO_Init+0x150>)
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	02c9      	lsls	r1, r1, #11
 8000950:	430a      	orrs	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <MX_GPIO_Init+0x150>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	02db      	lsls	r3, r3, #11
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_RESET);
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <MX_GPIO_Init+0x154>)
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	0018      	movs	r0, r3
 800096a:	f000 fd89 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 800096e:	23c0      	movs	r3, #192	@ 0xc0
 8000970:	0099      	lsls	r1, r3, #2
 8000972:	2390      	movs	r3, #144	@ 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2200      	movs	r2, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fd81 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <MX_GPIO_Init+0x158>)
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fd7b 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	0192      	lsls	r2, r2, #6
 8000990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2284      	movs	r2, #132	@ 0x84
 8000996:	0392      	lsls	r2, r2, #14
 8000998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	4a23      	ldr	r2, [pc, #140]	@ (8000a30 <MX_GPIO_Init+0x154>)
 80009a4:	0019      	movs	r1, r3
 80009a6:	0010      	movs	r0, r2
 80009a8:	f000 fbf2 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2201      	movs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0x154>)
 80009c8:	0019      	movs	r1, r3
 80009ca:	0010      	movs	r0, r2
 80009cc:	f000 fbe0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 80009d0:	0021      	movs	r1, r4
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	22c0      	movs	r2, #192	@ 0xc0
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	000c      	movs	r4, r1
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2201      	movs	r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	193a      	adds	r2, r7, r4
 80009f0:	2390      	movs	r3, #144	@ 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fbca 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2240      	movs	r2, #64	@ 0x40
 8000a02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <MX_GPIO_Init+0x158>)
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	f000 fbb7 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b00b      	add	sp, #44	@ 0x2c
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000800 	.word	0x48000800
 8000a34:	48000400 	.word	0x48000400

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a4a:	f000 f889 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40000400 	.word	0x40000400

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <OS_Init>:
#include "stm32f0xx_hal.h"

static const SimpleTask *os_tasks = 0;
static uint8_t os_num_tasks = 0;

void OS_Init(const SimpleTask *tasks, uint8_t num_tasks) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	000a      	movs	r2, r1
 8000a72:	1cfb      	adds	r3, r7, #3
 8000a74:	701a      	strb	r2, [r3, #0]
    os_tasks = tasks;
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <OS_Init+0x24>)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
    os_num_tasks = num_tasks;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <OS_Init+0x28>)
 8000a7e:	1cfa      	adds	r2, r7, #3
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200001a0 	.word	0x200001a0
 8000a90:	200001a4 	.word	0x200001a4

08000a94 <OS_Run>:

void OS_Run(void) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
    while (1) {
        uint32_t start = HAL_GetTick();
 8000aa2:	f000 f86f 	bl	8000b84 <HAL_GetTick>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	60bb      	str	r3, [r7, #8]
        os_tasks[i].task_func();
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <OS_Run+0x9c>)
 8000aac:	6819      	ldr	r1, [r3, #0]
 8000aae:	240f      	movs	r4, #15
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	189b      	adds	r3, r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18cb      	adds	r3, r1, r3
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4798      	blx	r3
        uint32_t elapsed = HAL_GetTick() - start;
 8000ac2:	f000 f85f 	bl	8000b84 <HAL_GetTick>
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	607b      	str	r3, [r7, #4]
        if (elapsed < os_tasks[i].max_time_ms) {
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <OS_Run+0x9c>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	189b      	adds	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	18cb      	adds	r3, r1, r3
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d213      	bcs.n	8000b10 <OS_Run+0x7c>
            uint32_t wait_until = start + os_tasks[i].max_time_ms;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <OS_Run+0x9c>)
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	0013      	movs	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18cb      	adds	r3, r1, r3
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	603b      	str	r3, [r7, #0]
            while (HAL_GetTick() < wait_until) {}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	f000 f83e 	bl	8000b84 <HAL_GetTick>
 8000b08:	0002      	movs	r2, r0
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d8f9      	bhi.n	8000b04 <OS_Run+0x70>
        }
        i++;
 8000b10:	210f      	movs	r1, #15
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	3201      	adds	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
        if (i >= os_num_tasks) i = 0;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <OS_Run+0xa0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3bc      	bcc.n	8000aa2 <OS_Run+0xe>
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    while (1) {
 8000b2e:	e7b8      	b.n	8000aa2 <OS_Run+0xe>
 8000b30:	200001a0 	.word	0x200001a0
 8000b34:	200001a4 	.word	0x200001a4

08000b38 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_Init+0x24>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_Init+0x24>)
 8000b42:	2110      	movs	r1, #16
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f7ff fc9b 	bl	8000484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4e:	f7ff fb91 	bl	8000274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	18d2      	adds	r2, r2, r3
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200001a8 	.word	0x200001a8

08000b84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	@ (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	200001a8 	.word	0x200001a8

08000b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e125      	b.n	8000e02 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10a      	bne.n	8000bd4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2234      	movs	r2, #52	@ 0x34
 8000bc8:	2100      	movs	r1, #0
 8000bca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fb7a 	bl	80002c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd8:	2210      	movs	r2, #16
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d000      	beq.n	8000be0 <HAL_ADC_Init+0x48>
 8000bde:	e103      	b.n	8000de8 <HAL_ADC_Init+0x250>
 8000be0:	230f      	movs	r3, #15
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d000      	beq.n	8000bec <HAL_ADC_Init+0x54>
 8000bea:	e0fd      	b.n	8000de8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bf6:	d000      	beq.n	8000bfa <HAL_ADC_Init+0x62>
 8000bf8:	e0f6      	b.n	8000de8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bfe:	4a83      	ldr	r2, [pc, #524]	@ (8000e0c <HAL_ADC_Init+0x274>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	2202      	movs	r2, #2
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2203      	movs	r2, #3
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d112      	bne.n	8000c3e <HAL_ADC_Init+0xa6>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d009      	beq.n	8000c3a <HAL_ADC_Init+0xa2>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	401a      	ands	r2, r3
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_Init+0xa6>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_ADC_Init+0xa8>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d116      	bne.n	8000c72 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2218      	movs	r2, #24
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	0019      	movs	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	0899      	lsrs	r1, r3, #2
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4964      	ldr	r1, [pc, #400]	@ (8000e10 <HAL_ADC_Init+0x278>)
 8000c7e:	400a      	ands	r2, r1
 8000c80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7e1b      	ldrb	r3, [r3, #24]
 8000c86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7e5b      	ldrb	r3, [r3, #25]
 8000c8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e9b      	ldrb	r3, [r3, #26]
 8000c94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d002      	beq.n	8000ca6 <HAL_ADC_Init+0x10e>
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	015b      	lsls	r3, r3, #5
 8000ca4:	e000      	b.n	8000ca8 <HAL_ADC_Init+0x110>
 8000ca6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ca8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d101      	bne.n	8000cbc <HAL_ADC_Init+0x124>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e000      	b.n	8000cbe <HAL_ADC_Init+0x126>
 8000cbc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000cbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2124      	movs	r1, #36	@ 0x24
 8000cc4:	5c5b      	ldrb	r3, [r3, r1]
 8000cc6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cc8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7edb      	ldrb	r3, [r3, #27]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d115      	bne.n	8000d04 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	0252      	lsls	r2, r2, #9
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	e00b      	b.n	8000d04 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	23c2      	movs	r3, #194	@ 0xc2
 8000d0a:	33ff      	adds	r3, #255	@ 0xff
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d007      	beq.n	8000d20 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	055b      	lsls	r3, r3, #21
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d01b      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d017      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d013      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d00f      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d00b      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d007      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d68:	2b06      	cmp	r3, #6
 8000d6a:	d003      	beq.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	2b07      	cmp	r3, #7
 8000d72:	d112      	bne.n	8000d9a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2107      	movs	r1, #7
 8000d80:	438a      	bics	r2, r1
 8000d82:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6959      	ldr	r1, [r3, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8e:	2207      	movs	r2, #7
 8000d90:	401a      	ands	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <HAL_ADC_Init+0x27c>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d10b      	bne.n	8000dc2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db4:	2203      	movs	r2, #3
 8000db6:	4393      	bics	r3, r2
 8000db8:	2201      	movs	r2, #1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dc0:	e01c      	b.n	8000dfc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc6:	2212      	movs	r2, #18
 8000dc8:	4393      	bics	r3, r2
 8000dca:	2210      	movs	r2, #16
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de6:	e009      	b.n	8000dfc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dec:	2210      	movs	r2, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	fffffefd 	.word	0xfffffefd
 8000e10:	fffe0219 	.word	0xfffe0219
 8000e14:	833fffe7 	.word	0x833fffe7

08000e18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	055b      	lsls	r3, r3, #21
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d011      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x46>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d00d      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x46>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d009      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x46>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d005      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x46>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d001      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x46>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2234      	movs	r2, #52	@ 0x34
 8000e62:	5c9b      	ldrb	r3, [r3, r2]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d101      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x54>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	e0d0      	b.n	800100e <HAL_ADC_ConfigChannel+0x1f6>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2234      	movs	r2, #52	@ 0x34
 8000e70:	2101      	movs	r1, #1
 8000e72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d000      	beq.n	8000e82 <HAL_ADC_ConfigChannel+0x6a>
 8000e80:	e0b4      	b.n	8000fec <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4a64      	ldr	r2, [pc, #400]	@ (8001018 <HAL_ADC_ConfigChannel+0x200>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0x76>
 8000e8c:	e082      	b.n	8000f94 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	055b      	lsls	r3, r3, #21
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d037      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d033      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d02f      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d02b      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d027      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d023      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d01f      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d01b      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d012      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2107      	movs	r1, #7
 8000f06:	438a      	bics	r2, r1
 8000f08:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6959      	ldr	r1, [r3, #20]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2207      	movs	r2, #7
 8000f16:	401a      	ands	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d007      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x120>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b11      	cmp	r3, #17
 8000f2e:	d003      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x120>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d163      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <HAL_ADC_ConfigChannel+0x204>)
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d009      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x140>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b11      	cmp	r3, #17
 8000f4a:	d102      	bne.n	8000f52 <HAL_ADC_ConfigChannel+0x13a>
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	03db      	lsls	r3, r3, #15
 8000f50:	e004      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x144>
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	045b      	lsls	r3, r3, #17
 8000f56:	e001      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x144>
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	041b      	lsls	r3, r3, #16
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <HAL_ADC_ConfigChannel+0x204>)
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	d14a      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_ADC_ConfigChannel+0x208>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	492d      	ldr	r1, [pc, #180]	@ (8001024 <HAL_ADC_ConfigChannel+0x20c>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff f8c9 	bl	8000108 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	001a      	movs	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f84:	e002      	b.n	8000f8c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <HAL_ADC_ConfigChannel+0x16e>
 8000f92:	e035      	b.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4099      	lsls	r1, r3
 8000fa2:	000b      	movs	r3, r1
 8000fa4:	43d9      	mvns	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	400a      	ands	r2, r1
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b10      	cmp	r3, #16
 8000fb4:	d007      	beq.n	8000fc6 <HAL_ADC_ConfigChannel+0x1ae>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b11      	cmp	r3, #17
 8000fbc:	d003      	beq.n	8000fc6 <HAL_ADC_ConfigChannel+0x1ae>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d11c      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_ADC_ConfigChannel+0x204>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d007      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0x1ca>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b11      	cmp	r3, #17
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x1c6>
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_ADC_ConfigChannel+0x210>)
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_ADC_ConfigChannel+0x214>)
 8000fe0:	e000      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <HAL_ADC_ConfigChannel+0x218>)
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_ADC_ConfigChannel+0x204>)
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e009      	b.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2234      	movs	r2, #52	@ 0x34
 8001004:	2100      	movs	r1, #0
 8001006:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	00001001 	.word	0x00001001
 800101c:	40012708 	.word	0x40012708
 8001020:	20000000 	.word	0x20000000
 8001024:	000f4240 	.word	0x000f4240
 8001028:	ffbfffff 	.word	0xffbfffff
 800102c:	feffffff 	.word	0xfeffffff
 8001030:	ff7fffff 	.word	0xff7fffff

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	0002      	movs	r2, r0
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b7f      	cmp	r3, #127	@ 0x7f
 8001046:	d809      	bhi.n	800105c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	231f      	movs	r3, #31
 8001050:	401a      	ands	r2, r3
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <__NVIC_EnableIRQ+0x30>)
 8001054:	2101      	movs	r1, #1
 8001056:	4091      	lsls	r1, r2
 8001058:	000a      	movs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
  }
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	0002      	movs	r2, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b7f      	cmp	r3, #127	@ 0x7f
 800107c:	d828      	bhi.n	80010d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107e:	4a2f      	ldr	r2, [pc, #188]	@ (800113c <__NVIC_SetPriority+0xd4>)
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	33c0      	adds	r3, #192	@ 0xc0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	589b      	ldr	r3, [r3, r2]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	@ 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	@ 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	481f      	ldr	r0, [pc, #124]	@ (800113c <__NVIC_SetPriority+0xd4>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	430a      	orrs	r2, r1
 80010c8:	33c0      	adds	r3, #192	@ 0xc0
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ce:	e031      	b.n	8001134 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <__NVIC_SetPriority+0xd8>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0019      	movs	r1, r3
 80010d8:	230f      	movs	r3, #15
 80010da:	400b      	ands	r3, r1
 80010dc:	3b08      	subs	r3, #8
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3306      	adds	r3, #6
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	3304      	adds	r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	400a      	ands	r2, r1
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	21ff      	movs	r1, #255	@ 0xff
 80010f8:	4091      	lsls	r1, r2
 80010fa:	000a      	movs	r2, r1
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	22ff      	movs	r2, #255	@ 0xff
 8001108:	401a      	ands	r2, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	2303      	movs	r3, #3
 8001112:	4003      	ands	r3, r0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	4809      	ldr	r0, [pc, #36]	@ (8001140 <__NVIC_SetPriority+0xd8>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	001c      	movs	r4, r3
 8001120:	230f      	movs	r3, #15
 8001122:	4023      	ands	r3, r4
 8001124:	3b08      	subs	r3, #8
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	430a      	orrs	r2, r1
 800112a:	3306      	adds	r3, #6
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	18c3      	adds	r3, r0, r3
 8001130:	3304      	adds	r3, #4
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b003      	add	sp, #12
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	210f      	movs	r1, #15
 8001150:	187b      	adds	r3, r7, r1
 8001152:	1c02      	adds	r2, r0, #0
 8001154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	187b      	adds	r3, r7, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ff81 	bl	8001068 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	0002      	movs	r2, r0
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ff57 	bl	8001034 <__NVIC_EnableIRQ>
}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e155      	b.n	800144c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <HAL_GPIO_Init+0x28>
 80011b6:	e146      	b.n	8001446 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	2201      	movs	r2, #1
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	4013      	ands	r3, r2
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2203      	movs	r2, #3
 8001274:	4013      	ands	r3, r2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	58d3      	ldr	r3, [r2, r3]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2207      	movs	r2, #7
 800128c:	4013      	ands	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2107      	movs	r1, #7
 80012a6:	400b      	ands	r3, r1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	6939      	ldr	r1, [r7, #16]
 80012c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	401a      	ands	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	23c0      	movs	r3, #192	@ 0xc0
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	4013      	ands	r3, r2
 8001300:	d100      	bne.n	8001304 <HAL_GPIO_Init+0x174>
 8001302:	e0a0      	b.n	8001446 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b57      	ldr	r3, [pc, #348]	@ (8001464 <HAL_GPIO_Init+0x2d4>)
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	4b56      	ldr	r3, [pc, #344]	@ (8001464 <HAL_GPIO_Init+0x2d4>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	4b54      	ldr	r3, [pc, #336]	@ (8001464 <HAL_GPIO_Init+0x2d4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2201      	movs	r2, #1
 8001316:	4013      	ands	r3, r2
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800131c:	4a52      	ldr	r2, [pc, #328]	@ (8001468 <HAL_GPIO_Init+0x2d8>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	589b      	ldr	r3, [r3, r2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	2390      	movs	r3, #144	@ 0x90
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	429a      	cmp	r2, r3
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x1ee>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a47      	ldr	r2, [pc, #284]	@ (800146c <HAL_GPIO_Init+0x2dc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x1ea>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a46      	ldr	r2, [pc, #280]	@ (8001470 <HAL_GPIO_Init+0x2e0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x1e6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a45      	ldr	r2, [pc, #276]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x1e2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a44      	ldr	r2, [pc, #272]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x1de>
 800136a:	2304      	movs	r3, #4
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x1f0>
 800136e:	2305      	movs	r3, #5
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x1f0>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x1f0>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x1f0>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x1f0>
 800137e:	2300      	movs	r3, #0
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	2103      	movs	r1, #3
 8001384:	400a      	ands	r2, r1
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	@ (8001468 <HAL_GPIO_Init+0x2d8>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	@ 0x80
 80013b4:	035b      	lsls	r3, r3, #13
 80013b6:	4013      	ands	r3, r2
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	039b      	lsls	r3, r3, #14
 80013e0:	4013      	ands	r3, r2
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	025b      	lsls	r3, r3, #9
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	40da      	lsrs	r2, r3
 8001454:	1e13      	subs	r3, r2, #0
 8001456:	d000      	beq.n	800145a <HAL_GPIO_Init+0x2ca>
 8001458:	e6a2      	b.n	80011a0 <HAL_GPIO_Init+0x10>
  } 
}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b006      	add	sp, #24
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	48001000 	.word	0x48001000
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	0008      	movs	r0, r1
 800148a:	0011      	movs	r1, r2
 800148c:	1cbb      	adds	r3, r7, #2
 800148e:	1c02      	adds	r2, r0, #0
 8001490:	801a      	strh	r2, [r3, #0]
 8001492:	1c7b      	adds	r3, r7, #1
 8001494:	1c0a      	adds	r2, r1, #0
 8001496:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001498:	1c7b      	adds	r3, r7, #1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a0:	1cbb      	adds	r3, r7, #2
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014aa:	1cbb      	adds	r3, r7, #2
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f000 fb76 	bl	8001bbc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	d100      	bne.n	80014dc <HAL_RCC_OscConfig+0x20>
 80014da:	e08e      	b.n	80015fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014dc:	4bc5      	ldr	r3, [pc, #788]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	220c      	movs	r2, #12
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d00e      	beq.n	8001506 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014e8:	4bc2      	ldr	r3, [pc, #776]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	220c      	movs	r2, #12
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d117      	bne.n	8001524 <HAL_RCC_OscConfig+0x68>
 80014f4:	4bbf      	ldr	r3, [pc, #764]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	23c0      	movs	r3, #192	@ 0xc0
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	401a      	ands	r2, r3
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	429a      	cmp	r2, r3
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4bbb      	ldr	r3, [pc, #748]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	4013      	ands	r3, r2
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x58>
 8001512:	e071      	b.n	80015f8 <HAL_RCC_OscConfig+0x13c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d000      	beq.n	800151e <HAL_RCC_OscConfig+0x62>
 800151c:	e06c      	b.n	80015f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 fb4c 	bl	8001bbc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x80>
 800152c:	4bb1      	ldr	r3, [pc, #708]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4bb0      	ldr	r3, [pc, #704]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	0249      	lsls	r1, r1, #9
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e02f      	b.n	800159c <HAL_RCC_OscConfig+0xe0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0xa2>
 8001544:	4bab      	ldr	r3, [pc, #684]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4baa      	ldr	r3, [pc, #680]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800154a:	49ab      	ldr	r1, [pc, #684]	@ (80017f8 <HAL_RCC_OscConfig+0x33c>)
 800154c:	400a      	ands	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4ba8      	ldr	r3, [pc, #672]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4ba7      	ldr	r3, [pc, #668]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001556:	49a9      	ldr	r1, [pc, #676]	@ (80017fc <HAL_RCC_OscConfig+0x340>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e01e      	b.n	800159c <HAL_RCC_OscConfig+0xe0>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10e      	bne.n	8001584 <HAL_RCC_OscConfig+0xc8>
 8001566:	4ba3      	ldr	r3, [pc, #652]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4ba2      	ldr	r3, [pc, #648]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	02c9      	lsls	r1, r1, #11
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4b9f      	ldr	r3, [pc, #636]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b9e      	ldr	r3, [pc, #632]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	0249      	lsls	r1, r1, #9
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xe0>
 8001584:	4b9b      	ldr	r3, [pc, #620]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b9a      	ldr	r3, [pc, #616]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800158a:	499b      	ldr	r1, [pc, #620]	@ (80017f8 <HAL_RCC_OscConfig+0x33c>)
 800158c:	400a      	ands	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	4b98      	ldr	r3, [pc, #608]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b97      	ldr	r3, [pc, #604]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001596:	4999      	ldr	r1, [pc, #612]	@ (80017fc <HAL_RCC_OscConfig+0x340>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff faee 	bl	8000b84 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ae:	f7ff fae9 	bl	8000b84 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	@ 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e2fd      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c0:	4b8c      	ldr	r3, [pc, #560]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0xf2>
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fad9 	bl	8000b84 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fad4 	bl	8000b84 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e2e8      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	4b82      	ldr	r3, [pc, #520]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x11c>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x14a>
 8001604:	e06c      	b.n	80016e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001606:	4b7b      	ldr	r3, [pc, #492]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	220c      	movs	r2, #12
 800160c:	4013      	ands	r3, r2
 800160e:	d00e      	beq.n	800162e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001610:	4b78      	ldr	r3, [pc, #480]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	220c      	movs	r2, #12
 8001616:	4013      	ands	r3, r2
 8001618:	2b08      	cmp	r3, #8
 800161a:	d11f      	bne.n	800165c <HAL_RCC_OscConfig+0x1a0>
 800161c:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	23c0      	movs	r3, #192	@ 0xc0
 8001622:	025b      	lsls	r3, r3, #9
 8001624:	401a      	ands	r2, r3
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	429a      	cmp	r2, r3
 800162c:	d116      	bne.n	800165c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	4b71      	ldr	r3, [pc, #452]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x188>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e2bb      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b6b      	ldr	r3, [pc, #428]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	22f8      	movs	r2, #248	@ 0xf8
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00da      	lsls	r2, r3, #3
 8001654:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e041      	b.n	80016e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d024      	beq.n	80016ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001664:	4b63      	ldr	r3, [pc, #396]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b62      	ldr	r3, [pc, #392]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa88 	bl	8000b84 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fa83 	bl	8000b84 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e297      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0f1      	beq.n	800167a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	22f8      	movs	r2, #248	@ 0xf8
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	00da      	lsls	r2, r3, #3
 80016a6:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e018      	b.n	80016e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b51      	ldr	r3, [pc, #324]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b50      	ldr	r3, [pc, #320]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	438a      	bics	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa63 	bl	8000b84 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fa5e 	bl	8000b84 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e272      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f1      	bne.n	80016c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2208      	movs	r2, #8
 80016e6:	4013      	ands	r3, r2
 80016e8:	d036      	beq.n	8001758 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b40      	ldr	r3, [pc, #256]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f6:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa41 	bl	8000b84 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fa3c 	bl	8000b84 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e250      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d0f1      	beq.n	8001708 <HAL_RCC_OscConfig+0x24c>
 8001724:	e018      	b.n	8001758 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800172a:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800172c:	2101      	movs	r1, #1
 800172e:	438a      	bics	r2, r1
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff fa27 	bl	8000b84 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fa22 	bl	8000b84 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e236      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174e:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d1f1      	bne.n	800173c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2204      	movs	r2, #4
 800175e:	4013      	ands	r3, r2
 8001760:	d100      	bne.n	8001764 <HAL_RCC_OscConfig+0x2a8>
 8001762:	e0b5      	b.n	80018d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001764:	201f      	movs	r0, #31
 8001766:	183b      	adds	r3, r7, r0
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	055b      	lsls	r3, r3, #21
 8001774:	4013      	ands	r3, r2
 8001776:	d110      	bne.n	800179a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	0549      	lsls	r1, r1, #21
 8001782:	430a      	orrs	r2, r1
 8001784:	61da      	str	r2, [r3, #28]
 8001786:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001794:	183b      	adds	r3, r7, r0
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_RCC_OscConfig+0x344>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d11a      	bne.n	80017dc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_RCC_OscConfig+0x344>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_RCC_OscConfig+0x344>)
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	0049      	lsls	r1, r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f9e6 	bl	8000b84 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff f9e1 	bl	8000b84 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	@ 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1f5      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_RCC_OscConfig+0x344>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10f      	bne.n	8001804 <HAL_RCC_OscConfig+0x348>
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b02      	ldr	r3, [pc, #8]	@ (80017f4 <HAL_RCC_OscConfig+0x338>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	430a      	orrs	r2, r1
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e036      	b.n	8001860 <HAL_RCC_OscConfig+0x3a4>
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	40021000 	.word	0x40021000
 80017f8:	fffeffff 	.word	0xfffeffff
 80017fc:	fffbffff 	.word	0xfffbffff
 8001800:	40007000 	.word	0x40007000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x36a>
 800180c:	4bca      	ldr	r3, [pc, #808]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4bc9      	ldr	r3, [pc, #804]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001812:	2101      	movs	r1, #1
 8001814:	438a      	bics	r2, r1
 8001816:	621a      	str	r2, [r3, #32]
 8001818:	4bc7      	ldr	r3, [pc, #796]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800181e:	2104      	movs	r1, #4
 8001820:	438a      	bics	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x3a4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x38c>
 800182e:	4bc2      	ldr	r3, [pc, #776]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4bc1      	ldr	r3, [pc, #772]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001834:	2104      	movs	r1, #4
 8001836:	430a      	orrs	r2, r1
 8001838:	621a      	str	r2, [r3, #32]
 800183a:	4bbf      	ldr	r3, [pc, #764]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	4bbe      	ldr	r3, [pc, #760]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x3a4>
 8001848:	4bbb      	ldr	r3, [pc, #748]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4bba      	ldr	r3, [pc, #744]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800184e:	2101      	movs	r1, #1
 8001850:	438a      	bics	r2, r1
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	4bb8      	ldr	r3, [pc, #736]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	4bb7      	ldr	r3, [pc, #732]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800185a:	2104      	movs	r1, #4
 800185c:	438a      	bics	r2, r1
 800185e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d014      	beq.n	8001892 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f98c 	bl	8000b84 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f987 	bl	8000b84 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4aaf      	ldr	r2, [pc, #700]	@ (8001b3c <HAL_RCC_OscConfig+0x680>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e19a      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4bac      	ldr	r3, [pc, #688]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x3b6>
 8001890:	e013      	b.n	80018ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff f977 	bl	8000b84 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e009      	b.n	80018b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff f972 	bl	8000b84 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	4aa5      	ldr	r2, [pc, #660]	@ (8001b3c <HAL_RCC_OscConfig+0x680>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e185      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ba:	231f      	movs	r3, #31
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	4b9b      	ldr	r3, [pc, #620]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	499d      	ldr	r1, [pc, #628]	@ (8001b40 <HAL_RCC_OscConfig+0x684>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d12a      	bne.n	8001938 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018e2:	4b95      	ldr	r3, [pc, #596]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e6:	4b94      	ldr	r3, [pc, #592]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018ee:	4b92      	ldr	r3, [pc, #584]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f2:	4b91      	ldr	r3, [pc, #580]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f943 	bl	8000b84 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001904:	f7ff f93e 	bl	8000b84 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e152      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001916:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d0f1      	beq.n	8001904 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001920:	4b85      	ldr	r3, [pc, #532]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001924:	22f8      	movs	r2, #248	@ 0xf8
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	4b81      	ldr	r3, [pc, #516]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	@ 0x34
 8001936:	e034      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	3305      	adds	r3, #5
 800193e:	d111      	bne.n	8001964 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001940:	4b7d      	ldr	r3, [pc, #500]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001944:	4b7c      	ldr	r3, [pc, #496]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001946:	2104      	movs	r1, #4
 8001948:	438a      	bics	r2, r1
 800194a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800194c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001950:	22f8      	movs	r2, #248	@ 0xf8
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	00da      	lsls	r2, r3, #3
 800195c:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	@ 0x34
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001964:	4b74      	ldr	r3, [pc, #464]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001968:	4b73      	ldr	r3, [pc, #460]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800196a:	2104      	movs	r1, #4
 800196c:	430a      	orrs	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001970:	4b71      	ldr	r3, [pc, #452]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001974:	4b70      	ldr	r3, [pc, #448]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff f902 	bl	8000b84 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001986:	f7ff f8fd 	bl	8000b84 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e111      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001998:	4b67      	ldr	r3, [pc, #412]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d1f1      	bne.n	8001986 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2220      	movs	r2, #32
 80019a8:	4013      	ands	r3, r2
 80019aa:	d05c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019ac:	4b62      	ldr	r3, [pc, #392]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	220c      	movs	r2, #12
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b0c      	cmp	r3, #12
 80019b6:	d00e      	beq.n	80019d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	220c      	movs	r2, #12
 80019be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d114      	bne.n	80019ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	23c0      	movs	r3, #192	@ 0xc0
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	401a      	ands	r2, r3
 80019ce:	23c0      	movs	r3, #192	@ 0xc0
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d10b      	bne.n	80019ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019d6:	4b58      	ldr	r3, [pc, #352]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	029b      	lsls	r3, r3, #10
 80019de:	4013      	ands	r3, r2
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_OscConfig+0x5a8>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d03c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0e6      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019f6:	4b50      	ldr	r3, [pc, #320]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0249      	lsls	r1, r1, #9
 8001a00:	430a      	orrs	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8be 	bl	8000b84 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0e:	f7ff f8b9 	bl	8000b84 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0cd      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x552>
 8001a2c:	e01b      	b.n	8001a66 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	4943      	ldr	r1, [pc, #268]	@ (8001b44 <HAL_RCC_OscConfig+0x688>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f8a3 	bl	8000b84 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7ff f89e 	bl	8000b84 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0b2      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a56:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a5a:	2380      	movs	r3, #128	@ 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x588>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a64:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCC_OscConfig+0x5b4>
 8001a6e:	e0a4      	b.n	8001bba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a70:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	220c      	movs	r2, #12
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5c2>
 8001a7c:	e078      	b.n	8001b70 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d14c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001a8c:	492e      	ldr	r1, [pc, #184]	@ (8001b48 <HAL_RCC_OscConfig+0x68c>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff f877 	bl	8000b84 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f872 	bl	8000b84 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e086      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	049b      	lsls	r3, r3, #18
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	220f      	movs	r2, #15
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_RCC_OscConfig+0x690>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	0449      	lsls	r1, r1, #17
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f845 	bl	8000b84 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f840 	bl	8000b84 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e054      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	@ 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x644>
 8001b1e:	e04c      	b.n	8001bba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_RCC_OscConfig+0x67c>)
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <HAL_RCC_OscConfig+0x68c>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f82a 	bl	8000b84 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x6a6>
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	efffffff 	.word	0xefffffff
 8001b44:	fffeffff 	.word	0xfffeffff
 8001b48:	feffffff 	.word	0xfeffffff
 8001b4c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f818 	bl	8000b84 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e02c      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <HAL_RCC_OscConfig+0x708>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	049b      	lsls	r3, r3, #18
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x694>
 8001b6e:	e024      	b.n	8001bba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e01f      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x708>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x708>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	23c0      	movs	r3, #192	@ 0xc0
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	23f0      	movs	r3, #240	@ 0xf0
 8001baa:	039b      	lsls	r3, r3, #14
 8001bac:	401a      	ands	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b008      	add	sp, #32
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0bf      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d911      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfc:	4b59      	ldr	r3, [pc, #356]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0a6      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d015      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d006      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c22:	4b51      	ldr	r3, [pc, #324]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4b50      	ldr	r3, [pc, #320]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c28:	21e0      	movs	r1, #224	@ 0xe0
 8001c2a:	00c9      	lsls	r1, r1, #3
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b4d      	ldr	r3, [pc, #308]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	22f0      	movs	r2, #240	@ 0xf0
 8001c36:	4393      	bics	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d04c      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b44      	ldr	r3, [pc, #272]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	029b      	lsls	r3, r3, #10
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d120      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07a      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	4013      	ands	r3, r2
 8001c78:	d114      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06e      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c86:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e062      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e05b      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca4:	4b30      	ldr	r3, [pc, #192]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe ff64 	bl	8000b84 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc0:	e009      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc2:	f7fe ff5f 	bl	8000b84 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <HAL_RCC_ClockConfig+0x1a4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e042      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	220c      	movs	r2, #12
 8001cdc:	401a      	ands	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1ec      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d211      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_RCC_ClockConfig+0x19c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e020      	b.n	8001d5c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <HAL_RCC_ClockConfig+0x1a8>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d38:	f000 f820 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_RCC_ClockConfig+0x1a0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	220f      	movs	r2, #15
 8001d46:	4013      	ands	r3, r2
 8001d48:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_RCC_ClockConfig+0x1ac>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	40da      	lsrs	r2, r3
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b0>)
 8001d52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f7fe fb95 	bl	8000484 <HAL_InitTick>
  
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	00001388 	.word	0x00001388
 8001d70:	fffff8ff 	.word	0xfffff8ff
 8001d74:	08003474 	.word	0x08003474
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d046      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>
 8001da6:	d848      	bhi.n	8001e3a <HAL_RCC_GetSysClockFreq+0xbe>
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d002      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d003      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x3c>
 8001db0:	e043      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001db4:	613b      	str	r3, [r7, #16]
      break;
 8001db6:	e043      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	4a24      	ldr	r2, [pc, #144]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4013      	ands	r3, r2
 8001dce:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	23c0      	movs	r3, #192	@ 0xc0
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	481a      	ldr	r0, [pc, #104]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001de8:	f7fe f98e 	bl	8000108 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	001a      	movs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4353      	muls	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e01a      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	025b      	lsls	r3, r3, #9
 8001dfe:	401a      	ands	r2, r3
 8001e00:	23c0      	movs	r3, #192	@ 0xc0
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4814      	ldr	r0, [pc, #80]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e0c:	f7fe f97c 	bl	8000108 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4353      	muls	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e20:	f7fe f972 	bl	8000108 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	001a      	movs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4353      	muls	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	613b      	str	r3, [r7, #16]
      break;
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e36:	613b      	str	r3, [r7, #16]
      break;
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e3c:	613b      	str	r3, [r7, #16]
      break;
 8001e3e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e40:	693b      	ldr	r3, [r7, #16]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	0800348c 	.word	0x0800348c
 8001e58:	0800349c 	.word	0x0800349c
 8001e5c:	02dc6c00 	.word	0x02dc6c00

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	@ (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d9      	lsrs	r1, r3
 8001e8e:	000b      	movs	r3, r1
}    
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08003484 	.word	0x08003484

08001ea0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <HAL_RCC_GetClockConfig+0x4c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_GetClockConfig+0x4c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	22f0      	movs	r2, #240	@ 0xf0
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_RCC_GetClockConfig+0x4c>)
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	23e0      	movs	r3, #224	@ 0xe0
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RCC_GetClockConfig+0x50>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	401a      	ands	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f10:	e08e      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2017      	movs	r0, #23
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	055b      	lsls	r3, r3, #21
 8001f22:	4013      	ands	r3, r2
 8001f24:	d110      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0549      	lsls	r1, r1, #21
 8001f30:	430a      	orrs	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
 8001f34:	4b67      	ldr	r3, [pc, #412]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	055b      	lsls	r3, r3, #21
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	d11a      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f54:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b5f      	ldr	r3, [pc, #380]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7fe fe0f 	bl	8000b84 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	e008      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fe0a 	bl	8000b84 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0a6      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b56      	ldr	r3, [pc, #344]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f8a:	4b52      	ldr	r3, [pc, #328]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	23c0      	movs	r3, #192	@ 0xc0
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d034      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	23c0      	movs	r3, #192	@ 0xc0
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d02c      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fac:	4b49      	ldr	r3, [pc, #292]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0249      	lsls	r1, r1, #9
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc4:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fca:	4945      	ldr	r1, [pc, #276]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fd0:	4b40      	ldr	r3, [pc, #256]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe fdd1 	bl	8000b84 <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fdcc 	bl	8000b84 <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e067      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b35      	ldr	r3, [pc, #212]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a34      	ldr	r2, [pc, #208]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002016:	430a      	orrs	r2, r1
 8002018:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	2317      	movs	r3, #23
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800202a:	492f      	ldr	r1, [pc, #188]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800202c:	400a      	ands	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	2203      	movs	r2, #3
 8002040:	4393      	bics	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800204a:	430a      	orrs	r2, r1
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d009      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4a23      	ldr	r2, [pc, #140]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002068:	430a      	orrs	r2, r1
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	02db      	lsls	r3, r3, #11
 8002074:	4013      	ands	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002088:	430a      	orrs	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	4013      	ands	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	2210      	movs	r2, #16
 800209c:	4393      	bics	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	2240      	movs	r2, #64	@ 0x40
 80020bc:	4393      	bics	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	fffffcff 	.word	0xfffffcff
 80020e0:	fffeffff 	.word	0xfffeffff
 80020e4:	00001388 	.word	0x00001388
 80020e8:	efffffff 	.word	0xefffffff
 80020ec:	fffcffff 	.word	0xfffcffff
 80020f0:	fff3ffff 	.word	0xfff3ffff

080020f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0a8      	b.n	8002258 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	2382      	movs	r3, #130	@ 0x82
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
 8002120:	e005      	b.n	800212e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	225d      	movs	r2, #93	@ 0x5d
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	225c      	movs	r2, #92	@ 0x5c
 8002144:	2100      	movs	r1, #0
 8002146:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f7fe f902 	bl	8000354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	225d      	movs	r2, #93	@ 0x5d
 8002154:	2102      	movs	r1, #2
 8002156:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2140      	movs	r1, #64	@ 0x40
 8002164:	438a      	bics	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	23e0      	movs	r3, #224	@ 0xe0
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d902      	bls.n	800217a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e002      	b.n	8002180 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	23f0      	movs	r3, #240	@ 0xf0
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	429a      	cmp	r2, r3
 800218a:	d008      	beq.n	800219e <HAL_SPI_Init+0xaa>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	23e0      	movs	r3, #224	@ 0xe0
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	429a      	cmp	r2, r3
 8002196:	d002      	beq.n	800219e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	2382      	movs	r3, #130	@ 0x82
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	2384      	movs	r3, #132	@ 0x84
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	400b      	ands	r3, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2102      	movs	r1, #2
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2101      	movs	r1, #1
 80021c4:	400b      	ands	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6999      	ldr	r1, [r3, #24]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	400b      	ands	r3, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2138      	movs	r1, #56	@ 0x38
 80021da:	400b      	ands	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	0011      	movs	r1, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	2204      	movs	r2, #4
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	2110      	movs	r1, #16
 800220c:	400b      	ands	r3, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002214:	2108      	movs	r1, #8
 8002216:	400b      	ands	r3, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	23f0      	movs	r3, #240	@ 0xf0
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	400b      	ands	r3, r1
 8002224:	431a      	orrs	r2, r3
 8002226:	0011      	movs	r1, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4907      	ldr	r1, [pc, #28]	@ (8002260 <HAL_SPI_Init+0x16c>)
 8002244:	400a      	ands	r2, r1
 8002246:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	225d      	movs	r2, #93	@ 0x5d
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	fffff7ff 	.word	0xfffff7ff

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	223d      	movs	r2, #61	@ 0x3d
 800227a:	5c9b      	ldrb	r3, [r3, r2]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223c      	movs	r2, #60	@ 0x3c
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f839 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	223d      	movs	r2, #61	@ 0x3d
 8002296:	2102      	movs	r1, #2
 8002298:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	0019      	movs	r1, r3
 80022a4:	0010      	movs	r0, r2
 80022a6:	f000 f995 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2246      	movs	r2, #70	@ 0x46
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223e      	movs	r2, #62	@ 0x3e
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223f      	movs	r2, #63	@ 0x3f
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2240      	movs	r2, #64	@ 0x40
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2241      	movs	r2, #65	@ 0x41
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2242      	movs	r2, #66	@ 0x42
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2243      	movs	r2, #67	@ 0x43
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2244      	movs	r2, #68	@ 0x44
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2245      	movs	r2, #69	@ 0x45
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223d      	movs	r2, #61	@ 0x3d
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230c:	46c0      	nop			@ (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	223d      	movs	r2, #61	@ 0x3d
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d001      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e03b      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223d      	movs	r2, #61	@ 0x3d
 8002330:	2102      	movs	r1, #2
 8002332:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_TIM_Base_Start_IT+0x98>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x5a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	429a      	cmp	r2, r3
 8002358:	d009      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x5a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x5a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2207      	movs	r2, #7
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d010      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e007      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40014000 	.word	0x40014000

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d021      	beq.n	800241c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d01d      	beq.n	800241c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2203      	movs	r2, #3
 80023e6:	4252      	negs	r2, r2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2203      	movs	r2, #3
 80023f8:	4013      	ands	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f8d0 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002404:	e007      	b.n	8002416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f8c3 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f8cf 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2204      	movs	r2, #4
 8002420:	4013      	ands	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	d01e      	beq.n	800246a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2205      	movs	r2, #5
 8002432:	4252      	negs	r2, r2
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	23c0      	movs	r3, #192	@ 0xc0
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f8a9 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002452:	e007      	b.n	8002464 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f89c 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f8a8 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2208      	movs	r2, #8
 800246e:	4013      	ands	r3, r2
 8002470:	d021      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2208      	movs	r2, #8
 8002476:	4013      	ands	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2209      	movs	r2, #9
 8002480:	4252      	negs	r2, r2
 8002482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2203      	movs	r2, #3
 8002492:	4013      	ands	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 f883 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 800249e:	e007      	b.n	80024b0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f876 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 f882 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2210      	movs	r2, #16
 80024ba:	4013      	ands	r3, r2
 80024bc:	d022      	beq.n	8002504 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2210      	movs	r2, #16
 80024c2:	4013      	ands	r3, r2
 80024c4:	d01e      	beq.n	8002504 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2211      	movs	r2, #17
 80024cc:	4252      	negs	r2, r2
 80024ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2208      	movs	r2, #8
 80024d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	23c0      	movs	r3, #192	@ 0xc0
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f85c 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e007      	b.n	80024fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 f84f 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f85b 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d00c      	beq.n	8002526 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d008      	beq.n	8002526 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2202      	movs	r2, #2
 800251a:	4252      	negs	r2, r2
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe fa89 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	4013      	ands	r3, r2
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2280      	movs	r2, #128	@ 0x80
 8002532:	4013      	ands	r3, r2
 8002534:	d008      	beq.n	8002548 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2281      	movs	r2, #129	@ 0x81
 800253c:	4252      	negs	r2, r2
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f8dc 	bl	8002700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2240      	movs	r2, #64	@ 0x40
 800254c:	4013      	ands	r3, r2
 800254e:	d00c      	beq.n	800256a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	4013      	ands	r3, r2
 8002556:	d008      	beq.n	800256a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2241      	movs	r2, #65	@ 0x41
 800255e:	4252      	negs	r2, r2
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f82d 	bl	80025c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d00c      	beq.n	800258c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	4013      	ands	r3, r2
 8002578:	d008      	beq.n	800258c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2221      	movs	r2, #33	@ 0x21
 8002580:	4252      	negs	r2, r2
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f8b2 	bl	80026f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025bc:	46c0      	nop			@ (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d008      	beq.n	80025fe <TIM_Base_SetConfig+0x2a>
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	05db      	lsls	r3, r3, #23
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0x2a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a37      	ldr	r2, [pc, #220]	@ (80026d8 <TIM_Base_SetConfig+0x104>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2270      	movs	r2, #112	@ 0x70
 8002602:	4393      	bics	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a30      	ldr	r2, [pc, #192]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d018      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	05db      	lsls	r3, r3, #23
 800261e:	429a      	cmp	r2, r3
 8002620:	d013      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2c      	ldr	r2, [pc, #176]	@ (80026d8 <TIM_Base_SetConfig+0x104>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00f      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a2b      	ldr	r2, [pc, #172]	@ (80026dc <TIM_Base_SetConfig+0x108>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00b      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2a      	ldr	r2, [pc, #168]	@ (80026e0 <TIM_Base_SetConfig+0x10c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a29      	ldr	r2, [pc, #164]	@ (80026e4 <TIM_Base_SetConfig+0x110>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_Base_SetConfig+0x76>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <TIM_Base_SetConfig+0x114>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d108      	bne.n	800265c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <TIM_Base_SetConfig+0x118>)
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	4393      	bics	r3, r2
 8002662:	001a      	movs	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a13      	ldr	r2, [pc, #76]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0xce>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <TIM_Base_SetConfig+0x10c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0xce>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <TIM_Base_SetConfig+0x110>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0xce>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <TIM_Base_SetConfig+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d103      	bne.n	80026aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4393      	bics	r3, r2
 80026c4:	001a      	movs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
  }
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40002000 	.word	0x40002000
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800
 80026ec:	fffffcff 	.word	0xfffffcff

080026f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e044      	b.n	80027ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2278      	movs	r2, #120	@ 0x78
 800272e:	2100      	movs	r1, #0
 8002730:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7fd fe59 	bl	80003ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2224      	movs	r2, #36	@ 0x24
 800273e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	438a      	bics	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fa14 	bl	8002b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f828 	bl	80027b8 <UART_SetConfig>
 8002768:	0003      	movs	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e01c      	b.n	80027ac <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	490d      	ldr	r1, [pc, #52]	@ (80027b4 <HAL_UART_Init+0xa4>)
 800277e:	400a      	ands	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	212a      	movs	r1, #42	@ 0x2a
 800278e:	438a      	bics	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 faa3 	bl	8002cf0 <UART_CheckIdleState>
 80027aa:	0003      	movs	r3, r0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	ffffb7ff 	.word	0xffffb7ff

080027b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c0:	231e      	movs	r3, #30
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4abe      	ldr	r2, [pc, #760]	@ (8002ae0 <UART_SetConfig+0x328>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4ab9      	ldr	r2, [pc, #740]	@ (8002ae4 <UART_SetConfig+0x32c>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4ab0      	ldr	r2, [pc, #704]	@ (8002ae8 <UART_SetConfig+0x330>)
 8002826:	4013      	ands	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4aac      	ldr	r2, [pc, #688]	@ (8002aec <UART_SetConfig+0x334>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d127      	bne.n	800288e <UART_SetConfig+0xd6>
 800283e:	4bac      	ldr	r3, [pc, #688]	@ (8002af0 <UART_SetConfig+0x338>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	2203      	movs	r2, #3
 8002844:	4013      	ands	r3, r2
 8002846:	2b03      	cmp	r3, #3
 8002848:	d00d      	beq.n	8002866 <UART_SetConfig+0xae>
 800284a:	d81b      	bhi.n	8002884 <UART_SetConfig+0xcc>
 800284c:	2b02      	cmp	r3, #2
 800284e:	d014      	beq.n	800287a <UART_SetConfig+0xc2>
 8002850:	d818      	bhi.n	8002884 <UART_SetConfig+0xcc>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <UART_SetConfig+0xa4>
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00a      	beq.n	8002870 <UART_SetConfig+0xb8>
 800285a:	e013      	b.n	8002884 <UART_SetConfig+0xcc>
 800285c:	231f      	movs	r3, #31
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e0bd      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002866:	231f      	movs	r3, #31
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e0b8      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002870:	231f      	movs	r3, #31
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2204      	movs	r2, #4
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e0b3      	b.n	80029e2 <UART_SetConfig+0x22a>
 800287a:	231f      	movs	r3, #31
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2208      	movs	r2, #8
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e0ae      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002884:	231f      	movs	r3, #31
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2210      	movs	r2, #16
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e0a9      	b.n	80029e2 <UART_SetConfig+0x22a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a98      	ldr	r2, [pc, #608]	@ (8002af4 <UART_SetConfig+0x33c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d134      	bne.n	8002902 <UART_SetConfig+0x14a>
 8002898:	4b95      	ldr	r3, [pc, #596]	@ (8002af0 <UART_SetConfig+0x338>)
 800289a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800289c:	23c0      	movs	r3, #192	@ 0xc0
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	4013      	ands	r3, r2
 80028a2:	22c0      	movs	r2, #192	@ 0xc0
 80028a4:	0292      	lsls	r2, r2, #10
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d017      	beq.n	80028da <UART_SetConfig+0x122>
 80028aa:	22c0      	movs	r2, #192	@ 0xc0
 80028ac:	0292      	lsls	r2, r2, #10
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d822      	bhi.n	80028f8 <UART_SetConfig+0x140>
 80028b2:	2280      	movs	r2, #128	@ 0x80
 80028b4:	0292      	lsls	r2, r2, #10
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <UART_SetConfig+0x136>
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	0292      	lsls	r2, r2, #10
 80028be:	4293      	cmp	r3, r2
 80028c0:	d81a      	bhi.n	80028f8 <UART_SetConfig+0x140>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <UART_SetConfig+0x118>
 80028c6:	2280      	movs	r2, #128	@ 0x80
 80028c8:	0252      	lsls	r2, r2, #9
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00a      	beq.n	80028e4 <UART_SetConfig+0x12c>
 80028ce:	e013      	b.n	80028f8 <UART_SetConfig+0x140>
 80028d0:	231f      	movs	r3, #31
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e083      	b.n	80029e2 <UART_SetConfig+0x22a>
 80028da:	231f      	movs	r3, #31
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e07e      	b.n	80029e2 <UART_SetConfig+0x22a>
 80028e4:	231f      	movs	r3, #31
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e079      	b.n	80029e2 <UART_SetConfig+0x22a>
 80028ee:	231f      	movs	r3, #31
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2208      	movs	r2, #8
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e074      	b.n	80029e2 <UART_SetConfig+0x22a>
 80028f8:	231f      	movs	r3, #31
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2210      	movs	r2, #16
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e06f      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7c      	ldr	r2, [pc, #496]	@ (8002af8 <UART_SetConfig+0x340>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d134      	bne.n	8002976 <UART_SetConfig+0x1be>
 800290c:	4b78      	ldr	r3, [pc, #480]	@ (8002af0 <UART_SetConfig+0x338>)
 800290e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002910:	23c0      	movs	r3, #192	@ 0xc0
 8002912:	031b      	lsls	r3, r3, #12
 8002914:	4013      	ands	r3, r2
 8002916:	22c0      	movs	r2, #192	@ 0xc0
 8002918:	0312      	lsls	r2, r2, #12
 800291a:	4293      	cmp	r3, r2
 800291c:	d017      	beq.n	800294e <UART_SetConfig+0x196>
 800291e:	22c0      	movs	r2, #192	@ 0xc0
 8002920:	0312      	lsls	r2, r2, #12
 8002922:	4293      	cmp	r3, r2
 8002924:	d822      	bhi.n	800296c <UART_SetConfig+0x1b4>
 8002926:	2280      	movs	r2, #128	@ 0x80
 8002928:	0312      	lsls	r2, r2, #12
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <UART_SetConfig+0x1aa>
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	0312      	lsls	r2, r2, #12
 8002932:	4293      	cmp	r3, r2
 8002934:	d81a      	bhi.n	800296c <UART_SetConfig+0x1b4>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <UART_SetConfig+0x18c>
 800293a:	2280      	movs	r2, #128	@ 0x80
 800293c:	02d2      	lsls	r2, r2, #11
 800293e:	4293      	cmp	r3, r2
 8002940:	d00a      	beq.n	8002958 <UART_SetConfig+0x1a0>
 8002942:	e013      	b.n	800296c <UART_SetConfig+0x1b4>
 8002944:	231f      	movs	r3, #31
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e049      	b.n	80029e2 <UART_SetConfig+0x22a>
 800294e:	231f      	movs	r3, #31
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e044      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2204      	movs	r2, #4
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e03f      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002962:	231f      	movs	r3, #31
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2208      	movs	r2, #8
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e03a      	b.n	80029e2 <UART_SetConfig+0x22a>
 800296c:	231f      	movs	r3, #31
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2210      	movs	r2, #16
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e035      	b.n	80029e2 <UART_SetConfig+0x22a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a60      	ldr	r2, [pc, #384]	@ (8002afc <UART_SetConfig+0x344>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d104      	bne.n	800298a <UART_SetConfig+0x1d2>
 8002980:	231f      	movs	r3, #31
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e02b      	b.n	80029e2 <UART_SetConfig+0x22a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <UART_SetConfig+0x348>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d104      	bne.n	800299e <UART_SetConfig+0x1e6>
 8002994:	231f      	movs	r3, #31
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e021      	b.n	80029e2 <UART_SetConfig+0x22a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <UART_SetConfig+0x34c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d104      	bne.n	80029b2 <UART_SetConfig+0x1fa>
 80029a8:	231f      	movs	r3, #31
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e017      	b.n	80029e2 <UART_SetConfig+0x22a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a54      	ldr	r2, [pc, #336]	@ (8002b08 <UART_SetConfig+0x350>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0x20e>
 80029bc:	231f      	movs	r3, #31
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e00d      	b.n	80029e2 <UART_SetConfig+0x22a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <UART_SetConfig+0x354>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d104      	bne.n	80029da <UART_SetConfig+0x222>
 80029d0:	231f      	movs	r3, #31
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e003      	b.n	80029e2 <UART_SetConfig+0x22a>
 80029da:	231f      	movs	r3, #31
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2210      	movs	r2, #16
 80029e0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d15c      	bne.n	8002aa8 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80029ee:	231f      	movs	r3, #31
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d015      	beq.n	8002a24 <UART_SetConfig+0x26c>
 80029f8:	dc18      	bgt.n	8002a2c <UART_SetConfig+0x274>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00d      	beq.n	8002a1a <UART_SetConfig+0x262>
 80029fe:	dc15      	bgt.n	8002a2c <UART_SetConfig+0x274>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <UART_SetConfig+0x252>
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d005      	beq.n	8002a14 <UART_SetConfig+0x25c>
 8002a08:	e010      	b.n	8002a2c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0a:	f7ff fa33 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
        break;
 8002a12:	e012      	b.n	8002a3a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a14:	4b3e      	ldr	r3, [pc, #248]	@ (8002b10 <UART_SetConfig+0x358>)
 8002a16:	61bb      	str	r3, [r7, #24]
        break;
 8002a18:	e00f      	b.n	8002a3a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1a:	f7ff f9af 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
        break;
 8002a22:	e00a      	b.n	8002a3a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	61bb      	str	r3, [r7, #24]
        break;
 8002a2a:	e006      	b.n	8002a3a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a30:	231e      	movs	r3, #30
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
        break;
 8002a38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d100      	bne.n	8002a42 <UART_SetConfig+0x28a>
 8002a40:	e095      	b.n	8002b6e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	005a      	lsls	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	18d2      	adds	r2, r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0019      	movs	r1, r3
 8002a54:	0010      	movs	r0, r2
 8002a56:	f7fd fb57 	bl	8000108 <__udivsi3>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d91c      	bls.n	8002a9e <UART_SetConfig+0x2e6>
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	025b      	lsls	r3, r3, #9
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d217      	bcs.n	8002a9e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	200e      	movs	r0, #14
 8002a74:	183b      	adds	r3, r7, r0
 8002a76:	210f      	movs	r1, #15
 8002a78:	438a      	bics	r2, r1
 8002a7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2207      	movs	r2, #7
 8002a84:	4013      	ands	r3, r2
 8002a86:	b299      	uxth	r1, r3
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	183a      	adds	r2, r7, r0
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	183a      	adds	r2, r7, r0
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	e067      	b.n	8002b6e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002a9e:	231e      	movs	r3, #30
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e062      	b.n	8002b6e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aa8:	231f      	movs	r3, #31
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d030      	beq.n	8002b14 <UART_SetConfig+0x35c>
 8002ab2:	dc33      	bgt.n	8002b1c <UART_SetConfig+0x364>
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d00d      	beq.n	8002ad4 <UART_SetConfig+0x31c>
 8002ab8:	dc30      	bgt.n	8002b1c <UART_SetConfig+0x364>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <UART_SetConfig+0x30c>
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d005      	beq.n	8002ace <UART_SetConfig+0x316>
 8002ac2:	e02b      	b.n	8002b1c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f7ff f9d6 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	61bb      	str	r3, [r7, #24]
        break;
 8002acc:	e02d      	b.n	8002b2a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <UART_SetConfig+0x358>)
 8002ad0:	61bb      	str	r3, [r7, #24]
        break;
 8002ad2:	e02a      	b.n	8002b2a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad4:	f7ff f952 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	61bb      	str	r3, [r7, #24]
        break;
 8002adc:	e025      	b.n	8002b2a <UART_SetConfig+0x372>
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	efff69f3 	.word	0xefff69f3
 8002ae4:	ffffcfff 	.word	0xffffcfff
 8002ae8:	fffff4ff 	.word	0xfffff4ff
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40004800 	.word	0x40004800
 8002afc:	40004c00 	.word	0x40004c00
 8002b00:	40005000 	.word	0x40005000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	40011800 	.word	0x40011800
 8002b0c:	40011c00 	.word	0x40011c00
 8002b10:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	61bb      	str	r3, [r7, #24]
        break;
 8002b1a:	e006      	b.n	8002b2a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b20:	231e      	movs	r3, #30
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
        break;
 8002b28:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01e      	beq.n	8002b6e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	085a      	lsrs	r2, r3, #1
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	18d2      	adds	r2, r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f7fd fae1 	bl	8000108 <__udivsi3>
 8002b46:	0003      	movs	r3, r0
 8002b48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d90a      	bls.n	8002b66 <UART_SetConfig+0x3ae>
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	025b      	lsls	r3, r3, #9
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d205      	bcs.n	8002b66 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	e003      	b.n	8002b6e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002b66:	231e      	movs	r3, #30
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b7a:	231e      	movs	r3, #30
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b008      	add	sp, #32
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2208      	movs	r2, #8
 8002b96:	4013      	ands	r3, r2
 8002b98:	d00b      	beq.n	8002bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <UART_AdvFeatureConfig+0x144>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d00b      	beq.n	8002bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a43      	ldr	r2, [pc, #268]	@ (8002cd0 <UART_AdvFeatureConfig+0x148>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd4 <UART_AdvFeatureConfig+0x14c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d00b      	beq.n	8002c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <UART_AdvFeatureConfig+0x150>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a2c      	ldr	r2, [pc, #176]	@ (8002cdc <UART_AdvFeatureConfig+0x154>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4013      	ands	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a25      	ldr	r2, [pc, #148]	@ (8002ce0 <UART_AdvFeatureConfig+0x158>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	2240      	movs	r2, #64	@ 0x40
 8002c62:	4013      	ands	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <UART_AdvFeatureConfig+0x15c>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d10b      	bne.n	8002ca2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a15      	ldr	r2, [pc, #84]	@ (8002ce8 <UART_AdvFeatureConfig+0x160>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	2280      	movs	r2, #128	@ 0x80
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <UART_AdvFeatureConfig+0x164>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  }
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffff7fff 	.word	0xffff7fff
 8002cd0:	fffdffff 	.word	0xfffdffff
 8002cd4:	fffeffff 	.word	0xfffeffff
 8002cd8:	fffbffff 	.word	0xfffbffff
 8002cdc:	ffffefff 	.word	0xffffefff
 8002ce0:	ffffdfff 	.word	0xffffdfff
 8002ce4:	ffefffff 	.word	0xffefffff
 8002ce8:	ff9fffff 	.word	0xff9fffff
 8002cec:	fff7ffff 	.word	0xfff7ffff

08002cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b092      	sub	sp, #72	@ 0x48
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2284      	movs	r2, #132	@ 0x84
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d00:	f7fd ff40 	bl	8000b84 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2208      	movs	r2, #8
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d12c      	bne.n	8002d70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d18:	2280      	movs	r2, #128	@ 0x80
 8002d1a:	0391      	lsls	r1, r2, #14
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4a46      	ldr	r2, [pc, #280]	@ (8002e38 <UART_CheckIdleState+0x148>)
 8002d20:	9200      	str	r2, [sp, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f000 f88c 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002d28:	1e03      	subs	r3, r0, #0
 8002d2a:	d021      	beq.n	8002d70 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d36:	2301      	movs	r3, #1
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	438a      	bics	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2278      	movs	r2, #120	@ 0x78
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e05f      	b.n	8002e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d146      	bne.n	8002e0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	03d1      	lsls	r1, r2, #15
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4a2c      	ldr	r2, [pc, #176]	@ (8002e38 <UART_CheckIdleState+0x148>)
 8002d88:	9200      	str	r2, [sp, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f000 f858 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d03b      	beq.n	8002e0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d94:	f3ef 8310 	mrs	r3, PRIMASK
 8002d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d9e:	2301      	movs	r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4921      	ldr	r1, [pc, #132]	@ (8002e3c <UART_CheckIdleState+0x14c>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f383 8810 	msr	PRIMASK, r3
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	438a      	bics	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f383 8810 	msr	PRIMASK, r3
}
 8002df6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2278      	movs	r2, #120	@ 0x78
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e011      	b.n	8002e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	2120      	movs	r1, #32
 8002e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2278      	movs	r2, #120	@ 0x78
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b010      	add	sp, #64	@ 0x40
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	01ffffff 	.word	0x01ffffff
 8002e3c:	fffffedf 	.word	0xfffffedf

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e051      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3301      	adds	r3, #1
 8002e56:	d04e      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7fd fe94 	bl	8000b84 <HAL_GetTick>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e051      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b80      	cmp	r3, #128	@ 0x80
 8002e82:	d038      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d035      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2208      	movs	r2, #8
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d111      	bne.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 f83c 	bl	8002f20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2284      	movs	r2, #132	@ 0x84
 8002eac:	2108      	movs	r1, #8
 8002eae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2278      	movs	r2, #120	@ 0x78
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e02c      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d112      	bne.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f81f 	bl	8002f20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2284      	movs	r2, #132	@ 0x84
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2278      	movs	r2, #120	@ 0x78
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e00f      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	425a      	negs	r2, r3
 8002f06:	4153      	adcs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d09e      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	@ 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f28:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f32:	2301      	movs	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f383 8810 	msr	PRIMASK, r3
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4926      	ldr	r1, [pc, #152]	@ (8002fe4 <UART_EndRxTransfer+0xc4>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	f383 8810 	msr	PRIMASK, r3
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d118      	bne.n	8002fc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	438a      	bics	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2280      	movs	r2, #128	@ 0x80
 8002fca:	2120      	movs	r1, #32
 8002fcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b00e      	add	sp, #56	@ 0x38
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	fffffedf 	.word	0xfffffedf

08002fe8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}

0800302c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6892      	ldr	r2, [r2, #8]
 8003042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6852      	ldr	r2, [r2, #4]
 800304c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	d103      	bne.n	8003060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}

0800307c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003086:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <xTaskIncrementTick+0x104>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d000      	beq.n	8003090 <xTaskIncrementTick+0x14>
 800308e:	e06d      	b.n	800316c <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003090:	4b3c      	ldr	r3, [pc, #240]	@ (8003184 <xTaskIncrementTick+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003098:	4b3a      	ldr	r3, [pc, #232]	@ (8003184 <xTaskIncrementTick+0x108>)
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d118      	bne.n	80030d6 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030a4:	4b38      	ldr	r3, [pc, #224]	@ (8003188 <xTaskIncrementTick+0x10c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <xTaskIncrementTick+0x38>
 80030ae:	b672      	cpsid	i
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	e7fd      	b.n	80030b0 <xTaskIncrementTick+0x34>
 80030b4:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <xTaskIncrementTick+0x10c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <xTaskIncrementTick+0x110>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <xTaskIncrementTick+0x10c>)
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	4b32      	ldr	r3, [pc, #200]	@ (800318c <xTaskIncrementTick+0x110>)
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <xTaskIncrementTick+0x114>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	4b30      	ldr	r3, [pc, #192]	@ (8003190 <xTaskIncrementTick+0x114>)
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f000 f8b9 	bl	8003248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003194 <xTaskIncrementTick+0x118>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d34a      	bcc.n	8003176 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e0:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <xTaskIncrementTick+0x10c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xTaskIncrementTick+0x72>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xTaskIncrementTick+0x74>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f4:	4b27      	ldr	r3, [pc, #156]	@ (8003194 <xTaskIncrementTick+0x118>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	4252      	negs	r2, r2
 80030fa:	601a      	str	r2, [r3, #0]
					break;
 80030fc:	e03b      	b.n	8003176 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030fe:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <xTaskIncrementTick+0x10c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d203      	bcs.n	800311e <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003116:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <xTaskIncrementTick+0x118>)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
						break;
 800311c:	e02b      	b.n	8003176 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3304      	adds	r3, #4
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ff82 	bl	800302c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3318      	adds	r3, #24
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff ff79 	bl	800302c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313e:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <xTaskIncrementTick+0x11c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d903      	bls.n	800314e <xTaskIncrementTick+0xd2>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314a:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <xTaskIncrementTick+0x11c>)
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003152:	0013      	movs	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	189b      	adds	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4a10      	ldr	r2, [pc, #64]	@ (800319c <xTaskIncrementTick+0x120>)
 800315c:	189a      	adds	r2, r3, r2
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3304      	adds	r3, #4
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f7ff ff3f 	bl	8002fe8 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800316a:	e7b9      	b.n	80030e0 <xTaskIncrementTick+0x64>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <xTaskIncrementTick+0x124>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <xTaskIncrementTick+0x124>)
 8003174:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003176:	697b      	ldr	r3, [r7, #20]
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b006      	add	sp, #24
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000630 	.word	0x20000630
 8003184:	20000618 	.word	0x20000618
 8003188:	20000610 	.word	0x20000610
 800318c:	20000614 	.word	0x20000614
 8003190:	20000628 	.word	0x20000628
 8003194:	2000062c 	.word	0x2000062c
 8003198:	2000061c 	.word	0x2000061c
 800319c:	200001b0 	.word	0x200001b0
 80031a0:	20000620 	.word	0x20000620

080031a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031aa:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <vTaskSwitchContext+0x90>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <vTaskSwitchContext+0x94>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031b8:	e038      	b.n	800322c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <vTaskSwitchContext+0x94>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031c0:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <vTaskSwitchContext+0x98>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	e008      	b.n	80031da <vTaskSwitchContext+0x36>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <vTaskSwitchContext+0x30>
 80031ce:	b672      	cpsid	i
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	e7fd      	b.n	80031d0 <vTaskSwitchContext+0x2c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	4919      	ldr	r1, [pc, #100]	@ (8003240 <vTaskSwitchContext+0x9c>)
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	0013      	movs	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	585b      	ldr	r3, [r3, r1]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ed      	beq.n	80031c8 <vTaskSwitchContext+0x24>
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	0013      	movs	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <vTaskSwitchContext+0x9c>)
 80031f8:	189b      	adds	r3, r3, r2
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	429a      	cmp	r2, r3
 8003210:	d104      	bne.n	800321c <vTaskSwitchContext+0x78>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <vTaskSwitchContext+0xa0>)
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <vTaskSwitchContext+0x98>)
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000630 	.word	0x20000630
 8003238:	20000624 	.word	0x20000624
 800323c:	2000061c 	.word	0x2000061c
 8003240:	200001b0 	.word	0x200001b0
 8003244:	200001ac 	.word	0x200001ac

08003248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <prvResetNextTaskUnblockTime+0x40>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <prvResetNextTaskUnblockTime+0x14>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <prvResetNextTaskUnblockTime+0x16>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003262:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <prvResetNextTaskUnblockTime+0x44>)
 8003264:	2201      	movs	r2, #1
 8003266:	4252      	negs	r2, r2
 8003268:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800326a:	e008      	b.n	800327e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <prvResetNextTaskUnblockTime+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4b04      	ldr	r3, [pc, #16]	@ (800328c <prvResetNextTaskUnblockTime+0x44>)
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	20000610 	.word	0x20000610
 800328c:	2000062c 	.word	0x2000062c

08003290 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800329a:	f3ef 8010 	mrs	r0, PRIMASK
 800329e:	b672      	cpsid	i
 80032a0:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	0018      	movs	r0, r3

080032a6 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80032a6:	f380 8810 	msr	PRIMASK, r0
 80032aa:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
	...

080032b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032b0:	f3ef 8009 	mrs	r0, PSP
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <pxCurrentTCBConst>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	3820      	subs	r0, #32
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032be:	4644      	mov	r4, r8
 80032c0:	464d      	mov	r5, r9
 80032c2:	4656      	mov	r6, sl
 80032c4:	465f      	mov	r7, fp
 80032c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032c8:	b508      	push	{r3, lr}
 80032ca:	b672      	cpsid	i
 80032cc:	f7ff ff6a 	bl	80031a4 <vTaskSwitchContext>
 80032d0:	b662      	cpsie	i
 80032d2:	bc0c      	pop	{r2, r3}
 80032d4:	6811      	ldr	r1, [r2, #0]
 80032d6:	6808      	ldr	r0, [r1, #0]
 80032d8:	3010      	adds	r0, #16
 80032da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032dc:	46a0      	mov	r8, r4
 80032de:	46a9      	mov	r9, r5
 80032e0:	46b2      	mov	sl, r6
 80032e2:	46bb      	mov	fp, r7
 80032e4:	f380 8809 	msr	PSP, r0
 80032e8:	3820      	subs	r0, #32
 80032ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032ec:	4718      	bx	r3
 80032ee:	46c0      	nop			@ (mov r8, r8)

080032f0 <pxCurrentTCBConst>:
 80032f0:	200001ac 	.word	0x200001ac
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	46c0      	nop			@ (mov r8, r8)

080032f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80032fe:	f7ff ffcc 	bl	800329a <ulSetInterruptMaskFromISR>
 8003302:	0003      	movs	r3, r0
 8003304:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003306:	f7ff feb9 	bl	800307c <xTaskIncrementTick>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d003      	beq.n	8003316 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <SysTick_Handler+0x30>)
 8003310:	2280      	movs	r2, #128	@ 0x80
 8003312:	0552      	lsls	r2, r2, #21
 8003314:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff ffc4 	bl	80032a6 <vClearInterruptMaskFromISR>
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <memset>:
 800332c:	0003      	movs	r3, r0
 800332e:	1882      	adds	r2, r0, r2
 8003330:	4293      	cmp	r3, r2
 8003332:	d100      	bne.n	8003336 <memset+0xa>
 8003334:	4770      	bx	lr
 8003336:	7019      	strb	r1, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	e7f9      	b.n	8003330 <memset+0x4>

0800333c <__libc_init_array>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	2600      	movs	r6, #0
 8003340:	4c0c      	ldr	r4, [pc, #48]	@ (8003374 <__libc_init_array+0x38>)
 8003342:	4d0d      	ldr	r5, [pc, #52]	@ (8003378 <__libc_init_array+0x3c>)
 8003344:	1b64      	subs	r4, r4, r5
 8003346:	10a4      	asrs	r4, r4, #2
 8003348:	42a6      	cmp	r6, r4
 800334a:	d109      	bne.n	8003360 <__libc_init_array+0x24>
 800334c:	2600      	movs	r6, #0
 800334e:	f000 f819 	bl	8003384 <_init>
 8003352:	4c0a      	ldr	r4, [pc, #40]	@ (800337c <__libc_init_array+0x40>)
 8003354:	4d0a      	ldr	r5, [pc, #40]	@ (8003380 <__libc_init_array+0x44>)
 8003356:	1b64      	subs	r4, r4, r5
 8003358:	10a4      	asrs	r4, r4, #2
 800335a:	42a6      	cmp	r6, r4
 800335c:	d105      	bne.n	800336a <__libc_init_array+0x2e>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	00b3      	lsls	r3, r6, #2
 8003362:	58eb      	ldr	r3, [r5, r3]
 8003364:	4798      	blx	r3
 8003366:	3601      	adds	r6, #1
 8003368:	e7ee      	b.n	8003348 <__libc_init_array+0xc>
 800336a:	00b3      	lsls	r3, r6, #2
 800336c:	58eb      	ldr	r3, [r5, r3]
 800336e:	4798      	blx	r3
 8003370:	3601      	adds	r6, #1
 8003372:	e7f2      	b.n	800335a <__libc_init_array+0x1e>
 8003374:	080034ac 	.word	0x080034ac
 8003378:	080034ac 	.word	0x080034ac
 800337c:	080034b0 	.word	0x080034b0
 8003380:	080034ac 	.word	0x080034ac

08003384 <_init>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr

08003390 <_fini>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr
